
FFTplusMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d650  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138c4  0800d7e0  0800d7e0  0000e7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080210a4  080210a4  000235d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080210a4  080210a4  000220a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080210ac  080210ac  000235d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080210ac  080210ac  000220ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080210b0  080210b0  000220b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005d8  20000000  080210b4  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000235d8  2**0
                  CONTENTS
 10 .bss          00003880  200005d8  200005d8  000235d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003e58  20003e58  000235d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000235d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f4b  00000000  00000000  00023608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d4  00000000  00000000  00037553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  0003a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9a  00000000  00000000  0003b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024686  00000000  00000000  0003c342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ed3  00000000  00000000  000609c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d06e1  00000000  00000000  0007989b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  00149f7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000566c  00000000  00000000  0014a03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  0014f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005d8 	.word	0x200005d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7c8 	.word	0x0800d7c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005dc 	.word	0x200005dc
 80001cc:	0800d7c8 	.word	0x0800d7c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b08f      	sub	sp, #60	@ 0x3c
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t pdm_buffer_offset_uint16 = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	837b      	strh	r3, [r7, #26]
	uint16_t pcm_mono_buffer_offset = 0; // Offset para pcm_mono_processed_half_buffer
 8000ede:	2300      	movs	r3, #0
 8000ee0:	833b      	strh	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f003 fcbb 	bl	800485c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f967 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 fac9 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eee:	f000 faa7 	bl	8001440 <MX_DMA_Init>
  MX_I2S2_Init();
 8000ef2:	f000 fa15 	bl	8001320 <MX_I2S2_Init>
  MX_CRC_Init();
 8000ef6:	f000 f9c9 	bl	800128c <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000efa:	f007 f973 	bl	80081e4 <MX_PDM2PCM_Init>
  MX_USART2_UART_Init();
 8000efe:	f000 fa75 	bl	80013ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f02:	f000 f9df 	bl	80012c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f06:	f000 fa39 	bl	800137c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if (arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8000f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0e:	489c      	ldr	r0, [pc, #624]	@ (8001180 <main+0x2ac>)
 8000f10:	f003 fc3c 	bl	800478c <arm_rfft_fast_init_f32>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <main+0x4a>
      Error_Handler();
 8000f1a:	f000 fba1 	bl	8001660 <Error_Handler>
  }
  if (HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)pdm_raw_buffer, PDM_RAW_INPUT_FFT_FRAME_SIZE_UINT16 * 2) != HAL_OK) {
 8000f1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f22:	4998      	ldr	r1, [pc, #608]	@ (8001184 <main+0x2b0>)
 8000f24:	4898      	ldr	r0, [pc, #608]	@ (8001188 <main+0x2b4>)
 8000f26:	f004 fe75 	bl	8005c14 <HAL_I2S_Receive_DMA>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <main+0x60>
      Error_Handler();
 8000f30:	f000 fb96 	bl	8001660 <Error_Handler>
  }
  pdm_input_buffer_idx = 2;
 8000f34:	4b95      	ldr	r3, [pc, #596]	@ (800118c <main+0x2b8>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if (pdm_input_buffer_idx != 2) { // Un buffer PDM (un frame FFT) está listo
 8000f3a:	4b94      	ldr	r3, [pc, #592]	@ (800118c <main+0x2b8>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d0fa      	beq.n	8000f3a <main+0x66>
	        uint16_t* current_pdm_input_ptr;

	        if (pdm_input_buffer_idx == 0) { // Primera mitad PDM lista
 8000f44:	4b91      	ldr	r3, [pc, #580]	@ (800118c <main+0x2b8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <main+0x80>
	            current_pdm_input_ptr = pdm_raw_buffer[0];
 8000f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001184 <main+0x2b0>)
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f52:	e001      	b.n	8000f58 <main+0x84>
	        } else { // Segunda mitad PDM lista (pdm_input_buffer_idx == 1)
	            current_pdm_input_ptr = pdm_raw_buffer[1];
 8000f54:	4b8e      	ldr	r3, [pc, #568]	@ (8001190 <main+0x2bc>)
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
	        }

	        uint16_t pdm_chunk_offset = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	867b      	strh	r3, [r7, #50]	@ 0x32
	        uint16_t pcm_chunk_offset = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	863b      	strh	r3, [r7, #48]	@ 0x30
	        for (int i = 0; i < NUM_PDM_PROCESS_CALLS_PER_FFT_FRAME; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f64:	e018      	b.n	8000f98 <main+0xc4>
	            if (MX_PDM2PCM_Process(
	                    current_pdm_input_ptr + pdm_chunk_offset,
 8000f66:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000f68:	005b      	lsls	r3, r3, #1
	            if (MX_PDM2PCM_Process(
 8000f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f6c:	441a      	add	r2, r3
	                    (uint16_t*)(pcm_mono_fft_input_buffer + pcm_chunk_offset)
 8000f6e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f70:	005b      	lsls	r3, r3, #1
	            if (MX_PDM2PCM_Process(
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <main+0x2c0>)
 8000f74:	440b      	add	r3, r1
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f007 f95d 	bl	8008238 <MX_PDM2PCM_Process>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 80f6 	bne.w	8001172 <main+0x29e>
	                 ) != 0) {
	                goto next_iteration;
	            }
	            pdm_chunk_offset += (PDM_BYTES_PER_PROCESS_CALL / 2U);
 8000f86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000f88:	3340      	adds	r3, #64	@ 0x40
 8000f8a:	867b      	strh	r3, [r7, #50]	@ 0x32
	            pcm_chunk_offset += PDM_SAMPLES_PER_PDM_LIB_CALL;
 8000f8c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f8e:	3310      	adds	r3, #16
 8000f90:	863b      	strh	r3, [r7, #48]	@ 0x30
	        for (int i = 0; i < NUM_PDM_PROCESS_CALLS_PER_FFT_FRAME; i++) {
 8000f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f94:	3301      	adds	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9a:	2b1f      	cmp	r3, #31
 8000f9c:	d9e3      	bls.n	8000f66 <main+0x92>
	        }
	        for (int i = 0; i < FFT_SIZE; i++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fa2:	e010      	b.n	8000fc6 <main+0xf2>
	            fft_input_f32[i] = (float32_t)pcm_mono_fft_input_buffer[i];
 8000fa4:	4a7b      	ldr	r2, [pc, #492]	@ (8001194 <main+0x2c0>)
 8000fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	4a78      	ldr	r2, [pc, #480]	@ (8001198 <main+0x2c4>)
 8000fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
	        for (int i = 0; i < FFT_SIZE; i++) {
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fcc:	d3ea      	bcc.n	8000fa4 <main+0xd0>
	        }

	        arm_rfft_fast_f32(&fft_instance, fft_input_f32, fft_output_f32, 0);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	4a72      	ldr	r2, [pc, #456]	@ (800119c <main+0x2c8>)
 8000fd2:	4971      	ldr	r1, [pc, #452]	@ (8001198 <main+0x2c4>)
 8000fd4:	486a      	ldr	r0, [pc, #424]	@ (8001180 <main+0x2ac>)
 8000fd6:	f003 fa88 	bl	80044ea <arm_rfft_fast_f32>

	        int len = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
            float32_t mag_val, db_val;

            // Bin 0 (Componente DC)
            mag_val = fabsf(fft_output_f32[0]); // Magnitud del componente DC
 8000fde:	4b6f      	ldr	r3, [pc, #444]	@ (800119c <main+0x2c8>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	eef0 7ae7 	vabs.f32	s15, s15
 8000fe8:	edc7 7a01 	vstr	s15, [r7, #4]
            if (mag_val < EPSILON) {
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80011a0 <main+0x2cc>
 8000ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d502      	bpl.n	8001004 <main+0x130>
                db_val = DB_FLOOR;
 8000ffe:	4b69      	ldr	r3, [pc, #420]	@ (80011a4 <main+0x2d0>)
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	e018      	b.n	8001036 <main+0x162>
            } else {
                db_val = 20.0f * log10f(mag_val);
 8001004:	edd7 7a01 	vldr	s15, [r7, #4]
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	f00b fe72 	bl	800ccf4 <log10f>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101c:	edc7 7a08 	vstr	s15, [r7, #32]
                if (db_val < DB_FLOOR) {
 8001020:	edd7 7a08 	vldr	s15, [r7, #32]
 8001024:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80011a8 <main+0x2d4>
 8001028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d501      	bpl.n	8001036 <main+0x162>
                    db_val = DB_FLOOR;
 8001032:	4b5c      	ldr	r3, [pc, #368]	@ (80011a4 <main+0x2d0>)
 8001034:	623b      	str	r3, [r7, #32]
                }
            }
            len += sprintf(uart_tx_buffer + len, "%.2f\r\n", db_val);
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	4a5c      	ldr	r2, [pc, #368]	@ (80011ac <main+0x2d8>)
 800103a:	189c      	adds	r4, r3, r2
 800103c:	6a38      	ldr	r0, [r7, #32]
 800103e:	f7ff fa83 	bl	8000548 <__aeabi_f2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	495a      	ldr	r1, [pc, #360]	@ (80011b0 <main+0x2dc>)
 8001048:	4620      	mov	r0, r4
 800104a:	f009 fd1f 	bl	800aa8c <siprintf>
 800104e:	4602      	mov	r2, r0
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	4413      	add	r3, r2
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24

            for (int k = 1; k < FFT_SIZE / 2; k++) {
 8001056:	2301      	movs	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e07b      	b.n	8001154 <main+0x280>
                float32_t real_part = fft_output_f32[2*k];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4a4e      	ldr	r2, [pc, #312]	@ (800119c <main+0x2c8>)
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	617b      	str	r3, [r7, #20]
                float32_t imag_part = fft_output_f32[2*k+1];
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	3301      	adds	r3, #1
 8001070:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <main+0x2c8>)
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	613b      	str	r3, [r7, #16]
                arm_sqrt_f32(real_part * real_part + imag_part * imag_part, &mag_val);
 800107a:	edd7 7a05 	vldr	s15, [r7, #20]
 800107e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001082:	edd7 7a04 	vldr	s15, [r7, #16]
 8001086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	60bb      	str	r3, [r7, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001096:	edd7 7a03 	vldr	s15, [r7, #12]
 800109a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	db07      	blt.n	80010b4 <main+0x1e0>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 80010a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a8:	eef1 7ae7 	vsqrt.f32	s15, s15
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80010b2:	e004      	b.n	80010be <main+0x1ea>
    }
    else
    {
      *pOut = 0.0f;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80010bc:	bf00      	nop


                if (mag_val < EPSILON) {
 80010be:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80011a0 <main+0x2cc>
 80010c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	d502      	bpl.n	80010d6 <main+0x202>
                    db_val = DB_FLOOR;
 80010d0:	4b34      	ldr	r3, [pc, #208]	@ (80011a4 <main+0x2d0>)
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	e018      	b.n	8001108 <main+0x234>
                } else {
                    db_val = 20.0f * log10f(mag_val);
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	f00b fe09 	bl	800ccf4 <log10f>
 80010e2:	eef0 7a40 	vmov.f32	s15, s0
 80010e6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80010ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ee:	edc7 7a08 	vstr	s15, [r7, #32]
                    if (db_val < DB_FLOOR) {
 80010f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010f6:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80011a8 <main+0x2d4>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d501      	bpl.n	8001108 <main+0x234>
                        db_val = DB_FLOOR;
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <main+0x2d0>)
 8001106:	623b      	str	r3, [r7, #32]
                    }
                }
                len += sprintf(uart_tx_buffer + len, "%.2f\r\n", db_val);
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <main+0x2d8>)
 800110c:	189c      	adds	r4, r3, r2
 800110e:	6a38      	ldr	r0, [r7, #32]
 8001110:	f7ff fa1a 	bl	8000548 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4925      	ldr	r1, [pc, #148]	@ (80011b0 <main+0x2dc>)
 800111a:	4620      	mov	r0, r4
 800111c:	f009 fcb6 	bl	800aa8c <siprintf>
 8001120:	4602      	mov	r2, r0
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	4413      	add	r3, r2
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24

                if (len > (UART_BUFFER_SIZE - 20) || k == (FFT_SIZE / 2) - 1) {
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	2bec      	cmp	r3, #236	@ 0xec
 800112c:	dc02      	bgt.n	8001134 <main+0x260>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	2bff      	cmp	r3, #255	@ 0xff
 8001132:	d10c      	bne.n	800114e <main+0x27a>
                    if (len > 0) {
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd09      	ble.n	800114e <main+0x27a>
                        HAL_UART_Transmit(&huart2, (uint8_t*)uart_tx_buffer, len, HAL_MAX_DELAY);
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	b29a      	uxth	r2, r3
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	491a      	ldr	r1, [pc, #104]	@ (80011ac <main+0x2d8>)
 8001144:	481b      	ldr	r0, [pc, #108]	@ (80011b4 <main+0x2e0>)
 8001146:	f006 f886 	bl	8007256 <HAL_UART_Transmit>
                        len = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
            for (int k = 1; k < FFT_SIZE / 2; k++) {
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d980      	bls.n	800105c <main+0x188>
                    }
                }
            }

             if (len > 0) {
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd0a      	ble.n	8001176 <main+0x2a2>
                 HAL_UART_Transmit(&huart2, (uint8_t*)uart_tx_buffer, len, HAL_MAX_DELAY);
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	4910      	ldr	r1, [pc, #64]	@ (80011ac <main+0x2d8>)
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <main+0x2e0>)
 800116c:	f006 f873 	bl	8007256 <HAL_UART_Transmit>
 8001170:	e002      	b.n	8001178 <main+0x2a4>
	                goto next_iteration;
 8001172:	bf00      	nop
 8001174:	e000      	b.n	8001178 <main+0x2a4>

             }


    next_iteration:
 8001176:	bf00      	nop
            pdm_input_buffer_idx = 2;
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <main+0x2b8>)
 800117a:	2202      	movs	r2, #2
 800117c:	701a      	strb	r2, [r3, #0]
	    if (pdm_input_buffer_idx != 2) { // Un buffer PDM (un frame FFT) está listo
 800117e:	e6dc      	b.n	8000f3a <main+0x66>
 8001180:	20003b98 	.word	0x20003b98
 8001184:	20000798 	.word	0x20000798
 8001188:	20000650 	.word	0x20000650
 800118c:	20000000 	.word	0x20000000
 8001190:	20001798 	.word	0x20001798
 8001194:	20002798 	.word	0x20002798
 8001198:	20002b98 	.word	0x20002b98
 800119c:	20003398 	.word	0x20003398
 80011a0:	3089705f 	.word	0x3089705f
 80011a4:	c2a00000 	.word	0xc2a00000
 80011a8:	c2a00000 	.word	0xc2a00000
 80011ac:	20003bb0 	.word	0x20003bb0
 80011b0:	0800d7e0 	.word	0x0800d7e0
 80011b4:	20000750 	.word	0x20000750

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	@ 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	@ 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fcc5 	bl	800ab56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a27      	ldr	r2, [pc, #156]	@ (8001284 <SystemClock_Config+0xcc>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ec:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <SystemClock_Config+0xd0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <SystemClock_Config+0xd0>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001228:	2308      	movs	r3, #8
 800122a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800122c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001236:	2307      	movs	r3, #7
 8001238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f956 	bl	80064f0 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800124a:	f000 fa09 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	2302      	movs	r3, #2
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800125a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800125e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001264:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2105      	movs	r1, #5
 800126c:	4618      	mov	r0, r3
 800126e:	f005 fbb7 	bl	80069e0 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001278:	f000 f9f2 	bl	8001660 <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	@ 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_CRC_Init+0x30>)
 8001292:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <MX_CRC_Init+0x34>)
 8001294:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001296:	4809      	ldr	r0, [pc, #36]	@ (80012bc <MX_CRC_Init+0x30>)
 8001298:	f003 fc63 	bl	8004b62 <HAL_CRC_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012a2:	f000 f9dd 	bl	8001660 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <MX_CRC_Init+0x30>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <MX_CRC_Init+0x30>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200005f4 	.word	0x200005f4
 80012c0:	40023000 	.word	0x40023000

080012c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	@ (8001318 <MX_I2C1_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	@ (800131c <MX_I2C1_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_I2C1_Init+0x50>)
 8001302:	f004 fa03 	bl	800570c <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 f9a8 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200005fc 	.word	0x200005fc
 8001318:	40005400 	.word	0x40005400
 800131c:	000186a0 	.word	0x000186a0

08001320 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_I2S2_Init+0x54>)
 8001326:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <MX_I2S2_Init+0x58>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_I2S2_Init+0x54>)
 800132c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001330:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_I2S2_Init+0x54>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_I2S2_Init+0x54>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <MX_I2S2_Init+0x54>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = 64000;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_I2S2_Init+0x54>)
 8001346:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800134a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_I2S2_Init+0x54>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_I2S2_Init+0x54>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_I2S2_Init+0x54>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_I2S2_Init+0x54>)
 8001360:	f004 fb18 	bl	8005994 <HAL_I2S_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800136a:	f000 f979 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000650 	.word	0x20000650
 8001378:	40003800 	.word	0x40003800

0800137c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_SPI1_Init+0x68>)
 8001382:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <MX_SPI1_Init+0x6c>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_SPI1_Init+0x68>)
 8001388:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_SPI1_Init+0x68>)
 8001390:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001394:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MX_SPI1_Init+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_SPI1_Init+0x68>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013ca:	220a      	movs	r2, #10
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_SPI1_Init+0x68>)
 80013d0:	f005 fe68 	bl	80070a4 <HAL_SPI_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80013da:	f000 f941 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200006f8 	.word	0x200006f8
 80013e8:	40013000 	.word	0x40013000

080013ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_USART2_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001424:	f005 fec7 	bl	80071b6 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f000 f917 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000750 	.word	0x20000750
 800143c:	40004400 	.word	0x40004400

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <MX_DMA_Init+0x3c>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_DMA_Init+0x3c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200e      	movs	r0, #14
 8001468:	f003 fb45 	bl	8004af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800146c:	200e      	movs	r0, #14
 800146e:	f003 fb5e 	bl	8004b2e <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b56      	ldr	r3, [pc, #344]	@ (80015f4 <MX_GPIO_Init+0x174>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a55      	ldr	r2, [pc, #340]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b4f      	ldr	r3, [pc, #316]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b48      	ldr	r3, [pc, #288]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a47      	ldr	r2, [pc, #284]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b45      	ldr	r3, [pc, #276]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a40      	ldr	r2, [pc, #256]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <MX_GPIO_Init+0x174>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b3a      	ldr	r3, [pc, #232]	@ (80015f4 <MX_GPIO_Init+0x174>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a39      	ldr	r2, [pc, #228]	@ (80015f4 <MX_GPIO_Init+0x174>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <MX_GPIO_Init+0x174>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <MX_GPIO_Init+0x174>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a32      	ldr	r2, [pc, #200]	@ (80015f4 <MX_GPIO_Init+0x174>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <MX_GPIO_Init+0x174>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2108      	movs	r1, #8
 8001542:	482d      	ldr	r0, [pc, #180]	@ (80015f8 <MX_GPIO_Init+0x178>)
 8001544:	f004 f8c8 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001548:	2200      	movs	r2, #0
 800154a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800154e:	482b      	ldr	r0, [pc, #172]	@ (80015fc <MX_GPIO_Init+0x17c>)
 8001550:	f004 f8c2 	bl	80056d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001554:	2308      	movs	r3, #8
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4823      	ldr	r0, [pc, #140]	@ (80015f8 <MX_GPIO_Init+0x178>)
 800156c:	f003 ff18 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001574:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	481e      	ldr	r0, [pc, #120]	@ (8001600 <MX_GPIO_Init+0x180>)
 8001586:	f003 ff0b 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800158a:	2310      	movs	r3, #16
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800159a:	2306      	movs	r3, #6
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4816      	ldr	r0, [pc, #88]	@ (8001600 <MX_GPIO_Init+0x180>)
 80015a6:	f003 fefb 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	480e      	ldr	r0, [pc, #56]	@ (80015fc <MX_GPIO_Init+0x17c>)
 80015c4:	f003 feec 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80015c8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015da:	2306      	movs	r3, #6
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	@ (8001604 <MX_GPIO_Init+0x184>)
 80015e6:	f003 fedb 	bl	80053a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	@ 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40020000 	.word	0x40020000
 8001604:	40020800 	.word	0x40020800

08001608 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a05      	ldr	r2, [pc, #20]	@ (800162c <HAL_I2S_RxHalfCpltCallback+0x24>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d102      	bne.n	8001620 <HAL_I2S_RxHalfCpltCallback+0x18>
    pdm_input_buffer_idx = 0; // Primera mitad (primer frame FFT) PDM lista
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_I2S_RxHalfCpltCallback+0x28>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  }
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40003800 	.word	0x40003800
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <HAL_I2S_RxCpltCallback+0x24>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d102      	bne.n	800164c <HAL_I2S_RxCpltCallback+0x18>
    pdm_input_buffer_idx = 1; // Segunda mitad (segundo frame FFT) PDM lista
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_I2S_RxCpltCallback+0x28>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
  }
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40003800 	.word	0x40003800
 800165c:	20000000 	.word	0x20000000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <Error_Handler+0x8>

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016aa:	2007      	movs	r0, #7
 80016ac:	f003 fa18 	bl	8004ae0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_CRC_MspInit+0x3c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10d      	bne.n	80016ea <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_CRC_MspInit+0x40>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <HAL_CRC_MspInit+0x40>)
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_CRC_MspInit+0x40>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023000 	.word	0x40023000
 80016fc:	40023800 	.word	0x40023800

08001700 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_I2C_MspInit+0x84>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12c      	bne.n	800177c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_I2C_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_I2C_MspInit+0x88>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_I2C_MspInit+0x88>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800173e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001744:	2312      	movs	r3, #18
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001750:	2304      	movs	r3, #4
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	480c      	ldr	r0, [pc, #48]	@ (800178c <HAL_I2C_MspInit+0x8c>)
 800175c:	f003 fe20 	bl	80053a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <HAL_I2C_MspInit+0x88>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <HAL_I2C_MspInit+0x88>)
 800176a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_I2C_MspInit+0x88>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	@ 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40005400 	.word	0x40005400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020400 	.word	0x40020400

08001790 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	@ 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a4d      	ldr	r2, [pc, #308]	@ (80018f0 <HAL_I2S_MspInit+0x160>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	f040 8093 	bne.w	80018e8 <HAL_I2S_MspInit+0x158>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80017c6:	23c0      	movs	r3, #192	@ 0xc0
 80017c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 fb24 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80017de:	f7ff ff3f 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a42      	ldr	r2, [pc, #264]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b40      	ldr	r3, [pc, #256]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b3c      	ldr	r3, [pc, #240]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a3b      	ldr	r2, [pc, #236]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b39      	ldr	r3, [pc, #228]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a34      	ldr	r2, [pc, #208]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b32      	ldr	r3, [pc, #200]	@ (80018f4 <HAL_I2S_MspInit+0x164>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001836:	2308      	movs	r3, #8
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001846:	2305      	movs	r3, #5
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	4829      	ldr	r0, [pc, #164]	@ (80018f8 <HAL_I2S_MspInit+0x168>)
 8001852:	f003 fda5 	bl	80053a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001856:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001868:	2305      	movs	r3, #5
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4822      	ldr	r0, [pc, #136]	@ (80018fc <HAL_I2S_MspInit+0x16c>)
 8001874:	f003 fd94 	bl	80053a0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001878:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 800187a:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <HAL_I2S_MspInit+0x174>)
 800187c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 8001892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001896:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 800189a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800189e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018bc:	4810      	ldr	r0, [pc, #64]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018be:	f003 f96d 	bl	8004b9c <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 80018c8:	f7ff feca 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_I2S_MspInit+0x170>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2024      	movs	r0, #36	@ 0x24
 80018de:	f003 f90a 	bl	8004af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018e2:	2024      	movs	r0, #36	@ 0x24
 80018e4:	f003 f923 	bl	8004b2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80018e8:	bf00      	nop
 80018ea:	3738      	adds	r7, #56	@ 0x38
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40003800 	.word	0x40003800
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	20000698 	.word	0x20000698
 8001904:	40026058 	.word	0x40026058

08001908 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_SPI_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12b      	bne.n	8001982 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_SPI_MspInit+0x88>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_SPI_MspInit+0x88>)
 8001934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_SPI_MspInit+0x88>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_SPI_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <HAL_SPI_MspInit+0x88>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_SPI_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001962:	2360      	movs	r3, #96	@ 0x60
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001972:	2305      	movs	r3, #5
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <HAL_SPI_MspInit+0x8c>)
 800197e:	f003 fd0f 	bl	80053a0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	@ 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40013000 	.word	0x40013000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000

08001998 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <HAL_UART_MspInit+0x94>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d133      	bne.n	8001a22 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_UART_MspInit+0x98>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_UART_MspInit+0x98>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_UART_MspInit+0x98>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_UART_MspInit+0x98>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_UART_MspInit+0x98>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_UART_MspInit+0x98>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <HAL_UART_MspInit+0x9c>)
 8001a0e:	f003 fcc7 	bl	80053a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2026      	movs	r0, #38	@ 0x26
 8001a18:	f003 f86d 	bl	8004af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a1c:	2026      	movs	r0, #38	@ 0x26
 8001a1e:	f003 f886 	bl	8004b2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	@ 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f002 ff37 	bl	8004900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <DMA1_Stream3_IRQHandler+0x10>)
 8001a9e:	f003 fa15 	bl	8004ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000698 	.word	0x20000698

08001aac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <SPI2_IRQHandler+0x10>)
 8001ab2:	f004 f967 	bl	8005d84 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000650 	.word	0x20000650

08001ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <USART2_IRQHandler+0x10>)
 8001ac6:	f005 fc51 	bl	800736c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000750 	.word	0x20000750

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aee:	f009 f885 	bl	800abfc <__errno>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2216      	movs	r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
  return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_exit>:

void _exit (int status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffe7 	bl	8001ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b16:	bf00      	nop
 8001b18:	e7fd      	b.n	8001b16 <_exit+0x12>

08001b1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e00a      	b.n	8001b42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b2c:	f3af 8000 	nop.w
 8001b30:	4601      	mov	r1, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	b2ca      	uxtb	r2, r1
 8001b3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dbf0      	blt.n	8001b2c <_read+0x12>
  }

  return len;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e009      	b.n	8001b7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf1      	blt.n	8001b66 <_write+0x12>
  }
  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_close>:

int _close(int file)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_isatty>:

int _isatty(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f008 ffea 	bl	800abfc <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20020000 	.word	0x20020000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	20003cb0 	.word	0x20003cb0
 8001c5c:	20003e58 	.word	0x20003e58

08001c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c88:	f7ff ffea 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	@ (8001cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f008 ffa9 	bl	800ac08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7ff f90d 	bl	8000ed4 <main>
  bx  lr    
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	200005d8 	.word	0x200005d8
  ldr r2, =_sidata
 8001cc8:	080210b4 	.word	0x080210b4
  ldr r2, =_sbss
 8001ccc:	200005d8 	.word	0x200005d8
  ldr r4, =_ebss
 8001cd0:	20003e58 	.word	0x20003e58

08001cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC_IRQHandler>

08001cd6 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b089      	sub	sp, #36	@ 0x24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	e043      	b.n	8001d72 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	441a      	add	r2, r3
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	68f9      	ldr	r1, [r7, #12]
 8001d26:	440b      	add	r3, r1
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	441a      	add	r2, r3
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	3301      	adds	r3, #1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	68f9      	ldr	r1, [r7, #12]
 8001d58:	440b      	add	r3, r1
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	601a      	str	r2, [r3, #0]

    i += 2;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8001d72:	897b      	ldrh	r3, [r7, #10]
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3b7      	bcc.n	8001cea <arm_bitreversal_32+0x14>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3724      	adds	r7, #36	@ 0x24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <arm_cfft_radix8by2_f32>:
  @par Size of buffers according to the target architecture and datatype:
       They are described on the page \ref transformbuffers "transform buffers".
 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0a0      	sub	sp, #128	@ 0x80
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8001d98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8001dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dae:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 8001db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8001db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8001dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001dc6:	4413      	add	r3, r2
 8001dc8:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8001dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd0:	e1b6      	b.n	8002140 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 8001dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8001df0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8001df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 8001dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8001e02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001e08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8001e14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 8001e1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8001e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8001e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8001e32:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001e36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	1d1a      	adds	r2, r3, #4
 8001e3e:	603a      	str	r2, [r7, #0]
 8001e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e44:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001e48:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001e4c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	1d1a      	adds	r2, r3, #4
 8001e54:	603a      	str	r2, [r7, #0]
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001e5e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001e62:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	1d1a      	adds	r2, r3, #4
 8001e6a:	603a      	str	r2, [r7, #0]
 8001e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e70:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8001e74:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001e78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	1d1a      	adds	r2, r3, #4
 8001e80:	603a      	str	r2, [r7, #0]
 8001e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e86:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001e8a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001e8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e96:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 8001e9a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001e9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 8001eaa:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001eae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8001eba:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001ebe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 8001eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8001ee0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eea:	1d1a      	adds	r2, r3, #4
 8001eec:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001ef6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001efa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001efe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f00:	1d1a      	adds	r2, r3, #4
 8001f02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f08:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001f0c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f16:	1d1a      	adds	r2, r3, #4
 8001f18:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1e:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8001f22:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f26:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2e:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8001f32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8001f42:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f46:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4e:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8001f52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8001f62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f64:	1d1a      	adds	r2, r3, #4
 8001f66:	673a      	str	r2, [r7, #112]	@ 0x70
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8001f6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	673a      	str	r2, [r7, #112]	@ 0x70
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001f76:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f7a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8001f86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f8a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8001f96:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f9a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8001fa6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001faa:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8001fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fb8:	1d1a      	adds	r2, r3, #4
 8001fba:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fbc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001fc0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8001fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fd2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001fd6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fde:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8001fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8001ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8002002:	edd7 7a03 	vldr	s15, [r7, #12]
 8002006:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8002012:	edd7 7a02 	vldr	s15, [r7, #8]
 8002016:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8002022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002024:	1d1a      	adds	r2, r3, #4
 8002026:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002028:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800202c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002034:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8002038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800203a:	1d1a      	adds	r2, r3, #4
 800203c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800203e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002042:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204a:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800204e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002050:	1d1a      	adds	r2, r3, #4
 8002052:	673a      	str	r2, [r7, #112]	@ 0x70
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8002058:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800205a:	1d1a      	adds	r2, r3, #4
 800205c:	673a      	str	r2, [r7, #112]	@ 0x70
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 8002062:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002066:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 8002072:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002076:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 8002082:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002086:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 8002092:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002096:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 80020a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020a4:	1d1a      	adds	r2, r3, #4
 80020a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80020a8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020ac:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80020b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ba:	1d1a      	adds	r2, r3, #4
 80020bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80020be:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020c2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80020ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 80020de:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 80020ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 80020fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002102:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 800210e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002110:	1d1a      	adds	r2, r3, #4
 8002112:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002114:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002118:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800211c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002120:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8002124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	67ba      	str	r2, [r7, #120]	@ 0x78
 800212a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800212e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002136:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800213a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800213c:	3b01      	subs	r3, #1
 800213e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002142:	2b00      	cmp	r3, #0
 8002144:	f47f ae45 	bne.w	8001dd2 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8002148:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800214a:	b299      	uxth	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	2302      	movs	r3, #2
 8002152:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002154:	f001 f80e 	bl	8003174 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8002158:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800215a:	b299      	uxth	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2302      	movs	r3, #2
 8002162:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002164:	f001 f806 	bl	8003174 <arm_radix8_butterfly_f32>
}
 8002168:	bf00      	nop
 800216a:	3780      	adds	r7, #128	@ 0x80
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0ac      	sub	sp, #176	@ 0xb0
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8002186:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	4413      	add	r3, r2
 8002190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8002194:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800219e:	4413      	add	r3, r2
 80021a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 80021a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80021ae:	4413      	add	r3, r2
 80021b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 80021b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 80021be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021c2:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 80021c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021c8:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80021ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021ce:	3b04      	subs	r3, #4
 80021d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 80021d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d8:	3b04      	subs	r3, #4
 80021da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80021de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e2:	3b04      	subs	r3, #4
 80021e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80021e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80021f2:	4413      	add	r3, r2
 80021f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800220c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8002210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800221a:	2302      	movs	r3, #2
 800221c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 800221e:	2304      	movs	r3, #4
 8002220:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8002222:	2306      	movs	r3, #6
 8002224:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002238:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	ed93 7a00 	vldr	s14, [r3]
 8002242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3304      	adds	r3, #4
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800225e:	3304      	adds	r3, #4
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3304      	adds	r3, #4
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002278:	3304      	adds	r3, #4
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002286:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800228a:	3304      	adds	r3, #4
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800229c:	3304      	adds	r3, #4
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80022aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80022b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80022ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80022d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80022ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ee:	3304      	adds	r3, #4
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80022f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002300:	3304      	adds	r3, #4
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800230e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002312:	3304      	adds	r3, #4
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800231c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002324:	3304      	adds	r3, #4
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002336:	ed93 7a00 	vldr	s14, [r3]
 800233a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800233e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002342:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234e:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002352:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002356:	ed93 7a00 	vldr	s14, [r3]
 800235a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800235e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002362:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	1d1a      	adds	r2, r3, #4
 800236e:	603a      	str	r2, [r7, #0]
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800237c:	3304      	adds	r3, #4
 800237e:	ed93 7a00 	vldr	s14, [r3]
 8002382:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800238e:	3304      	adds	r3, #4
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	1d1a      	adds	r2, r3, #4
 8002398:	603a      	str	r2, [r7, #0]
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80023a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80023b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023b4:	1d1a      	adds	r2, r3, #4
 80023b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80023ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023bc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80023be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80023cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d0:	1d1a      	adds	r2, r3, #4
 80023d2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023d6:	6a3a      	ldr	r2, [r7, #32]
 80023d8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80023da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80023e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80023f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80023fe:	4413      	add	r3, r2
 8002400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8002404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800240c:	4413      	add	r3, r2
 800240e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8002412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800241a:	4413      	add	r3, r2
 800241c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8002420:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002424:	3b02      	subs	r3, #2
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800242c:	e31c      	b.n	8002a68 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	ed93 7a00 	vldr	s14, [r3]
 800244a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002456:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3304      	adds	r3, #4
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002466:	3304      	adds	r3, #4
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002470:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3304      	adds	r3, #4
 8002478:	ed93 7a00 	vldr	s14, [r3]
 800247c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002480:	3304      	adds	r3, #4
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800248e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002492:	3304      	adds	r3, #4
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800249c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024a4:	3304      	adds	r3, #4
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80024b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80024be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80024d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80024de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ee:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80024f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024f6:	3304      	adds	r3, #4
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002508:	3304      	adds	r3, #4
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002512:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800251a:	3304      	adds	r3, #4
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800252c:	3304      	adds	r3, #4
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800253a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800253e:	ed93 7a00 	vldr	s14, [r3]
 8002542:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800255a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800256a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1d1a      	adds	r2, r3, #4
 8002576:	603a      	str	r2, [r7, #0]
 8002578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257c:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002580:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002584:	3304      	adds	r3, #4
 8002586:	ed93 7a00 	vldr	s14, [r3]
 800258a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800258e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002592:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002596:	3304      	adds	r3, #4
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	603a      	str	r2, [r7, #0]
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80025aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ae:	3b04      	subs	r3, #4
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025b8:	3b04      	subs	r3, #4
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80025c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ca:	3b04      	subs	r3, #4
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025d4:	3b04      	subs	r3, #4
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025de:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80025e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80025fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025fe:	ed93 7a00 	vldr	s14, [r3]
 8002602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8002612:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002626:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800264a:	3b04      	subs	r3, #4
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002654:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002658:	3b04      	subs	r3, #4
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266a:	3b04      	subs	r3, #4
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800267c:	3b04      	subs	r3, #4
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002686:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800268a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80026aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026be:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80026c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c6:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80026ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ce:	3b04      	subs	r3, #4
 80026d0:	ed93 7a00 	vldr	s14, [r3]
 80026d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026d8:	3b04      	subs	r3, #4
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026e2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80026ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026f2:	ed93 7a00 	vldr	s14, [r3]
 80026f6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80026fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800270a:	1f1a      	subs	r2, r3, #4
 800270c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800271c:	3b04      	subs	r3, #4
 800271e:	ed93 7a00 	vldr	s14, [r3]
 8002722:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800272e:	3b04      	subs	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002738:	1f1a      	subs	r2, r3, #4
 800273a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800273e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002742:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8002746:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8002754:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8002762:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002766:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8002772:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002776:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8002782:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002786:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8002792:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002796:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 80027a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80027ac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80027b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80027bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027c0:	1d1a      	adds	r2, r3, #4
 80027c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80027c6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80027ca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80027d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027da:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 80027e6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027ea:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80027ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 80027f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027fa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8002806:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800280a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8002816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800281a:	1f1a      	subs	r2, r3, #4
 800281c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002820:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002824:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8002830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002834:	1f1a      	subs	r2, r3, #4
 8002836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800283a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800283e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002846:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800284a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8002852:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002856:	3304      	adds	r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 800285c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002864:	4413      	add	r3, r2
 8002866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 800286a:	edd7 7a07 	vldr	s15, [r7, #28]
 800286e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 800287a:	edd7 7a08 	vldr	s15, [r7, #32]
 800287e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 800288a:	edd7 7a08 	vldr	s15, [r7, #32]
 800288e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002896:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 800289a:	edd7 7a07 	vldr	s15, [r7, #28]
 800289e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028b4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80028b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80028c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028ce:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80028d2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028da:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80028de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028e2:	eef1 7a67 	vneg.f32	s15, s15
 80028e6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80028ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ee:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 80028f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80028f6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8002902:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002906:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8002912:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002916:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800291a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8002922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002926:	1f1a      	subs	r2, r3, #4
 8002928:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800292c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002930:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002938:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800293c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002940:	1f1a      	subs	r2, r3, #4
 8002942:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002946:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800294a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002952:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8002956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 800295e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002962:	3304      	adds	r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8002968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002970:	4413      	add	r3, r2
 8002972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8002976:	edd7 7a03 	vldr	s15, [r7, #12]
 800297a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8002986:	edd7 7a04 	vldr	s15, [r7, #16]
 800298a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8002996:	edd7 7a04 	vldr	s15, [r7, #16]
 800299a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800299e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 80029a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029aa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 80029b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ba:	1d1a      	adds	r2, r3, #4
 80029bc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80029c0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80029c4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80029d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029d4:	1d1a      	adds	r2, r3, #4
 80029d6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80029da:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80029de:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80029e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e6:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80029ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 80029fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fe:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8002a0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a0e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8002a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a1e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8002a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a2e:	1f1a      	subs	r2, r3, #4
 8002a30:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8002a34:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002a38:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a40:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8002a44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a48:	1f1a      	subs	r2, r3, #4
 8002a4a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8002a4e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002a52:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f acde 	bne.w	800242e <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	ed93 7a00 	vldr	s14, [r3]
 8002a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	ed93 7a00 	vldr	s14, [r3]
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aaa:	3304      	adds	r3, #4
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3304      	adds	r3, #4
 8002abc:	ed93 7a00 	vldr	s14, [r3]
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ace:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	ed93 7a00 	vldr	s14, [r3]
 8002adc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ae8:	3304      	adds	r3, #4
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002b02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b32:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b56:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b5e:	3304      	adds	r3, #4
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b70:	3304      	adds	r3, #4
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9a:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	603a      	str	r2, [r7, #0]
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bc8:	3304      	adds	r3, #4
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bda:	3304      	adds	r3, #4
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	1d1a      	adds	r2, r3, #4
 8002be4:	603a      	str	r2, [r7, #0]
 8002be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bea:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8002bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 8002bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8002c00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c04:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8002c10:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002c14:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8002c20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002c24:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8002c30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c34:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8002c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c44:	1d1a      	adds	r2, r3, #4
 8002c46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002c4a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002c4e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c56:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8002c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002c64:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002c68:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c70:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8002c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8002c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c80:	3304      	adds	r3, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8002c86:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c8a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8002c96:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c9a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8002ca6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002caa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8002cb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cba:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cd0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002cd4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cea:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002cee:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf6:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8002cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8002d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d06:	3304      	adds	r3, #4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8002d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d10:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 8002d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d20:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8002d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d30:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8002d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d40:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8002d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d50:	1d1a      	adds	r2, r3, #4
 8002d52:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002d56:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002d5a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002d70:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002d74:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8002d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d84:	b299      	uxth	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002d8e:	f000 f9f1 	bl	8003174 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8002d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d96:	b299      	uxth	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002da0:	f000 f9e8 	bl	8003174 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8002da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002da8:	b299      	uxth	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	2304      	movs	r3, #4
 8002db0:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002db2:	f000 f9df 	bl	8003174 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002db6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dba:	b299      	uxth	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002dc4:	f000 f9d6 	bl	8003174 <arm_radix8_butterfly_f32>
}
 8002dc8:	bf00      	nop
 8002dca:	37b0      	adds	r7, #176	@ 0xb0
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	460b      	mov	r3, r1
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	4613      	mov	r3, r2
 8002de4:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d117      	bne.n	8002e22 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3304      	adds	r3, #4
 8002df6:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e00d      	b.n	8002e1a <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eef1 7a67 	vneg.f32	s15, s15
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3308      	adds	r3, #8
 8002e12:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3301      	adds	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d3ed      	bcc.n	8002dfe <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e28:	d040      	beq.n	8002eac <arm_cfft_f32+0xdc>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e30:	d845      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e38:	d033      	beq.n	8002ea2 <arm_cfft_f32+0xd2>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e40:	d83d      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e48:	d026      	beq.n	8002e98 <arm_cfft_f32+0xc8>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e50:	d835      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d028      	beq.n	8002eac <arm_cfft_f32+0xdc>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e60:	d82d      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e68:	d01b      	beq.n	8002ea2 <arm_cfft_f32+0xd2>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e70:	d825      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b80      	cmp	r3, #128	@ 0x80
 8002e76:	d00f      	beq.n	8002e98 <arm_cfft_f32+0xc8>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b80      	cmp	r3, #128	@ 0x80
 8002e7c:	d81f      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d013      	beq.n	8002eac <arm_cfft_f32+0xdc>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d819      	bhi.n	8002ebe <arm_cfft_f32+0xee>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d003      	beq.n	8002e98 <arm_cfft_f32+0xc8>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d005      	beq.n	8002ea2 <arm_cfft_f32+0xd2>
 8002e96:	e012      	b.n	8002ebe <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7fe ff74 	bl	8001d88 <arm_cfft_radix8by2_f32>
    break;
 8002ea0:	e00d      	b.n	8002ebe <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff f963 	bl	8002170 <arm_cfft_radix8by4_f32>
    break;
 8002eaa:	e008      	b.n	8002ebe <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	b299      	uxth	r1, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	68b8      	ldr	r0, [r7, #8]
 8002eb8:	f000 f95c 	bl	8003174 <arm_radix8_butterfly_f32>
    break;
 8002ebc:	bf00      	nop
  }

  if ( bitReverseFlag )
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8999      	ldrh	r1, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f7fe ff01 	bl	8001cd6 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d130      	bne.n	8002f3c <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eec:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	e01c      	b.n	8002f34 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	61ba      	str	r2, [r7, #24]
 8002f00:	ed93 7a00 	vldr	s14, [r3]
 8002f04:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0c:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	eeb1 7a67 	vneg.f32	s14, s15
 8002f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d3de      	bcc.n	8002efa <arm_cfft_f32+0x12a>
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <arm_cfft_init_2048_f32+0x44>)
 8002f60:	899a      	ldrh	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	819a      	strh	r2, [r3, #12]
 8002f66:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <arm_cfft_init_2048_f32+0x44>)
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <arm_cfft_init_2048_f32+0x44>)
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	08020cc8 	.word	0x08020cc8

08002f8c <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <arm_cfft_init_1024_f32+0x44>)
 8002fa8:	899a      	ldrh	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	819a      	strh	r2, [r3, #12]
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <arm_cfft_init_1024_f32+0x44>)
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <arm_cfft_init_1024_f32+0x44>)
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	08020cb8 	.word	0x08020cb8

08002fd4 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <arm_cfft_init_512_f32+0x44>)
 8002ff0:	899a      	ldrh	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	819a      	strh	r2, [r3, #12]
 8002ff6:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <arm_cfft_init_512_f32+0x44>)
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <arm_cfft_init_512_f32+0x44>)
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	08020ca8 	.word	0x08020ca8

0800301c <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <arm_cfft_init_256_f32+0x44>)
 8003038:	899a      	ldrh	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	819a      	strh	r2, [r3, #12]
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <arm_cfft_init_256_f32+0x44>)
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <arm_cfft_init_256_f32+0x44>)
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	08020c98 	.word	0x08020c98

08003064 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <arm_cfft_init_128_f32+0x40>)
 800307e:	899a      	ldrh	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	819a      	strh	r2, [r3, #12]
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <arm_cfft_init_128_f32+0x40>)
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <arm_cfft_init_128_f32+0x40>)
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	08020c88 	.word	0x08020c88

080030a8 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2240      	movs	r2, #64	@ 0x40
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <arm_cfft_init_64_f32+0x40>)
 80030c2:	899a      	ldrh	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	819a      	strh	r2, [r3, #12]
 80030c8:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <arm_cfft_init_64_f32+0x40>)
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <arm_cfft_init_64_f32+0x40>)
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	08020c78 	.word	0x08020c78

080030ec <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <arm_cfft_init_32_f32+0x40>)
 8003106:	899a      	ldrh	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	819a      	strh	r2, [r3, #12]
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <arm_cfft_init_32_f32+0x40>)
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <arm_cfft_init_32_f32+0x40>)
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	08020c68 	.word	0x08020c68

08003130 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2210      	movs	r2, #16
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <arm_cfft_init_16_f32+0x40>)
 800314a:	899a      	ldrh	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	819a      	strh	r2, [r3, #12]
 8003150:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <arm_cfft_init_16_f32+0x40>)
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <arm_cfft_init_16_f32+0x40>)
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	08020c58 	.word	0x08020c58

08003174 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8003174:	b480      	push	{r7}
 8003176:	b0bd      	sub	sp, #244	@ 0xf4
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
 8003184:	4613      	mov	r3, r2
 8003186:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <arm_radix8_butterfly_f32+0x3c>)
 800318a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 800319c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ac:	e002      	b.n	80031b4 <arm_radix8_butterfly_f32+0x40>
 80031ae:	bf00      	nop
 80031b0:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80031b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031bc:	4413      	add	r3, r2
 80031be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 80031c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ca:	4413      	add	r3, r2
 80031cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 80031d0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d8:	4413      	add	r3, r2
 80031da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 80031de:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e6:	4413      	add	r3, r2
 80031e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 80031ec:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f4:	4413      	add	r3, r2
 80031f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 80031fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003202:	4413      	add	r3, r2
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 8003208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800320c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003210:	4413      	add	r3, r2
 8003212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	ed93 7a00 	vldr	s14, [r3]
 8003224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003236:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800323a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	ed93 7a00 	vldr	s14, [r3]
 8003248:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325a:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800325e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	ed93 7a00 	vldr	s14, [r3]
 800326c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	ed93 7a00 	vldr	s14, [r3]
 8003290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a2:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80032a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	ed93 7a00 	vldr	s14, [r3]
 80032b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80032ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	ed93 7a00 	vldr	s14, [r3]
 80032d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ea:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80032ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	ed93 7a00 	vldr	s14, [r3]
 80032fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003332:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 8003336:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800333a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003342:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 8003346:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800334a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 8003356:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800335a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800335e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003362:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 8003366:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800336a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 8003376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003384:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8003390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800339e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80033a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a6:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80033aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3304      	adds	r3, #4
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	ed93 7a00 	vldr	s14, [r3]
 80033ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	3304      	adds	r3, #4
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ce:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80033d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	3304      	adds	r3, #4
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	3304      	adds	r3, #4
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80033fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	3304      	adds	r3, #4
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	ed93 7a00 	vldr	s14, [r3]
 800340a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3304      	adds	r3, #4
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3304      	adds	r3, #4
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	ed93 7a00 	vldr	s14, [r3]
 8003432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	3304      	adds	r3, #4
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4413      	add	r3, r2
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003446:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800344a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	3304      	adds	r3, #4
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3304      	adds	r3, #4
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003472:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	3304      	adds	r3, #4
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	ed93 7a00 	vldr	s14, [r3]
 8003482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	3304      	adds	r3, #4
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003496:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800349a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3304      	adds	r3, #4
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	3304      	adds	r3, #4
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4413      	add	r3, r2
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80034c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3304      	adds	r3, #4
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	ed93 7a00 	vldr	s14, [r3]
 80034d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	3304      	adds	r3, #4
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 80034ea:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80034ee:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 80034fa:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80034fe:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003506:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 800350a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800350e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003516:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 800351a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800351e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003526:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800352a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	3304      	adds	r3, #4
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800353a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800353e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003542:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8003546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3304      	adds	r3, #4
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003556:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8003562:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003570:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800357c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800358a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800358e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003592:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8003596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	3304      	adds	r3, #4
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80035a6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80035aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80035b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	3304      	adds	r3, #4
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4413      	add	r3, r2
 80035be:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80035c2:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80035c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ca:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80035ce:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80035d2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80035d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035da:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 80035e6:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80035ea:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80035ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f2:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 80035fe:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003602:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8003616:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800361a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800361e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003622:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 800362e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003632:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 800363e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003642:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364a:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 800364e:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003652:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 800365e:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003662:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 800366e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003672:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 800367e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003682:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 800368e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003692:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 800369e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80036a2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80036a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036aa:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 80036ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80036bc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80036c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80036c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4413      	add	r3, r2
 80036d2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80036d6:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80036da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80036e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80036f0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80036f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80036fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800370a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800370e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003712:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	3304      	adds	r3, #4
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003726:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800372a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8003732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	3304      	adds	r3, #4
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003742:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800374e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	3304      	adds	r3, #4
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800375e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003766:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800376a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3304      	adds	r3, #4
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800377a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8003786:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800378a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800378e:	4413      	add	r3, r2
 8003790:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800379a:	429a      	cmp	r2, r3
 800379c:	f4ff ad0a 	bcc.w	80031b4 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a4:	2b07      	cmp	r3, #7
 80037a6:	f240 84e3 	bls.w	8004170 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80037b6:	893b      	ldrh	r3, [r7, #8]
 80037b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80037bc:	4413      	add	r3, r2
 80037be:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 80037c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 80037c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80037ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037cc:	4413      	add	r3, r2
 80037ce:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 80037d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80037d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037d4:	4413      	add	r3, r2
 80037d6:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 80037d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037dc:	4413      	add	r3, r2
 80037de:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 80037e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80037e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037e4:	4413      	add	r3, r2
 80037e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 80037e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ec:	4413      	add	r3, r2
 80037ee:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 80037f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80037f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037f4:	4413      	add	r3, r2
 80037f6:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 80037f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8003806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8003812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 800381e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 800382a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8003836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8003842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 800384e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3304      	adds	r3, #4
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 800385e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	3304      	adds	r3, #4
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 800386c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	3304      	adds	r3, #4
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800387a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	3304      	adds	r3, #4
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8003888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	3304      	adds	r3, #4
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8003896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	3304      	adds	r3, #4
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 80038a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	3304      	adds	r3, #4
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80038ba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c2:	4413      	add	r3, r2
 80038c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 80038c8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	4413      	add	r3, r2
 80038d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 80038d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038de:	4413      	add	r3, r2
 80038e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 80038e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80038e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ec:	4413      	add	r3, r2
 80038ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 80038f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	4413      	add	r3, r2
 80038fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8003900:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003908:	4413      	add	r3, r2
 800390a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 800390e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	4413      	add	r3, r2
 8003918:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800391c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	ed93 7a00 	vldr	s14, [r3]
 800392a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	ed93 7a00 	vldr	s14, [r3]
 800394e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003960:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	ed93 7a00 	vldr	s14, [r3]
 8003972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	ed93 7a00 	vldr	s14, [r3]
 8003996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80039ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	ed93 7a00 	vldr	s14, [r3]
 80039ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039cc:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80039d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	ed93 7a00 	vldr	s14, [r3]
 80039de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f0:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80039f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	ed93 7a00 	vldr	s14, [r3]
 8003a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a14:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	ed93 7a00 	vldr	s14, [r3]
 8003a26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a38:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8003a3c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003a40:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a48:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8003a4c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003a50:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a58:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8003a5c:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003a60:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a68:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8003a6c:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003a70:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a78:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8003a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003a8a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a92:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8003a96:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003a9a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	3304      	adds	r3, #4
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	ed93 7a00 	vldr	s14, [r3]
 8003ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	3304      	adds	r3, #4
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003ace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	ed93 7a00 	vldr	s14, [r3]
 8003ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	3304      	adds	r3, #4
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	ed93 7a00 	vldr	s14, [r3]
 8003b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	3304      	adds	r3, #4
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	ed93 7a00 	vldr	s14, [r3]
 8003b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	3304      	adds	r3, #4
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b42:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003b46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	ed93 7a00 	vldr	s14, [r3]
 8003b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b6a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003b6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	3304      	adds	r3, #4
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	ed93 7a00 	vldr	s14, [r3]
 8003b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3304      	adds	r3, #4
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b92:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
 8003ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3304      	adds	r3, #4
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bba:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	ed93 7a00 	vldr	s14, [r3]
 8003bce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8003be6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003bea:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8003bf6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003bfa:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c02:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 8003c06:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003c0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c12:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 8003c16:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003c1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8003c26:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003c2a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c32:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8003c36:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003c3a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c42:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8003c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003c56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c5e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8003c62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003c66:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8003c72:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c76:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8003c82:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c86:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8003c92:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003c96:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8003ca2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003ca6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8003cb2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003cb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbe:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003cc2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003cc6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d04:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8003d08:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003d0c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d14:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8003d18:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003d1c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8003d28:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003d2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8003d38:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003d3c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d44:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8003d48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d56:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3304      	adds	r3, #4
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d7a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003d7e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003d82:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003d8e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d92:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003d9e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003da2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003dae:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003db2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dba:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003dbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	3304      	adds	r3, #4
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003de8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df0:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003df4:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003df8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e00:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e08:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 8003e0c:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003e10:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e18:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e20:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 8003e24:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003e28:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e30:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e38:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8003e3c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003e40:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e48:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e50:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8003e54:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003e58:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e60:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8003e64:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003e68:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e70:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8003e74:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003e78:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e80:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8003e84:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003e88:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e90:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8003e94:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003e98:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8003ea4:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003ea8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8003eb4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003eb8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8003ec4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003ec8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed0:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8003ed4:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003ed8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8003ee4:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003ee8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef0:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 8003ef4:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003ef8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f00:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 8003f04:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003f08:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f10:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 8003f14:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003f18:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f20:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 8003f24:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003f28:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f30:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8003f34:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003f38:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f40:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8003f44:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003f48:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f50:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8003f54:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003f58:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f60:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003f64:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003f68:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f70:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003f74:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003f78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f80:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003f84:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003f88:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f90:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003faa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	ed97 7a05 	vldr	s14, [r7, #20]
 8003fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003fca:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003fce:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003fda:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003fde:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003fea:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003fee:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003ffa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003ffe:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8004002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004006:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800400a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	ed97 7a07 	vldr	s14, [r7, #28]
 8004018:	edd7 7a06 	vldr	s15, [r7, #24]
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8004024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	3304      	adds	r3, #4
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	ed97 7a05 	vldr	s14, [r7, #20]
 8004034:	edd7 7a04 	vldr	s15, [r7, #16]
 8004038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800403c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8004040:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004044:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8004050:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004054:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8004060:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004064:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8004070:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004074:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8004080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	ed97 7a07 	vldr	s14, [r7, #28]
 800408e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004096:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800409a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	3304      	adds	r3, #4
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80040aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80040ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80040b6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80040ba:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80040be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80040c6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80040ca:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80040d6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80040da:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80040e6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80040ea:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80040f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	ed97 7a07 	vldr	s14, [r7, #28]
 8004104:	edd7 7a06 	vldr	s15, [r7, #24]
 8004108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8004110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	3304      	adds	r3, #4
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004120:	edd7 7a04 	vldr	s15, [r7, #16]
 8004124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004128:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800412c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004134:	4413      	add	r3, r2
 8004136:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004140:	429a      	cmp	r2, r3
 8004142:	f4ff abba 	bcc.w	80038ba <arm_radix8_butterfly_f32+0x746>

         j++;
 8004146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414a:	3301      	adds	r3, #1
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8004150:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004158:	429a      	cmp	r2, r3
 800415a:	f4ff ab2c 	bcc.w	80037b6 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004168:	2b07      	cmp	r3, #7
 800416a:	f63f a813 	bhi.w	8003194 <arm_radix8_butterfly_f32+0x20>
}
 800416e:	e000      	b.n	8004172 <arm_radix8_butterfly_f32+0xffe>
         break;
 8004170:	bf00      	nop
}
 8004172:	bf00      	nop
 8004174:	37f4      	adds	r7, #244	@ 0xf4
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8004180:	b480      	push	{r7}
 8004182:	b095      	sub	sp, #84	@ 0x54
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	3b01      	subs	r3, #1
 80041a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80041a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 80041a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041aa:	3304      	adds	r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 80041b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 80041b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b8:	3304      	adds	r3, #4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 80041be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 80041c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ca:	1d1a      	adds	r2, r3, #4
 80041cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80041d2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80041d6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80041da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80041e2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80041e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80041ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ee:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80041f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80041f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80041fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8004210:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004214:	edd7 7a08 	vldr	s15, [r7, #32]
 8004218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1d1a      	adds	r2, r3, #4
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800422a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800422e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4413      	add	r3, r2
 8004236:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 8004238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800423a:	3308      	adds	r3, #8
 800423c:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800423e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004240:	3304      	adds	r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 8004246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 800424c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8004252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004254:	3304      	adds	r3, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 800425a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425c:	1d1a      	adds	r2, r3, #4
 800425e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8004264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	64ba      	str	r2, [r7, #72]	@ 0x48
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 800426e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004272:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800427a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 800427e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004282:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800428e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004292:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800429e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80042ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80042b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80042be:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80042c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ca:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80042ce:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80042d2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80042d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042da:	edd7 7a07 	vldr	s15, [r7, #28]
 80042de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80042f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80042fc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004300:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004308:	edd7 7a06 	vldr	s15, [r7, #24]
 800430c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004310:	edd7 7a05 	vldr	s15, [r7, #20]
 8004314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004326:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800432a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432c:	3308      	adds	r3, #8
 800432e:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8004330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004332:	3b08      	subs	r3, #8
 8004334:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8004336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004338:	3b01      	subs	r3, #1
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 800433c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800433e:	2b00      	cmp	r3, #0
 8004340:	f73f af7d 	bgt.w	800423e <stage_rfft_f32+0xbe>
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3754      	adds	r7, #84	@ 0x54
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8004352:	b480      	push	{r7}
 8004354:	b095      	sub	sp, #84	@ 0x54
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8004374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 800437a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800437c:	3304      	adds	r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8004382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004384:	3308      	adds	r3, #8
 8004386:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8004388:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800438c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800439e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a2:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80043a6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80043aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80043ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c0:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80043c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4413      	add	r3, r2
 80043cc:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 80043ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043d0:	3308      	adds	r3, #8
 80043d2:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 80043d4:	e07e      	b.n	80044d4 <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80043d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d8:	3304      	adds	r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 80043de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80043e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80043ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ec:	3304      	adds	r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 80043f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f4:	1d1a      	adds	r2, r3, #4
 80043f6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80043fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043fe:	1d1a      	adds	r2, r3, #4
 8004400:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 8004406:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800440a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 8004416:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800441a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800441e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004422:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8004426:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800442a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8004436:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800443a:	edd7 7a08 	vldr	s15, [r7, #32]
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8004446:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800444a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8004456:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800445a:	edd7 7a08 	vldr	s15, [r7, #32]
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8004466:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800446a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800446e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004472:	edd7 7a07 	vldr	s15, [r7, #28]
 8004476:	ee37 7a67 	vsub.f32	s14, s14, s15
 800447a:	edd7 7a06 	vldr	s15, [r7, #24]
 800447e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800448c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004490:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8004494:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004498:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800449c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044be:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80044c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044c4:	3308      	adds	r3, #8
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80044c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ca:	3b08      	subs	r3, #8
 80044cc:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80044ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d0:	3b01      	subs	r3, #1
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 80044d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f73f af7d 	bgt.w	80043d6 <merge_rfft_f32+0x84>
   }

}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3754      	adds	r7, #84	@ 0x54
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff23 	bl	8004352 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	2301      	movs	r3, #1
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f7fe fc5c 	bl	8002dd0 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8004518:	e00a      	b.n	8004530 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	2301      	movs	r3, #1
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	6978      	ldr	r0, [r7, #20]
 8004522:	f7fe fc55 	bl	8002dd0 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff fe28 	bl	8004180 <stage_rfft_f32>
}
 8004530:	bf00      	nop
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <arm_rfft_fast_init_32_f32>:
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)

FAST_INIT_FUNC(32)

#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <arm_rfft_fast_init_32_f32+0x14>
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e013      	b.n	8004574 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fdee 	bl	8003130 <arm_cfft_init_16_f32>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8004560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004564:	e006      	b.n	8004574 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a03      	ldr	r2, [pc, #12]	@ (800457c <arm_rfft_fast_init_32_f32+0x44>)
 8004570:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	08018cd8 	.word	0x08018cd8

08004580 <arm_rfft_fast_init_64_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(64)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <arm_rfft_fast_init_64_f32+0x14>
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
 8004592:	e013      	b.n	80045bc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe fda8 	bl	80030ec <arm_cfft_init_32_f32>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80045a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 80045a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ac:	e006      	b.n	80045bc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2240      	movs	r2, #64	@ 0x40
 80045b2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a03      	ldr	r2, [pc, #12]	@ (80045c4 <arm_rfft_fast_init_64_f32+0x44>)
 80045b8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08018d58 	.word	0x08018d58

080045c8 <arm_rfft_fast_init_128_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(128)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <arm_rfft_fast_init_128_f32+0x14>
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e013      	b.n	8004604 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fd62 	bl	80030a8 <arm_cfft_init_64_f32>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80045e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 80045f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f4:	e006      	b.n	8004604 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2280      	movs	r2, #128	@ 0x80
 80045fa:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a03      	ldr	r2, [pc, #12]	@ (800460c <arm_rfft_fast_init_128_f32+0x44>)
 8004600:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	08018e58 	.word	0x08018e58

08004610 <arm_rfft_fast_init_256_f32>:
*/

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(256)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <arm_rfft_fast_init_256_f32+0x14>
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	e014      	b.n	800464e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fd1c 	bl	8003064 <arm_cfft_init_128_f32>
 800462c:	4603      	mov	r3, r0
 800462e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8004638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463c:	e007      	b.n	800464e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004644:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a03      	ldr	r2, [pc, #12]	@ (8004658 <arm_rfft_fast_init_256_f32+0x48>)
 800464a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	08019058 	.word	0x08019058

0800465c <arm_rfft_fast_init_512_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(512)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <arm_rfft_fast_init_512_f32+0x14>
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
 800466e:	e014      	b.n	800469a <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fcd2 	bl	800301c <arm_cfft_init_256_f32>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800467c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004688:	e007      	b.n	800469a <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004690:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a03      	ldr	r2, [pc, #12]	@ (80046a4 <arm_rfft_fast_init_512_f32+0x48>)
 8004696:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	08019458 	.word	0x08019458

080046a8 <arm_rfft_fast_init_1024_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(1024)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <arm_rfft_fast_init_1024_f32+0x14>
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	e014      	b.n	80046e6 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fc88 	bl	8002fd4 <arm_cfft_init_512_f32>
 80046c4:	4603      	mov	r3, r0
 80046c6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80046c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80046d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d4:	e007      	b.n	80046e6 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046dc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a03      	ldr	r2, [pc, #12]	@ (80046f0 <arm_rfft_fast_init_1024_f32+0x48>)
 80046e2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	08019c58 	.word	0x08019c58

080046f4 <arm_rfft_fast_init_2048_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(2048)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <arm_rfft_fast_init_2048_f32+0x14>
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e014      	b.n	8004732 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fc3e 	bl	8002f8c <arm_cfft_init_1024_f32>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800471c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004720:	e007      	b.n	8004732 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004728:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a03      	ldr	r2, [pc, #12]	@ (800473c <arm_rfft_fast_init_2048_f32+0x48>)
 800472e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	0801ac58 	.word	0x0801ac58

08004740 <arm_rfft_fast_init_4096_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(4096)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <arm_rfft_fast_init_4096_f32+0x14>
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
 8004752:	e014      	b.n	800477e <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fbf4 	bl	8002f44 <arm_cfft_init_2048_f32>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8004768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476c:	e007      	b.n	800477e <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004774:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a03      	ldr	r2, [pc, #12]	@ (8004788 <arm_rfft_fast_init_4096_f32+0x48>)
 800477a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	0801cc58 	.word	0x0801cc58

0800478c <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479e:	d023      	beq.n	80047e8 <arm_rfft_fast_init_f32+0x5c>
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a4:	dc50      	bgt.n	8004848 <arm_rfft_fast_init_f32+0xbc>
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047aa:	d023      	beq.n	80047f4 <arm_rfft_fast_init_f32+0x68>
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b0:	dc4a      	bgt.n	8004848 <arm_rfft_fast_init_f32+0xbc>
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b6:	d023      	beq.n	8004800 <arm_rfft_fast_init_f32+0x74>
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047bc:	dc44      	bgt.n	8004848 <arm_rfft_fast_init_f32+0xbc>
 80047be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c2:	d023      	beq.n	800480c <arm_rfft_fast_init_f32+0x80>
 80047c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c8:	dc3e      	bgt.n	8004848 <arm_rfft_fast_init_f32+0xbc>
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ce:	d023      	beq.n	8004818 <arm_rfft_fast_init_f32+0x8c>
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d4:	dc38      	bgt.n	8004848 <arm_rfft_fast_init_f32+0xbc>
 80047d6:	2b80      	cmp	r3, #128	@ 0x80
 80047d8:	d024      	beq.n	8004824 <arm_rfft_fast_init_f32+0x98>
 80047da:	2b80      	cmp	r3, #128	@ 0x80
 80047dc:	dc34      	bgt.n	8004848 <arm_rfft_fast_init_f32+0xbc>
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d02c      	beq.n	800483c <arm_rfft_fast_init_f32+0xb0>
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d024      	beq.n	8004830 <arm_rfft_fast_init_f32+0xa4>
 80047e6:	e02f      	b.n	8004848 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ffa9 	bl	8004740 <arm_rfft_fast_init_4096_f32>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]
    break;
 80047f2:	e02c      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff7d 	bl	80046f4 <arm_rfft_fast_init_2048_f32>
 80047fa:	4603      	mov	r3, r0
 80047fc:	73fb      	strb	r3, [r7, #15]
    break;
 80047fe:	e026      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff51 	bl	80046a8 <arm_rfft_fast_init_1024_f32>
 8004806:	4603      	mov	r3, r0
 8004808:	73fb      	strb	r3, [r7, #15]
    break;
 800480a:	e020      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff25 	bl	800465c <arm_rfft_fast_init_512_f32>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
    break;
 8004816:	e01a      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fef9 	bl	8004610 <arm_rfft_fast_init_256_f32>
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]
    break;
 8004822:	e014      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fecf 	bl	80045c8 <arm_rfft_fast_init_128_f32>
 800482a:	4603      	mov	r3, r0
 800482c:	73fb      	strb	r3, [r7, #15]
    break;
 800482e:	e00e      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fea5 	bl	8004580 <arm_rfft_fast_init_64_f32>
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]
    break;
 800483a:	e008      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fe7b 	bl	8004538 <arm_rfft_fast_init_32_f32>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
    break;
 8004846:	e002      	b.n	800484e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	e001      	b.n	8004852 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800484e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004860:	4b0e      	ldr	r3, [pc, #56]	@ (800489c <HAL_Init+0x40>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <HAL_Init+0x40>)
 8004866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <HAL_Init+0x40>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <HAL_Init+0x40>)
 8004872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004878:	4b08      	ldr	r3, [pc, #32]	@ (800489c <HAL_Init+0x40>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a07      	ldr	r2, [pc, #28]	@ (800489c <HAL_Init+0x40>)
 800487e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004884:	2003      	movs	r0, #3
 8004886:	f000 f92b 	bl	8004ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800488a:	2000      	movs	r0, #0
 800488c:	f000 f808 	bl	80048a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004890:	f7fc feec 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023c00 	.word	0x40023c00

080048a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048a8:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_InitTick+0x54>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <HAL_InitTick+0x58>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f943 	bl	8004b4a <HAL_SYSTICK_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00e      	b.n	80048ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d80a      	bhi.n	80048ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048d4:	2200      	movs	r2, #0
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	f000 f90b 	bl	8004af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048e0:	4a06      	ldr	r2, [pc, #24]	@ (80048fc <HAL_InitTick+0x5c>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000004 	.word	0x20000004
 80048f8:	2000000c 	.word	0x2000000c
 80048fc:	20000008 	.word	0x20000008

08004900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004904:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_IncTick+0x20>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_IncTick+0x24>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4413      	add	r3, r2
 8004910:	4a04      	ldr	r2, [pc, #16]	@ (8004924 <HAL_IncTick+0x24>)
 8004912:	6013      	str	r3, [r2, #0]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	2000000c 	.word	0x2000000c
 8004924:	20003cb4 	.word	0x20003cb4

08004928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return uwTick;
 800492c:	4b03      	ldr	r3, [pc, #12]	@ (800493c <HAL_GetTick+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20003cb4 	.word	0x20003cb4

08004940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <__NVIC_SetPriorityGrouping+0x44>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800495c:	4013      	ands	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800496c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004972:	4a04      	ldr	r2, [pc, #16]	@ (8004984 <__NVIC_SetPriorityGrouping+0x44>)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	60d3      	str	r3, [r2, #12]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <__NVIC_GetPriorityGrouping+0x18>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 0307 	and.w	r3, r3, #7
}
 8004996:	4618      	mov	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	db0b      	blt.n	80049ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	f003 021f 	and.w	r2, r3, #31
 80049bc:	4907      	ldr	r1, [pc, #28]	@ (80049dc <__NVIC_EnableIRQ+0x38>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2001      	movs	r0, #1
 80049c6:	fa00 f202 	lsl.w	r2, r0, r2
 80049ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000e100 	.word	0xe000e100

080049e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	db0a      	blt.n	8004a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	490c      	ldr	r1, [pc, #48]	@ (8004a2c <__NVIC_SetPriority+0x4c>)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	440b      	add	r3, r1
 8004a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a08:	e00a      	b.n	8004a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4908      	ldr	r1, [pc, #32]	@ (8004a30 <__NVIC_SetPriority+0x50>)
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	3b04      	subs	r3, #4
 8004a18:	0112      	lsls	r2, r2, #4
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	761a      	strb	r2, [r3, #24]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000e100 	.word	0xe000e100
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b089      	sub	sp, #36	@ 0x24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f1c3 0307 	rsb	r3, r3, #7
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	bf28      	it	cs
 8004a52:	2304      	movcs	r3, #4
 8004a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2b06      	cmp	r3, #6
 8004a5c:	d902      	bls.n	8004a64 <NVIC_EncodePriority+0x30>
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3b03      	subs	r3, #3
 8004a62:	e000      	b.n	8004a66 <NVIC_EncodePriority+0x32>
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43da      	mvns	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	401a      	ands	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	43d9      	mvns	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	4313      	orrs	r3, r2
         );
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aac:	d301      	bcc.n	8004ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e00f      	b.n	8004ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8004adc <SysTick_Config+0x40>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aba:	210f      	movs	r1, #15
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	f7ff ff8e 	bl	80049e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <SysTick_Config+0x40>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aca:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <SysTick_Config+0x40>)
 8004acc:	2207      	movs	r2, #7
 8004ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	e000e010 	.word	0xe000e010

08004ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ff29 	bl	8004940 <__NVIC_SetPriorityGrouping>
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b08:	f7ff ff3e 	bl	8004988 <__NVIC_GetPriorityGrouping>
 8004b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7ff ff8e 	bl	8004a34 <NVIC_EncodePriority>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff5d 	bl	80049e0 <__NVIC_SetPriority>
}
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	4603      	mov	r3, r0
 8004b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff ff31 	bl	80049a4 <__NVIC_EnableIRQ>
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ffa2 	bl	8004a9c <SysTick_Config>
 8004b58:	4603      	mov	r3, r0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e00e      	b.n	8004b92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	795b      	ldrb	r3, [r3, #5]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d105      	bne.n	8004b8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fc fd99 	bl	80016bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ba8:	f7ff febe 	bl	8004928 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e099      	b.n	8004cec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bd8:	e00f      	b.n	8004bfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bda:	f7ff fea5 	bl	8004928 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d908      	bls.n	8004bfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e078      	b.n	8004cec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e8      	bne.n	8004bda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4b38      	ldr	r3, [pc, #224]	@ (8004cf4 <HAL_DMA_Init+0x158>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d107      	bne.n	8004c64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d117      	bne.n	8004cbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb01 	bl	80052a8 <DMA_CheckFifoParam>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e016      	b.n	8004cec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fab8 	bl	800523c <DMA_CalcBaseAndBitshift>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	223f      	movs	r2, #63	@ 0x3f
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	f010803f 	.word	0xf010803f

08004cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_DMA_Start_IT+0x26>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e040      	b.n	8004da0 <HAL_DMA_Start_IT+0xa8>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d12f      	bne.n	8004d92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa4a 	bl	80051e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	223f      	movs	r2, #63	@ 0x3f
 8004d52:	409a      	lsls	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0216 	orr.w	r2, r2, #22
 8004d66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e005      	b.n	8004d9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004db6:	f7ff fdb7 	bl	8004928 <HAL_GetTick>
 8004dba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d008      	beq.n	8004dda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e052      	b.n	8004e80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0216 	bic.w	r2, r2, #22
 8004de8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004df8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_DMA_Abort+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0208 	bic.w	r2, r2, #8
 8004e18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e2a:	e013      	b.n	8004e54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e2c:	f7ff fd7c 	bl	8004928 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d90c      	bls.n	8004e54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2203      	movs	r2, #3
 8004e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e015      	b.n	8004e80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e4      	bne.n	8004e2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	223f      	movs	r2, #63	@ 0x3f
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2280      	movs	r2, #128	@ 0x80
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00c      	b.n	8004ec0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2205      	movs	r2, #5
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8005114 <HAL_DMA_IRQHandler+0x248>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a8e      	ldr	r2, [pc, #568]	@ (8005118 <HAL_DMA_IRQHandler+0x24c>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	0a9b      	lsrs	r3, r3, #10
 8004ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01a      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	2208      	movs	r2, #8
 8004f26:	409a      	lsls	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	f043 0201 	orr.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	f043 0202 	orr.w	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	2204      	movs	r2, #4
 8004f74:	409a      	lsls	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d012      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f90:	2204      	movs	r2, #4
 8004f92:	409a      	lsls	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	2210      	movs	r2, #16
 8004faa:	409a      	lsls	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d043      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d03c      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d018      	beq.n	800500e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d024      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
 8004ffa:	e01f      	b.n	800503c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
 800500c:	e016      	b.n	800503c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0208 	bic.w	r2, r2, #8
 800502a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005040:	2220      	movs	r2, #32
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 808f 	beq.w	800516c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8087 	beq.w	800516c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	2220      	movs	r2, #32
 8005064:	409a      	lsls	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b05      	cmp	r3, #5
 8005074:	d136      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0216 	bic.w	r2, r2, #22
 8005084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_DMA_IRQHandler+0x1da>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0208 	bic.w	r2, r2, #8
 80050b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ba:	223f      	movs	r2, #63	@ 0x3f
 80050bc:	409a      	lsls	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d07e      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
        }
        return;
 80050e2:	e079      	b.n	80051d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005104:	2b00      	cmp	r3, #0
 8005106:	d031      	beq.n	800516c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
 8005110:	e02c      	b.n	800516c <HAL_DMA_IRQHandler+0x2a0>
 8005112:	bf00      	nop
 8005114:	20000004 	.word	0x20000004
 8005118:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d023      	beq.n	800516c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
 800512c:	e01e      	b.n	800516c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0210 	bic.w	r2, r2, #16
 800514a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	2b00      	cmp	r3, #0
 8005172:	d032      	beq.n	80051da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d022      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2205      	movs	r2, #5
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	3301      	adds	r3, #1
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d307      	bcc.n	80051b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f2      	bne.n	8005198 <HAL_DMA_IRQHandler+0x2cc>
 80051b2:	e000      	b.n	80051b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
 80051d6:	e000      	b.n	80051da <HAL_DMA_IRQHandler+0x30e>
        return;
 80051d8:	bf00      	nop
    }
  }
}
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b40      	cmp	r3, #64	@ 0x40
 800520c:	d108      	bne.n	8005220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800521e:	e007      	b.n	8005230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	3b10      	subs	r3, #16
 800524c:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <DMA_CalcBaseAndBitshift+0x64>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005256:	4a13      	ldr	r2, [pc, #76]	@ (80052a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b03      	cmp	r3, #3
 8005268:	d909      	bls.n	800527e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	1d1a      	adds	r2, r3, #4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	659a      	str	r2, [r3, #88]	@ 0x58
 800527c:	e007      	b.n	800528e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	aaaaaaab 	.word	0xaaaaaaab
 80052a4:	08020cd8 	.word	0x08020cd8

080052a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11f      	bne.n	8005302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d856      	bhi.n	8005376 <DMA_CheckFifoParam+0xce>
 80052c8:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <DMA_CheckFifoParam+0x28>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080052f3 	.word	0x080052f3
 80052d8:	080052e1 	.word	0x080052e1
 80052dc:	08005377 	.word	0x08005377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d046      	beq.n	800537a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f0:	e043      	b.n	800537a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052fa:	d140      	bne.n	800537e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005300:	e03d      	b.n	800537e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800530a:	d121      	bne.n	8005350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b03      	cmp	r3, #3
 8005310:	d837      	bhi.n	8005382 <DMA_CheckFifoParam+0xda>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <DMA_CheckFifoParam+0x70>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005329 	.word	0x08005329
 800531c:	0800532f 	.word	0x0800532f
 8005320:	08005329 	.word	0x08005329
 8005324:	08005341 	.word	0x08005341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e030      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d025      	beq.n	8005386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533e:	e022      	b.n	8005386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005348:	d11f      	bne.n	800538a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800534e:	e01c      	b.n	800538a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d903      	bls.n	800535e <DMA_CheckFifoParam+0xb6>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d003      	beq.n	8005364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800535c:	e018      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      break;
 8005362:	e015      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      break;
 8005374:	e00b      	b.n	800538e <DMA_CheckFifoParam+0xe6>
      break;
 8005376:	bf00      	nop
 8005378:	e00a      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 800537a:	bf00      	nop
 800537c:	e008      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 800537e:	bf00      	nop
 8005380:	e006      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;   
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 800538e:	bf00      	nop
    }
  } 
  
  return status; 
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	@ 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e16b      	b.n	8005694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053bc:	2201      	movs	r2, #1
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	f040 815a 	bne.w	800568e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d005      	beq.n	80053f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d130      	bne.n	8005454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2203      	movs	r2, #3
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4313      	orrs	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005428:	2201      	movs	r2, #1
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 0201 	and.w	r2, r3, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d017      	beq.n	8005490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	2203      	movs	r2, #3
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d123      	bne.n	80054e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	08da      	lsrs	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3208      	adds	r2, #8
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	220f      	movs	r2, #15
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	08da      	lsrs	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3208      	adds	r2, #8
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	2203      	movs	r2, #3
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4013      	ands	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0203 	and.w	r2, r3, #3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80b4 	beq.w	800568e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b60      	ldr	r3, [pc, #384]	@ (80056ac <HAL_GPIO_Init+0x30c>)
 800552c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552e:	4a5f      	ldr	r2, [pc, #380]	@ (80056ac <HAL_GPIO_Init+0x30c>)
 8005530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005534:	6453      	str	r3, [r2, #68]	@ 0x44
 8005536:	4b5d      	ldr	r3, [pc, #372]	@ (80056ac <HAL_GPIO_Init+0x30c>)
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005542:	4a5b      	ldr	r2, [pc, #364]	@ (80056b0 <HAL_GPIO_Init+0x310>)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	089b      	lsrs	r3, r3, #2
 8005548:	3302      	adds	r3, #2
 800554a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	220f      	movs	r2, #15
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a52      	ldr	r2, [pc, #328]	@ (80056b4 <HAL_GPIO_Init+0x314>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02b      	beq.n	80055c6 <HAL_GPIO_Init+0x226>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a51      	ldr	r2, [pc, #324]	@ (80056b8 <HAL_GPIO_Init+0x318>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d025      	beq.n	80055c2 <HAL_GPIO_Init+0x222>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a50      	ldr	r2, [pc, #320]	@ (80056bc <HAL_GPIO_Init+0x31c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01f      	beq.n	80055be <HAL_GPIO_Init+0x21e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a4f      	ldr	r2, [pc, #316]	@ (80056c0 <HAL_GPIO_Init+0x320>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d019      	beq.n	80055ba <HAL_GPIO_Init+0x21a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a4e      	ldr	r2, [pc, #312]	@ (80056c4 <HAL_GPIO_Init+0x324>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_GPIO_Init+0x216>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a4d      	ldr	r2, [pc, #308]	@ (80056c8 <HAL_GPIO_Init+0x328>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00d      	beq.n	80055b2 <HAL_GPIO_Init+0x212>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a4c      	ldr	r2, [pc, #304]	@ (80056cc <HAL_GPIO_Init+0x32c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <HAL_GPIO_Init+0x20e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a4b      	ldr	r2, [pc, #300]	@ (80056d0 <HAL_GPIO_Init+0x330>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_GPIO_Init+0x20a>
 80055a6:	2307      	movs	r3, #7
 80055a8:	e00e      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055aa:	2308      	movs	r3, #8
 80055ac:	e00c      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055ae:	2306      	movs	r3, #6
 80055b0:	e00a      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055b2:	2305      	movs	r3, #5
 80055b4:	e008      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055b6:	2304      	movs	r3, #4
 80055b8:	e006      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055ba:	2303      	movs	r3, #3
 80055bc:	e004      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055be:	2302      	movs	r3, #2
 80055c0:	e002      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055c6:	2300      	movs	r3, #0
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f002 0203 	and.w	r2, r2, #3
 80055ce:	0092      	lsls	r2, r2, #2
 80055d0:	4093      	lsls	r3, r2
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d8:	4935      	ldr	r1, [pc, #212]	@ (80056b0 <HAL_GPIO_Init+0x310>)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	3302      	adds	r3, #2
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055e6:	4b3b      	ldr	r3, [pc, #236]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800560a:	4a32      	ldr	r2, [pc, #200]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005610:	4b30      	ldr	r3, [pc, #192]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005634:	4a27      	ldr	r2, [pc, #156]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800563a:	4b26      	ldr	r3, [pc, #152]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800565e:	4a1d      	ldr	r2, [pc, #116]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005664:	4b1b      	ldr	r3, [pc, #108]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005688:	4a12      	ldr	r2, [pc, #72]	@ (80056d4 <HAL_GPIO_Init+0x334>)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	f67f ae90 	bls.w	80053bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3724      	adds	r7, #36	@ 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40020000 	.word	0x40020000
 80056b8:	40020400 	.word	0x40020400
 80056bc:	40020800 	.word	0x40020800
 80056c0:	40020c00 	.word	0x40020c00
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40021400 	.word	0x40021400
 80056cc:	40021800 	.word	0x40021800
 80056d0:	40021c00 	.word	0x40021c00
 80056d4:	40013c00 	.word	0x40013c00

080056d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
 80056e4:	4613      	mov	r3, r2
 80056e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056e8:	787b      	ldrb	r3, [r7, #1]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056ee:	887a      	ldrh	r2, [r7, #2]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056f4:	e003      	b.n	80056fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	041a      	lsls	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	619a      	str	r2, [r3, #24]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e12b      	b.n	8005976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fb ffe4 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2224      	movs	r2, #36	@ 0x24
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800575e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800576e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005770:	f001 fb2e 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 8005774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4a81      	ldr	r2, [pc, #516]	@ (8005980 <HAL_I2C_Init+0x274>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d807      	bhi.n	8005790 <HAL_I2C_Init+0x84>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a80      	ldr	r2, [pc, #512]	@ (8005984 <HAL_I2C_Init+0x278>)
 8005784:	4293      	cmp	r3, r2
 8005786:	bf94      	ite	ls
 8005788:	2301      	movls	r3, #1
 800578a:	2300      	movhi	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e006      	b.n	800579e <HAL_I2C_Init+0x92>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4a7d      	ldr	r2, [pc, #500]	@ (8005988 <HAL_I2C_Init+0x27c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	bf94      	ite	ls
 8005798:	2301      	movls	r3, #1
 800579a:	2300      	movhi	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e0e7      	b.n	8005976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a78      	ldr	r2, [pc, #480]	@ (800598c <HAL_I2C_Init+0x280>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	0c9b      	lsrs	r3, r3, #18
 80057b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005980 <HAL_I2C_Init+0x274>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d802      	bhi.n	80057e0 <HAL_I2C_Init+0xd4>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	3301      	adds	r3, #1
 80057de:	e009      	b.n	80057f4 <HAL_I2C_Init+0xe8>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	4a69      	ldr	r2, [pc, #420]	@ (8005990 <HAL_I2C_Init+0x284>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	099b      	lsrs	r3, r3, #6
 80057f2:	3301      	adds	r3, #1
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	495c      	ldr	r1, [pc, #368]	@ (8005980 <HAL_I2C_Init+0x274>)
 8005810:	428b      	cmp	r3, r1
 8005812:	d819      	bhi.n	8005848 <HAL_I2C_Init+0x13c>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	1e59      	subs	r1, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005822:	1c59      	adds	r1, r3, #1
 8005824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005828:	400b      	ands	r3, r1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_I2C_Init+0x138>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1e59      	subs	r1, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	fbb1 f3f3 	udiv	r3, r1, r3
 800583c:	3301      	adds	r3, #1
 800583e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005842:	e051      	b.n	80058e8 <HAL_I2C_Init+0x1dc>
 8005844:	2304      	movs	r3, #4
 8005846:	e04f      	b.n	80058e8 <HAL_I2C_Init+0x1dc>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d111      	bne.n	8005874 <HAL_I2C_Init+0x168>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	1e58      	subs	r0, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	440b      	add	r3, r1
 800585e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005862:	3301      	adds	r3, #1
 8005864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005868:	2b00      	cmp	r3, #0
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e012      	b.n	800589a <HAL_I2C_Init+0x18e>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1e58      	subs	r0, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	0099      	lsls	r1, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	fbb0 f3f3 	udiv	r3, r0, r3
 800588a:	3301      	adds	r3, #1
 800588c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005890:	2b00      	cmp	r3, #0
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_I2C_Init+0x196>
 800589e:	2301      	movs	r3, #1
 80058a0:	e022      	b.n	80058e8 <HAL_I2C_Init+0x1dc>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10e      	bne.n	80058c8 <HAL_I2C_Init+0x1bc>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1e58      	subs	r0, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6859      	ldr	r1, [r3, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	440b      	add	r3, r1
 80058b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058bc:	3301      	adds	r3, #1
 80058be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c6:	e00f      	b.n	80058e8 <HAL_I2C_Init+0x1dc>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1e58      	subs	r0, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	0099      	lsls	r1, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	fbb0 f3f3 	udiv	r3, r0, r3
 80058de:	3301      	adds	r3, #1
 80058e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	6809      	ldr	r1, [r1, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6911      	ldr	r1, [r2, #16]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68d2      	ldr	r2, [r2, #12]
 8005922:	4311      	orrs	r1, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	430b      	orrs	r3, r1
 800592a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	000186a0 	.word	0x000186a0
 8005984:	001e847f 	.word	0x001e847f
 8005988:	003d08ff 	.word	0x003d08ff
 800598c:	431bde83 	.word	0x431bde83
 8005990:	10624dd3 	.word	0x10624dd3

08005994 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e128      	b.n	8005bf8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a90      	ldr	r2, [pc, #576]	@ (8005c00 <HAL_I2S_Init+0x26c>)
 80059be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fb fee5 	bl	8001790 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80059dc:	f023 030f 	bic.w	r3, r3, #15
 80059e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2202      	movs	r2, #2
 80059e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d060      	beq.n	8005ab4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80059fa:	2310      	movs	r3, #16
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e001      	b.n	8005a04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a00:	2320      	movs	r3, #32
 8005a02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d802      	bhi.n	8005a12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f001 fae6 	bl	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a18:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a22:	d125      	bne.n	8005a70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	461a      	mov	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	3305      	adds	r3, #5
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	e01f      	b.n	8005a8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	3305      	adds	r3, #5
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e00e      	b.n	8005a8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	461a      	mov	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	3305      	adds	r3, #5
 8005a8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4a5c      	ldr	r2, [pc, #368]	@ (8005c04 <HAL_I2S_Init+0x270>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e003      	b.n	8005abc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d902      	bls.n	8005ac8 <HAL_I2S_Init+0x134>
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2bff      	cmp	r3, #255	@ 0xff
 8005ac6:	d907      	bls.n	8005ad8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005acc:	f043 0210 	orr.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e08f      	b.n	8005bf8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	ea42 0103 	orr.w	r1, r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005af6:	f023 030f 	bic.w	r3, r3, #15
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6851      	ldr	r1, [r2, #4]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6892      	ldr	r2, [r2, #8]
 8005b02:	4311      	orrs	r1, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	68d2      	ldr	r2, [r2, #12]
 8005b08:	4311      	orrs	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6992      	ldr	r2, [r2, #24]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d161      	bne.n	8005be8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a38      	ldr	r2, [pc, #224]	@ (8005c08 <HAL_I2S_Init+0x274>)
 8005b28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a37      	ldr	r2, [pc, #220]	@ (8005c0c <HAL_I2S_Init+0x278>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d101      	bne.n	8005b38 <HAL_I2S_Init+0x1a4>
 8005b34:	4b36      	ldr	r3, [pc, #216]	@ (8005c10 <HAL_I2S_Init+0x27c>)
 8005b36:	e001      	b.n	8005b3c <HAL_I2S_Init+0x1a8>
 8005b38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	4932      	ldr	r1, [pc, #200]	@ (8005c0c <HAL_I2S_Init+0x278>)
 8005b44:	428a      	cmp	r2, r1
 8005b46:	d101      	bne.n	8005b4c <HAL_I2S_Init+0x1b8>
 8005b48:	4a31      	ldr	r2, [pc, #196]	@ (8005c10 <HAL_I2S_Init+0x27c>)
 8005b4a:	e001      	b.n	8005b50 <HAL_I2S_Init+0x1bc>
 8005b4c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005b50:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b54:	f023 030f 	bic.w	r3, r3, #15
 8005b58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c0c <HAL_I2S_Init+0x278>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d101      	bne.n	8005b68 <HAL_I2S_Init+0x1d4>
 8005b64:	4b2a      	ldr	r3, [pc, #168]	@ (8005c10 <HAL_I2S_Init+0x27c>)
 8005b66:	e001      	b.n	8005b6c <HAL_I2S_Init+0x1d8>
 8005b68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a25      	ldr	r2, [pc, #148]	@ (8005c0c <HAL_I2S_Init+0x278>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <HAL_I2S_Init+0x1ea>
 8005b7a:	4b25      	ldr	r3, [pc, #148]	@ (8005c10 <HAL_I2S_Init+0x27c>)
 8005b7c:	e001      	b.n	8005b82 <HAL_I2S_Init+0x1ee>
 8005b7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b8e:	d003      	beq.n	8005b98 <HAL_I2S_Init+0x204>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	e001      	b.n	8005ba4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	897b      	ldrh	r3, [r7, #10]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005bd0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005c0c <HAL_I2S_Init+0x278>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <HAL_I2S_Init+0x24c>
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_I2S_Init+0x27c>)
 8005bde:	e001      	b.n	8005be4 <HAL_I2S_Init+0x250>
 8005be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be4:	897a      	ldrh	r2, [r7, #10]
 8005be6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	08005f29 	.word	0x08005f29
 8005c04:	cccccccd 	.word	0xcccccccd
 8005c08:	0800603d 	.word	0x0800603d
 8005c0c:	40003800 	.word	0x40003800
 8005c10:	40003400 	.word	0x40003400

08005c14 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_I2S_Receive_DMA+0x1a>
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e09d      	b.n	8005d6e <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e095      	b.n	8005d6e <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2S_Receive_DMA+0x3e>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e08d      	b.n	8005d6e <HAL_I2S_Receive_DMA+0x15a>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d002      	beq.n	8005c86 <HAL_I2S_Receive_DMA+0x72>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d10a      	bne.n	8005c9c <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	865a      	strh	r2, [r3, #50]	@ 0x32
 8005c9a:	e005      	b.n	8005ca8 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	4a32      	ldr	r2, [pc, #200]	@ (8005d78 <HAL_I2S_Receive_DMA+0x164>)
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	4a31      	ldr	r2, [pc, #196]	@ (8005d7c <HAL_I2S_Receive_DMA+0x168>)
 8005cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbc:	4a30      	ldr	r2, [pc, #192]	@ (8005d80 <HAL_I2S_Receive_DMA+0x16c>)
 8005cbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cce:	d10a      	bne.n	8005ce6 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005cfc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005cfe:	f7fe fffb 	bl	8004cf8 <HAL_DMA_Start_IT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0c:	f043 0208 	orr.w	r2, r3, #8
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e022      	b.n	8005d6e <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d107      	bne.n	8005d4e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0201 	orr.w	r2, r2, #1
 8005d4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d6a:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	08005e07 	.word	0x08005e07
 8005d7c:	08005dc5 	.word	0x08005dc5
 8005d80:	08005e23 	.word	0x08005e23

08005d84 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10e      	bne.n	8005df8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7fb fc1b 	bl	8001634 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fb fbf7 	bl	8001608 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0203 	bic.w	r2, r2, #3
 8005e3e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e58:	f043 0208 	orr.w	r2, r3, #8
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff ffa5 	bl	8005db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10e      	bne.n	8005ec2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005eb2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff6d 	bl	8005d9c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	b292      	uxth	r2, r2
 8005ede:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee4:	1c9a      	adds	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10e      	bne.n	8005f20 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fb8a 	bl	8001634 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d13a      	bne.n	8005fba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d109      	bne.n	8005f62 <I2S_IRQHandler+0x3a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d102      	bne.n	8005f62 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff ffb4 	bl	8005eca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d126      	bne.n	8005fba <I2S_IRQHandler+0x92>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d11f      	bne.n	8005fba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f88:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fac:	f043 0202 	orr.w	r2, r3, #2
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fefb 	bl	8005db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d136      	bne.n	8006034 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d109      	bne.n	8005fe4 <I2S_IRQHandler+0xbc>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fda:	2b80      	cmp	r3, #128	@ 0x80
 8005fdc:	d102      	bne.n	8005fe4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff ff45 	bl	8005e6e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d122      	bne.n	8006034 <I2S_IRQHandler+0x10c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d11b      	bne.n	8006034 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800600a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	f043 0204 	orr.w	r2, r3, #4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff febe 	bl	8005db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006034:	bf00      	nop
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a92      	ldr	r2, [pc, #584]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006056:	4b92      	ldr	r3, [pc, #584]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006058:	e001      	b.n	800605e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800605a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a8b      	ldr	r2, [pc, #556]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d101      	bne.n	8006078 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006074:	4b8a      	ldr	r3, [pc, #552]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006076:	e001      	b.n	800607c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006088:	d004      	beq.n	8006094 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 8099 	bne.w	80061c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d107      	bne.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f925 	bl	80062f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d107      	bne.n	80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9c8 	bl	8006458 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d13a      	bne.n	8006148 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d035      	beq.n	8006148 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a6e      	ldr	r2, [pc, #440]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80060e6:	4b6e      	ldr	r3, [pc, #440]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060e8:	e001      	b.n	80060ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80060ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4969      	ldr	r1, [pc, #420]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f6:	428b      	cmp	r3, r1
 80060f8:	d101      	bne.n	80060fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80060fa:	4b69      	ldr	r3, [pc, #420]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060fc:	e001      	b.n	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80060fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006102:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006106:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006116:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613a:	f043 0202 	orr.w	r2, r3, #2
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fe34 	bl	8005db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b08      	cmp	r3, #8
 8006150:	f040 80c3 	bne.w	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80bd 	beq.w	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800616e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a49      	ldr	r2, [pc, #292]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800617a:	4b49      	ldr	r3, [pc, #292]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800617c:	e001      	b.n	8006182 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800617e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4944      	ldr	r1, [pc, #272]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800618a:	428b      	cmp	r3, r1
 800618c:	d101      	bne.n	8006192 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800618e:	4b44      	ldr	r3, [pc, #272]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006190:	e001      	b.n	8006196 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006196:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800619a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fdf6 	bl	8005db0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061c4:	e089      	b.n	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d107      	bne.n	80061e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f8be 	bl	800635c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d107      	bne.n	80061fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8fd 	bl	80063f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d12f      	bne.n	8006264 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d02a      	beq.n	8006264 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800621c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1e      	ldr	r2, [pc, #120]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006228:	4b1d      	ldr	r3, [pc, #116]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800622a:	e001      	b.n	8006230 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800622c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4919      	ldr	r1, [pc, #100]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006238:	428b      	cmp	r3, r1
 800623a:	d101      	bne.n	8006240 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800623c:	4b18      	ldr	r3, [pc, #96]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800623e:	e001      	b.n	8006244 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006244:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006248:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006256:	f043 0202 	orr.w	r2, r3, #2
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fda6 	bl	8005db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b08      	cmp	r3, #8
 800626c:	d136      	bne.n	80062dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d031      	beq.n	80062dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a07      	ldr	r2, [pc, #28]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006282:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006284:	e001      	b.n	800628a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006286:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4902      	ldr	r1, [pc, #8]	@ (800629c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006292:	428b      	cmp	r3, r1
 8006294:	d106      	bne.n	80062a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006296:	4b02      	ldr	r3, [pc, #8]	@ (80062a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006298:	e006      	b.n	80062a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800629a:	bf00      	nop
 800629c:	40003800 	.word	0x40003800
 80062a0:	40003400 	.word	0x40003400
 80062a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ca:	f043 0204 	orr.w	r2, r3, #4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fd6c 	bl	8005db0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062d8:	e000      	b.n	80062dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062da:	bf00      	nop
}
 80062dc:	bf00      	nop
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	1c99      	adds	r1, r3, #2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6251      	str	r1, [r2, #36]	@ 0x24
 800630a:	881a      	ldrh	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d113      	bne.n	8006352 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006338:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ffc9 	bl	80062e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	1c99      	adds	r1, r3, #2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6251      	str	r1, [r2, #36]	@ 0x24
 800636e:	8819      	ldrh	r1, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1d      	ldr	r2, [pc, #116]	@ (80063ec <I2SEx_TxISR_I2SExt+0x90>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <I2SEx_TxISR_I2SExt+0x22>
 800637a:	4b1d      	ldr	r3, [pc, #116]	@ (80063f0 <I2SEx_TxISR_I2SExt+0x94>)
 800637c:	e001      	b.n	8006382 <I2SEx_TxISR_I2SExt+0x26>
 800637e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006382:	460a      	mov	r2, r1
 8006384:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d121      	bne.n	80063e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a12      	ldr	r2, [pc, #72]	@ (80063ec <I2SEx_TxISR_I2SExt+0x90>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <I2SEx_TxISR_I2SExt+0x50>
 80063a8:	4b11      	ldr	r3, [pc, #68]	@ (80063f0 <I2SEx_TxISR_I2SExt+0x94>)
 80063aa:	e001      	b.n	80063b0 <I2SEx_TxISR_I2SExt+0x54>
 80063ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	490d      	ldr	r1, [pc, #52]	@ (80063ec <I2SEx_TxISR_I2SExt+0x90>)
 80063b8:	428b      	cmp	r3, r1
 80063ba:	d101      	bne.n	80063c0 <I2SEx_TxISR_I2SExt+0x64>
 80063bc:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <I2SEx_TxISR_I2SExt+0x94>)
 80063be:	e001      	b.n	80063c4 <I2SEx_TxISR_I2SExt+0x68>
 80063c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d106      	bne.n	80063e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ff81 	bl	80062e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40003800 	.word	0x40003800
 80063f0:	40003400 	.word	0x40003400

080063f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68d8      	ldr	r0, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006406:	1c99      	adds	r1, r3, #2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800640c:	b282      	uxth	r2, r0
 800640e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d113      	bne.n	8006450 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006436:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ff4a 	bl	80062e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a20      	ldr	r2, [pc, #128]	@ (80064e8 <I2SEx_RxISR_I2SExt+0x90>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <I2SEx_RxISR_I2SExt+0x16>
 800646a:	4b20      	ldr	r3, [pc, #128]	@ (80064ec <I2SEx_RxISR_I2SExt+0x94>)
 800646c:	e001      	b.n	8006472 <I2SEx_RxISR_I2SExt+0x1a>
 800646e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006472:	68d8      	ldr	r0, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	1c99      	adds	r1, r3, #2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800647e:	b282      	uxth	r2, r0
 8006480:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d121      	bne.n	80064de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a12      	ldr	r2, [pc, #72]	@ (80064e8 <I2SEx_RxISR_I2SExt+0x90>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d101      	bne.n	80064a8 <I2SEx_RxISR_I2SExt+0x50>
 80064a4:	4b11      	ldr	r3, [pc, #68]	@ (80064ec <I2SEx_RxISR_I2SExt+0x94>)
 80064a6:	e001      	b.n	80064ac <I2SEx_RxISR_I2SExt+0x54>
 80064a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	490d      	ldr	r1, [pc, #52]	@ (80064e8 <I2SEx_RxISR_I2SExt+0x90>)
 80064b4:	428b      	cmp	r3, r1
 80064b6:	d101      	bne.n	80064bc <I2SEx_RxISR_I2SExt+0x64>
 80064b8:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <I2SEx_RxISR_I2SExt+0x94>)
 80064ba:	e001      	b.n	80064c0 <I2SEx_RxISR_I2SExt+0x68>
 80064bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff03 	bl	80062e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40003800 	.word	0x40003800
 80064ec:	40003400 	.word	0x40003400

080064f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e267      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d075      	beq.n	80065fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800650e:	4b88      	ldr	r3, [pc, #544]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 030c 	and.w	r3, r3, #12
 8006516:	2b04      	cmp	r3, #4
 8006518:	d00c      	beq.n	8006534 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800651a:	4b85      	ldr	r3, [pc, #532]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006522:	2b08      	cmp	r3, #8
 8006524:	d112      	bne.n	800654c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006526:	4b82      	ldr	r3, [pc, #520]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800652e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006532:	d10b      	bne.n	800654c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006534:	4b7e      	ldr	r3, [pc, #504]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d05b      	beq.n	80065f8 <HAL_RCC_OscConfig+0x108>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d157      	bne.n	80065f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e242      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006554:	d106      	bne.n	8006564 <HAL_RCC_OscConfig+0x74>
 8006556:	4b76      	ldr	r3, [pc, #472]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a75      	ldr	r2, [pc, #468]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e01d      	b.n	80065a0 <HAL_RCC_OscConfig+0xb0>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800656c:	d10c      	bne.n	8006588 <HAL_RCC_OscConfig+0x98>
 800656e:	4b70      	ldr	r3, [pc, #448]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a6f      	ldr	r2, [pc, #444]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	4b6d      	ldr	r3, [pc, #436]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a6c      	ldr	r2, [pc, #432]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e00b      	b.n	80065a0 <HAL_RCC_OscConfig+0xb0>
 8006588:	4b69      	ldr	r3, [pc, #420]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a68      	ldr	r2, [pc, #416]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800658e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	4b66      	ldr	r3, [pc, #408]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a65      	ldr	r2, [pc, #404]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800659a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800659e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d013      	beq.n	80065d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a8:	f7fe f9be 	bl	8004928 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b0:	f7fe f9ba 	bl	8004928 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b64      	cmp	r3, #100	@ 0x64
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e207      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0xc0>
 80065ce:	e014      	b.n	80065fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fe f9aa 	bl	8004928 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fe f9a6 	bl	8004928 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	@ 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e1f3      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ea:	4b51      	ldr	r3, [pc, #324]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0xe8>
 80065f6:	e000      	b.n	80065fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d063      	beq.n	80066ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006606:	4b4a      	ldr	r3, [pc, #296]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006612:	4b47      	ldr	r3, [pc, #284]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800661a:	2b08      	cmp	r3, #8
 800661c:	d11c      	bne.n	8006658 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800661e:	4b44      	ldr	r3, [pc, #272]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d116      	bne.n	8006658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800662a:	4b41      	ldr	r3, [pc, #260]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_RCC_OscConfig+0x152>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d001      	beq.n	8006642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e1c7      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006642:	4b3b      	ldr	r3, [pc, #236]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4937      	ldr	r1, [pc, #220]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006652:	4313      	orrs	r3, r2
 8006654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006656:	e03a      	b.n	80066ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d020      	beq.n	80066a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006660:	4b34      	ldr	r3, [pc, #208]	@ (8006734 <HAL_RCC_OscConfig+0x244>)
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006666:	f7fe f95f 	bl	8004928 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666e:	f7fe f95b 	bl	8004928 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e1a8      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006680:	4b2b      	ldr	r3, [pc, #172]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668c:	4b28      	ldr	r3, [pc, #160]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4925      	ldr	r1, [pc, #148]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 800669c:	4313      	orrs	r3, r2
 800669e:	600b      	str	r3, [r1, #0]
 80066a0:	e015      	b.n	80066ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a2:	4b24      	ldr	r3, [pc, #144]	@ (8006734 <HAL_RCC_OscConfig+0x244>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a8:	f7fe f93e 	bl	8004928 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b0:	f7fe f93a 	bl	8004928 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e187      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d036      	beq.n	8006748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066e2:	4b15      	ldr	r3, [pc, #84]	@ (8006738 <HAL_RCC_OscConfig+0x248>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e8:	f7fe f91e 	bl	8004928 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f0:	f7fe f91a 	bl	8004928 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e167      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006702:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <HAL_RCC_OscConfig+0x240>)
 8006704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0x200>
 800670e:	e01b      	b.n	8006748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006710:	4b09      	ldr	r3, [pc, #36]	@ (8006738 <HAL_RCC_OscConfig+0x248>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006716:	f7fe f907 	bl	8004928 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800671c:	e00e      	b.n	800673c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800671e:	f7fe f903 	bl	8004928 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d907      	bls.n	800673c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e150      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
 8006730:	40023800 	.word	0x40023800
 8006734:	42470000 	.word	0x42470000
 8006738:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673c:	4b88      	ldr	r3, [pc, #544]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800673e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ea      	bne.n	800671e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8097 	beq.w	8006884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800675a:	4b81      	ldr	r3, [pc, #516]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800675c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10f      	bne.n	8006786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006766:	2300      	movs	r3, #0
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	4b7d      	ldr	r3, [pc, #500]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	4a7c      	ldr	r2, [pc, #496]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 8006770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006774:	6413      	str	r3, [r2, #64]	@ 0x40
 8006776:	4b7a      	ldr	r3, [pc, #488]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006786:	4b77      	ldr	r3, [pc, #476]	@ (8006964 <HAL_RCC_OscConfig+0x474>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678e:	2b00      	cmp	r3, #0
 8006790:	d118      	bne.n	80067c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006792:	4b74      	ldr	r3, [pc, #464]	@ (8006964 <HAL_RCC_OscConfig+0x474>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a73      	ldr	r2, [pc, #460]	@ (8006964 <HAL_RCC_OscConfig+0x474>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679e:	f7fe f8c3 	bl	8004928 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fe f8bf 	bl	8004928 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e10c      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006964 <HAL_RCC_OscConfig+0x474>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d106      	bne.n	80067da <HAL_RCC_OscConfig+0x2ea>
 80067cc:	4b64      	ldr	r3, [pc, #400]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d0:	4a63      	ldr	r2, [pc, #396]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d8:	e01c      	b.n	8006814 <HAL_RCC_OscConfig+0x324>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d10c      	bne.n	80067fc <HAL_RCC_OscConfig+0x30c>
 80067e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067e8:	f043 0304 	orr.w	r3, r3, #4
 80067ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067fa:	e00b      	b.n	8006814 <HAL_RCC_OscConfig+0x324>
 80067fc:	4b58      	ldr	r3, [pc, #352]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80067fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006800:	4a57      	ldr	r2, [pc, #348]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	6713      	str	r3, [r2, #112]	@ 0x70
 8006808:	4b55      	ldr	r3, [pc, #340]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800680a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680c:	4a54      	ldr	r2, [pc, #336]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800680e:	f023 0304 	bic.w	r3, r3, #4
 8006812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d015      	beq.n	8006848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fe f884 	bl	8004928 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006822:	e00a      	b.n	800683a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006824:	f7fe f880 	bl	8004928 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e0cb      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800683a:	4b49      	ldr	r3, [pc, #292]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0ee      	beq.n	8006824 <HAL_RCC_OscConfig+0x334>
 8006846:	e014      	b.n	8006872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006848:	f7fe f86e 	bl	8004928 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684e:	e00a      	b.n	8006866 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006850:	f7fe f86a 	bl	8004928 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e0b5      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006866:	4b3e      	ldr	r3, [pc, #248]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1ee      	bne.n	8006850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d105      	bne.n	8006884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006878:	4b39      	ldr	r3, [pc, #228]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800687a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687c:	4a38      	ldr	r2, [pc, #224]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800687e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006882:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80a1 	beq.w	80069d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800688e:	4b34      	ldr	r3, [pc, #208]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b08      	cmp	r3, #8
 8006898:	d05c      	beq.n	8006954 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d141      	bne.n	8006926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a2:	4b31      	ldr	r3, [pc, #196]	@ (8006968 <HAL_RCC_OscConfig+0x478>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a8:	f7fe f83e 	bl	8004928 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fe f83a 	bl	8004928 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e087      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c2:	4b27      	ldr	r3, [pc, #156]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69da      	ldr	r2, [r3, #28]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	3b01      	subs	r3, #1
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	491b      	ldr	r1, [pc, #108]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006968 <HAL_RCC_OscConfig+0x478>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fe:	f7fe f813 	bl	8004928 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006906:	f7fe f80f 	bl	8004928 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e05c      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006918:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x416>
 8006924:	e054      	b.n	80069d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006926:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <HAL_RCC_OscConfig+0x478>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd fffc 	bl	8004928 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006934:	f7fd fff8 	bl	8004928 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e045      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <HAL_RCC_OscConfig+0x470>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x444>
 8006952:	e03d      	b.n	80069d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d107      	bne.n	800696c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e038      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
 8006960:	40023800 	.word	0x40023800
 8006964:	40007000 	.word	0x40007000
 8006968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800696c:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <HAL_RCC_OscConfig+0x4ec>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d028      	beq.n	80069cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006984:	429a      	cmp	r2, r3
 8006986:	d121      	bne.n	80069cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006992:	429a      	cmp	r2, r3
 8006994:	d11a      	bne.n	80069cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800699c:	4013      	ands	r3, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d111      	bne.n	80069cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	3b01      	subs	r3, #1
 80069b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800

080069e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0cc      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069f4:	4b68      	ldr	r3, [pc, #416]	@ (8006b98 <HAL_RCC_ClockConfig+0x1b8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d90c      	bls.n	8006a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a02:	4b65      	ldr	r3, [pc, #404]	@ (8006b98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0a:	4b63      	ldr	r3, [pc, #396]	@ (8006b98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d001      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0b8      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d020      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a34:	4b59      	ldr	r3, [pc, #356]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a58      	ldr	r2, [pc, #352]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a4c:	4b53      	ldr	r3, [pc, #332]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4a52      	ldr	r2, [pc, #328]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a58:	4b50      	ldr	r3, [pc, #320]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	494d      	ldr	r1, [pc, #308]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d044      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	4b47      	ldr	r3, [pc, #284]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d119      	bne.n	8006abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e07f      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d003      	beq.n	8006a9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d107      	bne.n	8006aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e06f      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aae:	4b3b      	ldr	r3, [pc, #236]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e067      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006abe:	4b37      	ldr	r3, [pc, #220]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f023 0203 	bic.w	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	4934      	ldr	r1, [pc, #208]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ad0:	f7fd ff2a 	bl	8004928 <HAL_GetTick>
 8006ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad6:	e00a      	b.n	8006aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad8:	f7fd ff26 	bl	8004928 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e04f      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aee:	4b2b      	ldr	r3, [pc, #172]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 020c 	and.w	r2, r3, #12
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d1eb      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b00:	4b25      	ldr	r3, [pc, #148]	@ (8006b98 <HAL_RCC_ClockConfig+0x1b8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d20c      	bcs.n	8006b28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b22      	ldr	r3, [pc, #136]	@ (8006b98 <HAL_RCC_ClockConfig+0x1b8>)
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b16:	4b20      	ldr	r3, [pc, #128]	@ (8006b98 <HAL_RCC_ClockConfig+0x1b8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e032      	b.n	8006b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b34:	4b19      	ldr	r3, [pc, #100]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4916      	ldr	r1, [pc, #88]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b52:	4b12      	ldr	r3, [pc, #72]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	490e      	ldr	r1, [pc, #56]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b66:	f000 f821 	bl	8006bac <HAL_RCC_GetSysClockFreq>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	091b      	lsrs	r3, r3, #4
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	490a      	ldr	r1, [pc, #40]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b78:	5ccb      	ldrb	r3, [r1, r3]
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	4a09      	ldr	r2, [pc, #36]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b82:	4b09      	ldr	r3, [pc, #36]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fd fe8a 	bl	80048a0 <HAL_InitTick>

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40023c00 	.word	0x40023c00
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	0800d7e8 	.word	0x0800d7e8
 8006ba4:	20000004 	.word	0x20000004
 8006ba8:	20000008 	.word	0x20000008

08006bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb0:	b094      	sub	sp, #80	@ 0x50
 8006bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc4:	4b79      	ldr	r3, [pc, #484]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 030c 	and.w	r3, r3, #12
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d00d      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x40>
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	f200 80e1 	bhi.w	8006d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x34>
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d003      	beq.n	8006be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bde:	e0db      	b.n	8006d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006be0:	4b73      	ldr	r3, [pc, #460]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006be4:	e0db      	b.n	8006d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006be6:	4b73      	ldr	r3, [pc, #460]	@ (8006db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006be8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bea:	e0d8      	b.n	8006d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bec:	4b6f      	ldr	r3, [pc, #444]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x200>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d063      	beq.n	8006cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c02:	4b6a      	ldr	r3, [pc, #424]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x200>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	2200      	movs	r2, #0
 8006c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c16:	2300      	movs	r3, #0
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c1e:	4622      	mov	r2, r4
 8006c20:	462b      	mov	r3, r5
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f04f 0100 	mov.w	r1, #0
 8006c2a:	0159      	lsls	r1, r3, #5
 8006c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c30:	0150      	lsls	r0, r2, #5
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4621      	mov	r1, r4
 8006c38:	1a51      	subs	r1, r2, r1
 8006c3a:	6139      	str	r1, [r7, #16]
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c50:	4659      	mov	r1, fp
 8006c52:	018b      	lsls	r3, r1, #6
 8006c54:	4651      	mov	r1, sl
 8006c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c5a:	4651      	mov	r1, sl
 8006c5c:	018a      	lsls	r2, r1, #6
 8006c5e:	4651      	mov	r1, sl
 8006c60:	ebb2 0801 	subs.w	r8, r2, r1
 8006c64:	4659      	mov	r1, fp
 8006c66:	eb63 0901 	sbc.w	r9, r3, r1
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c7e:	4690      	mov	r8, r2
 8006c80:	4699      	mov	r9, r3
 8006c82:	4623      	mov	r3, r4
 8006c84:	eb18 0303 	adds.w	r3, r8, r3
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	eb49 0303 	adc.w	r3, r9, r3
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	024b      	lsls	r3, r1, #9
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ca8:	4621      	mov	r1, r4
 8006caa:	024a      	lsls	r2, r1, #9
 8006cac:	4610      	mov	r0, r2
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cbc:	f7f9 ff74 	bl	8000ba8 <__aeabi_uldivmod>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc8:	e058      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cca:	4b38      	ldr	r3, [pc, #224]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x200>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	099b      	lsrs	r3, r3, #6
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cda:	623b      	str	r3, [r7, #32]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	f04f 0000 	mov.w	r0, #0
 8006cec:	f04f 0100 	mov.w	r1, #0
 8006cf0:	0159      	lsls	r1, r3, #5
 8006cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf6:	0150      	lsls	r0, r2, #5
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d02:	4649      	mov	r1, r9
 8006d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8006d20:	eb63 050b 	sbc.w	r5, r3, fp
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	00eb      	lsls	r3, r5, #3
 8006d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d32:	00e2      	lsls	r2, r4, #3
 8006d34:	4614      	mov	r4, r2
 8006d36:	461d      	mov	r5, r3
 8006d38:	4643      	mov	r3, r8
 8006d3a:	18e3      	adds	r3, r4, r3
 8006d3c:	603b      	str	r3, [r7, #0]
 8006d3e:	464b      	mov	r3, r9
 8006d40:	eb45 0303 	adc.w	r3, r5, r3
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d52:	4629      	mov	r1, r5
 8006d54:	028b      	lsls	r3, r1, #10
 8006d56:	4621      	mov	r1, r4
 8006d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	028a      	lsls	r2, r1, #10
 8006d60:	4610      	mov	r0, r2
 8006d62:	4619      	mov	r1, r3
 8006d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d66:	2200      	movs	r2, #0
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	61fa      	str	r2, [r7, #28]
 8006d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d70:	f7f9 ff1a 	bl	8000ba8 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4613      	mov	r3, r2
 8006d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	0c1b      	lsrs	r3, r3, #16
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	3301      	adds	r3, #1
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d96:	e002      	b.n	8006d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d98:	4b05      	ldr	r3, [pc, #20]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3750      	adds	r7, #80	@ 0x50
 8006da4:	46bd      	mov	sp, r7
 8006da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006daa:	bf00      	nop
 8006dac:	40023800 	.word	0x40023800
 8006db0:	00f42400 	.word	0x00f42400
 8006db4:	007a1200 	.word	0x007a1200

08006db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000004 	.word	0x20000004

08006dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dd4:	f7ff fff0 	bl	8006db8 <HAL_RCC_GetHCLKFreq>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	0a9b      	lsrs	r3, r3, #10
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	4903      	ldr	r1, [pc, #12]	@ (8006df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de6:	5ccb      	ldrb	r3, [r1, r3]
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40023800 	.word	0x40023800
 8006df4:	0800d7f8 	.word	0x0800d7f8

08006df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006dfc:	f7ff ffdc 	bl	8006db8 <HAL_RCC_GetHCLKFreq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	0b5b      	lsrs	r3, r3, #13
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	4903      	ldr	r1, [pc, #12]	@ (8006e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e0e:	5ccb      	ldrb	r3, [r1, r3]
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	0800d7f8 	.word	0x0800d7f8

08006e20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d035      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e48:	4b62      	ldr	r3, [pc, #392]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e4e:	f7fd fd6b 	bl	8004928 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e54:	e008      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e56:	f7fd fd67 	bl	8004928 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e0b0      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e68:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f0      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	019a      	lsls	r2, r3, #6
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	071b      	lsls	r3, r3, #28
 8006e80:	4955      	ldr	r1, [pc, #340]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e88:	4b52      	ldr	r3, [pc, #328]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e8e:	f7fd fd4b 	bl	8004928 <HAL_GetTick>
 8006e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e96:	f7fd fd47 	bl	8004928 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e090      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f0      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8083 	beq.w	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	4b44      	ldr	r3, [pc, #272]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	4a43      	ldr	r2, [pc, #268]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ed2:	4b41      	ldr	r3, [pc, #260]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ede:	4b3f      	ldr	r3, [pc, #252]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eea:	f7fd fd1d 	bl	8004928 <HAL_GetTick>
 8006eee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef2:	f7fd fd19 	bl	8004928 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e062      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006f04:	4b35      	ldr	r3, [pc, #212]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f10:	4b31      	ldr	r3, [pc, #196]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02f      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d028      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f38:	4b29      	ldr	r3, [pc, #164]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f3e:	4b28      	ldr	r3, [pc, #160]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f44:	4a24      	ldr	r2, [pc, #144]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f4a:	4b23      	ldr	r3, [pc, #140]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d114      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f56:	f7fd fce7 	bl	8004928 <HAL_GetTick>
 8006f5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f5e:	f7fd fce3 	bl	8004928 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e02a      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f74:	4b18      	ldr	r3, [pc, #96]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0ee      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f8c:	d10d      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f8e:	4b12      	ldr	r3, [pc, #72]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa2:	490d      	ldr	r1, [pc, #52]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	608b      	str	r3, [r1, #8]
 8006fa8:	e005      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006faa:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006fb4:	6093      	str	r3, [r2, #8]
 8006fb6:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc2:	4905      	ldr	r1, [pc, #20]	@ (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	42470068 	.word	0x42470068
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40007000 	.word	0x40007000
 8006fe0:	42470e40 	.word	0x42470e40

08006fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d13f      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007002:	4b24      	ldr	r3, [pc, #144]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007018:	d12f      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800701a:	4b1f      	ldr	r3, [pc, #124]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800701c:	617b      	str	r3, [r7, #20]
          break;
 800701e:	e02f      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007020:	4b1c      	ldr	r3, [pc, #112]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800702c:	d108      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800702e:	4b19      	ldr	r3, [pc, #100]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007036:	4a19      	ldr	r2, [pc, #100]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e007      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007040:	4b14      	ldr	r3, [pc, #80]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007048:	4a15      	ldr	r2, [pc, #84]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007050:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007064:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706a:	0f1b      	lsrs	r3, r3, #28
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	617b      	str	r3, [r7, #20]
          break;
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
          break;
 800707e:	bf00      	nop
        }
      }
      break;
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007082:	bf00      	nop
    }
  }
  return frequency;
 8007084:	697b      	ldr	r3, [r7, #20]
}
 8007086:	4618      	mov	r0, r3
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	00bb8000 	.word	0x00bb8000
 800709c:	007a1200 	.word	0x007a1200
 80070a0:	00f42400 	.word	0x00f42400

080070a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e07b      	b.n	80071ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d108      	bne.n	80070d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070c6:	d009      	beq.n	80070dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	61da      	str	r2, [r3, #28]
 80070ce:	e005      	b.n	80070dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fa fc06 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007160:	ea42 0103 	orr.w	r1, r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007168:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	0c1b      	lsrs	r3, r3, #16
 800717a:	f003 0104 	and.w	r1, r3, #4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	f003 0210 	and.w	r2, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800719c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e042      	b.n	800724e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fa fbdb 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	@ 0x24
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd7e 	bl	8007cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800720e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800721e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800722e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b08a      	sub	sp, #40	@ 0x28
 800725a:	af02      	add	r7, sp, #8
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b20      	cmp	r3, #32
 8007274:	d175      	bne.n	8007362 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_UART_Transmit+0x2c>
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e06e      	b.n	8007364 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2221      	movs	r2, #33	@ 0x21
 8007290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007294:	f7fd fb48 	bl	8004928 <HAL_GetTick>
 8007298:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ae:	d108      	bne.n	80072c2 <HAL_UART_Transmit+0x6c>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e003      	b.n	80072ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072ca:	e02e      	b.n	800732a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2200      	movs	r2, #0
 80072d4:	2180      	movs	r1, #128	@ 0x80
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb1c 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e03a      	b.n	8007364 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007302:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	3302      	adds	r3, #2
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	e007      	b.n	800731c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3301      	adds	r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1cb      	bne.n	80072cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2200      	movs	r2, #0
 800733c:	2140      	movs	r1, #64	@ 0x40
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fae8 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e006      	b.n	8007364 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	e000      	b.n	8007364 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007362:	2302      	movs	r3, #2
  }
}
 8007364:	4618      	mov	r0, r3
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b0ba      	sub	sp, #232	@ 0xe8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007392:	2300      	movs	r3, #0
 8007394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10f      	bne.n	80073d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <HAL_UART_IRQHandler+0x66>
 80073be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fbd7 	bl	8007b7e <UART_Receive_IT>
      return;
 80073d0:	e273      	b.n	80078ba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80de 	beq.w	8007598 <HAL_UART_IRQHandler+0x22c>
 80073dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80d1 	beq.w	8007598 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_UART_IRQHandler+0xae>
 8007402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007412:	f043 0201 	orr.w	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00b      	beq.n	800743e <HAL_UART_IRQHandler+0xd2>
 8007426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007436:	f043 0202 	orr.w	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800743e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <HAL_UART_IRQHandler+0xf6>
 800744a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745a:	f043 0204 	orr.w	r2, r3, #4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d011      	beq.n	8007492 <HAL_UART_IRQHandler+0x126>
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800747a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748a:	f043 0208 	orr.w	r2, r3, #8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 820a 	beq.w	80078b0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_UART_IRQHandler+0x14e>
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb62 	bl	8007b7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d103      	bne.n	80074e6 <HAL_UART_IRQHandler+0x17a>
 80074de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d04f      	beq.n	8007586 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa6d 	bl	80079c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f6:	2b40      	cmp	r3, #64	@ 0x40
 80074f8:	d141      	bne.n	800757e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3314      	adds	r3, #20
 8007500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007526:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800752a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800753e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1d9      	bne.n	80074fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d013      	beq.n	8007576 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007552:	4a8a      	ldr	r2, [pc, #552]	@ (800777c <HAL_UART_IRQHandler+0x410>)
 8007554:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd fc94 	bl	8004e88 <HAL_DMA_Abort_IT>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d016      	beq.n	8007594 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007574:	e00e      	b.n	8007594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9b6 	bl	80078e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	e00a      	b.n	8007594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9b2 	bl	80078e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007584:	e006      	b.n	8007594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9ae 	bl	80078e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007592:	e18d      	b.n	80078b0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007594:	bf00      	nop
    return;
 8007596:	e18b      	b.n	80078b0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759c:	2b01      	cmp	r3, #1
 800759e:	f040 8167 	bne.w	8007870 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8160 	beq.w	8007870 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8159 	beq.w	8007870 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b40      	cmp	r3, #64	@ 0x40
 80075e0:	f040 80ce 	bne.w	8007780 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80a9 	beq.w	800774c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007602:	429a      	cmp	r2, r3
 8007604:	f080 80a2 	bcs.w	800774c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800760e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761a:	f000 8088 	beq.w	800772e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800763c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800764a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800764e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1d9      	bne.n	800761e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800767a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800768e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007692:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e1      	bne.n	800766a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e3      	bne.n	80076a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076fe:	f023 0310 	bic.w	r3, r3, #16
 8007702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007710:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007712:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007716:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800771e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e3      	bne.n	80076ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007728:	4618      	mov	r0, r3
 800772a:	f7fd fb3d 	bl	8004da8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800773c:	b29b      	uxth	r3, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	b29b      	uxth	r3, r3
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8d9 	bl	80078fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800774a:	e0b3      	b.n	80078b4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007750:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007754:	429a      	cmp	r2, r3
 8007756:	f040 80ad 	bne.w	80078b4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007764:	f040 80a6 	bne.w	80078b4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8c1 	bl	80078fc <HAL_UARTEx_RxEventCallback>
      return;
 800777a:	e09b      	b.n	80078b4 <HAL_UART_IRQHandler+0x548>
 800777c:	08007a8d 	.word	0x08007a8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007788:	b29b      	uxth	r3, r3
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 808e 	beq.w	80078b8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800779c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8089 	beq.w	80078b8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80077cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e3      	bne.n	80077a6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3314      	adds	r3, #20
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	623b      	str	r3, [r7, #32]
   return(result);
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007802:	633a      	str	r2, [r7, #48]	@ 0x30
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e3      	bne.n	80077de <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	60fb      	str	r3, [r7, #12]
   return(result);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0310 	bic.w	r3, r3, #16
 800783a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007848:	61fa      	str	r2, [r7, #28]
 800784a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	617b      	str	r3, [r7, #20]
   return(result);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e3      	bne.n	8007824 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f847 	bl	80078fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800786e:	e023      	b.n	80078b8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <HAL_UART_IRQHandler+0x524>
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f910 	bl	8007aae <UART_Transmit_IT>
    return;
 800788e:	e014      	b.n	80078ba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00e      	beq.n	80078ba <HAL_UART_IRQHandler+0x54e>
 800789c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f950 	bl	8007b4e <UART_EndTransmit_IT>
    return;
 80078ae:	e004      	b.n	80078ba <HAL_UART_IRQHandler+0x54e>
    return;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <HAL_UART_IRQHandler+0x54e>
      return;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <HAL_UART_IRQHandler+0x54e>
      return;
 80078b8:	bf00      	nop
  }
}
 80078ba:	37e8      	adds	r7, #232	@ 0xe8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007924:	e03b      	b.n	800799e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d037      	beq.n	800799e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792e:	f7fc fffb 	bl	8004928 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	429a      	cmp	r2, r3
 800793c:	d302      	bcc.n	8007944 <UART_WaitOnFlagUntilTimeout+0x30>
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e03a      	b.n	80079be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d023      	beq.n	800799e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b80      	cmp	r3, #128	@ 0x80
 800795a:	d020      	beq.n	800799e <UART_WaitOnFlagUntilTimeout+0x8a>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b40      	cmp	r3, #64	@ 0x40
 8007960:	d01d      	beq.n	800799e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b08      	cmp	r3, #8
 800796e:	d116      	bne.n	800799e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 f81d 	bl	80079c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2208      	movs	r2, #8
 8007990:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e00f      	b.n	80079be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4013      	ands	r3, r2
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	bf0c      	ite	eq
 80079ae:	2301      	moveq	r3, #1
 80079b0:	2300      	movne	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d0b4      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b095      	sub	sp, #84	@ 0x54
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	330c      	adds	r3, #12
 80079ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e5      	bne.n	80079ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3314      	adds	r3, #20
 8007a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e5      	bne.n	8007a02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d119      	bne.n	8007a72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f023 0310 	bic.w	r3, r3, #16
 8007a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a5e:	61ba      	str	r2, [r7, #24]
 8007a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6979      	ldr	r1, [r7, #20]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e5      	bne.n	8007a3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a80:	bf00      	nop
 8007a82:	3754      	adds	r7, #84	@ 0x54
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f7ff ff21 	bl	80078e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b21      	cmp	r3, #33	@ 0x21
 8007ac0:	d13e      	bne.n	8007b40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aca:	d114      	bne.n	8007af6 <UART_Transmit_IT+0x48>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d110      	bne.n	8007af6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ae8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	621a      	str	r2, [r3, #32]
 8007af4:	e008      	b.n	8007b08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	1c59      	adds	r1, r3, #1
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6211      	str	r1, [r2, #32]
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	4619      	mov	r1, r3
 8007b16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10f      	bne.n	8007b3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fea6 	bl	80078c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b08c      	sub	sp, #48	@ 0x30
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b22      	cmp	r3, #34	@ 0x22
 8007b98:	f040 80aa 	bne.w	8007cf0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ba4:	d115      	bne.n	8007bd2 <UART_Receive_IT+0x54>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d111      	bne.n	8007bd2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	1c9a      	adds	r2, r3, #2
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bd0:	e024      	b.n	8007c1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be0:	d007      	beq.n	8007bf2 <UART_Receive_IT+0x74>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <UART_Receive_IT+0x82>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d106      	bne.n	8007c00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	e008      	b.n	8007c12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d15d      	bne.n	8007cec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0220 	bic.w	r2, r2, #32
 8007c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695a      	ldr	r2, [r3, #20]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0201 	bic.w	r2, r2, #1
 8007c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d135      	bne.n	8007ce2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	330c      	adds	r3, #12
 8007c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f023 0310 	bic.w	r3, r3, #16
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c9c:	623a      	str	r2, [r7, #32]
 8007c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e5      	bne.n	8007c7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d10a      	bne.n	8007cd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff fe0e 	bl	80078fc <HAL_UARTEx_RxEventCallback>
 8007ce0:	e002      	b.n	8007ce8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff fdf6 	bl	80078d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e002      	b.n	8007cf2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	e000      	b.n	8007cf2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007cf0:	2302      	movs	r3, #2
  }
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3730      	adds	r7, #48	@ 0x30
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d00:	b0c0      	sub	sp, #256	@ 0x100
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d18:	68d9      	ldr	r1, [r3, #12]
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	ea40 0301 	orr.w	r3, r0, r1
 8007d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d54:	f021 010c 	bic.w	r1, r1, #12
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d62:	430b      	orrs	r3, r1
 8007d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d76:	6999      	ldr	r1, [r3, #24]
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	ea40 0301 	orr.w	r3, r0, r1
 8007d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b8f      	ldr	r3, [pc, #572]	@ (8007fc8 <UART_SetConfig+0x2cc>)
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d005      	beq.n	8007d9c <UART_SetConfig+0xa0>
 8007d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4b8d      	ldr	r3, [pc, #564]	@ (8007fcc <UART_SetConfig+0x2d0>)
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d104      	bne.n	8007da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d9c:	f7ff f82c 	bl	8006df8 <HAL_RCC_GetPCLK2Freq>
 8007da0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007da4:	e003      	b.n	8007dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007da6:	f7ff f813 	bl	8006dd0 <HAL_RCC_GetPCLK1Freq>
 8007daa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db8:	f040 810c 	bne.w	8007fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007dce:	4622      	mov	r2, r4
 8007dd0:	462b      	mov	r3, r5
 8007dd2:	1891      	adds	r1, r2, r2
 8007dd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007dd6:	415b      	adcs	r3, r3
 8007dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007dde:	4621      	mov	r1, r4
 8007de0:	eb12 0801 	adds.w	r8, r2, r1
 8007de4:	4629      	mov	r1, r5
 8007de6:	eb43 0901 	adc.w	r9, r3, r1
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dfe:	4690      	mov	r8, r2
 8007e00:	4699      	mov	r9, r3
 8007e02:	4623      	mov	r3, r4
 8007e04:	eb18 0303 	adds.w	r3, r8, r3
 8007e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	eb49 0303 	adc.w	r3, r9, r3
 8007e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	18db      	adds	r3, r3, r3
 8007e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e30:	4613      	mov	r3, r2
 8007e32:	eb42 0303 	adc.w	r3, r2, r3
 8007e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e40:	f7f8 feb2 	bl	8000ba8 <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4b61      	ldr	r3, [pc, #388]	@ (8007fd0 <UART_SetConfig+0x2d4>)
 8007e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	011c      	lsls	r4, r3, #4
 8007e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	1891      	adds	r1, r2, r2
 8007e6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e6c:	415b      	adcs	r3, r3
 8007e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e74:	4641      	mov	r1, r8
 8007e76:	eb12 0a01 	adds.w	sl, r2, r1
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	f04f 0300 	mov.w	r3, #0
 8007e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e94:	4692      	mov	sl, r2
 8007e96:	469b      	mov	fp, r3
 8007e98:	4643      	mov	r3, r8
 8007e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	18db      	adds	r3, r3, r3
 8007ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	eb42 0303 	adc.w	r3, r2, r3
 8007ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ed6:	f7f8 fe67 	bl	8000ba8 <__aeabi_uldivmod>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8007fd0 <UART_SetConfig+0x2d4>)
 8007ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	2264      	movs	r2, #100	@ 0x64
 8007eea:	fb02 f303 	mul.w	r3, r2, r3
 8007eee:	1acb      	subs	r3, r1, r3
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ef6:	4b36      	ldr	r3, [pc, #216]	@ (8007fd0 <UART_SetConfig+0x2d4>)
 8007ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f04:	441c      	add	r4, r3
 8007f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	1891      	adds	r1, r2, r2
 8007f1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f20:	415b      	adcs	r3, r3
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f28:	4641      	mov	r1, r8
 8007f2a:	1851      	adds	r1, r2, r1
 8007f2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f2e:	4649      	mov	r1, r9
 8007f30:	414b      	adcs	r3, r1
 8007f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f40:	4659      	mov	r1, fp
 8007f42:	00cb      	lsls	r3, r1, #3
 8007f44:	4651      	mov	r1, sl
 8007f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f4a:	4651      	mov	r1, sl
 8007f4c:	00ca      	lsls	r2, r1, #3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	4619      	mov	r1, r3
 8007f52:	4603      	mov	r3, r0
 8007f54:	4642      	mov	r2, r8
 8007f56:	189b      	adds	r3, r3, r2
 8007f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	460a      	mov	r2, r1
 8007f60:	eb42 0303 	adc.w	r3, r2, r3
 8007f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	18db      	adds	r3, r3, r3
 8007f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f82:	4613      	mov	r3, r2
 8007f84:	eb42 0303 	adc.w	r3, r2, r3
 8007f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f92:	f7f8 fe09 	bl	8000ba8 <__aeabi_uldivmod>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <UART_SetConfig+0x2d4>)
 8007f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	2164      	movs	r1, #100	@ 0x64
 8007fa4:	fb01 f303 	mul.w	r3, r1, r3
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	3332      	adds	r3, #50	@ 0x32
 8007fae:	4a08      	ldr	r2, [pc, #32]	@ (8007fd0 <UART_SetConfig+0x2d4>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	f003 0207 	and.w	r2, r3, #7
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4422      	add	r2, r4
 8007fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fc4:	e106      	b.n	80081d4 <UART_SetConfig+0x4d8>
 8007fc6:	bf00      	nop
 8007fc8:	40011000 	.word	0x40011000
 8007fcc:	40011400 	.word	0x40011400
 8007fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007fe6:	4642      	mov	r2, r8
 8007fe8:	464b      	mov	r3, r9
 8007fea:	1891      	adds	r1, r2, r2
 8007fec:	6239      	str	r1, [r7, #32]
 8007fee:	415b      	adcs	r3, r3
 8007ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	1854      	adds	r4, r2, r1
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	eb43 0501 	adc.w	r5, r3, r1
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	00eb      	lsls	r3, r5, #3
 800800a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800800e:	00e2      	lsls	r2, r4, #3
 8008010:	4614      	mov	r4, r2
 8008012:	461d      	mov	r5, r3
 8008014:	4643      	mov	r3, r8
 8008016:	18e3      	adds	r3, r4, r3
 8008018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800801c:	464b      	mov	r3, r9
 800801e:	eb45 0303 	adc.w	r3, r5, r3
 8008022:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008032:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008042:	4629      	mov	r1, r5
 8008044:	008b      	lsls	r3, r1, #2
 8008046:	4621      	mov	r1, r4
 8008048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800804c:	4621      	mov	r1, r4
 800804e:	008a      	lsls	r2, r1, #2
 8008050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008054:	f7f8 fda8 	bl	8000ba8 <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4b60      	ldr	r3, [pc, #384]	@ (80081e0 <UART_SetConfig+0x4e4>)
 800805e:	fba3 2302 	umull	r2, r3, r3, r2
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	011c      	lsls	r4, r3, #4
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800806a:	2200      	movs	r2, #0
 800806c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008070:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	1891      	adds	r1, r2, r2
 800807e:	61b9      	str	r1, [r7, #24]
 8008080:	415b      	adcs	r3, r3
 8008082:	61fb      	str	r3, [r7, #28]
 8008084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008088:	4641      	mov	r1, r8
 800808a:	1851      	adds	r1, r2, r1
 800808c:	6139      	str	r1, [r7, #16]
 800808e:	4649      	mov	r1, r9
 8008090:	414b      	adcs	r3, r1
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080a0:	4659      	mov	r1, fp
 80080a2:	00cb      	lsls	r3, r1, #3
 80080a4:	4651      	mov	r1, sl
 80080a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080aa:	4651      	mov	r1, sl
 80080ac:	00ca      	lsls	r2, r1, #3
 80080ae:	4610      	mov	r0, r2
 80080b0:	4619      	mov	r1, r3
 80080b2:	4603      	mov	r3, r0
 80080b4:	4642      	mov	r2, r8
 80080b6:	189b      	adds	r3, r3, r2
 80080b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080bc:	464b      	mov	r3, r9
 80080be:	460a      	mov	r2, r1
 80080c0:	eb42 0303 	adc.w	r3, r2, r3
 80080c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080e0:	4649      	mov	r1, r9
 80080e2:	008b      	lsls	r3, r1, #2
 80080e4:	4641      	mov	r1, r8
 80080e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ea:	4641      	mov	r1, r8
 80080ec:	008a      	lsls	r2, r1, #2
 80080ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80080f2:	f7f8 fd59 	bl	8000ba8 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	4b38      	ldr	r3, [pc, #224]	@ (80081e0 <UART_SetConfig+0x4e4>)
 80080fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	2264      	movs	r2, #100	@ 0x64
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	1acb      	subs	r3, r1, r3
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	3332      	adds	r3, #50	@ 0x32
 8008110:	4a33      	ldr	r2, [pc, #204]	@ (80081e0 <UART_SetConfig+0x4e4>)
 8008112:	fba2 2303 	umull	r2, r3, r2, r3
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800811c:	441c      	add	r4, r3
 800811e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008122:	2200      	movs	r2, #0
 8008124:	673b      	str	r3, [r7, #112]	@ 0x70
 8008126:	677a      	str	r2, [r7, #116]	@ 0x74
 8008128:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	1891      	adds	r1, r2, r2
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	415b      	adcs	r3, r3
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800813c:	4641      	mov	r1, r8
 800813e:	1851      	adds	r1, r2, r1
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	4649      	mov	r1, r9
 8008144:	414b      	adcs	r3, r1
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008154:	4659      	mov	r1, fp
 8008156:	00cb      	lsls	r3, r1, #3
 8008158:	4651      	mov	r1, sl
 800815a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800815e:	4651      	mov	r1, sl
 8008160:	00ca      	lsls	r2, r1, #3
 8008162:	4610      	mov	r0, r2
 8008164:	4619      	mov	r1, r3
 8008166:	4603      	mov	r3, r0
 8008168:	4642      	mov	r2, r8
 800816a:	189b      	adds	r3, r3, r2
 800816c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800816e:	464b      	mov	r3, r9
 8008170:	460a      	mov	r2, r1
 8008172:	eb42 0303 	adc.w	r3, r2, r3
 8008176:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	663b      	str	r3, [r7, #96]	@ 0x60
 8008182:	667a      	str	r2, [r7, #100]	@ 0x64
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008190:	4649      	mov	r1, r9
 8008192:	008b      	lsls	r3, r1, #2
 8008194:	4641      	mov	r1, r8
 8008196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800819a:	4641      	mov	r1, r8
 800819c:	008a      	lsls	r2, r1, #2
 800819e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80081a2:	f7f8 fd01 	bl	8000ba8 <__aeabi_uldivmod>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <UART_SetConfig+0x4e4>)
 80081ac:	fba3 1302 	umull	r1, r3, r3, r2
 80081b0:	095b      	lsrs	r3, r3, #5
 80081b2:	2164      	movs	r1, #100	@ 0x64
 80081b4:	fb01 f303 	mul.w	r3, r1, r3
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	3332      	adds	r3, #50	@ 0x32
 80081be:	4a08      	ldr	r2, [pc, #32]	@ (80081e0 <UART_SetConfig+0x4e4>)
 80081c0:	fba2 2303 	umull	r2, r3, r2, r3
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	f003 020f 	and.w	r2, r3, #15
 80081ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4422      	add	r2, r4
 80081d2:	609a      	str	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081da:	46bd      	mov	sp, r7
 80081dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e0:	51eb851f 	.word	0x51eb851f

080081e4 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80081e8:	4b10      	ldr	r3, [pc, #64]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80081ee:	4b0f      	ldr	r3, [pc, #60]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80081f4:	4b0d      	ldr	r3, [pc, #52]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 80081f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008230 <MX_PDM2PCM_Init+0x4c>)
 80081f8:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80081fa:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8008200:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 8008202:	2201      	movs	r2, #1
 8008204:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008206:	4809      	ldr	r0, [pc, #36]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 8008208:	f001 fd38 	bl	8009c7c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800820c:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <MX_PDM2PCM_Init+0x50>)
 800820e:	2202      	movs	r2, #2
 8008210:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8008212:	4b08      	ldr	r3, [pc, #32]	@ (8008234 <MX_PDM2PCM_Init+0x50>)
 8008214:	2210      	movs	r2, #16
 8008216:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8008218:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <MX_PDM2PCM_Init+0x50>)
 800821a:	2200      	movs	r2, #0
 800821c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800821e:	4905      	ldr	r1, [pc, #20]	@ (8008234 <MX_PDM2PCM_Init+0x50>)
 8008220:	4802      	ldr	r0, [pc, #8]	@ (800822c <MX_PDM2PCM_Init+0x48>)
 8008222:	f001 fdfb 	bl	8009e1c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20003cb8 	.word	0x20003cb8
 8008230:	7d70a3d6 	.word	0x7d70a3d6
 8008234:	20003d04 	.word	0x20003d04

08008238 <MX_PDM2PCM_Process>:
/* USER CODE BEGIN 4 */

/*  process function */
/* process function */
uint8_t MX_PDM2PCM_Process(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  // La librería PDM a menudo espera uint8_t* para la entrada PDM (ya que son bits empaquetados)
  // y int16_t* para la salida PCM (audio con signo).

  // Ajusta los casts según la firma exacta de PDM_Filter en tu pdm_filter.h.
  // Es muy común que la entrada PDM sea (uint8_t*) y la salida PCM (int16_t*).
  PDM_Filter((uint8_t*)PDMBuf, (int16_t*)PCMBuf, &PDM1_filter_handler);
 8008242:	4a05      	ldr	r2, [pc, #20]	@ (8008258 <MX_PDM2PCM_Process+0x20>)
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 feee 	bl	800a028 <PDM_Filter>

  // Si la función PDM_Filter no devuelve un código de error, asumimos éxito.
  return 0; // Retorna 0 para éxito (AUDIO_OK)
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20003cb8 	.word	0x20003cb8

0800825c <D16_GENERIC>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8008264:	b089      	sub	sp, #36	@ 0x24
 8008266:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8008268:	6993      	ldr	r3, [r2, #24]
 800826a:	9406      	str	r4, [sp, #24]
 800826c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800826e:	9307      	str	r3, [sp, #28]
 8008270:	9402      	str	r4, [sp, #8]
 8008272:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8008276:	69d3      	ldr	r3, [r2, #28]
 8008278:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800827a:	9103      	str	r1, [sp, #12]
 800827c:	2d00      	cmp	r5, #0
 800827e:	d066      	beq.n	800834e <D16_GENERIC+0xf2>
 8008280:	f004 0520 	and.w	r5, r4, #32
 8008284:	f004 0410 	and.w	r4, r4, #16
 8008288:	9505      	str	r5, [sp, #20]
 800828a:	4937      	ldr	r1, [pc, #220]	@ (8008368 <D16_GENERIC+0x10c>)
 800828c:	9404      	str	r4, [sp, #16]
 800828e:	f04f 0c00 	mov.w	ip, #0
 8008292:	4635      	mov	r5, r6
 8008294:	e04f      	b.n	8008336 <D16_GENERIC+0xda>
 8008296:	5d87      	ldrb	r7, [r0, r6]
 8008298:	7804      	ldrb	r4, [r0, #0]
 800829a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800829e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80082a2:	b2e6      	uxtb	r6, r4
 80082a4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80082a8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80082ac:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80082b0:	4433      	add	r3, r6
 80082b2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80082b6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80082ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082be:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80082c2:	0aa3      	lsrs	r3, r4, #10
 80082c4:	4c29      	ldr	r4, [pc, #164]	@ (800836c <D16_GENERIC+0x110>)
 80082c6:	fb26 5404 	smlad	r4, r6, r4, r5
 80082ca:	4d29      	ldr	r5, [pc, #164]	@ (8008370 <D16_GENERIC+0x114>)
 80082cc:	fb26 f505 	smuad	r5, r6, r5
 80082d0:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80082d4:	eb04 080a 	add.w	r8, r4, sl
 80082d8:	eba8 080b 	sub.w	r8, r8, fp
 80082dc:	4646      	mov	r6, r8
 80082de:	17f7      	asrs	r7, r6, #31
 80082e0:	e9cd 6700 	strd	r6, r7, [sp]
 80082e4:	9e04      	ldr	r6, [sp, #16]
 80082e6:	f10c 0e01 	add.w	lr, ip, #1
 80082ea:	b16e      	cbz	r6, 8008308 <D16_GENERIC+0xac>
 80082ec:	6a16      	ldr	r6, [r2, #32]
 80082ee:	9f01      	ldr	r7, [sp, #4]
 80082f0:	fba8 ab06 	umull	sl, fp, r8, r6
 80082f4:	fb06 bb07 	mla	fp, r6, r7, fp
 80082f8:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 80082fc:	f14b 0900 	adc.w	r9, fp, #0
 8008300:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8008304:	46a3      	mov	fp, r4
 8008306:	4654      	mov	r4, sl
 8008308:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800830a:	9f02      	ldr	r7, [sp, #8]
 800830c:	0424      	lsls	r4, r4, #16
 800830e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008312:	f04f 0900 	mov.w	r9, #0
 8008316:	fb0c fc06 	mul.w	ip, ip, r6
 800831a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800831e:	9e03      	ldr	r6, [sp, #12]
 8008320:	464f      	mov	r7, r9
 8008322:	10bc      	asrs	r4, r7, #2
 8008324:	f304 040f 	ssat	r4, #16, r4
 8008328:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 800832c:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 800832e:	fa1f fc8e 	uxth.w	ip, lr
 8008332:	4564      	cmp	r4, ip
 8008334:	d90a      	bls.n	800834c <D16_GENERIC+0xf0>
 8008336:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8008338:	2c01      	cmp	r4, #1
 800833a:	b2e6      	uxtb	r6, r4
 800833c:	d1ab      	bne.n	8008296 <D16_GENERIC+0x3a>
 800833e:	9e05      	ldr	r6, [sp, #20]
 8008340:	f850 4b02 	ldr.w	r4, [r0], #2
 8008344:	2e00      	cmp	r6, #0
 8008346:	d0ac      	beq.n	80082a2 <D16_GENERIC+0x46>
 8008348:	ba64      	rev16	r4, r4
 800834a:	e7aa      	b.n	80082a2 <D16_GENERIC+0x46>
 800834c:	462e      	mov	r6, r5
 800834e:	9906      	ldr	r1, [sp, #24]
 8008350:	61d3      	str	r3, [r2, #28]
 8008352:	9b07      	ldr	r3, [sp, #28]
 8008354:	6096      	str	r6, [r2, #8]
 8008356:	2000      	movs	r0, #0
 8008358:	60d1      	str	r1, [r2, #12]
 800835a:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 800835e:	6193      	str	r3, [r2, #24]
 8008360:	b009      	add	sp, #36	@ 0x24
 8008362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008366:	bf00      	nop
 8008368:	20000010 	.word	0x20000010
 800836c:	00030001 	.word	0x00030001
 8008370:	00010003 	.word	0x00010003

08008374 <D24_GENERIC>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 800837a:	6993      	ldr	r3, [r2, #24]
 800837c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 800837e:	b089      	sub	sp, #36	@ 0x24
 8008380:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8008384:	9307      	str	r3, [sp, #28]
 8008386:	9503      	str	r5, [sp, #12]
 8008388:	69d3      	ldr	r3, [r2, #28]
 800838a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800838c:	9104      	str	r1, [sp, #16]
 800838e:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8008392:	2e00      	cmp	r6, #0
 8008394:	f000 808f 	beq.w	80084b6 <D24_GENERIC+0x142>
 8008398:	f005 0620 	and.w	r6, r5, #32
 800839c:	f005 0510 	and.w	r5, r5, #16
 80083a0:	4953      	ldr	r1, [pc, #332]	@ (80084f0 <D24_GENERIC+0x17c>)
 80083a2:	9606      	str	r6, [sp, #24]
 80083a4:	9505      	str	r5, [sp, #20]
 80083a6:	f04f 0c00 	mov.w	ip, #0
 80083aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80083ae:	e068      	b.n	8008482 <D24_GENERIC+0x10e>
 80083b0:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80083b4:	f810 8007 	ldrb.w	r8, [r0, r7]
 80083b8:	042d      	lsls	r5, r5, #16
 80083ba:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80083be:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80083c2:	44ae      	add	lr, r5
 80083c4:	4438      	add	r0, r7
 80083c6:	fa5f f68e 	uxtb.w	r6, lr
 80083ca:	f3ce 2507 	ubfx	r5, lr, #8, #8
 80083ce:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80083d2:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80083d6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80083da:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80083de:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80083e2:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 80083e6:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80083ea:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80083ee:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80083f2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80083f6:	4d3f      	ldr	r5, [pc, #252]	@ (80084f4 <D24_GENERIC+0x180>)
 80083f8:	fb26 b705 	smlad	r7, r6, r5, fp
 80083fc:	4d3e      	ldr	r5, [pc, #248]	@ (80084f8 <D24_GENERIC+0x184>)
 80083fe:	fb26 4b05 	smlad	fp, r6, r5, r4
 8008402:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8008406:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800840a:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800840e:	2401      	movs	r4, #1
 8008410:	fb26 f604 	smuad	r6, r6, r4
 8008414:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8008418:	9f02      	ldr	r7, [sp, #8]
 800841a:	eb0c 0e04 	add.w	lr, ip, r4
 800841e:	eb08 0406 	add.w	r4, r8, r6
 8008422:	eb05 060a 	add.w	r6, r5, sl
 8008426:	1bf6      	subs	r6, r6, r7
 8008428:	4637      	mov	r7, r6
 800842a:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800842e:	e9cd 7800 	strd	r7, r8, [sp]
 8008432:	9f05      	ldr	r7, [sp, #20]
 8008434:	b177      	cbz	r7, 8008454 <D24_GENERIC+0xe0>
 8008436:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800843a:	9502      	str	r5, [sp, #8]
 800843c:	fba6 9a08 	umull	r9, sl, r6, r8
 8008440:	9e01      	ldr	r6, [sp, #4]
 8008442:	fb08 aa06 	mla	sl, r8, r6, sl
 8008446:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 800844a:	f14a 0700 	adc.w	r7, sl, #0
 800844e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8008452:	4655      	mov	r5, sl
 8008454:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8008456:	9f03      	ldr	r7, [sp, #12]
 8008458:	03ad      	lsls	r5, r5, #14
 800845a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	fb0c fc06 	mul.w	ip, ip, r6
 8008466:	fbc7 8905 	smlal	r8, r9, r7, r5
 800846a:	9e04      	ldr	r6, [sp, #16]
 800846c:	464f      	mov	r7, r9
 800846e:	10bd      	asrs	r5, r7, #2
 8008470:	f305 050f 	ssat	r5, #16, r5
 8008474:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8008478:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800847a:	fa1f fc8e 	uxth.w	ip, lr
 800847e:	4565      	cmp	r5, ip
 8008480:	d917      	bls.n	80084b2 <D24_GENERIC+0x13e>
 8008482:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8008484:	f890 e000 	ldrb.w	lr, [r0]
 8008488:	b2ef      	uxtb	r7, r5
 800848a:	2d01      	cmp	r5, #1
 800848c:	b23e      	sxth	r6, r7
 800848e:	d18f      	bne.n	80083b0 <D24_GENERIC+0x3c>
 8008490:	9d06      	ldr	r5, [sp, #24]
 8008492:	b1dd      	cbz	r5, 80084cc <D24_GENERIC+0x158>
 8008494:	78c5      	ldrb	r5, [r0, #3]
 8008496:	ea4f 280e 	mov.w	r8, lr, lsl #8
 800849a:	f01c 0f01 	tst.w	ip, #1
 800849e:	ea4f 2605 	mov.w	r6, r5, lsl #8
 80084a2:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 80084a6:	d11b      	bne.n	80084e0 <D24_GENERIC+0x16c>
 80084a8:	f890 e001 	ldrb.w	lr, [r0, #1]
 80084ac:	3002      	adds	r0, #2
 80084ae:	44c6      	add	lr, r8
 80084b0:	e789      	b.n	80083c6 <D24_GENERIC+0x52>
 80084b2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80084b6:	61d3      	str	r3, [r2, #28]
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	6193      	str	r3, [r2, #24]
 80084bc:	2000      	movs	r0, #0
 80084be:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 80084c2:	e9c2 a904 	strd	sl, r9, [r2, #16]
 80084c6:	b009      	add	sp, #36	@ 0x24
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	f890 8001 	ldrb.w	r8, [r0, #1]
 80084d0:	7885      	ldrb	r5, [r0, #2]
 80084d2:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80084d6:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 80084da:	44c6      	add	lr, r8
 80084dc:	3003      	adds	r0, #3
 80084de:	e772      	b.n	80083c6 <D24_GENERIC+0x52>
 80084e0:	f890 8002 	ldrb.w	r8, [r0, #2]
 80084e4:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 80084e8:	44c6      	add	lr, r8
 80084ea:	3004      	adds	r0, #4
 80084ec:	e76b      	b.n	80083c6 <D24_GENERIC+0x52>
 80084ee:	bf00      	nop
 80084f0:	20000010 	.word	0x20000010
 80084f4:	00030001 	.word	0x00030001
 80084f8:	00060007 	.word	0x00060007

080084fc <D32_GENERIC>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8008502:	6993      	ldr	r3, [r2, #24]
 8008504:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008506:	69d6      	ldr	r6, [r2, #28]
 8008508:	b089      	sub	sp, #36	@ 0x24
 800850a:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	9403      	str	r4, [sp, #12]
 8008512:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8008516:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8008518:	9104      	str	r1, [sp, #16]
 800851a:	2d00      	cmp	r5, #0
 800851c:	f000 809a 	beq.w	8008654 <D32_GENERIC+0x158>
 8008520:	f004 0520 	and.w	r5, r4, #32
 8008524:	f004 0410 	and.w	r4, r4, #16
 8008528:	9506      	str	r5, [sp, #24]
 800852a:	4951      	ldr	r1, [pc, #324]	@ (8008670 <D32_GENERIC+0x174>)
 800852c:	9405      	str	r4, [sp, #20]
 800852e:	f04f 0e00 	mov.w	lr, #0
 8008532:	f8cd 9008 	str.w	r9, [sp, #8]
 8008536:	461d      	mov	r5, r3
 8008538:	4617      	mov	r7, r2
 800853a:	e077      	b.n	800862c <D32_GENERIC+0x130>
 800853c:	7823      	ldrb	r3, [r4, #0]
 800853e:	f810 800c 	ldrb.w	r8, [r0, ip]
 8008542:	f810 c002 	ldrb.w	ip, [r0, r2]
 8008546:	7800      	ldrb	r0, [r0, #0]
 8008548:	041b      	lsls	r3, r3, #16
 800854a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800854e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8008552:	4403      	add	r3, r0
 8008554:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8008558:	b2dc      	uxtb	r4, r3
 800855a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800855e:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8008562:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008566:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800856a:	0e1b      	lsrs	r3, r3, #24
 800856c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8008570:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8008574:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008578:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800857c:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8008580:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8008584:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8008588:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800858c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008590:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008594:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8008598:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800859c:	4b35      	ldr	r3, [pc, #212]	@ (8008674 <D32_GENERIC+0x178>)
 800859e:	fb22 b403 	smlad	r4, r2, r3, fp
 80085a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085a6:	fb2c 4803 	smlad	r8, ip, r3, r4
 80085aa:	4b33      	ldr	r3, [pc, #204]	@ (8008678 <D32_GENERIC+0x17c>)
 80085ac:	fb22 5503 	smlad	r5, r2, r3, r5
 80085b0:	4b32      	ldr	r3, [pc, #200]	@ (800867c <D32_GENERIC+0x180>)
 80085b2:	fb2c 5b03 	smlad	fp, ip, r3, r5
 80085b6:	2301      	movs	r3, #1
 80085b8:	fb22 f203 	smuad	r2, r2, r3
 80085bc:	4b30      	ldr	r3, [pc, #192]	@ (8008680 <D32_GENERIC+0x184>)
 80085be:	fb2c 2503 	smlad	r5, ip, r3, r2
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 80085c8:	eb04 080a 	add.w	r8, r4, sl
 80085cc:	eba8 0803 	sub.w	r8, r8, r3
 80085d0:	4642      	mov	r2, r8
 80085d2:	17d3      	asrs	r3, r2, #31
 80085d4:	e9cd 2300 	strd	r2, r3, [sp]
 80085d8:	9b05      	ldr	r3, [sp, #20]
 80085da:	f10e 0c01 	add.w	ip, lr, #1
 80085de:	b173      	cbz	r3, 80085fe <D32_GENERIC+0x102>
 80085e0:	6a3a      	ldr	r2, [r7, #32]
 80085e2:	9b01      	ldr	r3, [sp, #4]
 80085e4:	9402      	str	r4, [sp, #8]
 80085e6:	fba8 8902 	umull	r8, r9, r8, r2
 80085ea:	469a      	mov	sl, r3
 80085ec:	fb02 930a 	mla	r3, r2, sl, r9
 80085f0:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 80085f4:	f143 0900 	adc.w	r9, r3, #0
 80085f8:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80085fc:	4654      	mov	r4, sl
 80085fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	fb0e fe03 	mul.w	lr, lr, r3
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	0364      	lsls	r4, r4, #13
 800860a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800860e:	f04f 0900 	mov.w	r9, #0
 8008612:	fbc3 8904 	smlal	r8, r9, r3, r4
 8008616:	464b      	mov	r3, r9
 8008618:	109b      	asrs	r3, r3, #2
 800861a:	f303 030f 	ssat	r3, #16, r3
 800861e:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8008622:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008624:	fa1f fe8c 	uxth.w	lr, ip
 8008628:	4573      	cmp	r3, lr
 800862a:	d90f      	bls.n	800864c <D32_GENERIC+0x150>
 800862c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800862e:	b2da      	uxtb	r2, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8008636:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800863a:	f47f af7f 	bne.w	800853c <D32_GENERIC+0x40>
 800863e:	1d02      	adds	r2, r0, #4
 8008640:	6803      	ldr	r3, [r0, #0]
 8008642:	9806      	ldr	r0, [sp, #24]
 8008644:	b188      	cbz	r0, 800866a <D32_GENERIC+0x16e>
 8008646:	ba5b      	rev16	r3, r3
 8008648:	4610      	mov	r0, r2
 800864a:	e785      	b.n	8008558 <D32_GENERIC+0x5c>
 800864c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008650:	462b      	mov	r3, r5
 8008652:	463a      	mov	r2, r7
 8008654:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8008658:	9b07      	ldr	r3, [sp, #28]
 800865a:	61d6      	str	r6, [r2, #28]
 800865c:	2000      	movs	r0, #0
 800865e:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8008662:	6193      	str	r3, [r2, #24]
 8008664:	b009      	add	sp, #36	@ 0x24
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	4610      	mov	r0, r2
 800866c:	e774      	b.n	8008558 <D32_GENERIC+0x5c>
 800866e:	bf00      	nop
 8008670:	20000010 	.word	0x20000010
 8008674:	00060003 	.word	0x00060003
 8008678:	000a000c 	.word	0x000a000c
 800867c:	000c000a 	.word	0x000c000a
 8008680:	00030006 	.word	0x00030006

08008684 <D48_GENERIC>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 800868c:	b08b      	sub	sp, #44	@ 0x2c
 800868e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	6993      	ldr	r3, [r2, #24]
 8008694:	9309      	str	r3, [sp, #36]	@ 0x24
 8008696:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 800869a:	9401      	str	r4, [sp, #4]
 800869c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800869e:	9405      	str	r4, [sp, #20]
 80086a0:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80086a4:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80086a6:	9106      	str	r1, [sp, #24]
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	f000 80c2 	beq.w	8008832 <D48_GENERIC+0x1ae>
 80086ae:	f004 0520 	and.w	r5, r4, #32
 80086b2:	f04f 0900 	mov.w	r9, #0
 80086b6:	f004 0410 	and.w	r4, r4, #16
 80086ba:	9508      	str	r5, [sp, #32]
 80086bc:	4964      	ldr	r1, [pc, #400]	@ (8008850 <D48_GENERIC+0x1cc>)
 80086be:	9407      	str	r4, [sp, #28]
 80086c0:	464d      	mov	r5, r9
 80086c2:	e09e      	b.n	8008802 <D48_GENERIC+0x17e>
 80086c4:	f81b 4007 	ldrb.w	r4, [fp, r7]
 80086c8:	f810 b008 	ldrb.w	fp, [r0, r8]
 80086cc:	f819 8008 	ldrb.w	r8, [r9, r8]
 80086d0:	f810 9006 	ldrb.w	r9, [r0, r6]
 80086d4:	7800      	ldrb	r0, [r0, #0]
 80086d6:	0424      	lsls	r4, r4, #16
 80086d8:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80086dc:	f81e 4007 	ldrb.w	r4, [lr, r7]
 80086e0:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 80086e4:	44be      	add	lr, r7
 80086e6:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 80086ea:	eb0b 0700 	add.w	r7, fp, r0
 80086ee:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 80086f2:	fa5f fe87 	uxtb.w	lr, r7
 80086f6:	f3c7 2607 	ubfx	r6, r7, #8, #8
 80086fa:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80086fe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008702:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8008706:	0e3f      	lsrs	r7, r7, #24
 8008708:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 800870c:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8008710:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8008714:	b2e7      	uxtb	r7, r4
 8008716:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800871a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800871e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008722:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008726:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 800872a:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 800872e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008732:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8008736:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800873a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800873e:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8008742:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008746:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800874a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800874e:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8008752:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8008756:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 800875a:	4c3e      	ldr	r4, [pc, #248]	@ (8008854 <D48_GENERIC+0x1d0>)
 800875c:	9e01      	ldr	r6, [sp, #4]
 800875e:	fb29 6404 	smlad	r4, r9, r4, r6
 8008762:	4e3d      	ldr	r6, [pc, #244]	@ (8008858 <D48_GENERIC+0x1d4>)
 8008764:	fb2e 4406 	smlad	r4, lr, r6, r4
 8008768:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800876c:	fb27 4b06 	smlad	fp, r7, r6, r4
 8008770:	4c3a      	ldr	r4, [pc, #232]	@ (800885c <D48_GENERIC+0x1d8>)
 8008772:	fb29 3304 	smlad	r3, r9, r4, r3
 8008776:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 800877a:	fb2e 3304 	smlad	r3, lr, r4, r3
 800877e:	4c38      	ldr	r4, [pc, #224]	@ (8008860 <D48_GENERIC+0x1dc>)
 8008780:	fb27 3304 	smlad	r3, r7, r4, r3
 8008784:	2601      	movs	r6, #1
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	fb29 f906 	smuad	r9, r9, r6
 800878c:	4b35      	ldr	r3, [pc, #212]	@ (8008864 <D48_GENERIC+0x1e0>)
 800878e:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8008792:	4b35      	ldr	r3, [pc, #212]	@ (8008868 <D48_GENERIC+0x1e4>)
 8008794:	fb27 e303 	smlad	r3, r7, r3, lr
 8008798:	9f04      	ldr	r7, [sp, #16]
 800879a:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 800879e:	eb05 0e06 	add.w	lr, r5, r6
 80087a2:	eb04 060a 	add.w	r6, r4, sl
 80087a6:	1bf6      	subs	r6, r6, r7
 80087a8:	4637      	mov	r7, r6
 80087aa:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80087ae:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80087b2:	9f07      	ldr	r7, [sp, #28]
 80087b4:	b177      	cbz	r7, 80087d4 <D48_GENERIC+0x150>
 80087b6:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80087ba:	9404      	str	r4, [sp, #16]
 80087bc:	fba6 9a08 	umull	r9, sl, r6, r8
 80087c0:	9e03      	ldr	r6, [sp, #12]
 80087c2:	fb08 aa06 	mla	sl, r8, r6, sl
 80087c6:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80087ca:	f14a 0700 	adc.w	r7, sl, #0
 80087ce:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80087d2:	4654      	mov	r4, sl
 80087d4:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80087d6:	fb05 f606 	mul.w	r6, r5, r6
 80087da:	9d05      	ldr	r5, [sp, #20]
 80087dc:	02e4      	lsls	r4, r4, #11
 80087de:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80087e2:	f04f 0800 	mov.w	r8, #0
 80087e6:	fbc5 7804 	smlal	r7, r8, r5, r4
 80087ea:	4645      	mov	r5, r8
 80087ec:	10ac      	asrs	r4, r5, #2
 80087ee:	9d06      	ldr	r5, [sp, #24]
 80087f0:	f304 040f 	ssat	r4, #16, r4
 80087f4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80087f8:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80087fa:	fa1f f58e 	uxth.w	r5, lr
 80087fe:	42ac      	cmp	r4, r5
 8008800:	d917      	bls.n	8008832 <D48_GENERIC+0x1ae>
 8008802:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8008804:	b2e6      	uxtb	r6, r4
 8008806:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800880a:	4277      	negs	r7, r6
 800880c:	eb00 0b08 	add.w	fp, r0, r8
 8008810:	eb0b 0907 	add.w	r9, fp, r7
 8008814:	2c01      	cmp	r4, #1
 8008816:	eb09 0e08 	add.w	lr, r9, r8
 800881a:	f47f af53 	bne.w	80086c4 <D48_GENERIC+0x40>
 800881e:	9e08      	ldr	r6, [sp, #32]
 8008820:	e9d0 7400 	ldrd	r7, r4, [r0]
 8008824:	3006      	adds	r0, #6
 8008826:	2e00      	cmp	r6, #0
 8008828:	f43f af63 	beq.w	80086f2 <D48_GENERIC+0x6e>
 800882c:	ba7f      	rev16	r7, r7
 800882e:	ba64      	rev16	r4, r4
 8008830:	e75f      	b.n	80086f2 <D48_GENERIC+0x6e>
 8008832:	6093      	str	r3, [r2, #8]
 8008834:	9b01      	ldr	r3, [sp, #4]
 8008836:	60d3      	str	r3, [r2, #12]
 8008838:	9b04      	ldr	r3, [sp, #16]
 800883a:	6153      	str	r3, [r2, #20]
 800883c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883e:	f8c2 c01c 	str.w	ip, [r2, #28]
 8008842:	2000      	movs	r0, #0
 8008844:	f8c2 a010 	str.w	sl, [r2, #16]
 8008848:	6193      	str	r3, [r2, #24]
 800884a:	b00b      	add	sp, #44	@ 0x2c
 800884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008850:	20000010 	.word	0x20000010
 8008854:	000f000a 	.word	0x000f000a
 8008858:	00060003 	.word	0x00060003
 800885c:	00150019 	.word	0x00150019
 8008860:	00190015 	.word	0x00190015
 8008864:	00030006 	.word	0x00030006
 8008868:	000a000f 	.word	0x000a000f

0800886c <D64_GENERIC>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	b089      	sub	sp, #36	@ 0x24
 8008872:	6895      	ldr	r5, [r2, #8]
 8008874:	6913      	ldr	r3, [r2, #16]
 8008876:	9501      	str	r5, [sp, #4]
 8008878:	68d5      	ldr	r5, [r2, #12]
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	9500      	str	r5, [sp, #0]
 800887e:	6953      	ldr	r3, [r2, #20]
 8008880:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8008882:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8008884:	9303      	str	r3, [sp, #12]
 8008886:	6993      	ldr	r3, [r2, #24]
 8008888:	9307      	str	r3, [sp, #28]
 800888a:	e9cd 5104 	strd	r5, r1, [sp, #16]
 800888e:	69d3      	ldr	r3, [r2, #28]
 8008890:	2c00      	cmp	r4, #0
 8008892:	f000 80d7 	beq.w	8008a44 <D64_GENERIC+0x1d8>
 8008896:	6a11      	ldr	r1, [r2, #32]
 8008898:	9106      	str	r1, [sp, #24]
 800889a:	f04f 0e00 	mov.w	lr, #0
 800889e:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8008a84 <D64_GENERIC+0x218>
 80088a2:	4681      	mov	r9, r0
 80088a4:	e0bf      	b.n	8008a26 <D64_GENERIC+0x1ba>
 80088a6:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80088aa:	426c      	negs	r4, r5
 80088ac:	eb09 0708 	add.w	r7, r9, r8
 80088b0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80088b4:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 80088b8:	5d38      	ldrb	r0, [r7, r4]
 80088ba:	5d31      	ldrb	r1, [r6, r4]
 80088bc:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80088c0:	f819 a008 	ldrb.w	sl, [r9, r8]
 80088c4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80088c8:	f899 7000 	ldrb.w	r7, [r9]
 80088cc:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 80088d0:	4426      	add	r6, r4
 80088d2:	0409      	lsls	r1, r1, #16
 80088d4:	0400      	lsls	r0, r0, #16
 80088d6:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80088da:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80088de:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 80088e2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80088e6:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 80088ea:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80088ee:	4459      	add	r1, fp
 80088f0:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 80088f4:	4438      	add	r0, r7
 80088f6:	b2c5      	uxtb	r5, r0
 80088f8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80088fc:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8008900:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8008904:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8008908:	0e00      	lsrs	r0, r0, #24
 800890a:	eb03 0806 	add.w	r8, r3, r6
 800890e:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008912:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8008916:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800891a:	b2c8      	uxtb	r0, r1
 800891c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008920:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008924:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8008928:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800892c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008930:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8008934:	0e09      	lsrs	r1, r1, #24
 8008936:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800893a:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800893e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008942:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008946:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800894a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800894e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8008952:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008956:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800895a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800895e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8008962:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008966:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800896a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800896e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008972:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8008976:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800897a:	0a8b      	lsrs	r3, r1, #10
 800897c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008980:	4938      	ldr	r1, [pc, #224]	@ (8008a64 <D64_GENERIC+0x1f8>)
 8008982:	9c00      	ldr	r4, [sp, #0]
 8008984:	fb28 4101 	smlad	r1, r8, r1, r4
 8008988:	4c37      	ldr	r4, [pc, #220]	@ (8008a68 <D64_GENERIC+0x1fc>)
 800898a:	fb27 1104 	smlad	r1, r7, r4, r1
 800898e:	4c37      	ldr	r4, [pc, #220]	@ (8008a6c <D64_GENERIC+0x200>)
 8008990:	fb20 1104 	smlad	r1, r0, r4, r1
 8008994:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8008998:	fb2a 1106 	smlad	r1, sl, r6, r1
 800899c:	4d34      	ldr	r5, [pc, #208]	@ (8008a70 <D64_GENERIC+0x204>)
 800899e:	9c01      	ldr	r4, [sp, #4]
 80089a0:	fb28 4405 	smlad	r4, r8, r5, r4
 80089a4:	fb2a 4415 	smladx	r4, sl, r5, r4
 80089a8:	4d32      	ldr	r5, [pc, #200]	@ (8008a74 <D64_GENERIC+0x208>)
 80089aa:	fb27 4405 	smlad	r4, r7, r5, r4
 80089ae:	fb20 4415 	smladx	r4, r0, r5, r4
 80089b2:	2501      	movs	r5, #1
 80089b4:	9400      	str	r4, [sp, #0]
 80089b6:	fb28 f805 	smuad	r8, r8, r5
 80089ba:	4c2f      	ldr	r4, [pc, #188]	@ (8008a78 <D64_GENERIC+0x20c>)
 80089bc:	fb27 8704 	smlad	r7, r7, r4, r8
 80089c0:	4c2e      	ldr	r4, [pc, #184]	@ (8008a7c <D64_GENERIC+0x210>)
 80089c2:	fb20 7004 	smlad	r0, r0, r4, r7
 80089c6:	4c2e      	ldr	r4, [pc, #184]	@ (8008a80 <D64_GENERIC+0x214>)
 80089c8:	fb2a 0004 	smlad	r0, sl, r4, r0
 80089cc:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 80089d0:	9906      	ldr	r1, [sp, #24]
 80089d2:	9001      	str	r0, [sp, #4]
 80089d4:	b181      	cbz	r1, 80089f8 <D64_GENERIC+0x18c>
 80089d6:	9802      	ldr	r0, [sp, #8]
 80089d8:	9c03      	ldr	r4, [sp, #12]
 80089da:	4430      	add	r0, r6
 80089dc:	1b00      	subs	r0, r0, r4
 80089de:	fba0 7801 	umull	r7, r8, r0, r1
 80089e2:	17c5      	asrs	r5, r0, #31
 80089e4:	fb01 8805 	mla	r8, r1, r5, r8
 80089e8:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 80089ec:	f148 0100 	adc.w	r1, r8, #0
 80089f0:	0049      	lsls	r1, r1, #1
 80089f2:	e9cd 1602 	strd	r1, r6, [sp, #8]
 80089f6:	460e      	mov	r6, r1
 80089f8:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 80089fa:	9904      	ldr	r1, [sp, #16]
 80089fc:	9805      	ldr	r0, [sp, #20]
 80089fe:	02b6      	lsls	r6, r6, #10
 8008a00:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8008a04:	f04f 0800 	mov.w	r8, #0
 8008a08:	fb0e f404 	mul.w	r4, lr, r4
 8008a0c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8008a10:	4641      	mov	r1, r8
 8008a12:	1089      	asrs	r1, r1, #2
 8008a14:	f301 010f 	ssat	r1, #16, r1
 8008a18:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8008a1c:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8008a1e:	f10e 0e01 	add.w	lr, lr, #1
 8008a22:	4571      	cmp	r1, lr
 8008a24:	dd0e      	ble.n	8008a44 <D64_GENERIC+0x1d8>
 8008a26:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8008a28:	2d01      	cmp	r5, #1
 8008a2a:	f47f af3c 	bne.w	80088a6 <D64_GENERIC+0x3a>
 8008a2e:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8008a30:	06ac      	lsls	r4, r5, #26
 8008a32:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a36:	f109 0908 	add.w	r9, r9, #8
 8008a3a:	f57f af5c 	bpl.w	80088f6 <D64_GENERIC+0x8a>
 8008a3e:	ba40      	rev16	r0, r0
 8008a40:	ba49      	rev16	r1, r1
 8008a42:	e758      	b.n	80088f6 <D64_GENERIC+0x8a>
 8008a44:	61d3      	str	r3, [r2, #28]
 8008a46:	9b02      	ldr	r3, [sp, #8]
 8008a48:	9901      	ldr	r1, [sp, #4]
 8008a4a:	6113      	str	r3, [r2, #16]
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	6091      	str	r1, [r2, #8]
 8008a50:	6153      	str	r3, [r2, #20]
 8008a52:	9900      	ldr	r1, [sp, #0]
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	60d1      	str	r1, [r2, #12]
 8008a58:	2000      	movs	r0, #0
 8008a5a:	6193      	str	r3, [r2, #24]
 8008a5c:	b009      	add	sp, #36	@ 0x24
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a62:	bf00      	nop
 8008a64:	001c0015 	.word	0x001c0015
 8008a68:	000f000a 	.word	0x000f000a
 8008a6c:	00060003 	.word	0x00060003
 8008a70:	0024002a 	.word	0x0024002a
 8008a74:	002e0030 	.word	0x002e0030
 8008a78:	00030006 	.word	0x00030006
 8008a7c:	000a000f 	.word	0x000a000f
 8008a80:	0015001c 	.word	0x0015001c
 8008a84:	20000010 	.word	0x20000010

08008a88 <D80_GENERIC>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	b08b      	sub	sp, #44	@ 0x2c
 8008a8e:	6914      	ldr	r4, [r2, #16]
 8008a90:	9405      	str	r4, [sp, #20]
 8008a92:	6954      	ldr	r4, [r2, #20]
 8008a94:	9406      	str	r4, [sp, #24]
 8008a96:	6994      	ldr	r4, [r2, #24]
 8008a98:	9409      	str	r4, [sp, #36]	@ 0x24
 8008a9a:	6894      	ldr	r4, [r2, #8]
 8008a9c:	9402      	str	r4, [sp, #8]
 8008a9e:	68d4      	ldr	r4, [r2, #12]
 8008aa0:	9401      	str	r4, [sp, #4]
 8008aa2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008aa4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008aa6:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8008aaa:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 810a 	beq.w	8008cc8 <D80_GENERIC+0x240>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8008d18 <D80_GENERIC+0x290>
 8008aba:	e9cd b303 	strd	fp, r3, [sp, #12]
 8008abe:	e0ee      	b.n	8008c9e <D80_GENERIC+0x216>
 8008ac0:	fa5f fe8e 	uxtb.w	lr, lr
 8008ac4:	fa0f f48e 	sxth.w	r4, lr
 8008ac8:	0066      	lsls	r6, r4, #1
 8008aca:	eb06 0804 	add.w	r8, r6, r4
 8008ace:	f1ce 0500 	rsb	r5, lr, #0
 8008ad2:	eb00 0108 	add.w	r1, r0, r8
 8008ad6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008ada:	194b      	adds	r3, r1, r5
 8008adc:	5d49      	ldrb	r1, [r1, r5]
 8008ade:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008ae2:	f813 b004 	ldrb.w	fp, [r3, r4]
 8008ae6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8008aea:	f890 8000 	ldrb.w	r8, [r0]
 8008aee:	eb03 0c04 	add.w	ip, r3, r4
 8008af2:	eb0c 0705 	add.w	r7, ip, r5
 8008af6:	0409      	lsls	r1, r1, #16
 8008af8:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8008afc:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008b00:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008b04:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8008b08:	eb0a 0004 	add.w	r0, sl, r4
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	f81a a004 	ldrb.w	sl, [sl, r4]
 8008b12:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8008b16:	5d44      	ldrb	r4, [r0, r5]
 8008b18:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008b1c:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8008b20:	4428      	add	r0, r5
 8008b22:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8008b26:	4441      	add	r1, r8
 8008b28:	4430      	add	r0, r6
 8008b2a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8008b2e:	441f      	add	r7, r3
 8008b30:	b2cd      	uxtb	r5, r1
 8008b32:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008b36:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8008b3a:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008b44:	0e09      	lsrs	r1, r1, #24
 8008b46:	4433      	add	r3, r6
 8008b48:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8008b4c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8008b50:	b2fd      	uxtb	r5, r7
 8008b52:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8008b56:	469b      	mov	fp, r3
 8008b58:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8008b5c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8008b60:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8008b64:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8008b68:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8008b6c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8008b70:	0e3b      	lsrs	r3, r7, #24
 8008b72:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008b76:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8008b7a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b7e:	fa5f fc84 	uxtb.w	ip, r4
 8008b82:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8008b86:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008b8a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008b8e:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8008b92:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8008b96:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8008b9a:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8008b9e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008ba2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008baa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008bae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008bb2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008bb6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008bba:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008bbe:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008bc2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8008bc6:	0aa3      	lsrs	r3, r4, #10
 8008bc8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008bcc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008bd0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008bd4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8008bde:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8008be2:	4b41      	ldr	r3, [pc, #260]	@ (8008ce8 <D80_GENERIC+0x260>)
 8008be4:	9901      	ldr	r1, [sp, #4]
 8008be6:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008bea:	4940      	ldr	r1, [pc, #256]	@ (8008cec <D80_GENERIC+0x264>)
 8008bec:	fb28 3301 	smlad	r3, r8, r1, r3
 8008bf0:	493f      	ldr	r1, [pc, #252]	@ (8008cf0 <D80_GENERIC+0x268>)
 8008bf2:	fb2e 3301 	smlad	r3, lr, r1, r3
 8008bf6:	493f      	ldr	r1, [pc, #252]	@ (8008cf4 <D80_GENERIC+0x26c>)
 8008bf8:	fb27 3301 	smlad	r3, r7, r1, r3
 8008bfc:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008c00:	fb2c 3404 	smlad	r4, ip, r4, r3
 8008c04:	4b3c      	ldr	r3, [pc, #240]	@ (8008cf8 <D80_GENERIC+0x270>)
 8008c06:	9902      	ldr	r1, [sp, #8]
 8008c08:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008c0c:	493b      	ldr	r1, [pc, #236]	@ (8008cfc <D80_GENERIC+0x274>)
 8008c0e:	fb28 3301 	smlad	r3, r8, r1, r3
 8008c12:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8008c16:	fb2e 3101 	smlad	r1, lr, r1, r3
 8008c1a:	4b39      	ldr	r3, [pc, #228]	@ (8008d00 <D80_GENERIC+0x278>)
 8008c1c:	fb27 1103 	smlad	r1, r7, r3, r1
 8008c20:	4b38      	ldr	r3, [pc, #224]	@ (8008d04 <D80_GENERIC+0x27c>)
 8008c22:	fb2c 1303 	smlad	r3, ip, r3, r1
 8008c26:	2101      	movs	r1, #1
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	fb2b fb01 	smuad	fp, fp, r1
 8008c2e:	4b36      	ldr	r3, [pc, #216]	@ (8008d08 <D80_GENERIC+0x280>)
 8008c30:	fb28 b803 	smlad	r8, r8, r3, fp
 8008c34:	4d35      	ldr	r5, [pc, #212]	@ (8008d0c <D80_GENERIC+0x284>)
 8008c36:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8008c3a:	4d35      	ldr	r5, [pc, #212]	@ (8008d10 <D80_GENERIC+0x288>)
 8008c3c:	fb27 e705 	smlad	r7, r7, r5, lr
 8008c40:	4b34      	ldr	r3, [pc, #208]	@ (8008d14 <D80_GENERIC+0x28c>)
 8008c42:	fb2c 7303 	smlad	r3, ip, r3, r7
 8008c46:	6a11      	ldr	r1, [r2, #32]
 8008c48:	9302      	str	r3, [sp, #8]
 8008c4a:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 8008c4e:	b181      	cbz	r1, 8008c72 <D80_GENERIC+0x1ea>
 8008c50:	9c05      	ldr	r4, [sp, #20]
 8008c52:	9d06      	ldr	r5, [sp, #24]
 8008c54:	441c      	add	r4, r3
 8008c56:	1b64      	subs	r4, r4, r5
 8008c58:	fba4 ab01 	umull	sl, fp, r4, r1
 8008c5c:	17e7      	asrs	r7, r4, #31
 8008c5e:	fb01 bb07 	mla	fp, r1, r7, fp
 8008c62:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8008c66:	f14b 0500 	adc.w	r5, fp, #0
 8008c6a:	0069      	lsls	r1, r5, #1
 8008c6c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8008c70:	460b      	mov	r3, r1
 8008c72:	9e04      	ldr	r6, [sp, #16]
 8008c74:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8008c76:	9f07      	ldr	r7, [sp, #28]
 8008c78:	025b      	lsls	r3, r3, #9
 8008c7a:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8008c7e:	2500      	movs	r5, #0
 8008c80:	fb06 f101 	mul.w	r1, r6, r1
 8008c84:	fbc7 4503 	smlal	r4, r5, r7, r3
 8008c88:	9c08      	ldr	r4, [sp, #32]
 8008c8a:	10ab      	asrs	r3, r5, #2
 8008c8c:	f303 030f 	ssat	r3, #16, r3
 8008c90:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8008c94:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008c96:	1c71      	adds	r1, r6, #1
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	9104      	str	r1, [sp, #16]
 8008c9c:	dd12      	ble.n	8008cc4 <D80_GENERIC+0x23c>
 8008c9e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8008ca2:	f1be 0f01 	cmp.w	lr, #1
 8008ca6:	f47f af0b 	bne.w	8008ac0 <D80_GENERIC+0x38>
 8008caa:	6801      	ldr	r1, [r0, #0]
 8008cac:	6847      	ldr	r7, [r0, #4]
 8008cae:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008cb0:	6884      	ldr	r4, [r0, #8]
 8008cb2:	069b      	lsls	r3, r3, #26
 8008cb4:	f100 000a 	add.w	r0, r0, #10
 8008cb8:	f57f af3a 	bpl.w	8008b30 <D80_GENERIC+0xa8>
 8008cbc:	ba49      	rev16	r1, r1
 8008cbe:	ba7f      	rev16	r7, r7
 8008cc0:	ba64      	rev16	r4, r4
 8008cc2:	e735      	b.n	8008b30 <D80_GENERIC+0xa8>
 8008cc4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	6093      	str	r3, [r2, #8]
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	60d3      	str	r3, [r2, #12]
 8008cd0:	9b05      	ldr	r3, [sp, #20]
 8008cd2:	6113      	str	r3, [r2, #16]
 8008cd4:	9b06      	ldr	r3, [sp, #24]
 8008cd6:	6153      	str	r3, [r2, #20]
 8008cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cda:	f8c2 b01c 	str.w	fp, [r2, #28]
 8008cde:	2000      	movs	r0, #0
 8008ce0:	6193      	str	r3, [r2, #24]
 8008ce2:	b00b      	add	sp, #44	@ 0x2c
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	002d0024 	.word	0x002d0024
 8008cec:	001c0015 	.word	0x001c0015
 8008cf0:	000f000a 	.word	0x000f000a
 8008cf4:	00060003 	.word	0x00060003
 8008cf8:	0037003f 	.word	0x0037003f
 8008cfc:	00450049 	.word	0x00450049
 8008d00:	00490045 	.word	0x00490045
 8008d04:	003f0037 	.word	0x003f0037
 8008d08:	00030006 	.word	0x00030006
 8008d0c:	000a000f 	.word	0x000a000f
 8008d10:	0015001c 	.word	0x0015001c
 8008d14:	0024002d 	.word	0x0024002d
 8008d18:	20000010 	.word	0x20000010

08008d1c <D128_GENERIC>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	b091      	sub	sp, #68	@ 0x44
 8008d22:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008d24:	9004      	str	r0, [sp, #16]
 8008d26:	6910      	ldr	r0, [r2, #16]
 8008d28:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d2a:	6950      	ldr	r0, [r2, #20]
 8008d2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008d2e:	6990      	ldr	r0, [r2, #24]
 8008d30:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008d32:	69d0      	ldr	r0, [r2, #28]
 8008d34:	9002      	str	r0, [sp, #8]
 8008d36:	6890      	ldr	r0, [r2, #8]
 8008d38:	9003      	str	r0, [sp, #12]
 8008d3a:	68d0      	ldr	r0, [r2, #12]
 8008d3c:	9001      	str	r0, [sp, #4]
 8008d3e:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008d40:	9200      	str	r2, [sp, #0]
 8008d42:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8196 	beq.w	8009078 <D128_GENERIC+0x35c>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6a12      	ldr	r2, [r2, #32]
 8008d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d52:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 80090f4 <D128_GENERIC+0x3d8>
 8008d56:	9305      	str	r3, [sp, #20]
 8008d58:	e177      	b.n	800904a <D128_GENERIC+0x32e>
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	9d04      	ldr	r5, [sp, #16]
 8008d5e:	b214      	sxth	r4, r2
 8008d60:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8008d64:	4250      	negs	r0, r2
 8008d66:	eb05 010a 	add.w	r1, r5, sl
 8008d6a:	00a6      	lsls	r6, r4, #2
 8008d6c:	eb01 0800 	add.w	r8, r1, r0
 8008d70:	eb06 0e04 	add.w	lr, r6, r4
 8008d74:	eb08 070e 	add.w	r7, r8, lr
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8008d7e:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8008d82:	9608      	str	r6, [sp, #32]
 8008d84:	eb0c 0604 	add.w	r6, ip, r4
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	1833      	adds	r3, r6, r0
 8008d8c:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8008d90:	9306      	str	r3, [sp, #24]
 8008d92:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	f815 e002 	ldrb.w	lr, [r5, r2]
 8008d9c:	782d      	ldrb	r5, [r5, #0]
 8008d9e:	5c3a      	ldrb	r2, [r7, r0]
 8008da0:	9507      	str	r5, [sp, #28]
 8008da2:	9d06      	ldr	r5, [sp, #24]
 8008da4:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8008da8:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8008db2:	5c33      	ldrb	r3, [r6, r0]
 8008db4:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8008db8:	5c09      	ldrb	r1, [r1, r0]
 8008dba:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8008dbe:	0412      	lsls	r2, r2, #16
 8008dc0:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8008dc4:	eb06 0a04 	add.w	sl, r6, r4
 8008dc8:	5d36      	ldrb	r6, [r6, r4]
 8008dca:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8008dce:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8008dd2:	042d      	lsls	r5, r5, #16
 8008dd4:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8008dd8:	0409      	lsls	r1, r1, #16
 8008dda:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8008dde:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8008de2:	041b      	lsls	r3, r3, #16
 8008de4:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8008de8:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8008dec:	eb0a 0e00 	add.w	lr, sl, r0
 8008df0:	9d07      	ldr	r5, [sp, #28]
 8008df2:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 8008df6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8008dfa:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8008dfe:	9f08      	ldr	r7, [sp, #32]
 8008e00:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8008e04:	4429      	add	r1, r5
 8008e06:	9d04      	ldr	r5, [sp, #16]
 8008e08:	4438      	add	r0, r7
 8008e0a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8008e0e:	9004      	str	r0, [sp, #16]
 8008e10:	442a      	add	r2, r5
 8008e12:	eb06 0a0b 	add.w	sl, r6, fp
 8008e16:	1918      	adds	r0, r3, r4
 8008e18:	b2cb      	uxtb	r3, r1
 8008e1a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008e1e:	9e02      	ldr	r6, [sp, #8]
 8008e20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e24:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008e28:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8008e2c:	441e      	add	r6, r3
 8008e2e:	0e09      	lsrs	r1, r1, #24
 8008e30:	4633      	mov	r3, r6
 8008e32:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008e36:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8008e3a:	b2d4      	uxtb	r4, r2
 8008e3c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008e40:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008e44:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8008e48:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008e4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e50:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008e54:	0e12      	lsrs	r2, r2, #24
 8008e56:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8008e5a:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8008e5e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008e62:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008e66:	9702      	str	r7, [sp, #8]
 8008e68:	b2c2      	uxtb	r2, r0
 8008e6a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008e6e:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 8008e72:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8008e76:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008e7a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8008e7e:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 8008e82:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8008e86:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008e8a:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8008e8e:	0e00      	lsrs	r0, r0, #24
 8008e90:	fa5f f68a 	uxtb.w	r6, sl
 8008e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008e9e:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8008ea2:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008ea6:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8008eaa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008eae:	9509      	str	r5, [sp, #36]	@ 0x24
 8008eb0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008eb4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008eb8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008ebc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ec0:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008ec4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008ec8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008ecc:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008ed0:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008ed4:	9306      	str	r3, [sp, #24]
 8008ed6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008ee0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008ee4:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ee8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008eec:	9b06      	ldr	r3, [sp, #24]
 8008eee:	9506      	str	r5, [sp, #24]
 8008ef0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008ef2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ef6:	f8cd e008 	str.w	lr, [sp, #8]
 8008efa:	46ae      	mov	lr, r5
 8008efc:	9d08      	ldr	r5, [sp, #32]
 8008efe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008f02:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8008f06:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008f0a:	9d02      	ldr	r5, [sp, #8]
 8008f0c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008f10:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008f14:	9f07      	ldr	r7, [sp, #28]
 8008f16:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008f1a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f1e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008f22:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008f26:	9d06      	ldr	r5, [sp, #24]
 8008f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f2c:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008f30:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008f34:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8008f38:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008f3c:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8008f40:	0abe      	lsrs	r6, r7, #10
 8008f42:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008f46:	9602      	str	r6, [sp, #8]
 8008f48:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8008f4c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8008f50:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8008f54:	4e52      	ldr	r6, [pc, #328]	@ (80090a0 <D128_GENERIC+0x384>)
 8008f56:	9f01      	ldr	r7, [sp, #4]
 8008f58:	fb2e 7606 	smlad	r6, lr, r6, r7
 8008f5c:	4f51      	ldr	r7, [pc, #324]	@ (80090a4 <D128_GENERIC+0x388>)
 8008f5e:	fb2a 6607 	smlad	r6, sl, r7, r6
 8008f62:	4f51      	ldr	r7, [pc, #324]	@ (80090a8 <D128_GENERIC+0x38c>)
 8008f64:	fb21 6607 	smlad	r6, r1, r7, r6
 8008f68:	4f50      	ldr	r7, [pc, #320]	@ (80090ac <D128_GENERIC+0x390>)
 8008f6a:	fb24 6607 	smlad	r6, r4, r7, r6
 8008f6e:	4f50      	ldr	r7, [pc, #320]	@ (80090b0 <D128_GENERIC+0x394>)
 8008f70:	fb22 6607 	smlad	r6, r2, r7, r6
 8008f74:	4f4f      	ldr	r7, [pc, #316]	@ (80090b4 <D128_GENERIC+0x398>)
 8008f76:	fb20 6607 	smlad	r6, r0, r7, r6
 8008f7a:	4f4f      	ldr	r7, [pc, #316]	@ (80090b8 <D128_GENERIC+0x39c>)
 8008f7c:	fb23 6607 	smlad	r6, r3, r7, r6
 8008f80:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8008f84:	fb25 6807 	smlad	r8, r5, r7, r6
 8008f88:	4f4c      	ldr	r7, [pc, #304]	@ (80090bc <D128_GENERIC+0x3a0>)
 8008f8a:	9e03      	ldr	r6, [sp, #12]
 8008f8c:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8008f90:	4e4b      	ldr	r6, [pc, #300]	@ (80090c0 <D128_GENERIC+0x3a4>)
 8008f92:	fb2a cc06 	smlad	ip, sl, r6, ip
 8008f96:	4f4b      	ldr	r7, [pc, #300]	@ (80090c4 <D128_GENERIC+0x3a8>)
 8008f98:	fb21 cc07 	smlad	ip, r1, r7, ip
 8008f9c:	4f4a      	ldr	r7, [pc, #296]	@ (80090c8 <D128_GENERIC+0x3ac>)
 8008f9e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8008fa2:	4f4a      	ldr	r7, [pc, #296]	@ (80090cc <D128_GENERIC+0x3b0>)
 8008fa4:	fb22 cc07 	smlad	ip, r2, r7, ip
 8008fa8:	4f49      	ldr	r7, [pc, #292]	@ (80090d0 <D128_GENERIC+0x3b4>)
 8008faa:	fb20 cc07 	smlad	ip, r0, r7, ip
 8008fae:	4f49      	ldr	r7, [pc, #292]	@ (80090d4 <D128_GENERIC+0x3b8>)
 8008fb0:	fb23 c707 	smlad	r7, r3, r7, ip
 8008fb4:	f8df c140 	ldr.w	ip, [pc, #320]	@ 80090f8 <D128_GENERIC+0x3dc>
 8008fb8:	fb25 760c 	smlad	r6, r5, ip, r7
 8008fbc:	f04f 0b01 	mov.w	fp, #1
 8008fc0:	9601      	str	r6, [sp, #4]
 8008fc2:	fb2e fb0b 	smuad	fp, lr, fp
 8008fc6:	4f44      	ldr	r7, [pc, #272]	@ (80090d8 <D128_GENERIC+0x3bc>)
 8008fc8:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008fcc:	4f43      	ldr	r7, [pc, #268]	@ (80090dc <D128_GENERIC+0x3c0>)
 8008fce:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008fd2:	4f43      	ldr	r7, [pc, #268]	@ (80090e0 <D128_GENERIC+0x3c4>)
 8008fd4:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008fd8:	4f42      	ldr	r7, [pc, #264]	@ (80090e4 <D128_GENERIC+0x3c8>)
 8008fda:	fb22 a707 	smlad	r7, r2, r7, sl
 8008fde:	4a42      	ldr	r2, [pc, #264]	@ (80090e8 <D128_GENERIC+0x3cc>)
 8008fe0:	fb20 7702 	smlad	r7, r0, r2, r7
 8008fe4:	4a41      	ldr	r2, [pc, #260]	@ (80090ec <D128_GENERIC+0x3d0>)
 8008fe6:	fb23 7702 	smlad	r7, r3, r2, r7
 8008fea:	4b41      	ldr	r3, [pc, #260]	@ (80090f0 <D128_GENERIC+0x3d4>)
 8008fec:	fb25 7303 	smlad	r3, r5, r3, r7
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ff4:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8008ff8:	b183      	cbz	r3, 800901c <D128_GENERIC+0x300>
 8008ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ffe:	4432      	add	r2, r6
 8009000:	1a52      	subs	r2, r2, r1
 8009002:	fba2 4503 	umull	r4, r5, r2, r3
 8009006:	17d1      	asrs	r1, r2, #31
 8009008:	fb03 5501 	mla	r5, r3, r1, r5
 800900c:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8009010:	f145 0300 	adc.w	r3, r5, #0
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 800901a:	461e      	mov	r6, r3
 800901c:	9800      	ldr	r0, [sp, #0]
 800901e:	9c05      	ldr	r4, [sp, #20]
 8009020:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8009022:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8009024:	01f6      	lsls	r6, r6, #7
 8009026:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800902a:	2300      	movs	r3, #0
 800902c:	fbc5 2306 	smlal	r2, r3, r5, r6
 8009030:	fb04 f101 	mul.w	r1, r4, r1
 8009034:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009036:	109b      	asrs	r3, r3, #2
 8009038:	f303 030f 	ssat	r3, #16, r3
 800903c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8009040:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8009042:	1c62      	adds	r2, r4, #1
 8009044:	4293      	cmp	r3, r2
 8009046:	9205      	str	r2, [sp, #20]
 8009048:	dd16      	ble.n	8009078 <D128_GENERIC+0x35c>
 800904a:	9b00      	ldr	r3, [sp, #0]
 800904c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800904e:	2a01      	cmp	r2, #1
 8009050:	f47f ae83 	bne.w	8008d5a <D128_GENERIC+0x3e>
 8009054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009056:	9c04      	ldr	r4, [sp, #16]
 8009058:	069b      	lsls	r3, r3, #26
 800905a:	e9d4 1200 	ldrd	r1, r2, [r4]
 800905e:	68a0      	ldr	r0, [r4, #8]
 8009060:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009064:	f104 0410 	add.w	r4, r4, #16
 8009068:	d517      	bpl.n	800909a <D128_GENERIC+0x37e>
 800906a:	ba49      	rev16	r1, r1
 800906c:	ba52      	rev16	r2, r2
 800906e:	ba40      	rev16	r0, r0
 8009070:	fa9a fa9a 	rev16.w	sl, sl
 8009074:	9404      	str	r4, [sp, #16]
 8009076:	e6cf      	b.n	8008e18 <D128_GENERIC+0xfc>
 8009078:	9b00      	ldr	r3, [sp, #0]
 800907a:	9903      	ldr	r1, [sp, #12]
 800907c:	6099      	str	r1, [r3, #8]
 800907e:	9901      	ldr	r1, [sp, #4]
 8009080:	60d9      	str	r1, [r3, #12]
 8009082:	9902      	ldr	r1, [sp, #8]
 8009084:	61d9      	str	r1, [r3, #28]
 8009086:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009088:	6119      	str	r1, [r3, #16]
 800908a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800908c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800908e:	6159      	str	r1, [r3, #20]
 8009090:	2000      	movs	r0, #0
 8009092:	619a      	str	r2, [r3, #24]
 8009094:	b011      	add	sp, #68	@ 0x44
 8009096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909a:	9404      	str	r4, [sp, #16]
 800909c:	e6bc      	b.n	8008e18 <D128_GENERIC+0xfc>
 800909e:	bf00      	nop
 80090a0:	00780069 	.word	0x00780069
 80090a4:	005b004e 	.word	0x005b004e
 80090a8:	00420037 	.word	0x00420037
 80090ac:	002d0024 	.word	0x002d0024
 80090b0:	001c0015 	.word	0x001c0015
 80090b4:	000f000a 	.word	0x000f000a
 80090b8:	00060003 	.word	0x00060003
 80090bc:	00880096 	.word	0x00880096
 80090c0:	00a200ac 	.word	0x00a200ac
 80090c4:	00b400ba 	.word	0x00b400ba
 80090c8:	00be00c0 	.word	0x00be00c0
 80090cc:	00c000be 	.word	0x00c000be
 80090d0:	00ba00b4 	.word	0x00ba00b4
 80090d4:	00ac00a2 	.word	0x00ac00a2
 80090d8:	00030006 	.word	0x00030006
 80090dc:	000a000f 	.word	0x000a000f
 80090e0:	0015001c 	.word	0x0015001c
 80090e4:	0024002d 	.word	0x0024002d
 80090e8:	00370042 	.word	0x00370042
 80090ec:	004e005b 	.word	0x004e005b
 80090f0:	00690078 	.word	0x00690078
 80090f4:	20000010 	.word	0x20000010
 80090f8:	00960088 	.word	0x00960088

080090fc <D16_1CH_HTONS_VOL_HP>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009104:	b085      	sub	sp, #20
 8009106:	4681      	mov	r9, r0
 8009108:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800910a:	6993      	ldr	r3, [r2, #24]
 800910c:	9303      	str	r3, [sp, #12]
 800910e:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8009112:	69d3      	ldr	r3, [r2, #28]
 8009114:	9402      	str	r4, [sp, #8]
 8009116:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 800911a:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800911e:	2800      	cmp	r0, #0
 8009120:	d057      	beq.n	80091d2 <D16_1CH_HTONS_VOL_HP+0xd6>
 8009122:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8009126:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 80091e0 <D16_1CH_HTONS_VOL_HP+0xe4>
 800912a:	f1a1 0802 	sub.w	r8, r1, #2
 800912e:	4639      	mov	r1, r7
 8009130:	465f      	mov	r7, fp
 8009132:	46d3      	mov	fp, sl
 8009134:	46ca      	mov	sl, r9
 8009136:	4699      	mov	r9, r3
 8009138:	4633      	mov	r3, r6
 800913a:	4616      	mov	r6, r2
 800913c:	f85a 2b02 	ldr.w	r2, [sl], #2
 8009140:	ba52      	rev16	r2, r2
 8009142:	b2d4      	uxtb	r4, r2
 8009144:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009148:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 800914c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009150:	4491      	add	r9, r2
 8009152:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 8009156:	f3c0 0209 	ubfx	r2, r0, #0, #10
 800915a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800915e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8009162:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8009166:	481c      	ldr	r0, [pc, #112]	@ (80091d8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8009168:	fb22 5400 	smlad	r4, r2, r0, r5
 800916c:	481b      	ldr	r0, [pc, #108]	@ (80091dc <D16_1CH_HTONS_VOL_HP+0xe0>)
 800916e:	fb22 f500 	smuad	r5, r2, r0
 8009172:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8009176:	18e2      	adds	r2, r4, r3
 8009178:	1a52      	subs	r2, r2, r1
 800917a:	17d1      	asrs	r1, r2, #31
 800917c:	fba2 230c 	umull	r2, r3, r2, ip
 8009180:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8009184:	fb0c 3301 	mla	r3, ip, r1, r3
 8009188:	f143 0100 	adc.w	r1, r3, #0
 800918c:	e9cd 0100 	strd	r0, r1, [sp]
 8009190:	044a      	lsls	r2, r1, #17
 8009192:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009196:	2100      	movs	r1, #0
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	fbcb 0102 	smlal	r0, r1, fp, r2
 800919e:	45ba      	cmp	sl, r7
 80091a0:	ea4f 02a1 	mov.w	r2, r1, asr #2
 80091a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091a8:	f302 020f 	ssat	r2, #16, r2
 80091ac:	4621      	mov	r1, r4
 80091ae:	f828 2f02 	strh.w	r2, [r8, #2]!
 80091b2:	d1c3      	bne.n	800913c <D16_1CH_HTONS_VOL_HP+0x40>
 80091b4:	4632      	mov	r2, r6
 80091b6:	461e      	mov	r6, r3
 80091b8:	464b      	mov	r3, r9
 80091ba:	9902      	ldr	r1, [sp, #8]
 80091bc:	61d3      	str	r3, [r2, #28]
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	6095      	str	r5, [r2, #8]
 80091c2:	2000      	movs	r0, #0
 80091c4:	60d1      	str	r1, [r2, #12]
 80091c6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80091ca:	6193      	str	r3, [r2, #24]
 80091cc:	b005      	add	sp, #20
 80091ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d2:	463c      	mov	r4, r7
 80091d4:	e7f1      	b.n	80091ba <D16_1CH_HTONS_VOL_HP+0xbe>
 80091d6:	bf00      	nop
 80091d8:	00030001 	.word	0x00030001
 80091dc:	00010003 	.word	0x00010003
 80091e0:	20000010 	.word	0x20000010

080091e4 <D24_1CH_HTONS_VOL_HP>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	4696      	mov	lr, r2
 80091ea:	b089      	sub	sp, #36	@ 0x24
 80091ec:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 80091f0:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80091f2:	f8de 3018 	ldr.w	r3, [lr, #24]
 80091f6:	9703      	str	r7, [sp, #12]
 80091f8:	f8de 7020 	ldr.w	r7, [lr, #32]
 80091fc:	9306      	str	r3, [sp, #24]
 80091fe:	9205      	str	r2, [sp, #20]
 8009200:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8009204:	f8de 601c 	ldr.w	r6, [lr, #28]
 8009208:	9704      	str	r7, [sp, #16]
 800920a:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 800920e:	2a00      	cmp	r2, #0
 8009210:	f000 8081 	beq.w	8009316 <D24_1CH_HTONS_VOL_HP+0x132>
 8009214:	f1a1 0b02 	sub.w	fp, r1, #2
 8009218:	2700      	movs	r7, #0
 800921a:	46d9      	mov	r9, fp
 800921c:	f8cd e01c 	str.w	lr, [sp, #28]
 8009220:	46d3      	mov	fp, sl
 8009222:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8009324 <D24_1CH_HTONS_VOL_HP+0x140>
 8009226:	46a8      	mov	r8, r5
 8009228:	46ba      	mov	sl, r7
 800922a:	469e      	mov	lr, r3
 800922c:	e052      	b.n	80092d4 <D24_1CH_HTONS_VOL_HP+0xf0>
 800922e:	7842      	ldrb	r2, [r0, #1]
 8009230:	3002      	adds	r0, #2
 8009232:	4413      	add	r3, r2
 8009234:	b2d9      	uxtb	r1, r3
 8009236:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800923a:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800923e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009248:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800924c:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8009250:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8009254:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009258:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800925c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009260:	4a2e      	ldr	r2, [pc, #184]	@ (800931c <D24_1CH_HTONS_VOL_HP+0x138>)
 8009262:	fb23 b102 	smlad	r1, r3, r2, fp
 8009266:	4a2e      	ldr	r2, [pc, #184]	@ (8009320 <D24_1CH_HTONS_VOL_HP+0x13c>)
 8009268:	fb23 eb02 	smlad	fp, r3, r2, lr
 800926c:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 8009270:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8009274:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8009278:	2201      	movs	r2, #1
 800927a:	fb23 f702 	smuad	r7, r3, r2
 800927e:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8009282:	eb01 0208 	add.w	r2, r1, r8
 8009286:	1b12      	subs	r2, r2, r4
 8009288:	17d4      	asrs	r4, r2, #31
 800928a:	4613      	mov	r3, r2
 800928c:	e9cd 3400 	strd	r3, r4, [sp]
 8009290:	9c04      	ldr	r4, [sp, #16]
 8009292:	9d01      	ldr	r5, [sp, #4]
 8009294:	fba2 2304 	umull	r2, r3, r2, r4
 8009298:	fb04 3305 	mla	r3, r4, r5, r3
 800929c:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80092a0:	f143 0500 	adc.w	r5, r3, #0
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	e9cd 4500 	strd	r4, r5, [sp]
 80092aa:	03ea      	lsls	r2, r5, #15
 80092ac:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80092b0:	2500      	movs	r5, #0
 80092b2:	fbc3 4502 	smlal	r4, r5, r3, r2
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80092bc:	10ab      	asrs	r3, r5, #2
 80092be:	f303 030f 	ssat	r3, #16, r3
 80092c2:	f829 3f02 	strh.w	r3, [r9, #2]!
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	f10a 0a01 	add.w	sl, sl, #1
 80092cc:	459a      	cmp	sl, r3
 80092ce:	44be      	add	lr, r7
 80092d0:	460c      	mov	r4, r1
 80092d2:	d00e      	beq.n	80092f2 <D24_1CH_HTONS_VOL_HP+0x10e>
 80092d4:	7801      	ldrb	r1, [r0, #0]
 80092d6:	78c2      	ldrb	r2, [r0, #3]
 80092d8:	020b      	lsls	r3, r1, #8
 80092da:	f01a 0f01 	tst.w	sl, #1
 80092de:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80092e2:	d0a4      	beq.n	800922e <D24_1CH_HTONS_VOL_HP+0x4a>
 80092e4:	7885      	ldrb	r5, [r0, #2]
 80092e6:	0212      	lsls	r2, r2, #8
 80092e8:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 80092ec:	440b      	add	r3, r1
 80092ee:	3004      	adds	r0, #4
 80092f0:	e7a0      	b.n	8009234 <D24_1CH_HTONS_VOL_HP+0x50>
 80092f2:	4673      	mov	r3, lr
 80092f4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80092f8:	46da      	mov	sl, fp
 80092fa:	4645      	mov	r5, r8
 80092fc:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8009300:	9b06      	ldr	r3, [sp, #24]
 8009302:	f8ce 601c 	str.w	r6, [lr, #28]
 8009306:	2000      	movs	r0, #0
 8009308:	e9ce 5104 	strd	r5, r1, [lr, #16]
 800930c:	f8ce 3018 	str.w	r3, [lr, #24]
 8009310:	b009      	add	sp, #36	@ 0x24
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	4621      	mov	r1, r4
 8009318:	e7f0      	b.n	80092fc <D24_1CH_HTONS_VOL_HP+0x118>
 800931a:	bf00      	nop
 800931c:	00030001 	.word	0x00030001
 8009320:	00060007 	.word	0x00060007
 8009324:	20000010 	.word	0x20000010

08009328 <D32_1CH_HTONS_VOL_HP>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	4682      	mov	sl, r0
 800932e:	b087      	sub	sp, #28
 8009330:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8009332:	6993      	ldr	r3, [r2, #24]
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800933a:	69d5      	ldr	r5, [r2, #28]
 800933c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800933e:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8009342:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009346:	2800      	cmp	r0, #0
 8009348:	d070      	beq.n	800942c <D32_1CH_HTONS_VOL_HP+0x104>
 800934a:	468e      	mov	lr, r1
 800934c:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8009440 <D32_1CH_HTONS_VOL_HP+0x118>
 8009350:	9205      	str	r2, [sp, #20]
 8009352:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009356:	46d3      	mov	fp, sl
 8009358:	4638      	mov	r0, r7
 800935a:	46ca      	mov	sl, r9
 800935c:	9103      	str	r1, [sp, #12]
 800935e:	4627      	mov	r7, r4
 8009360:	4699      	mov	r9, r3
 8009362:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009366:	ba49      	rev16	r1, r1
 8009368:	b2ca      	uxtb	r2, r1
 800936a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800936e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8009372:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8009376:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800937a:	0e09      	lsrs	r1, r1, #24
 800937c:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8009380:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8009384:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8009388:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800938c:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8009390:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8009394:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009398:	f3c5 0109 	ubfx	r1, r5, #0, #10
 800939c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093a0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80093a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a8:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80093ac:	4a20      	ldr	r2, [pc, #128]	@ (8009430 <D32_1CH_HTONS_VOL_HP+0x108>)
 80093ae:	fb23 8802 	smlad	r8, r3, r2, r8
 80093b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80093b6:	fb24 8102 	smlad	r1, r4, r2, r8
 80093ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009434 <D32_1CH_HTONS_VOL_HP+0x10c>)
 80093bc:	fb23 9802 	smlad	r8, r3, r2, r9
 80093c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009438 <D32_1CH_HTONS_VOL_HP+0x110>)
 80093c2:	fb24 8802 	smlad	r8, r4, r2, r8
 80093c6:	2201      	movs	r2, #1
 80093c8:	fb23 f302 	smuad	r3, r3, r2
 80093cc:	4a1b      	ldr	r2, [pc, #108]	@ (800943c <D32_1CH_HTONS_VOL_HP+0x114>)
 80093ce:	fb24 3902 	smlad	r9, r4, r2, r3
 80093d2:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 80093d6:	19a2      	adds	r2, r4, r6
 80093d8:	1a12      	subs	r2, r2, r0
 80093da:	17d1      	asrs	r1, r2, #31
 80093dc:	fba2 230a 	umull	r2, r3, r2, sl
 80093e0:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 80093e4:	fb0a 3301 	mla	r3, sl, r1, r3
 80093e8:	f143 0100 	adc.w	r1, r3, #0
 80093ec:	e9cd 0100 	strd	r0, r1, [sp]
 80093f0:	038a      	lsls	r2, r1, #14
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80093f8:	2100      	movs	r1, #0
 80093fa:	fbc7 0102 	smlal	r0, r1, r7, r2
 80093fe:	108a      	asrs	r2, r1, #2
 8009400:	005e      	lsls	r6, r3, #1
 8009402:	f302 020f 	ssat	r2, #16, r2
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	f82e 2b02 	strh.w	r2, [lr], #2
 800940c:	459e      	cmp	lr, r3
 800940e:	4620      	mov	r0, r4
 8009410:	d1a7      	bne.n	8009362 <D32_1CH_HTONS_VOL_HP+0x3a>
 8009412:	9a05      	ldr	r2, [sp, #20]
 8009414:	464b      	mov	r3, r9
 8009416:	e9c2 3802 	strd	r3, r8, [r2, #8]
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	61d5      	str	r5, [r2, #28]
 800941e:	2000      	movs	r0, #0
 8009420:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009424:	6193      	str	r3, [r2, #24]
 8009426:	b007      	add	sp, #28
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	463c      	mov	r4, r7
 800942e:	e7f2      	b.n	8009416 <D32_1CH_HTONS_VOL_HP+0xee>
 8009430:	00060003 	.word	0x00060003
 8009434:	000a000c 	.word	0x000a000c
 8009438:	000c000a 	.word	0x000c000a
 800943c:	00030006 	.word	0x00030006
 8009440:	20000010 	.word	0x20000010

08009444 <D48_1CH_HTONS_VOL_HP>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	b087      	sub	sp, #28
 800944a:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 800944c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800944e:	6993      	ldr	r3, [r2, #24]
 8009450:	9702      	str	r7, [sp, #8]
 8009452:	6a17      	ldr	r7, [r2, #32]
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 800945a:	69d6      	ldr	r6, [r2, #28]
 800945c:	9705      	str	r7, [sp, #20]
 800945e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009462:	2d00      	cmp	r5, #0
 8009464:	f000 8093 	beq.w	800958e <D48_1CH_HTONS_VOL_HP+0x14a>
 8009468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800946c:	46ba      	mov	sl, r7
 800946e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009472:	3902      	subs	r1, #2
 8009474:	4f47      	ldr	r7, [pc, #284]	@ (8009594 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009476:	9503      	str	r5, [sp, #12]
 8009478:	9101      	str	r1, [sp, #4]
 800947a:	469e      	mov	lr, r3
 800947c:	9205      	str	r2, [sp, #20]
 800947e:	e9d0 3500 	ldrd	r3, r5, [r0]
 8009482:	3006      	adds	r0, #6
 8009484:	ba5b      	rev16	r3, r3
 8009486:	ba6d      	rev16	r5, r5
 8009488:	b2da      	uxtb	r2, r3
 800948a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800948e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009492:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009496:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800949a:	0e1b      	lsrs	r3, r3, #24
 800949c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80094a0:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 80094a4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80094a8:	fa5f fb85 	uxtb.w	fp, r5
 80094ac:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 80094b0:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80094b4:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80094b8:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 80094bc:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80094c0:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 80094c4:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80094c8:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80094cc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80094d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094d4:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 80094d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80094dc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80094e0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80094e4:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 80094e8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80094ec:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 80094f0:	4b29      	ldr	r3, [pc, #164]	@ (8009598 <D48_1CH_HTONS_VOL_HP+0x154>)
 80094f2:	fb22 c103 	smlad	r1, r2, r3, ip
 80094f6:	4b29      	ldr	r3, [pc, #164]	@ (800959c <D48_1CH_HTONS_VOL_HP+0x158>)
 80094f8:	fb28 1103 	smlad	r1, r8, r3, r1
 80094fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009500:	fb25 1103 	smlad	r1, r5, r3, r1
 8009504:	4b26      	ldr	r3, [pc, #152]	@ (80095a0 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8009506:	fb22 ec03 	smlad	ip, r2, r3, lr
 800950a:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 800950e:	fb28 cc03 	smlad	ip, r8, r3, ip
 8009512:	4b24      	ldr	r3, [pc, #144]	@ (80095a4 <D48_1CH_HTONS_VOL_HP+0x160>)
 8009514:	fb25 cc03 	smlad	ip, r5, r3, ip
 8009518:	f04f 0e01 	mov.w	lr, #1
 800951c:	fb22 f20e 	smuad	r2, r2, lr
 8009520:	4b21      	ldr	r3, [pc, #132]	@ (80095a8 <D48_1CH_HTONS_VOL_HP+0x164>)
 8009522:	fb28 2803 	smlad	r8, r8, r3, r2
 8009526:	4b21      	ldr	r3, [pc, #132]	@ (80095ac <D48_1CH_HTONS_VOL_HP+0x168>)
 8009528:	fb25 8e03 	smlad	lr, r5, r3, r8
 800952c:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8009530:	190a      	adds	r2, r1, r4
 8009532:	eba2 0209 	sub.w	r2, r2, r9
 8009536:	17d5      	asrs	r5, r2, #31
 8009538:	fba2 230a 	umull	r2, r3, r2, sl
 800953c:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8009540:	fb0a 3305 	mla	r3, sl, r5, r3
 8009544:	f143 0500 	adc.w	r5, r3, #0
 8009548:	9b02      	ldr	r3, [sp, #8]
 800954a:	032a      	lsls	r2, r5, #12
 800954c:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8009550:	f04f 0900 	mov.w	r9, #0
 8009554:	fbc3 8902 	smlal	r8, r9, r3, r2
 8009558:	9a01      	ldr	r2, [sp, #4]
 800955a:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800955e:	f303 030f 	ssat	r3, #16, r3
 8009562:	f822 3f02 	strh.w	r3, [r2, #2]!
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	9201      	str	r2, [sp, #4]
 800956a:	4283      	cmp	r3, r0
 800956c:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8009570:	4689      	mov	r9, r1
 8009572:	d184      	bne.n	800947e <D48_1CH_HTONS_VOL_HP+0x3a>
 8009574:	9a05      	ldr	r2, [sp, #20]
 8009576:	4673      	mov	r3, lr
 8009578:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	61d6      	str	r6, [r2, #28]
 8009580:	2000      	movs	r0, #0
 8009582:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009586:	6193      	str	r3, [r2, #24]
 8009588:	b007      	add	sp, #28
 800958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958e:	4649      	mov	r1, r9
 8009590:	e7f2      	b.n	8009578 <D48_1CH_HTONS_VOL_HP+0x134>
 8009592:	bf00      	nop
 8009594:	20000010 	.word	0x20000010
 8009598:	000f000a 	.word	0x000f000a
 800959c:	00060003 	.word	0x00060003
 80095a0:	00150019 	.word	0x00150019
 80095a4:	00190015 	.word	0x00190015
 80095a8:	00030006 	.word	0x00030006
 80095ac:	000a000f 	.word	0x000a000f

080095b0 <D64_1CH_HTONS_VOL_HP>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	b087      	sub	sp, #28
 80095b6:	6913      	ldr	r3, [r2, #16]
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 80095be:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80095c0:	9601      	str	r6, [sp, #4]
 80095c2:	4681      	mov	r9, r0
 80095c4:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80095c6:	6a16      	ldr	r6, [r2, #32]
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 80095ce:	69d3      	ldr	r3, [r2, #28]
 80095d0:	9602      	str	r6, [sp, #8]
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f000 809d 	beq.w	8009712 <D64_1CH_HTONS_VOL_HP+0x162>
 80095d8:	468e      	mov	lr, r1
 80095da:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800974c <D64_1CH_HTONS_VOL_HP+0x19c>
 80095de:	9205      	str	r2, [sp, #20]
 80095e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80095e4:	9103      	str	r1, [sp, #12]
 80095e6:	4622      	mov	r2, r4
 80095e8:	4619      	mov	r1, r3
 80095ea:	f859 3b08 	ldr.w	r3, [r9], #8
 80095ee:	f859 6c04 	ldr.w	r6, [r9, #-4]
 80095f2:	ba5b      	rev16	r3, r3
 80095f4:	ba76      	rev16	r6, r6
 80095f6:	b2dc      	uxtb	r4, r3
 80095f8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80095fc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8009600:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8009604:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009608:	0e1b      	lsrs	r3, r3, #24
 800960a:	eb01 0b07 	add.w	fp, r1, r7
 800960e:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8009612:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8009616:	b2f1      	uxtb	r1, r6
 8009618:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 800961c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8009620:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8009624:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8009628:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800962c:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8009630:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8009634:	0e36      	lsrs	r6, r6, #24
 8009636:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 800963a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800963e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8009642:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009646:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800964a:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800964e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009652:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009656:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800965a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800965e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009662:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8009666:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800966a:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800966e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009672:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8009676:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800967a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800967e:	4b2b      	ldr	r3, [pc, #172]	@ (800972c <D64_1CH_HTONS_VOL_HP+0x17c>)
 8009680:	0ab1      	lsrs	r1, r6, #10
 8009682:	fb2b 8803 	smlad	r8, fp, r3, r8
 8009686:	4b2a      	ldr	r3, [pc, #168]	@ (8009730 <D64_1CH_HTONS_VOL_HP+0x180>)
 8009688:	fb2a 8803 	smlad	r8, sl, r3, r8
 800968c:	4b29      	ldr	r3, [pc, #164]	@ (8009734 <D64_1CH_HTONS_VOL_HP+0x184>)
 800968e:	fb27 8803 	smlad	r8, r7, r3, r8
 8009692:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8009696:	fb20 8604 	smlad	r6, r0, r4, r8
 800969a:	4b27      	ldr	r3, [pc, #156]	@ (8009738 <D64_1CH_HTONS_VOL_HP+0x188>)
 800969c:	fb2b 5803 	smlad	r8, fp, r3, r5
 80096a0:	fb20 8813 	smladx	r8, r0, r3, r8
 80096a4:	4b25      	ldr	r3, [pc, #148]	@ (800973c <D64_1CH_HTONS_VOL_HP+0x18c>)
 80096a6:	fb2a 8803 	smlad	r8, sl, r3, r8
 80096aa:	fb27 8813 	smladx	r8, r7, r3, r8
 80096ae:	2401      	movs	r4, #1
 80096b0:	fb2b fb04 	smuad	fp, fp, r4
 80096b4:	4b22      	ldr	r3, [pc, #136]	@ (8009740 <D64_1CH_HTONS_VOL_HP+0x190>)
 80096b6:	fb2a ba03 	smlad	sl, sl, r3, fp
 80096ba:	4b22      	ldr	r3, [pc, #136]	@ (8009744 <D64_1CH_HTONS_VOL_HP+0x194>)
 80096bc:	fb27 a703 	smlad	r7, r7, r3, sl
 80096c0:	4b21      	ldr	r3, [pc, #132]	@ (8009748 <D64_1CH_HTONS_VOL_HP+0x198>)
 80096c2:	fb20 7503 	smlad	r5, r0, r3, r7
 80096c6:	9b00      	ldr	r3, [sp, #0]
 80096c8:	9802      	ldr	r0, [sp, #8]
 80096ca:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 80096ce:	4423      	add	r3, r4
 80096d0:	1a9a      	subs	r2, r3, r2
 80096d2:	17d7      	asrs	r7, r2, #31
 80096d4:	fba2 2300 	umull	r2, r3, r2, r0
 80096d8:	fb00 3307 	mla	r3, r0, r7, r3
 80096dc:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 80096e0:	f143 0b00 	adc.w	fp, r3, #0
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 80096ea:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80096ee:	2700      	movs	r7, #0
 80096f0:	fbc3 6702 	smlal	r6, r7, r3, r2
 80096f4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80096f8:	10ba      	asrs	r2, r7, #2
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	f302 020f 	ssat	r2, #16, r2
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	f82e 2b02 	strh.w	r2, [lr], #2
 8009706:	459e      	cmp	lr, r3
 8009708:	4622      	mov	r2, r4
 800970a:	f47f af6e 	bne.w	80095ea <D64_1CH_HTONS_VOL_HP+0x3a>
 800970e:	9a05      	ldr	r2, [sp, #20]
 8009710:	460b      	mov	r3, r1
 8009712:	61d3      	str	r3, [r2, #28]
 8009714:	9b00      	ldr	r3, [sp, #0]
 8009716:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800971a:	9b04      	ldr	r3, [sp, #16]
 800971c:	6193      	str	r3, [r2, #24]
 800971e:	2000      	movs	r0, #0
 8009720:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8009724:	b007      	add	sp, #28
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972a:	bf00      	nop
 800972c:	001c0015 	.word	0x001c0015
 8009730:	000f000a 	.word	0x000f000a
 8009734:	00060003 	.word	0x00060003
 8009738:	0024002a 	.word	0x0024002a
 800973c:	002e0030 	.word	0x002e0030
 8009740:	00030006 	.word	0x00030006
 8009744:	000a000f 	.word	0x000a000f
 8009748:	0015001c 	.word	0x0015001c
 800974c:	20000010 	.word	0x20000010

08009750 <D80_1CH_HTONS_VOL_HP>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	4615      	mov	r5, r2
 8009756:	b089      	sub	sp, #36	@ 0x24
 8009758:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 800975c:	692b      	ldr	r3, [r5, #16]
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8009764:	9400      	str	r4, [sp, #0]
 8009766:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8009768:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800976a:	9403      	str	r4, [sp, #12]
 800976c:	6a2c      	ldr	r4, [r5, #32]
 800976e:	9306      	str	r3, [sp, #24]
 8009770:	9404      	str	r4, [sp, #16]
 8009772:	69eb      	ldr	r3, [r5, #28]
 8009774:	2a00      	cmp	r2, #0
 8009776:	f000 80d3 	beq.w	8009920 <D80_1CH_HTONS_VOL_HP+0x1d0>
 800977a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800977e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009782:	9205      	str	r2, [sp, #20]
 8009784:	4c67      	ldr	r4, [pc, #412]	@ (8009924 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8009786:	9507      	str	r5, [sp, #28]
 8009788:	1e8a      	subs	r2, r1, #2
 800978a:	9202      	str	r2, [sp, #8]
 800978c:	469b      	mov	fp, r3
 800978e:	6807      	ldr	r7, [r0, #0]
 8009790:	6842      	ldr	r2, [r0, #4]
 8009792:	6883      	ldr	r3, [r0, #8]
 8009794:	300a      	adds	r0, #10
 8009796:	ba7f      	rev16	r7, r7
 8009798:	ba52      	rev16	r2, r2
 800979a:	ba5b      	rev16	r3, r3
 800979c:	b2fd      	uxtb	r5, r7
 800979e:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80097a2:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 80097a6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80097aa:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80097ae:	44f3      	add	fp, lr
 80097b0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80097b4:	0e3f      	lsrs	r7, r7, #24
 80097b6:	fa5f fe82 	uxtb.w	lr, r2
 80097ba:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 80097be:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 80097c2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80097c6:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 80097ca:	f3c2 2507 	ubfx	r5, r2, #8, #8
 80097ce:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80097d2:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 80097d6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80097da:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 80097de:	0e12      	lsrs	r2, r2, #24
 80097e0:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 80097e4:	fa5f fe83 	uxtb.w	lr, r3
 80097e8:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 80097ec:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097f0:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 80097f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80097f8:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80097fc:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8009800:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009804:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8009808:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800980c:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009810:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009814:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009818:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800981c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009820:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8009824:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009828:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 800982c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009830:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009834:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009838:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 800983c:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8009840:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8009844:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8009848:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800984c:	4b36      	ldr	r3, [pc, #216]	@ (8009928 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800984e:	9a00      	ldr	r2, [sp, #0]
 8009850:	fb21 2303 	smlad	r3, r1, r3, r2
 8009854:	4a35      	ldr	r2, [pc, #212]	@ (800992c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8009856:	fb27 3302 	smlad	r3, r7, r2, r3
 800985a:	4a35      	ldr	r2, [pc, #212]	@ (8009930 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800985c:	fb25 3302 	smlad	r3, r5, r2, r3
 8009860:	4a34      	ldr	r2, [pc, #208]	@ (8009934 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8009862:	fb28 3302 	smlad	r3, r8, r2, r3
 8009866:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800986a:	fb2e 3302 	smlad	r3, lr, r2, r3
 800986e:	4a32      	ldr	r2, [pc, #200]	@ (8009938 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009870:	fb21 cc02 	smlad	ip, r1, r2, ip
 8009874:	4a31      	ldr	r2, [pc, #196]	@ (800993c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8009876:	fb27 cc02 	smlad	ip, r7, r2, ip
 800987a:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 800987e:	fb25 c909 	smlad	r9, r5, r9, ip
 8009882:	4a2f      	ldr	r2, [pc, #188]	@ (8009940 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8009884:	fb28 9902 	smlad	r9, r8, r2, r9
 8009888:	4a2e      	ldr	r2, [pc, #184]	@ (8009944 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800988a:	fb2e 9202 	smlad	r2, lr, r2, r9
 800988e:	f04f 0a01 	mov.w	sl, #1
 8009892:	9200      	str	r2, [sp, #0]
 8009894:	fb21 fa0a 	smuad	sl, r1, sl
 8009898:	4a2b      	ldr	r2, [pc, #172]	@ (8009948 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800989a:	fb27 a702 	smlad	r7, r7, r2, sl
 800989e:	4a2b      	ldr	r2, [pc, #172]	@ (800994c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80098a0:	fb25 7702 	smlad	r7, r5, r2, r7
 80098a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009950 <D80_1CH_HTONS_VOL_HP+0x200>)
 80098a6:	fb28 7202 	smlad	r2, r8, r2, r7
 80098aa:	4d2a      	ldr	r5, [pc, #168]	@ (8009954 <D80_1CH_HTONS_VOL_HP+0x204>)
 80098ac:	fb2e 2c05 	smlad	ip, lr, r5, r2
 80098b0:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	9903      	ldr	r1, [sp, #12]
 80098b8:	4413      	add	r3, r2
 80098ba:	1b9e      	subs	r6, r3, r6
 80098bc:	9b04      	ldr	r3, [sp, #16]
 80098be:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80098c2:	fba6 5603 	umull	r5, r6, r6, r3
 80098c6:	fb03 6309 	mla	r3, r3, r9, r6
 80098ca:	462e      	mov	r6, r5
 80098cc:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 80098d0:	f143 0700 	adc.w	r7, r3, #0
 80098d4:	02bb      	lsls	r3, r7, #10
 80098d6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80098da:	f04f 0900 	mov.w	r9, #0
 80098de:	fbc1 8903 	smlal	r8, r9, r1, r3
 80098e2:	9902      	ldr	r1, [sp, #8]
 80098e4:	007b      	lsls	r3, r7, #1
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80098ec:	f303 030f 	ssat	r3, #16, r3
 80098f0:	f821 3f02 	strh.w	r3, [r1, #2]!
 80098f4:	9b05      	ldr	r3, [sp, #20]
 80098f6:	9102      	str	r1, [sp, #8]
 80098f8:	4283      	cmp	r3, r0
 80098fa:	4616      	mov	r6, r2
 80098fc:	f47f af47 	bne.w	800978e <D80_1CH_HTONS_VOL_HP+0x3e>
 8009900:	9d07      	ldr	r5, [sp, #28]
 8009902:	465b      	mov	r3, fp
 8009904:	61eb      	str	r3, [r5, #28]
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	9900      	ldr	r1, [sp, #0]
 800990a:	f8c5 c008 	str.w	ip, [r5, #8]
 800990e:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8009912:	9b06      	ldr	r3, [sp, #24]
 8009914:	60e9      	str	r1, [r5, #12]
 8009916:	2000      	movs	r0, #0
 8009918:	61ab      	str	r3, [r5, #24]
 800991a:	b009      	add	sp, #36	@ 0x24
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	4632      	mov	r2, r6
 8009922:	e7ef      	b.n	8009904 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8009924:	20000010 	.word	0x20000010
 8009928:	002d0024 	.word	0x002d0024
 800992c:	001c0015 	.word	0x001c0015
 8009930:	000f000a 	.word	0x000f000a
 8009934:	00060003 	.word	0x00060003
 8009938:	0037003f 	.word	0x0037003f
 800993c:	00450049 	.word	0x00450049
 8009940:	00490045 	.word	0x00490045
 8009944:	003f0037 	.word	0x003f0037
 8009948:	00030006 	.word	0x00030006
 800994c:	000a000f 	.word	0x000a000f
 8009950:	0015001c 	.word	0x0015001c
 8009954:	0024002d 	.word	0x0024002d

08009958 <D128_1CH_HTONS_VOL_HP>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	b093      	sub	sp, #76	@ 0x4c
 800995e:	6914      	ldr	r4, [r2, #16]
 8009960:	9404      	str	r4, [sp, #16]
 8009962:	6954      	ldr	r4, [r2, #20]
 8009964:	9406      	str	r4, [sp, #24]
 8009966:	6994      	ldr	r4, [r2, #24]
 8009968:	9410      	str	r4, [sp, #64]	@ 0x40
 800996a:	6894      	ldr	r4, [r2, #8]
 800996c:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 800996e:	9403      	str	r4, [sp, #12]
 8009970:	68d4      	ldr	r4, [r2, #12]
 8009972:	9211      	str	r2, [sp, #68]	@ 0x44
 8009974:	69d6      	ldr	r6, [r2, #28]
 8009976:	9402      	str	r4, [sp, #8]
 8009978:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800997a:	6a12      	ldr	r2, [r2, #32]
 800997c:	940d      	str	r4, [sp, #52]	@ 0x34
 800997e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 814a 	beq.w	8009c1a <D128_1CH_HTONS_VOL_HP+0x2c2>
 8009986:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800998a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800998c:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8009c58 <D128_1CH_HTONS_VOL_HP+0x300>
 8009990:	9107      	str	r1, [sp, #28]
 8009992:	f100 0310 	add.w	r3, r0, #16
 8009996:	469b      	mov	fp, r3
 8009998:	9605      	str	r6, [sp, #20]
 800999a:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 800999e:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 80099a2:	ba49      	rev16	r1, r1
 80099a4:	ba52      	rev16	r2, r2
 80099a6:	ba5b      	rev16	r3, r3
 80099a8:	fa90 fa90 	rev16.w	sl, r0
 80099ac:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80099b0:	b2cc      	uxtb	r4, r1
 80099b2:	9e05      	ldr	r6, [sp, #20]
 80099b4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80099b8:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80099bc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80099c0:	0e09      	lsrs	r1, r1, #24
 80099c2:	4426      	add	r6, r4
 80099c4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80099c8:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80099cc:	b2d0      	uxtb	r0, r2
 80099ce:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80099d2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80099d6:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 80099da:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80099de:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 80099e2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80099e6:	0e12      	lsrs	r2, r2, #24
 80099e8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80099ec:	9401      	str	r4, [sp, #4]
 80099ee:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 80099f2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80099f6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80099fa:	9705      	str	r7, [sp, #20]
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8009a02:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8009a06:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8009a0a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009a0e:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8009a12:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009a16:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009a1a:	0e1b      	lsrs	r3, r3, #24
 8009a1c:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8009a20:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8009a24:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8009a28:	fa5f f38a 	uxtb.w	r3, sl
 8009a2c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009a30:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a32:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009a36:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8009a3a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009a3e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009a42:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009a44:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009a48:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009a4c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009a50:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8009a54:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8009a58:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009a5c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009a60:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009a64:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009a6e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009a72:	920c      	str	r2, [sp, #48]	@ 0x30
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a78:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009a7c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009a80:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8009a84:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009a88:	9b05      	ldr	r3, [sp, #20]
 8009a8a:	f8cd 9014 	str.w	r9, [sp, #20]
 8009a8e:	4691      	mov	r9, r2
 8009a90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a92:	f8cd a004 	str.w	sl, [sp, #4]
 8009a96:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8009a9a:	9a01      	ldr	r2, [sp, #4]
 8009a9c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009aa0:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8009aa4:	9b08      	ldr	r3, [sp, #32]
 8009aa6:	9a05      	ldr	r2, [sp, #20]
 8009aa8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009aac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ab0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ab2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009ab6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8009aba:	9201      	str	r2, [sp, #4]
 8009abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009abe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009ac2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009ac6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009aca:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009ace:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009ad2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009ad6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009ada:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ae2:	0a92      	lsrs	r2, r2, #10
 8009ae4:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8009ae8:	9205      	str	r2, [sp, #20]
 8009aea:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8009aee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009af2:	4d4b      	ldr	r5, [pc, #300]	@ (8009c20 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009af4:	9a02      	ldr	r2, [sp, #8]
 8009af6:	fb29 2505 	smlad	r5, r9, r5, r2
 8009afa:	4a4a      	ldr	r2, [pc, #296]	@ (8009c24 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8009afc:	fb2a 5502 	smlad	r5, sl, r2, r5
 8009b00:	4a49      	ldr	r2, [pc, #292]	@ (8009c28 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8009b02:	fb21 5502 	smlad	r5, r1, r2, r5
 8009b06:	4a49      	ldr	r2, [pc, #292]	@ (8009c2c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8009b08:	fb24 5502 	smlad	r5, r4, r2, r5
 8009b0c:	4a48      	ldr	r2, [pc, #288]	@ (8009c30 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8009b0e:	9e01      	ldr	r6, [sp, #4]
 8009b10:	fb26 5502 	smlad	r5, r6, r2, r5
 8009b14:	4a47      	ldr	r2, [pc, #284]	@ (8009c34 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8009b16:	fb20 5502 	smlad	r5, r0, r2, r5
 8009b1a:	4a47      	ldr	r2, [pc, #284]	@ (8009c38 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8009b1c:	fb23 5502 	smlad	r5, r3, r2, r5
 8009b20:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8009b24:	fb27 520c 	smlad	r2, r7, ip, r5
 8009b28:	4616      	mov	r6, r2
 8009b2a:	9d03      	ldr	r5, [sp, #12]
 8009b2c:	4a43      	ldr	r2, [pc, #268]	@ (8009c3c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8009b2e:	fb29 5c02 	smlad	ip, r9, r2, r5
 8009b32:	4a43      	ldr	r2, [pc, #268]	@ (8009c40 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8009b34:	fb2a ce02 	smlad	lr, sl, r2, ip
 8009b38:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8009c5c <D128_1CH_HTONS_VOL_HP+0x304>
 8009b3c:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8009b40:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 8009c60 <D128_1CH_HTONS_VOL_HP+0x308>
 8009b44:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8009b48:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8009c64 <D128_1CH_HTONS_VOL_HP+0x30c>
 8009b4c:	9d01      	ldr	r5, [sp, #4]
 8009b4e:	fb25 ce0e 	smlad	lr, r5, lr, ip
 8009b52:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8009c68 <D128_1CH_HTONS_VOL_HP+0x310>
 8009b56:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009b5a:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8009c6c <D128_1CH_HTONS_VOL_HP+0x314>
 8009b5e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009b62:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 8009c70 <D128_1CH_HTONS_VOL_HP+0x318>
 8009b66:	fb27 c20e 	smlad	r2, r7, lr, ip
 8009b6a:	f04f 0c01 	mov.w	ip, #1
 8009b6e:	9202      	str	r2, [sp, #8]
 8009b70:	fb29 fc0c 	smuad	ip, r9, ip
 8009b74:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8009c74 <D128_1CH_HTONS_VOL_HP+0x31c>
 8009b78:	fb2a ca09 	smlad	sl, sl, r9, ip
 8009b7c:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8009c78 <D128_1CH_HTONS_VOL_HP+0x320>
 8009b80:	fb21 a909 	smlad	r9, r1, r9, sl
 8009b84:	492f      	ldr	r1, [pc, #188]	@ (8009c44 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8009b86:	fb24 9901 	smlad	r9, r4, r1, r9
 8009b8a:	492f      	ldr	r1, [pc, #188]	@ (8009c48 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8009b8c:	fb25 9901 	smlad	r9, r5, r1, r9
 8009b90:	492e      	ldr	r1, [pc, #184]	@ (8009c4c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8009b92:	fb20 9901 	smlad	r9, r0, r1, r9
 8009b96:	492e      	ldr	r1, [pc, #184]	@ (8009c50 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8009b98:	fb23 9301 	smlad	r3, r3, r1, r9
 8009b9c:	482d      	ldr	r0, [pc, #180]	@ (8009c54 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8009b9e:	fb27 3300 	smlad	r3, r7, r0, r3
 8009ba2:	9303      	str	r3, [sp, #12]
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8009ba8:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8009bac:	442b      	add	r3, r5
 8009bae:	461a      	mov	r2, r3
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	9506      	str	r5, [sp, #24]
 8009bb4:	1ad2      	subs	r2, r2, r3
 8009bb6:	17d1      	asrs	r1, r2, #31
 8009bb8:	fba2 2304 	umull	r2, r3, r2, r4
 8009bbc:	fb04 3301 	mla	r3, r4, r1, r3
 8009bc0:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8009bc4:	f143 0a00 	adc.w	sl, r3, #0
 8009bc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bca:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8009bce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009bd8:	9b07      	ldr	r3, [sp, #28]
 8009bda:	108a      	asrs	r2, r1, #2
 8009bdc:	f302 020f 	ssat	r2, #16, r2
 8009be0:	f823 2b02 	strh.w	r2, [r3], #2
 8009be4:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8009be8:	9204      	str	r2, [sp, #16]
 8009bea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009bec:	9307      	str	r3, [sp, #28]
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	f10b 0b10 	add.w	fp, fp, #16
 8009bf4:	f47f aed1 	bne.w	800999a <D128_1CH_HTONS_VOL_HP+0x42>
 8009bf8:	9e05      	ldr	r6, [sp, #20]
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009bfe:	9803      	ldr	r0, [sp, #12]
 8009c00:	6098      	str	r0, [r3, #8]
 8009c02:	9802      	ldr	r0, [sp, #8]
 8009c04:	60d8      	str	r0, [r3, #12]
 8009c06:	9804      	ldr	r0, [sp, #16]
 8009c08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009c0a:	61de      	str	r6, [r3, #28]
 8009c0c:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c10:	2000      	movs	r0, #0
 8009c12:	619a      	str	r2, [r3, #24]
 8009c14:	b013      	add	sp, #76	@ 0x4c
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	9906      	ldr	r1, [sp, #24]
 8009c1c:	e7ee      	b.n	8009bfc <D128_1CH_HTONS_VOL_HP+0x2a4>
 8009c1e:	bf00      	nop
 8009c20:	00780069 	.word	0x00780069
 8009c24:	005b004e 	.word	0x005b004e
 8009c28:	00420037 	.word	0x00420037
 8009c2c:	002d0024 	.word	0x002d0024
 8009c30:	001c0015 	.word	0x001c0015
 8009c34:	000f000a 	.word	0x000f000a
 8009c38:	00060003 	.word	0x00060003
 8009c3c:	00880096 	.word	0x00880096
 8009c40:	00a200ac 	.word	0x00a200ac
 8009c44:	0015001c 	.word	0x0015001c
 8009c48:	0024002d 	.word	0x0024002d
 8009c4c:	00370042 	.word	0x00370042
 8009c50:	004e005b 	.word	0x004e005b
 8009c54:	00690078 	.word	0x00690078
 8009c58:	20000010 	.word	0x20000010
 8009c5c:	00b400ba 	.word	0x00b400ba
 8009c60:	00be00c0 	.word	0x00be00c0
 8009c64:	00c000be 	.word	0x00c000be
 8009c68:	00ba00b4 	.word	0x00ba00b4
 8009c6c:	00ac00a2 	.word	0x00ac00a2
 8009c70:	00960088 	.word	0x00960088
 8009c74:	00030006 	.word	0x00030006
 8009c78:	000a000f 	.word	0x000a000f

08009c7c <PDM_Filter_Init>:
 8009c7c:	4a59      	ldr	r2, [pc, #356]	@ (8009de4 <PDM_Filter_Init+0x168>)
 8009c7e:	495a      	ldr	r1, [pc, #360]	@ (8009de8 <PDM_Filter_Init+0x16c>)
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	6813      	ldr	r3, [r2, #0]
 8009c84:	f023 0301 	bic.w	r3, r3, #1
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	680b      	ldr	r3, [r1, #0]
 8009c8c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8009c90:	4013      	ands	r3, r2
 8009c92:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8009c96:	42ab      	cmp	r3, r5
 8009c98:	4604      	mov	r4, r0
 8009c9a:	d044      	beq.n	8009d26 <PDM_Filter_Init+0xaa>
 8009c9c:	680b      	ldr	r3, [r1, #0]
 8009c9e:	f24c 2170 	movw	r1, #49776	@ 0xc270
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	428a      	cmp	r2, r1
 8009ca6:	d03e      	beq.n	8009d26 <PDM_Filter_Init+0xaa>
 8009ca8:	4b50      	ldr	r3, [pc, #320]	@ (8009dec <PDM_Filter_Init+0x170>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	d1fc      	bne.n	8009cae <PDM_Filter_Init+0x32>
 8009cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8009df0 <PDM_Filter_Init+0x174>)
 8009cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8009df4 <PDM_Filter_Init+0x178>)
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8009df8 <PDM_Filter_Init+0x17c>)
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	f104 000c 	add.w	r0, r4, #12
 8009cc4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8009cc8:	d047      	beq.n	8009d5a <PDM_Filter_Init+0xde>
 8009cca:	f000 ff44 	bl	800ab56 <memset>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6463      	str	r3, [r4, #68]	@ 0x44
 8009cd2:	8820      	ldrh	r0, [r4, #0]
 8009cd4:	8963      	ldrh	r3, [r4, #10]
 8009cd6:	8922      	ldrh	r2, [r4, #8]
 8009cd8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8009cda:	2801      	cmp	r0, #1
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	61a3      	str	r3, [r4, #24]
 8009ce2:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009ce6:	60e3      	str	r3, [r4, #12]
 8009ce8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cea:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009cee:	6423      	str	r3, [r4, #64]	@ 0x40
 8009cf0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8009cf2:	d93a      	bls.n	8009d6a <PDM_Filter_Init+0xee>
 8009cf4:	2003      	movs	r0, #3
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	8862      	ldrh	r2, [r4, #2]
 8009cfa:	2a01      	cmp	r2, #1
 8009cfc:	d932      	bls.n	8009d64 <PDM_Filter_Init+0xe8>
 8009cfe:	2140      	movs	r1, #64	@ 0x40
 8009d00:	2300      	movs	r3, #0
 8009d02:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009d04:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8009d08:	6862      	ldr	r2, [r4, #4]
 8009d0a:	bf04      	itt	eq
 8009d0c:	6421      	streq	r1, [r4, #64]	@ 0x40
 8009d0e:	460b      	moveq	r3, r1
 8009d10:	b11a      	cbz	r2, 8009d1a <PDM_Filter_Init+0x9e>
 8009d12:	f043 0310 	orr.w	r3, r3, #16
 8009d16:	6423      	str	r3, [r4, #64]	@ 0x40
 8009d18:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	8722      	strh	r2, [r4, #56]	@ 0x38
 8009d1e:	b908      	cbnz	r0, 8009d24 <PDM_Filter_Init+0xa8>
 8009d20:	3380      	adds	r3, #128	@ 0x80
 8009d22:	6423      	str	r3, [r4, #64]	@ 0x40
 8009d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d26:	4b35      	ldr	r3, [pc, #212]	@ (8009dfc <PDM_Filter_Init+0x180>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1bc      	bne.n	8009ca8 <PDM_Filter_Init+0x2c>
 8009d2e:	4a34      	ldr	r2, [pc, #208]	@ (8009e00 <PDM_Filter_Init+0x184>)
 8009d30:	6813      	ldr	r3, [r2, #0]
 8009d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d36:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8009d3a:	d006      	beq.n	8009d4a <PDM_Filter_Init+0xce>
 8009d3c:	6813      	ldr	r3, [r2, #0]
 8009d3e:	f240 4283 	movw	r2, #1155	@ 0x483
 8009d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d1ae      	bne.n	8009ca8 <PDM_Filter_Init+0x2c>
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8009e04 <PDM_Filter_Init+0x188>)
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	6819      	ldr	r1, [r3, #0]
 8009d52:	2900      	cmp	r1, #0
 8009d54:	d1fc      	bne.n	8009d50 <PDM_Filter_Init+0xd4>
 8009d56:	4b2c      	ldr	r3, [pc, #176]	@ (8009e08 <PDM_Filter_Init+0x18c>)
 8009d58:	e7ad      	b.n	8009cb6 <PDM_Filter_Init+0x3a>
 8009d5a:	f000 fefc 	bl	800ab56 <memset>
 8009d5e:	4b26      	ldr	r3, [pc, #152]	@ (8009df8 <PDM_Filter_Init+0x17c>)
 8009d60:	6463      	str	r3, [r4, #68]	@ 0x44
 8009d62:	e7b6      	b.n	8009cd2 <PDM_Filter_Init+0x56>
 8009d64:	d038      	beq.n	8009dd8 <PDM_Filter_Init+0x15c>
 8009d66:	4618      	mov	r0, r3
 8009d68:	e7c9      	b.n	8009cfe <PDM_Filter_Init+0x82>
 8009d6a:	4d28      	ldr	r5, [pc, #160]	@ (8009e0c <PDM_Filter_Init+0x190>)
 8009d6c:	782a      	ldrb	r2, [r5, #0]
 8009d6e:	d01a      	beq.n	8009da6 <PDM_Filter_Init+0x12a>
 8009d70:	2a01      	cmp	r2, #1
 8009d72:	d001      	beq.n	8009d78 <PDM_Filter_Init+0xfc>
 8009d74:	2001      	movs	r0, #1
 8009d76:	e7bf      	b.n	8009cf8 <PDM_Filter_Init+0x7c>
 8009d78:	4925      	ldr	r1, [pc, #148]	@ (8009e10 <PDM_Filter_Init+0x194>)
 8009d7a:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8009e18 <PDM_Filter_Init+0x19c>
 8009d7e:	4f25      	ldr	r7, [pc, #148]	@ (8009e14 <PDM_Filter_Init+0x198>)
 8009d80:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8009d84:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009d88:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009d8c:	ea02 0007 	and.w	r0, r2, r7
 8009d90:	4303      	orrs	r3, r0
 8009d92:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009d96:	4413      	add	r3, r2
 8009d98:	428e      	cmp	r6, r1
 8009d9a:	600b      	str	r3, [r1, #0]
 8009d9c:	d1f2      	bne.n	8009d84 <PDM_Filter_Init+0x108>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	702b      	strb	r3, [r5, #0]
 8009da2:	2001      	movs	r0, #1
 8009da4:	e7a8      	b.n	8009cf8 <PDM_Filter_Init+0x7c>
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	d1a6      	bne.n	8009cf8 <PDM_Filter_Init+0x7c>
 8009daa:	4919      	ldr	r1, [pc, #100]	@ (8009e10 <PDM_Filter_Init+0x194>)
 8009dac:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8009e18 <PDM_Filter_Init+0x19c>
 8009db0:	4f18      	ldr	r7, [pc, #96]	@ (8009e14 <PDM_Filter_Init+0x198>)
 8009db2:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8009db6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009dba:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009dbe:	ea02 0007 	and.w	r0, r2, r7
 8009dc2:	4303      	orrs	r3, r0
 8009dc4:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009dc8:	4413      	add	r3, r2
 8009dca:	428e      	cmp	r6, r1
 8009dcc:	600b      	str	r3, [r1, #0]
 8009dce:	d1f2      	bne.n	8009db6 <PDM_Filter_Init+0x13a>
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	7028      	strb	r0, [r5, #0]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e78f      	b.n	8009cf8 <PDM_Filter_Init+0x7c>
 8009dd8:	2220      	movs	r2, #32
 8009dda:	4618      	mov	r0, r3
 8009ddc:	6422      	str	r2, [r4, #64]	@ 0x40
 8009dde:	4613      	mov	r3, r2
 8009de0:	2160      	movs	r1, #96	@ 0x60
 8009de2:	e78e      	b.n	8009d02 <PDM_Filter_Init+0x86>
 8009de4:	e0002000 	.word	0xe0002000
 8009de8:	e000ed00 	.word	0xe000ed00
 8009dec:	40023008 	.word	0x40023008
 8009df0:	40023000 	.word	0x40023000
 8009df4:	f407a5c2 	.word	0xf407a5c2
 8009df8:	b5e8b5cd 	.word	0xb5e8b5cd
 8009dfc:	e0042000 	.word	0xe0042000
 8009e00:	5c001000 	.word	0x5c001000
 8009e04:	58024c08 	.word	0x58024c08
 8009e08:	58024c00 	.word	0x58024c00
 8009e0c:	20003d0a 	.word	0x20003d0a
 8009e10:	2000000c 	.word	0x2000000c
 8009e14:	000ffc00 	.word	0x000ffc00
 8009e18:	3ff00000 	.word	0x3ff00000

08009e1c <PDM_Filter_setConfig>:
 8009e1c:	4b6d      	ldr	r3, [pc, #436]	@ (8009fd4 <PDM_Filter_setConfig+0x1b8>)
 8009e1e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d12f      	bne.n	8009e84 <PDM_Filter_setConfig+0x68>
 8009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e26:	880e      	ldrh	r6, [r1, #0]
 8009e28:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009e2a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009e2e:	ed2d 8b02 	vpush	{d8}
 8009e32:	4604      	mov	r4, r0
 8009e34:	1e72      	subs	r2, r6, #1
 8009e36:	460d      	mov	r5, r1
 8009e38:	2a06      	cmp	r2, #6
 8009e3a:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009e3e:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 8009e42:	6421      	str	r1, [r4, #64]	@ 0x40
 8009e44:	b083      	sub	sp, #12
 8009e46:	d904      	bls.n	8009e52 <PDM_Filter_setConfig+0x36>
 8009e48:	42b8      	cmp	r0, r7
 8009e4a:	f000 80bb 	beq.w	8009fc4 <PDM_Filter_setConfig+0x1a8>
 8009e4e:	2008      	movs	r0, #8
 8009e50:	e01d      	b.n	8009e8e <PDM_Filter_setConfig+0x72>
 8009e52:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8009e54:	42b2      	cmp	r2, r6
 8009e56:	d070      	beq.n	8009f3a <PDM_Filter_setConfig+0x11e>
 8009e58:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8009e5c:	f023 0301 	bic.w	r3, r3, #1
 8009e60:	4333      	orrs	r3, r6
 8009e62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009e66:	6423      	str	r3, [r4, #64]	@ 0x40
 8009e68:	2a70      	cmp	r2, #112	@ 0x70
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e72:	d067      	beq.n	8009f44 <PDM_Filter_setConfig+0x128>
 8009e74:	2b06      	cmp	r3, #6
 8009e76:	d809      	bhi.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009e78:	e8df f003 	tbb	[pc, r3]
 8009e7c:	89868380 	.word	0x89868380
 8009e80:	8f8c      	.short	0x8f8c
 8009e82:	7d          	.byte	0x7d
 8009e83:	00          	.byte	0x00
 8009e84:	2004      	movs	r0, #4
 8009e86:	4770      	bx	lr
 8009e88:	4b53      	ldr	r3, [pc, #332]	@ (8009fd8 <PDM_Filter_setConfig+0x1bc>)
 8009e8a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f117 0f0c 	cmn.w	r7, #12
 8009e92:	da0a      	bge.n	8009eaa <PDM_Filter_setConfig+0x8e>
 8009e94:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8009e98:	3040      	adds	r0, #64	@ 0x40
 8009e9a:	80ab      	strh	r3, [r5, #4]
 8009e9c:	886b      	ldrh	r3, [r5, #2]
 8009e9e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009ea0:	8626      	strh	r6, [r4, #48]	@ 0x30
 8009ea2:	b003      	add	sp, #12
 8009ea4:	ecbd 8b02 	vpop	{d8}
 8009ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eaa:	2f33      	cmp	r7, #51	@ 0x33
 8009eac:	dc41      	bgt.n	8009f32 <PDM_Filter_setConfig+0x116>
 8009eae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009eb0:	f003 030f 	and.w	r3, r3, #15
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	2b06      	cmp	r3, #6
 8009eb8:	d858      	bhi.n	8009f6c <PDM_Filter_setConfig+0x150>
 8009eba:	4948      	ldr	r1, [pc, #288]	@ (8009fdc <PDM_Filter_setConfig+0x1c0>)
 8009ebc:	4a48      	ldr	r2, [pc, #288]	@ (8009fe0 <PDM_Filter_setConfig+0x1c4>)
 8009ebe:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8009fe4 <PDM_Filter_setConfig+0x1c8>
 8009ec2:	9001      	str	r0, [sp, #4]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4419      	add	r1, r3
 8009ec8:	edd1 7a00 	vldr	s15, [r1]
 8009ecc:	4413      	add	r3, r2
 8009ece:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009ed2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8009ed6:	ed93 8a00 	vldr	s16, [r3]
 8009eda:	f002 ff39 	bl	800cd50 <powf>
 8009ede:	9801      	ldr	r0, [sp, #4]
 8009ee0:	eef0 8a40 	vmov.f32	s17, s0
 8009ee4:	ee07 7a10 	vmov	s14, r7
 8009ee8:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009fe8 <PDM_Filter_setConfig+0x1cc>
 8009eec:	9001      	str	r0, [sp, #4]
 8009eee:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8009ef2:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009ef6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009efa:	f002 ff29 	bl	800cd50 <powf>
 8009efe:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009f02:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009f06:	f002 ffb5 	bl	800ce74 <roundf>
 8009f0a:	9801      	ldr	r0, [sp, #4]
 8009f0c:	886b      	ldrh	r3, [r5, #2]
 8009f0e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009f10:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009f14:	8727      	strh	r7, [r4, #56]	@ 0x38
 8009f16:	8626      	strh	r6, [r4, #48]	@ 0x30
 8009f18:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d1c0      	bne.n	8009ea2 <PDM_Filter_setConfig+0x86>
 8009f20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f22:	2000      	movs	r0, #0
 8009f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f28:	6423      	str	r3, [r4, #64]	@ 0x40
 8009f2a:	b003      	add	sp, #12
 8009f2c:	ecbd 8b02 	vpop	{d8}
 8009f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f32:	2333      	movs	r3, #51	@ 0x33
 8009f34:	3040      	adds	r0, #64	@ 0x40
 8009f36:	80ab      	strh	r3, [r5, #4]
 8009f38:	e7b0      	b.n	8009e9c <PDM_Filter_setConfig+0x80>
 8009f3a:	42b8      	cmp	r0, r7
 8009f3c:	d1a6      	bne.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f3e:	886b      	ldrh	r3, [r5, #2]
 8009f40:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009f42:	e7ed      	b.n	8009f20 <PDM_Filter_setConfig+0x104>
 8009f44:	2b06      	cmp	r3, #6
 8009f46:	d8a1      	bhi.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f48:	a201      	add	r2, pc, #4	@ (adr r2, 8009f50 <PDM_Filter_setConfig+0x134>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009fbf 	.word	0x08009fbf
 8009f54:	08009fb9 	.word	0x08009fb9
 8009f58:	08009fad 	.word	0x08009fad
 8009f5c:	08009fa7 	.word	0x08009fa7
 8009f60:	08009e89 	.word	0x08009e89
 8009f64:	08009fa1 	.word	0x08009fa1
 8009f68:	08009fb3 	.word	0x08009fb3
 8009f6c:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8009fec <PDM_Filter_setConfig+0x1d0>
 8009f70:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8009ff0 <PDM_Filter_setConfig+0x1d4>
 8009f74:	e7b6      	b.n	8009ee4 <PDM_Filter_setConfig+0xc8>
 8009f76:	4b1f      	ldr	r3, [pc, #124]	@ (8009ff4 <PDM_Filter_setConfig+0x1d8>)
 8009f78:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f7a:	e787      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff8 <PDM_Filter_setConfig+0x1dc>)
 8009f7e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f80:	e784      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f82:	4b1e      	ldr	r3, [pc, #120]	@ (8009ffc <PDM_Filter_setConfig+0x1e0>)
 8009f84:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f86:	e781      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f88:	4b1d      	ldr	r3, [pc, #116]	@ (800a000 <PDM_Filter_setConfig+0x1e4>)
 8009f8a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f8c:	e77e      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f8e:	4b1d      	ldr	r3, [pc, #116]	@ (800a004 <PDM_Filter_setConfig+0x1e8>)
 8009f90:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f92:	e77b      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f94:	4b1c      	ldr	r3, [pc, #112]	@ (800a008 <PDM_Filter_setConfig+0x1ec>)
 8009f96:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f98:	e778      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800a00c <PDM_Filter_setConfig+0x1f0>)
 8009f9c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f9e:	e775      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fa0:	4b1b      	ldr	r3, [pc, #108]	@ (800a010 <PDM_Filter_setConfig+0x1f4>)
 8009fa2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fa4:	e772      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fa6:	4b1b      	ldr	r3, [pc, #108]	@ (800a014 <PDM_Filter_setConfig+0x1f8>)
 8009fa8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009faa:	e76f      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fac:	4b1a      	ldr	r3, [pc, #104]	@ (800a018 <PDM_Filter_setConfig+0x1fc>)
 8009fae:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fb0:	e76c      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800a01c <PDM_Filter_setConfig+0x200>)
 8009fb4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fb6:	e769      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fb8:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <PDM_Filter_setConfig+0x204>)
 8009fba:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fbc:	e766      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fbe:	4b19      	ldr	r3, [pc, #100]	@ (800a024 <PDM_Filter_setConfig+0x208>)
 8009fc0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fc2:	e763      	b.n	8009e8c <PDM_Filter_setConfig+0x70>
 8009fc4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009fc6:	42b3      	cmp	r3, r6
 8009fc8:	f47f af41 	bne.w	8009e4e <PDM_Filter_setConfig+0x32>
 8009fcc:	886b      	ldrh	r3, [r5, #2]
 8009fce:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009fd0:	2008      	movs	r0, #8
 8009fd2:	e766      	b.n	8009ea2 <PDM_Filter_setConfig+0x86>
 8009fd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009fd8:	080090fd 	.word	0x080090fd
 8009fdc:	08020ce0 	.word	0x08020ce0
 8009fe0:	08020cfc 	.word	0x08020cfc
 8009fe4:	42000000 	.word	0x42000000
 8009fe8:	3d4ccccd 	.word	0x3d4ccccd
 8009fec:	4f800000 	.word	0x4f800000
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	080084fd 	.word	0x080084fd
 8009ff8:	08008685 	.word	0x08008685
 8009ffc:	0800886d 	.word	0x0800886d
 800a000:	08008a89 	.word	0x08008a89
 800a004:	08008d1d 	.word	0x08008d1d
 800a008:	0800825d 	.word	0x0800825d
 800a00c:	08008375 	.word	0x08008375
 800a010:	080091e5 	.word	0x080091e5
 800a014:	08009959 	.word	0x08009959
 800a018:	08009751 	.word	0x08009751
 800a01c:	08009329 	.word	0x08009329
 800a020:	080095b1 	.word	0x080095b1
 800a024:	08009445 	.word	0x08009445

0800a028 <PDM_Filter>:
 800a028:	b410      	push	{r4}
 800a02a:	4b0b      	ldr	r3, [pc, #44]	@ (800a058 <PDM_Filter+0x30>)
 800a02c:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800a02e:	429c      	cmp	r4, r3
 800a030:	d107      	bne.n	800a042 <PDM_Filter+0x1a>
 800a032:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a034:	05dc      	lsls	r4, r3, #23
 800a036:	d508      	bpl.n	800a04a <PDM_Filter+0x22>
 800a038:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800a03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a03e:	320c      	adds	r2, #12
 800a040:	4718      	bx	r3
 800a042:	2004      	movs	r0, #4
 800a044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a04e:	bf14      	ite	ne
 800a050:	2020      	movne	r0, #32
 800a052:	2030      	moveq	r0, #48	@ 0x30
 800a054:	e7f6      	b.n	800a044 <PDM_Filter+0x1c>
 800a056:	bf00      	nop
 800a058:	b5e8b5cd 	.word	0xb5e8b5cd

0800a05c <__cvt>:
 800a05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	ec57 6b10 	vmov	r6, r7, d0
 800a064:	2f00      	cmp	r7, #0
 800a066:	460c      	mov	r4, r1
 800a068:	4619      	mov	r1, r3
 800a06a:	463b      	mov	r3, r7
 800a06c:	bfbb      	ittet	lt
 800a06e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a072:	461f      	movlt	r7, r3
 800a074:	2300      	movge	r3, #0
 800a076:	232d      	movlt	r3, #45	@ 0x2d
 800a078:	700b      	strb	r3, [r1, #0]
 800a07a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a07c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a080:	4691      	mov	r9, r2
 800a082:	f023 0820 	bic.w	r8, r3, #32
 800a086:	bfbc      	itt	lt
 800a088:	4632      	movlt	r2, r6
 800a08a:	4616      	movlt	r6, r2
 800a08c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a090:	d005      	beq.n	800a09e <__cvt+0x42>
 800a092:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a096:	d100      	bne.n	800a09a <__cvt+0x3e>
 800a098:	3401      	adds	r4, #1
 800a09a:	2102      	movs	r1, #2
 800a09c:	e000      	b.n	800a0a0 <__cvt+0x44>
 800a09e:	2103      	movs	r1, #3
 800a0a0:	ab03      	add	r3, sp, #12
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	ab02      	add	r3, sp, #8
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	ec47 6b10 	vmov	d0, r6, r7
 800a0ac:	4653      	mov	r3, sl
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	f000 fe6a 	bl	800ad88 <_dtoa_r>
 800a0b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	d119      	bne.n	800a0f0 <__cvt+0x94>
 800a0bc:	f019 0f01 	tst.w	r9, #1
 800a0c0:	d00e      	beq.n	800a0e0 <__cvt+0x84>
 800a0c2:	eb00 0904 	add.w	r9, r0, r4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d2:	b108      	cbz	r0, 800a0d8 <__cvt+0x7c>
 800a0d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0d8:	2230      	movs	r2, #48	@ 0x30
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	454b      	cmp	r3, r9
 800a0de:	d31e      	bcc.n	800a11e <__cvt+0xc2>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0e4:	1b5b      	subs	r3, r3, r5
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	b004      	add	sp, #16
 800a0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a0f4:	eb00 0904 	add.w	r9, r0, r4
 800a0f8:	d1e5      	bne.n	800a0c6 <__cvt+0x6a>
 800a0fa:	7803      	ldrb	r3, [r0, #0]
 800a0fc:	2b30      	cmp	r3, #48	@ 0x30
 800a0fe:	d10a      	bne.n	800a116 <__cvt+0xba>
 800a100:	2200      	movs	r2, #0
 800a102:	2300      	movs	r3, #0
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800a10c:	b918      	cbnz	r0, 800a116 <__cvt+0xba>
 800a10e:	f1c4 0401 	rsb	r4, r4, #1
 800a112:	f8ca 4000 	str.w	r4, [sl]
 800a116:	f8da 3000 	ldr.w	r3, [sl]
 800a11a:	4499      	add	r9, r3
 800a11c:	e7d3      	b.n	800a0c6 <__cvt+0x6a>
 800a11e:	1c59      	adds	r1, r3, #1
 800a120:	9103      	str	r1, [sp, #12]
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	e7d9      	b.n	800a0da <__cvt+0x7e>

0800a126 <__exponent>:
 800a126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a128:	2900      	cmp	r1, #0
 800a12a:	bfba      	itte	lt
 800a12c:	4249      	neglt	r1, r1
 800a12e:	232d      	movlt	r3, #45	@ 0x2d
 800a130:	232b      	movge	r3, #43	@ 0x2b
 800a132:	2909      	cmp	r1, #9
 800a134:	7002      	strb	r2, [r0, #0]
 800a136:	7043      	strb	r3, [r0, #1]
 800a138:	dd29      	ble.n	800a18e <__exponent+0x68>
 800a13a:	f10d 0307 	add.w	r3, sp, #7
 800a13e:	461d      	mov	r5, r3
 800a140:	270a      	movs	r7, #10
 800a142:	461a      	mov	r2, r3
 800a144:	fbb1 f6f7 	udiv	r6, r1, r7
 800a148:	fb07 1416 	mls	r4, r7, r6, r1
 800a14c:	3430      	adds	r4, #48	@ 0x30
 800a14e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a152:	460c      	mov	r4, r1
 800a154:	2c63      	cmp	r4, #99	@ 0x63
 800a156:	f103 33ff 	add.w	r3, r3, #4294967295
 800a15a:	4631      	mov	r1, r6
 800a15c:	dcf1      	bgt.n	800a142 <__exponent+0x1c>
 800a15e:	3130      	adds	r1, #48	@ 0x30
 800a160:	1e94      	subs	r4, r2, #2
 800a162:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a166:	1c41      	adds	r1, r0, #1
 800a168:	4623      	mov	r3, r4
 800a16a:	42ab      	cmp	r3, r5
 800a16c:	d30a      	bcc.n	800a184 <__exponent+0x5e>
 800a16e:	f10d 0309 	add.w	r3, sp, #9
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	42ac      	cmp	r4, r5
 800a176:	bf88      	it	hi
 800a178:	2300      	movhi	r3, #0
 800a17a:	3302      	adds	r3, #2
 800a17c:	4403      	add	r3, r0
 800a17e:	1a18      	subs	r0, r3, r0
 800a180:	b003      	add	sp, #12
 800a182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a184:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a188:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a18c:	e7ed      	b.n	800a16a <__exponent+0x44>
 800a18e:	2330      	movs	r3, #48	@ 0x30
 800a190:	3130      	adds	r1, #48	@ 0x30
 800a192:	7083      	strb	r3, [r0, #2]
 800a194:	70c1      	strb	r1, [r0, #3]
 800a196:	1d03      	adds	r3, r0, #4
 800a198:	e7f1      	b.n	800a17e <__exponent+0x58>
	...

0800a19c <_printf_float>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	b08d      	sub	sp, #52	@ 0x34
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	f000 fcdb 	bl	800ab68 <_localeconv_r>
 800a1b2:	6803      	ldr	r3, [r0, #0]
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f6 f85a 	bl	8000270 <strlen>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1c4:	9005      	str	r0, [sp, #20]
 800a1c6:	3307      	adds	r3, #7
 800a1c8:	f023 0307 	bic.w	r3, r3, #7
 800a1cc:	f103 0208 	add.w	r2, r3, #8
 800a1d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a1d4:	f8d4 b000 	ldr.w	fp, [r4]
 800a1d8:	f8c8 2000 	str.w	r2, [r8]
 800a1dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a1e4:	9307      	str	r3, [sp, #28]
 800a1e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1f2:	4b9c      	ldr	r3, [pc, #624]	@ (800a464 <_printf_float+0x2c8>)
 800a1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f8:	f7f6 fc98 	bl	8000b2c <__aeabi_dcmpun>
 800a1fc:	bb70      	cbnz	r0, 800a25c <_printf_float+0xc0>
 800a1fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a202:	4b98      	ldr	r3, [pc, #608]	@ (800a464 <_printf_float+0x2c8>)
 800a204:	f04f 32ff 	mov.w	r2, #4294967295
 800a208:	f7f6 fc72 	bl	8000af0 <__aeabi_dcmple>
 800a20c:	bb30      	cbnz	r0, 800a25c <_printf_float+0xc0>
 800a20e:	2200      	movs	r2, #0
 800a210:	2300      	movs	r3, #0
 800a212:	4640      	mov	r0, r8
 800a214:	4649      	mov	r1, r9
 800a216:	f7f6 fc61 	bl	8000adc <__aeabi_dcmplt>
 800a21a:	b110      	cbz	r0, 800a222 <_printf_float+0x86>
 800a21c:	232d      	movs	r3, #45	@ 0x2d
 800a21e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a222:	4a91      	ldr	r2, [pc, #580]	@ (800a468 <_printf_float+0x2cc>)
 800a224:	4b91      	ldr	r3, [pc, #580]	@ (800a46c <_printf_float+0x2d0>)
 800a226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a22a:	bf8c      	ite	hi
 800a22c:	4690      	movhi	r8, r2
 800a22e:	4698      	movls	r8, r3
 800a230:	2303      	movs	r3, #3
 800a232:	6123      	str	r3, [r4, #16]
 800a234:	f02b 0304 	bic.w	r3, fp, #4
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	f04f 0900 	mov.w	r9, #0
 800a23e:	9700      	str	r7, [sp, #0]
 800a240:	4633      	mov	r3, r6
 800a242:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f000 f9d2 	bl	800a5f0 <_printf_common>
 800a24c:	3001      	adds	r0, #1
 800a24e:	f040 808d 	bne.w	800a36c <_printf_float+0x1d0>
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	b00d      	add	sp, #52	@ 0x34
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	4642      	mov	r2, r8
 800a25e:	464b      	mov	r3, r9
 800a260:	4640      	mov	r0, r8
 800a262:	4649      	mov	r1, r9
 800a264:	f7f6 fc62 	bl	8000b2c <__aeabi_dcmpun>
 800a268:	b140      	cbz	r0, 800a27c <_printf_float+0xe0>
 800a26a:	464b      	mov	r3, r9
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bfbc      	itt	lt
 800a270:	232d      	movlt	r3, #45	@ 0x2d
 800a272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a276:	4a7e      	ldr	r2, [pc, #504]	@ (800a470 <_printf_float+0x2d4>)
 800a278:	4b7e      	ldr	r3, [pc, #504]	@ (800a474 <_printf_float+0x2d8>)
 800a27a:	e7d4      	b.n	800a226 <_printf_float+0x8a>
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a282:	9206      	str	r2, [sp, #24]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	d13b      	bne.n	800a300 <_printf_float+0x164>
 800a288:	2306      	movs	r3, #6
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a290:	2300      	movs	r3, #0
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	9303      	str	r3, [sp, #12]
 800a296:	ab0a      	add	r3, sp, #40	@ 0x28
 800a298:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a29c:	ab09      	add	r3, sp, #36	@ 0x24
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	6861      	ldr	r1, [r4, #4]
 800a2a2:	ec49 8b10 	vmov	d0, r8, r9
 800a2a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7ff fed6 	bl	800a05c <__cvt>
 800a2b0:	9b06      	ldr	r3, [sp, #24]
 800a2b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2b4:	2b47      	cmp	r3, #71	@ 0x47
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	d129      	bne.n	800a30e <_printf_float+0x172>
 800a2ba:	1cc8      	adds	r0, r1, #3
 800a2bc:	db02      	blt.n	800a2c4 <_printf_float+0x128>
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	dd41      	ble.n	800a348 <_printf_float+0x1ac>
 800a2c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a2c8:	fa5f fa8a 	uxtb.w	sl, sl
 800a2cc:	3901      	subs	r1, #1
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a2d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2d6:	f7ff ff26 	bl	800a126 <__exponent>
 800a2da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2dc:	1813      	adds	r3, r2, r0
 800a2de:	2a01      	cmp	r2, #1
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	dc02      	bgt.n	800a2ec <_printf_float+0x150>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	07d2      	lsls	r2, r2, #31
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_float+0x154>
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	6123      	str	r3, [r4, #16]
 800a2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0a2      	beq.n	800a23e <_printf_float+0xa2>
 800a2f8:	232d      	movs	r3, #45	@ 0x2d
 800a2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2fe:	e79e      	b.n	800a23e <_printf_float+0xa2>
 800a300:	9a06      	ldr	r2, [sp, #24]
 800a302:	2a47      	cmp	r2, #71	@ 0x47
 800a304:	d1c2      	bne.n	800a28c <_printf_float+0xf0>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1c0      	bne.n	800a28c <_printf_float+0xf0>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e7bd      	b.n	800a28a <_printf_float+0xee>
 800a30e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a312:	d9db      	bls.n	800a2cc <_printf_float+0x130>
 800a314:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a318:	d118      	bne.n	800a34c <_printf_float+0x1b0>
 800a31a:	2900      	cmp	r1, #0
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	dd0b      	ble.n	800a338 <_printf_float+0x19c>
 800a320:	6121      	str	r1, [r4, #16]
 800a322:	b913      	cbnz	r3, 800a32a <_printf_float+0x18e>
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	07d0      	lsls	r0, r2, #31
 800a328:	d502      	bpl.n	800a330 <_printf_float+0x194>
 800a32a:	3301      	adds	r3, #1
 800a32c:	440b      	add	r3, r1
 800a32e:	6123      	str	r3, [r4, #16]
 800a330:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a332:	f04f 0900 	mov.w	r9, #0
 800a336:	e7db      	b.n	800a2f0 <_printf_float+0x154>
 800a338:	b913      	cbnz	r3, 800a340 <_printf_float+0x1a4>
 800a33a:	6822      	ldr	r2, [r4, #0]
 800a33c:	07d2      	lsls	r2, r2, #31
 800a33e:	d501      	bpl.n	800a344 <_printf_float+0x1a8>
 800a340:	3302      	adds	r3, #2
 800a342:	e7f4      	b.n	800a32e <_printf_float+0x192>
 800a344:	2301      	movs	r3, #1
 800a346:	e7f2      	b.n	800a32e <_printf_float+0x192>
 800a348:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a34e:	4299      	cmp	r1, r3
 800a350:	db05      	blt.n	800a35e <_printf_float+0x1c2>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	6121      	str	r1, [r4, #16]
 800a356:	07d8      	lsls	r0, r3, #31
 800a358:	d5ea      	bpl.n	800a330 <_printf_float+0x194>
 800a35a:	1c4b      	adds	r3, r1, #1
 800a35c:	e7e7      	b.n	800a32e <_printf_float+0x192>
 800a35e:	2900      	cmp	r1, #0
 800a360:	bfd4      	ite	le
 800a362:	f1c1 0202 	rsble	r2, r1, #2
 800a366:	2201      	movgt	r2, #1
 800a368:	4413      	add	r3, r2
 800a36a:	e7e0      	b.n	800a32e <_printf_float+0x192>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	055a      	lsls	r2, r3, #21
 800a370:	d407      	bmi.n	800a382 <_printf_float+0x1e6>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	4642      	mov	r2, r8
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	d12b      	bne.n	800a3d8 <_printf_float+0x23c>
 800a380:	e767      	b.n	800a252 <_printf_float+0xb6>
 800a382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a386:	f240 80dd 	bls.w	800a544 <_printf_float+0x3a8>
 800a38a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a38e:	2200      	movs	r2, #0
 800a390:	2300      	movs	r3, #0
 800a392:	f7f6 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 800a396:	2800      	cmp	r0, #0
 800a398:	d033      	beq.n	800a402 <_printf_float+0x266>
 800a39a:	4a37      	ldr	r2, [pc, #220]	@ (800a478 <_printf_float+0x2dc>)
 800a39c:	2301      	movs	r3, #1
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b8      	blx	r7
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f af54 	beq.w	800a252 <_printf_float+0xb6>
 800a3aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a3ae:	4543      	cmp	r3, r8
 800a3b0:	db02      	blt.n	800a3b8 <_printf_float+0x21c>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	07d8      	lsls	r0, r3, #31
 800a3b6:	d50f      	bpl.n	800a3d8 <_printf_float+0x23c>
 800a3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f af45 	beq.w	800a252 <_printf_float+0xb6>
 800a3c8:	f04f 0900 	mov.w	r9, #0
 800a3cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3d0:	f104 0a1a 	add.w	sl, r4, #26
 800a3d4:	45c8      	cmp	r8, r9
 800a3d6:	dc09      	bgt.n	800a3ec <_printf_float+0x250>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	079b      	lsls	r3, r3, #30
 800a3dc:	f100 8103 	bmi.w	800a5e6 <_printf_float+0x44a>
 800a3e0:	68e0      	ldr	r0, [r4, #12]
 800a3e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	bfb8      	it	lt
 800a3e8:	4618      	movlt	r0, r3
 800a3ea:	e734      	b.n	800a256 <_printf_float+0xba>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	4652      	mov	r2, sl
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b8      	blx	r7
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f43f af2b 	beq.w	800a252 <_printf_float+0xb6>
 800a3fc:	f109 0901 	add.w	r9, r9, #1
 800a400:	e7e8      	b.n	800a3d4 <_printf_float+0x238>
 800a402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc39      	bgt.n	800a47c <_printf_float+0x2e0>
 800a408:	4a1b      	ldr	r2, [pc, #108]	@ (800a478 <_printf_float+0x2dc>)
 800a40a:	2301      	movs	r3, #1
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f af1d 	beq.w	800a252 <_printf_float+0xb6>
 800a418:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a41c:	ea59 0303 	orrs.w	r3, r9, r3
 800a420:	d102      	bne.n	800a428 <_printf_float+0x28c>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	07d9      	lsls	r1, r3, #31
 800a426:	d5d7      	bpl.n	800a3d8 <_printf_float+0x23c>
 800a428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	47b8      	blx	r7
 800a432:	3001      	adds	r0, #1
 800a434:	f43f af0d 	beq.w	800a252 <_printf_float+0xb6>
 800a438:	f04f 0a00 	mov.w	sl, #0
 800a43c:	f104 0b1a 	add.w	fp, r4, #26
 800a440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a442:	425b      	negs	r3, r3
 800a444:	4553      	cmp	r3, sl
 800a446:	dc01      	bgt.n	800a44c <_printf_float+0x2b0>
 800a448:	464b      	mov	r3, r9
 800a44a:	e793      	b.n	800a374 <_printf_float+0x1d8>
 800a44c:	2301      	movs	r3, #1
 800a44e:	465a      	mov	r2, fp
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	f43f aefb 	beq.w	800a252 <_printf_float+0xb6>
 800a45c:	f10a 0a01 	add.w	sl, sl, #1
 800a460:	e7ee      	b.n	800a440 <_printf_float+0x2a4>
 800a462:	bf00      	nop
 800a464:	7fefffff 	.word	0x7fefffff
 800a468:	08020d1c 	.word	0x08020d1c
 800a46c:	08020d18 	.word	0x08020d18
 800a470:	08020d24 	.word	0x08020d24
 800a474:	08020d20 	.word	0x08020d20
 800a478:	08020d28 	.word	0x08020d28
 800a47c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a47e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a482:	4553      	cmp	r3, sl
 800a484:	bfa8      	it	ge
 800a486:	4653      	movge	r3, sl
 800a488:	2b00      	cmp	r3, #0
 800a48a:	4699      	mov	r9, r3
 800a48c:	dc36      	bgt.n	800a4fc <_printf_float+0x360>
 800a48e:	f04f 0b00 	mov.w	fp, #0
 800a492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a496:	f104 021a 	add.w	r2, r4, #26
 800a49a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a49c:	9306      	str	r3, [sp, #24]
 800a49e:	eba3 0309 	sub.w	r3, r3, r9
 800a4a2:	455b      	cmp	r3, fp
 800a4a4:	dc31      	bgt.n	800a50a <_printf_float+0x36e>
 800a4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4a8:	459a      	cmp	sl, r3
 800a4aa:	dc3a      	bgt.n	800a522 <_printf_float+0x386>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	07da      	lsls	r2, r3, #31
 800a4b0:	d437      	bmi.n	800a522 <_printf_float+0x386>
 800a4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b4:	ebaa 0903 	sub.w	r9, sl, r3
 800a4b8:	9b06      	ldr	r3, [sp, #24]
 800a4ba:	ebaa 0303 	sub.w	r3, sl, r3
 800a4be:	4599      	cmp	r9, r3
 800a4c0:	bfa8      	it	ge
 800a4c2:	4699      	movge	r9, r3
 800a4c4:	f1b9 0f00 	cmp.w	r9, #0
 800a4c8:	dc33      	bgt.n	800a532 <_printf_float+0x396>
 800a4ca:	f04f 0800 	mov.w	r8, #0
 800a4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4d2:	f104 0b1a 	add.w	fp, r4, #26
 800a4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d8:	ebaa 0303 	sub.w	r3, sl, r3
 800a4dc:	eba3 0309 	sub.w	r3, r3, r9
 800a4e0:	4543      	cmp	r3, r8
 800a4e2:	f77f af79 	ble.w	800a3d8 <_printf_float+0x23c>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	465a      	mov	r2, fp
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b8      	blx	r7
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	f43f aeae 	beq.w	800a252 <_printf_float+0xb6>
 800a4f6:	f108 0801 	add.w	r8, r8, #1
 800a4fa:	e7ec      	b.n	800a4d6 <_printf_float+0x33a>
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	47b8      	blx	r7
 800a504:	3001      	adds	r0, #1
 800a506:	d1c2      	bne.n	800a48e <_printf_float+0x2f2>
 800a508:	e6a3      	b.n	800a252 <_printf_float+0xb6>
 800a50a:	2301      	movs	r3, #1
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	9206      	str	r2, [sp, #24]
 800a512:	47b8      	blx	r7
 800a514:	3001      	adds	r0, #1
 800a516:	f43f ae9c 	beq.w	800a252 <_printf_float+0xb6>
 800a51a:	9a06      	ldr	r2, [sp, #24]
 800a51c:	f10b 0b01 	add.w	fp, fp, #1
 800a520:	e7bb      	b.n	800a49a <_printf_float+0x2fe>
 800a522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	d1c0      	bne.n	800a4b2 <_printf_float+0x316>
 800a530:	e68f      	b.n	800a252 <_printf_float+0xb6>
 800a532:	9a06      	ldr	r2, [sp, #24]
 800a534:	464b      	mov	r3, r9
 800a536:	4442      	add	r2, r8
 800a538:	4631      	mov	r1, r6
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	d1c3      	bne.n	800a4ca <_printf_float+0x32e>
 800a542:	e686      	b.n	800a252 <_printf_float+0xb6>
 800a544:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a548:	f1ba 0f01 	cmp.w	sl, #1
 800a54c:	dc01      	bgt.n	800a552 <_printf_float+0x3b6>
 800a54e:	07db      	lsls	r3, r3, #31
 800a550:	d536      	bpl.n	800a5c0 <_printf_float+0x424>
 800a552:	2301      	movs	r3, #1
 800a554:	4642      	mov	r2, r8
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	f43f ae78 	beq.w	800a252 <_printf_float+0xb6>
 800a562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	f43f ae70 	beq.w	800a252 <_printf_float+0xb6>
 800a572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a576:	2200      	movs	r2, #0
 800a578:	2300      	movs	r3, #0
 800a57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a57e:	f7f6 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a582:	b9c0      	cbnz	r0, 800a5b6 <_printf_float+0x41a>
 800a584:	4653      	mov	r3, sl
 800a586:	f108 0201 	add.w	r2, r8, #1
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	d10c      	bne.n	800a5ae <_printf_float+0x412>
 800a594:	e65d      	b.n	800a252 <_printf_float+0xb6>
 800a596:	2301      	movs	r3, #1
 800a598:	465a      	mov	r2, fp
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f43f ae56 	beq.w	800a252 <_printf_float+0xb6>
 800a5a6:	f108 0801 	add.w	r8, r8, #1
 800a5aa:	45d0      	cmp	r8, sl
 800a5ac:	dbf3      	blt.n	800a596 <_printf_float+0x3fa>
 800a5ae:	464b      	mov	r3, r9
 800a5b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a5b4:	e6df      	b.n	800a376 <_printf_float+0x1da>
 800a5b6:	f04f 0800 	mov.w	r8, #0
 800a5ba:	f104 0b1a 	add.w	fp, r4, #26
 800a5be:	e7f4      	b.n	800a5aa <_printf_float+0x40e>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	e7e1      	b.n	800a58a <_printf_float+0x3ee>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	464a      	mov	r2, r9
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f43f ae3e 	beq.w	800a252 <_printf_float+0xb6>
 800a5d6:	f108 0801 	add.w	r8, r8, #1
 800a5da:	68e3      	ldr	r3, [r4, #12]
 800a5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a5de:	1a5b      	subs	r3, r3, r1
 800a5e0:	4543      	cmp	r3, r8
 800a5e2:	dcf0      	bgt.n	800a5c6 <_printf_float+0x42a>
 800a5e4:	e6fc      	b.n	800a3e0 <_printf_float+0x244>
 800a5e6:	f04f 0800 	mov.w	r8, #0
 800a5ea:	f104 0919 	add.w	r9, r4, #25
 800a5ee:	e7f4      	b.n	800a5da <_printf_float+0x43e>

0800a5f0 <_printf_common>:
 800a5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	4698      	mov	r8, r3
 800a5f8:	688a      	ldr	r2, [r1, #8]
 800a5fa:	690b      	ldr	r3, [r1, #16]
 800a5fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a600:	4293      	cmp	r3, r2
 800a602:	bfb8      	it	lt
 800a604:	4613      	movlt	r3, r2
 800a606:	6033      	str	r3, [r6, #0]
 800a608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a60c:	4607      	mov	r7, r0
 800a60e:	460c      	mov	r4, r1
 800a610:	b10a      	cbz	r2, 800a616 <_printf_common+0x26>
 800a612:	3301      	adds	r3, #1
 800a614:	6033      	str	r3, [r6, #0]
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	0699      	lsls	r1, r3, #26
 800a61a:	bf42      	ittt	mi
 800a61c:	6833      	ldrmi	r3, [r6, #0]
 800a61e:	3302      	addmi	r3, #2
 800a620:	6033      	strmi	r3, [r6, #0]
 800a622:	6825      	ldr	r5, [r4, #0]
 800a624:	f015 0506 	ands.w	r5, r5, #6
 800a628:	d106      	bne.n	800a638 <_printf_common+0x48>
 800a62a:	f104 0a19 	add.w	sl, r4, #25
 800a62e:	68e3      	ldr	r3, [r4, #12]
 800a630:	6832      	ldr	r2, [r6, #0]
 800a632:	1a9b      	subs	r3, r3, r2
 800a634:	42ab      	cmp	r3, r5
 800a636:	dc26      	bgt.n	800a686 <_printf_common+0x96>
 800a638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a63c:	6822      	ldr	r2, [r4, #0]
 800a63e:	3b00      	subs	r3, #0
 800a640:	bf18      	it	ne
 800a642:	2301      	movne	r3, #1
 800a644:	0692      	lsls	r2, r2, #26
 800a646:	d42b      	bmi.n	800a6a0 <_printf_common+0xb0>
 800a648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a64c:	4641      	mov	r1, r8
 800a64e:	4638      	mov	r0, r7
 800a650:	47c8      	blx	r9
 800a652:	3001      	adds	r0, #1
 800a654:	d01e      	beq.n	800a694 <_printf_common+0xa4>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	6922      	ldr	r2, [r4, #16]
 800a65a:	f003 0306 	and.w	r3, r3, #6
 800a65e:	2b04      	cmp	r3, #4
 800a660:	bf02      	ittt	eq
 800a662:	68e5      	ldreq	r5, [r4, #12]
 800a664:	6833      	ldreq	r3, [r6, #0]
 800a666:	1aed      	subeq	r5, r5, r3
 800a668:	68a3      	ldr	r3, [r4, #8]
 800a66a:	bf0c      	ite	eq
 800a66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a670:	2500      	movne	r5, #0
 800a672:	4293      	cmp	r3, r2
 800a674:	bfc4      	itt	gt
 800a676:	1a9b      	subgt	r3, r3, r2
 800a678:	18ed      	addgt	r5, r5, r3
 800a67a:	2600      	movs	r6, #0
 800a67c:	341a      	adds	r4, #26
 800a67e:	42b5      	cmp	r5, r6
 800a680:	d11a      	bne.n	800a6b8 <_printf_common+0xc8>
 800a682:	2000      	movs	r0, #0
 800a684:	e008      	b.n	800a698 <_printf_common+0xa8>
 800a686:	2301      	movs	r3, #1
 800a688:	4652      	mov	r2, sl
 800a68a:	4641      	mov	r1, r8
 800a68c:	4638      	mov	r0, r7
 800a68e:	47c8      	blx	r9
 800a690:	3001      	adds	r0, #1
 800a692:	d103      	bne.n	800a69c <_printf_common+0xac>
 800a694:	f04f 30ff 	mov.w	r0, #4294967295
 800a698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69c:	3501      	adds	r5, #1
 800a69e:	e7c6      	b.n	800a62e <_printf_common+0x3e>
 800a6a0:	18e1      	adds	r1, r4, r3
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	2030      	movs	r0, #48	@ 0x30
 800a6a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a6aa:	4422      	add	r2, r4
 800a6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	e7c7      	b.n	800a648 <_printf_common+0x58>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	4641      	mov	r1, r8
 800a6be:	4638      	mov	r0, r7
 800a6c0:	47c8      	blx	r9
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	d0e6      	beq.n	800a694 <_printf_common+0xa4>
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	e7d9      	b.n	800a67e <_printf_common+0x8e>
	...

0800a6cc <_printf_i>:
 800a6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	7e0f      	ldrb	r7, [r1, #24]
 800a6d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6d4:	2f78      	cmp	r7, #120	@ 0x78
 800a6d6:	4691      	mov	r9, r2
 800a6d8:	4680      	mov	r8, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	469a      	mov	sl, r3
 800a6de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6e2:	d807      	bhi.n	800a6f4 <_printf_i+0x28>
 800a6e4:	2f62      	cmp	r7, #98	@ 0x62
 800a6e6:	d80a      	bhi.n	800a6fe <_printf_i+0x32>
 800a6e8:	2f00      	cmp	r7, #0
 800a6ea:	f000 80d1 	beq.w	800a890 <_printf_i+0x1c4>
 800a6ee:	2f58      	cmp	r7, #88	@ 0x58
 800a6f0:	f000 80b8 	beq.w	800a864 <_printf_i+0x198>
 800a6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6fc:	e03a      	b.n	800a774 <_printf_i+0xa8>
 800a6fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a702:	2b15      	cmp	r3, #21
 800a704:	d8f6      	bhi.n	800a6f4 <_printf_i+0x28>
 800a706:	a101      	add	r1, pc, #4	@ (adr r1, 800a70c <_printf_i+0x40>)
 800a708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a70c:	0800a765 	.word	0x0800a765
 800a710:	0800a779 	.word	0x0800a779
 800a714:	0800a6f5 	.word	0x0800a6f5
 800a718:	0800a6f5 	.word	0x0800a6f5
 800a71c:	0800a6f5 	.word	0x0800a6f5
 800a720:	0800a6f5 	.word	0x0800a6f5
 800a724:	0800a779 	.word	0x0800a779
 800a728:	0800a6f5 	.word	0x0800a6f5
 800a72c:	0800a6f5 	.word	0x0800a6f5
 800a730:	0800a6f5 	.word	0x0800a6f5
 800a734:	0800a6f5 	.word	0x0800a6f5
 800a738:	0800a877 	.word	0x0800a877
 800a73c:	0800a7a3 	.word	0x0800a7a3
 800a740:	0800a831 	.word	0x0800a831
 800a744:	0800a6f5 	.word	0x0800a6f5
 800a748:	0800a6f5 	.word	0x0800a6f5
 800a74c:	0800a899 	.word	0x0800a899
 800a750:	0800a6f5 	.word	0x0800a6f5
 800a754:	0800a7a3 	.word	0x0800a7a3
 800a758:	0800a6f5 	.word	0x0800a6f5
 800a75c:	0800a6f5 	.word	0x0800a6f5
 800a760:	0800a839 	.word	0x0800a839
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	1d1a      	adds	r2, r3, #4
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6032      	str	r2, [r6, #0]
 800a76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a774:	2301      	movs	r3, #1
 800a776:	e09c      	b.n	800a8b2 <_printf_i+0x1e6>
 800a778:	6833      	ldr	r3, [r6, #0]
 800a77a:	6820      	ldr	r0, [r4, #0]
 800a77c:	1d19      	adds	r1, r3, #4
 800a77e:	6031      	str	r1, [r6, #0]
 800a780:	0606      	lsls	r6, r0, #24
 800a782:	d501      	bpl.n	800a788 <_printf_i+0xbc>
 800a784:	681d      	ldr	r5, [r3, #0]
 800a786:	e003      	b.n	800a790 <_printf_i+0xc4>
 800a788:	0645      	lsls	r5, r0, #25
 800a78a:	d5fb      	bpl.n	800a784 <_printf_i+0xb8>
 800a78c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a790:	2d00      	cmp	r5, #0
 800a792:	da03      	bge.n	800a79c <_printf_i+0xd0>
 800a794:	232d      	movs	r3, #45	@ 0x2d
 800a796:	426d      	negs	r5, r5
 800a798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a79c:	4858      	ldr	r0, [pc, #352]	@ (800a900 <_printf_i+0x234>)
 800a79e:	230a      	movs	r3, #10
 800a7a0:	e011      	b.n	800a7c6 <_printf_i+0xfa>
 800a7a2:	6821      	ldr	r1, [r4, #0]
 800a7a4:	6833      	ldr	r3, [r6, #0]
 800a7a6:	0608      	lsls	r0, r1, #24
 800a7a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a7ac:	d402      	bmi.n	800a7b4 <_printf_i+0xe8>
 800a7ae:	0649      	lsls	r1, r1, #25
 800a7b0:	bf48      	it	mi
 800a7b2:	b2ad      	uxthmi	r5, r5
 800a7b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7b6:	4852      	ldr	r0, [pc, #328]	@ (800a900 <_printf_i+0x234>)
 800a7b8:	6033      	str	r3, [r6, #0]
 800a7ba:	bf14      	ite	ne
 800a7bc:	230a      	movne	r3, #10
 800a7be:	2308      	moveq	r3, #8
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7c6:	6866      	ldr	r6, [r4, #4]
 800a7c8:	60a6      	str	r6, [r4, #8]
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	db05      	blt.n	800a7da <_printf_i+0x10e>
 800a7ce:	6821      	ldr	r1, [r4, #0]
 800a7d0:	432e      	orrs	r6, r5
 800a7d2:	f021 0104 	bic.w	r1, r1, #4
 800a7d6:	6021      	str	r1, [r4, #0]
 800a7d8:	d04b      	beq.n	800a872 <_printf_i+0x1a6>
 800a7da:	4616      	mov	r6, r2
 800a7dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7e0:	fb03 5711 	mls	r7, r3, r1, r5
 800a7e4:	5dc7      	ldrb	r7, [r0, r7]
 800a7e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7ea:	462f      	mov	r7, r5
 800a7ec:	42bb      	cmp	r3, r7
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	d9f4      	bls.n	800a7dc <_printf_i+0x110>
 800a7f2:	2b08      	cmp	r3, #8
 800a7f4:	d10b      	bne.n	800a80e <_printf_i+0x142>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	07df      	lsls	r7, r3, #31
 800a7fa:	d508      	bpl.n	800a80e <_printf_i+0x142>
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	6861      	ldr	r1, [r4, #4]
 800a800:	4299      	cmp	r1, r3
 800a802:	bfde      	ittt	le
 800a804:	2330      	movle	r3, #48	@ 0x30
 800a806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a80a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a80e:	1b92      	subs	r2, r2, r6
 800a810:	6122      	str	r2, [r4, #16]
 800a812:	f8cd a000 	str.w	sl, [sp]
 800a816:	464b      	mov	r3, r9
 800a818:	aa03      	add	r2, sp, #12
 800a81a:	4621      	mov	r1, r4
 800a81c:	4640      	mov	r0, r8
 800a81e:	f7ff fee7 	bl	800a5f0 <_printf_common>
 800a822:	3001      	adds	r0, #1
 800a824:	d14a      	bne.n	800a8bc <_printf_i+0x1f0>
 800a826:	f04f 30ff 	mov.w	r0, #4294967295
 800a82a:	b004      	add	sp, #16
 800a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	f043 0320 	orr.w	r3, r3, #32
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	4832      	ldr	r0, [pc, #200]	@ (800a904 <_printf_i+0x238>)
 800a83a:	2778      	movs	r7, #120	@ 0x78
 800a83c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	6831      	ldr	r1, [r6, #0]
 800a844:	061f      	lsls	r7, r3, #24
 800a846:	f851 5b04 	ldr.w	r5, [r1], #4
 800a84a:	d402      	bmi.n	800a852 <_printf_i+0x186>
 800a84c:	065f      	lsls	r7, r3, #25
 800a84e:	bf48      	it	mi
 800a850:	b2ad      	uxthmi	r5, r5
 800a852:	6031      	str	r1, [r6, #0]
 800a854:	07d9      	lsls	r1, r3, #31
 800a856:	bf44      	itt	mi
 800a858:	f043 0320 	orrmi.w	r3, r3, #32
 800a85c:	6023      	strmi	r3, [r4, #0]
 800a85e:	b11d      	cbz	r5, 800a868 <_printf_i+0x19c>
 800a860:	2310      	movs	r3, #16
 800a862:	e7ad      	b.n	800a7c0 <_printf_i+0xf4>
 800a864:	4826      	ldr	r0, [pc, #152]	@ (800a900 <_printf_i+0x234>)
 800a866:	e7e9      	b.n	800a83c <_printf_i+0x170>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	f023 0320 	bic.w	r3, r3, #32
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	e7f6      	b.n	800a860 <_printf_i+0x194>
 800a872:	4616      	mov	r6, r2
 800a874:	e7bd      	b.n	800a7f2 <_printf_i+0x126>
 800a876:	6833      	ldr	r3, [r6, #0]
 800a878:	6825      	ldr	r5, [r4, #0]
 800a87a:	6961      	ldr	r1, [r4, #20]
 800a87c:	1d18      	adds	r0, r3, #4
 800a87e:	6030      	str	r0, [r6, #0]
 800a880:	062e      	lsls	r6, r5, #24
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	d501      	bpl.n	800a88a <_printf_i+0x1be>
 800a886:	6019      	str	r1, [r3, #0]
 800a888:	e002      	b.n	800a890 <_printf_i+0x1c4>
 800a88a:	0668      	lsls	r0, r5, #25
 800a88c:	d5fb      	bpl.n	800a886 <_printf_i+0x1ba>
 800a88e:	8019      	strh	r1, [r3, #0]
 800a890:	2300      	movs	r3, #0
 800a892:	6123      	str	r3, [r4, #16]
 800a894:	4616      	mov	r6, r2
 800a896:	e7bc      	b.n	800a812 <_printf_i+0x146>
 800a898:	6833      	ldr	r3, [r6, #0]
 800a89a:	1d1a      	adds	r2, r3, #4
 800a89c:	6032      	str	r2, [r6, #0]
 800a89e:	681e      	ldr	r6, [r3, #0]
 800a8a0:	6862      	ldr	r2, [r4, #4]
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f7f5 fc93 	bl	80001d0 <memchr>
 800a8aa:	b108      	cbz	r0, 800a8b0 <_printf_i+0x1e4>
 800a8ac:	1b80      	subs	r0, r0, r6
 800a8ae:	6060      	str	r0, [r4, #4]
 800a8b0:	6863      	ldr	r3, [r4, #4]
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ba:	e7aa      	b.n	800a812 <_printf_i+0x146>
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	4632      	mov	r2, r6
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	47d0      	blx	sl
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d0ad      	beq.n	800a826 <_printf_i+0x15a>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	079b      	lsls	r3, r3, #30
 800a8ce:	d413      	bmi.n	800a8f8 <_printf_i+0x22c>
 800a8d0:	68e0      	ldr	r0, [r4, #12]
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	4298      	cmp	r0, r3
 800a8d6:	bfb8      	it	lt
 800a8d8:	4618      	movlt	r0, r3
 800a8da:	e7a6      	b.n	800a82a <_printf_i+0x15e>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4632      	mov	r2, r6
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	47d0      	blx	sl
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d09d      	beq.n	800a826 <_printf_i+0x15a>
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	68e3      	ldr	r3, [r4, #12]
 800a8ee:	9903      	ldr	r1, [sp, #12]
 800a8f0:	1a5b      	subs	r3, r3, r1
 800a8f2:	42ab      	cmp	r3, r5
 800a8f4:	dcf2      	bgt.n	800a8dc <_printf_i+0x210>
 800a8f6:	e7eb      	b.n	800a8d0 <_printf_i+0x204>
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	f104 0619 	add.w	r6, r4, #25
 800a8fe:	e7f5      	b.n	800a8ec <_printf_i+0x220>
 800a900:	08020d2a 	.word	0x08020d2a
 800a904:	08020d3b 	.word	0x08020d3b

0800a908 <std>:
 800a908:	2300      	movs	r3, #0
 800a90a:	b510      	push	{r4, lr}
 800a90c:	4604      	mov	r4, r0
 800a90e:	e9c0 3300 	strd	r3, r3, [r0]
 800a912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a916:	6083      	str	r3, [r0, #8]
 800a918:	8181      	strh	r1, [r0, #12]
 800a91a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a91c:	81c2      	strh	r2, [r0, #14]
 800a91e:	6183      	str	r3, [r0, #24]
 800a920:	4619      	mov	r1, r3
 800a922:	2208      	movs	r2, #8
 800a924:	305c      	adds	r0, #92	@ 0x5c
 800a926:	f000 f916 	bl	800ab56 <memset>
 800a92a:	4b0d      	ldr	r3, [pc, #52]	@ (800a960 <std+0x58>)
 800a92c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a92e:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <std+0x5c>)
 800a930:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a932:	4b0d      	ldr	r3, [pc, #52]	@ (800a968 <std+0x60>)
 800a934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a936:	4b0d      	ldr	r3, [pc, #52]	@ (800a96c <std+0x64>)
 800a938:	6323      	str	r3, [r4, #48]	@ 0x30
 800a93a:	4b0d      	ldr	r3, [pc, #52]	@ (800a970 <std+0x68>)
 800a93c:	6224      	str	r4, [r4, #32]
 800a93e:	429c      	cmp	r4, r3
 800a940:	d006      	beq.n	800a950 <std+0x48>
 800a942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a946:	4294      	cmp	r4, r2
 800a948:	d002      	beq.n	800a950 <std+0x48>
 800a94a:	33d0      	adds	r3, #208	@ 0xd0
 800a94c:	429c      	cmp	r4, r3
 800a94e:	d105      	bne.n	800a95c <std+0x54>
 800a950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a958:	f000 b97a 	b.w	800ac50 <__retarget_lock_init_recursive>
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	bf00      	nop
 800a960:	0800aad1 	.word	0x0800aad1
 800a964:	0800aaf3 	.word	0x0800aaf3
 800a968:	0800ab2b 	.word	0x0800ab2b
 800a96c:	0800ab4f 	.word	0x0800ab4f
 800a970:	20003d0c 	.word	0x20003d0c

0800a974 <stdio_exit_handler>:
 800a974:	4a02      	ldr	r2, [pc, #8]	@ (800a980 <stdio_exit_handler+0xc>)
 800a976:	4903      	ldr	r1, [pc, #12]	@ (800a984 <stdio_exit_handler+0x10>)
 800a978:	4803      	ldr	r0, [pc, #12]	@ (800a988 <stdio_exit_handler+0x14>)
 800a97a:	f000 b869 	b.w	800aa50 <_fwalk_sglue>
 800a97e:	bf00      	nop
 800a980:	20000410 	.word	0x20000410
 800a984:	0800c5d5 	.word	0x0800c5d5
 800a988:	20000420 	.word	0x20000420

0800a98c <cleanup_stdio>:
 800a98c:	6841      	ldr	r1, [r0, #4]
 800a98e:	4b0c      	ldr	r3, [pc, #48]	@ (800a9c0 <cleanup_stdio+0x34>)
 800a990:	4299      	cmp	r1, r3
 800a992:	b510      	push	{r4, lr}
 800a994:	4604      	mov	r4, r0
 800a996:	d001      	beq.n	800a99c <cleanup_stdio+0x10>
 800a998:	f001 fe1c 	bl	800c5d4 <_fflush_r>
 800a99c:	68a1      	ldr	r1, [r4, #8]
 800a99e:	4b09      	ldr	r3, [pc, #36]	@ (800a9c4 <cleanup_stdio+0x38>)
 800a9a0:	4299      	cmp	r1, r3
 800a9a2:	d002      	beq.n	800a9aa <cleanup_stdio+0x1e>
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f001 fe15 	bl	800c5d4 <_fflush_r>
 800a9aa:	68e1      	ldr	r1, [r4, #12]
 800a9ac:	4b06      	ldr	r3, [pc, #24]	@ (800a9c8 <cleanup_stdio+0x3c>)
 800a9ae:	4299      	cmp	r1, r3
 800a9b0:	d004      	beq.n	800a9bc <cleanup_stdio+0x30>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b8:	f001 be0c 	b.w	800c5d4 <_fflush_r>
 800a9bc:	bd10      	pop	{r4, pc}
 800a9be:	bf00      	nop
 800a9c0:	20003d0c 	.word	0x20003d0c
 800a9c4:	20003d74 	.word	0x20003d74
 800a9c8:	20003ddc 	.word	0x20003ddc

0800a9cc <global_stdio_init.part.0>:
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a9fc <global_stdio_init.part.0+0x30>)
 800a9d0:	4c0b      	ldr	r4, [pc, #44]	@ (800aa00 <global_stdio_init.part.0+0x34>)
 800a9d2:	4a0c      	ldr	r2, [pc, #48]	@ (800aa04 <global_stdio_init.part.0+0x38>)
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2104      	movs	r1, #4
 800a9dc:	f7ff ff94 	bl	800a908 <std>
 800a9e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	2109      	movs	r1, #9
 800a9e8:	f7ff ff8e 	bl	800a908 <std>
 800a9ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f6:	2112      	movs	r1, #18
 800a9f8:	f7ff bf86 	b.w	800a908 <std>
 800a9fc:	20003e44 	.word	0x20003e44
 800aa00:	20003d0c 	.word	0x20003d0c
 800aa04:	0800a975 	.word	0x0800a975

0800aa08 <__sfp_lock_acquire>:
 800aa08:	4801      	ldr	r0, [pc, #4]	@ (800aa10 <__sfp_lock_acquire+0x8>)
 800aa0a:	f000 b922 	b.w	800ac52 <__retarget_lock_acquire_recursive>
 800aa0e:	bf00      	nop
 800aa10:	20003e4d 	.word	0x20003e4d

0800aa14 <__sfp_lock_release>:
 800aa14:	4801      	ldr	r0, [pc, #4]	@ (800aa1c <__sfp_lock_release+0x8>)
 800aa16:	f000 b91d 	b.w	800ac54 <__retarget_lock_release_recursive>
 800aa1a:	bf00      	nop
 800aa1c:	20003e4d 	.word	0x20003e4d

0800aa20 <__sinit>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	4604      	mov	r4, r0
 800aa24:	f7ff fff0 	bl	800aa08 <__sfp_lock_acquire>
 800aa28:	6a23      	ldr	r3, [r4, #32]
 800aa2a:	b11b      	cbz	r3, 800aa34 <__sinit+0x14>
 800aa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa30:	f7ff bff0 	b.w	800aa14 <__sfp_lock_release>
 800aa34:	4b04      	ldr	r3, [pc, #16]	@ (800aa48 <__sinit+0x28>)
 800aa36:	6223      	str	r3, [r4, #32]
 800aa38:	4b04      	ldr	r3, [pc, #16]	@ (800aa4c <__sinit+0x2c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f5      	bne.n	800aa2c <__sinit+0xc>
 800aa40:	f7ff ffc4 	bl	800a9cc <global_stdio_init.part.0>
 800aa44:	e7f2      	b.n	800aa2c <__sinit+0xc>
 800aa46:	bf00      	nop
 800aa48:	0800a98d 	.word	0x0800a98d
 800aa4c:	20003e44 	.word	0x20003e44

0800aa50 <_fwalk_sglue>:
 800aa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa54:	4607      	mov	r7, r0
 800aa56:	4688      	mov	r8, r1
 800aa58:	4614      	mov	r4, r2
 800aa5a:	2600      	movs	r6, #0
 800aa5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa60:	f1b9 0901 	subs.w	r9, r9, #1
 800aa64:	d505      	bpl.n	800aa72 <_fwalk_sglue+0x22>
 800aa66:	6824      	ldr	r4, [r4, #0]
 800aa68:	2c00      	cmp	r4, #0
 800aa6a:	d1f7      	bne.n	800aa5c <_fwalk_sglue+0xc>
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa72:	89ab      	ldrh	r3, [r5, #12]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d907      	bls.n	800aa88 <_fwalk_sglue+0x38>
 800aa78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	d003      	beq.n	800aa88 <_fwalk_sglue+0x38>
 800aa80:	4629      	mov	r1, r5
 800aa82:	4638      	mov	r0, r7
 800aa84:	47c0      	blx	r8
 800aa86:	4306      	orrs	r6, r0
 800aa88:	3568      	adds	r5, #104	@ 0x68
 800aa8a:	e7e9      	b.n	800aa60 <_fwalk_sglue+0x10>

0800aa8c <siprintf>:
 800aa8c:	b40e      	push	{r1, r2, r3}
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	b09d      	sub	sp, #116	@ 0x74
 800aa92:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aa94:	9002      	str	r0, [sp, #8]
 800aa96:	9006      	str	r0, [sp, #24]
 800aa98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa9c:	480a      	ldr	r0, [pc, #40]	@ (800aac8 <siprintf+0x3c>)
 800aa9e:	9107      	str	r1, [sp, #28]
 800aaa0:	9104      	str	r1, [sp, #16]
 800aaa2:	490a      	ldr	r1, [pc, #40]	@ (800aacc <siprintf+0x40>)
 800aaa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa8:	9105      	str	r1, [sp, #20]
 800aaaa:	2400      	movs	r4, #0
 800aaac:	a902      	add	r1, sp, #8
 800aaae:	6800      	ldr	r0, [r0, #0]
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aab4:	f001 fc0e 	bl	800c2d4 <_svfiprintf_r>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	701c      	strb	r4, [r3, #0]
 800aabc:	b01d      	add	sp, #116	@ 0x74
 800aabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac2:	b003      	add	sp, #12
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	2000041c 	.word	0x2000041c
 800aacc:	ffff0208 	.word	0xffff0208

0800aad0 <__sread>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad8:	f000 f86c 	bl	800abb4 <_read_r>
 800aadc:	2800      	cmp	r0, #0
 800aade:	bfab      	itete	ge
 800aae0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aae2:	89a3      	ldrhlt	r3, [r4, #12]
 800aae4:	181b      	addge	r3, r3, r0
 800aae6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aaea:	bfac      	ite	ge
 800aaec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aaee:	81a3      	strhlt	r3, [r4, #12]
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <__swrite>:
 800aaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	05db      	lsls	r3, r3, #23
 800aafc:	4605      	mov	r5, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4616      	mov	r6, r2
 800ab02:	d505      	bpl.n	800ab10 <__swrite+0x1e>
 800ab04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab08:	2302      	movs	r3, #2
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f000 f840 	bl	800ab90 <_lseek_r>
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab1a:	81a3      	strh	r3, [r4, #12]
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	4628      	mov	r0, r5
 800ab22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab26:	f000 b857 	b.w	800abd8 <_write_r>

0800ab2a <__sseek>:
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab32:	f000 f82d 	bl	800ab90 <_lseek_r>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	bf15      	itete	ne
 800ab3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab46:	81a3      	strheq	r3, [r4, #12]
 800ab48:	bf18      	it	ne
 800ab4a:	81a3      	strhne	r3, [r4, #12]
 800ab4c:	bd10      	pop	{r4, pc}

0800ab4e <__sclose>:
 800ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab52:	f000 b80d 	b.w	800ab70 <_close_r>

0800ab56 <memset>:
 800ab56:	4402      	add	r2, r0
 800ab58:	4603      	mov	r3, r0
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d100      	bne.n	800ab60 <memset+0xa>
 800ab5e:	4770      	bx	lr
 800ab60:	f803 1b01 	strb.w	r1, [r3], #1
 800ab64:	e7f9      	b.n	800ab5a <memset+0x4>
	...

0800ab68 <_localeconv_r>:
 800ab68:	4800      	ldr	r0, [pc, #0]	@ (800ab6c <_localeconv_r+0x4>)
 800ab6a:	4770      	bx	lr
 800ab6c:	2000055c 	.word	0x2000055c

0800ab70 <_close_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d06      	ldr	r5, [pc, #24]	@ (800ab8c <_close_r+0x1c>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	602b      	str	r3, [r5, #0]
 800ab7c:	f7f7 f806 	bl	8001b8c <_close>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_close_r+0x1a>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_close_r+0x1a>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	20003e48 	.word	0x20003e48

0800ab90 <_lseek_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4d07      	ldr	r5, [pc, #28]	@ (800abb0 <_lseek_r+0x20>)
 800ab94:	4604      	mov	r4, r0
 800ab96:	4608      	mov	r0, r1
 800ab98:	4611      	mov	r1, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	602a      	str	r2, [r5, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f7f7 f81b 	bl	8001bda <_lseek>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_lseek_r+0x1e>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_lseek_r+0x1e>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20003e48 	.word	0x20003e48

0800abb4 <_read_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	@ (800abd4 <_read_r+0x20>)
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f6 ffa9 	bl	8001b1a <_read>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_read_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_read_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20003e48 	.word	0x20003e48

0800abd8 <_write_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	@ (800abf8 <_write_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f6 ffb4 	bl	8001b54 <_write>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_write_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_write_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20003e48 	.word	0x20003e48

0800abfc <__errno>:
 800abfc:	4b01      	ldr	r3, [pc, #4]	@ (800ac04 <__errno+0x8>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	2000041c 	.word	0x2000041c

0800ac08 <__libc_init_array>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	4d0d      	ldr	r5, [pc, #52]	@ (800ac40 <__libc_init_array+0x38>)
 800ac0c:	4c0d      	ldr	r4, [pc, #52]	@ (800ac44 <__libc_init_array+0x3c>)
 800ac0e:	1b64      	subs	r4, r4, r5
 800ac10:	10a4      	asrs	r4, r4, #2
 800ac12:	2600      	movs	r6, #0
 800ac14:	42a6      	cmp	r6, r4
 800ac16:	d109      	bne.n	800ac2c <__libc_init_array+0x24>
 800ac18:	4d0b      	ldr	r5, [pc, #44]	@ (800ac48 <__libc_init_array+0x40>)
 800ac1a:	4c0c      	ldr	r4, [pc, #48]	@ (800ac4c <__libc_init_array+0x44>)
 800ac1c:	f002 fdd4 	bl	800d7c8 <_init>
 800ac20:	1b64      	subs	r4, r4, r5
 800ac22:	10a4      	asrs	r4, r4, #2
 800ac24:	2600      	movs	r6, #0
 800ac26:	42a6      	cmp	r6, r4
 800ac28:	d105      	bne.n	800ac36 <__libc_init_array+0x2e>
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac30:	4798      	blx	r3
 800ac32:	3601      	adds	r6, #1
 800ac34:	e7ee      	b.n	800ac14 <__libc_init_array+0xc>
 800ac36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3a:	4798      	blx	r3
 800ac3c:	3601      	adds	r6, #1
 800ac3e:	e7f2      	b.n	800ac26 <__libc_init_array+0x1e>
 800ac40:	080210ac 	.word	0x080210ac
 800ac44:	080210ac 	.word	0x080210ac
 800ac48:	080210ac 	.word	0x080210ac
 800ac4c:	080210b0 	.word	0x080210b0

0800ac50 <__retarget_lock_init_recursive>:
 800ac50:	4770      	bx	lr

0800ac52 <__retarget_lock_acquire_recursive>:
 800ac52:	4770      	bx	lr

0800ac54 <__retarget_lock_release_recursive>:
 800ac54:	4770      	bx	lr

0800ac56 <memcpy>:
 800ac56:	440a      	add	r2, r1
 800ac58:	4291      	cmp	r1, r2
 800ac5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac5e:	d100      	bne.n	800ac62 <memcpy+0xc>
 800ac60:	4770      	bx	lr
 800ac62:	b510      	push	{r4, lr}
 800ac64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6c:	4291      	cmp	r1, r2
 800ac6e:	d1f9      	bne.n	800ac64 <memcpy+0xe>
 800ac70:	bd10      	pop	{r4, pc}

0800ac72 <quorem>:
 800ac72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac76:	6903      	ldr	r3, [r0, #16]
 800ac78:	690c      	ldr	r4, [r1, #16]
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	db7e      	blt.n	800ad7e <quorem+0x10c>
 800ac80:	3c01      	subs	r4, #1
 800ac82:	f101 0814 	add.w	r8, r1, #20
 800ac86:	00a3      	lsls	r3, r4, #2
 800ac88:	f100 0514 	add.w	r5, r0, #20
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aca4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aca8:	d32e      	bcc.n	800ad08 <quorem+0x96>
 800acaa:	f04f 0a00 	mov.w	sl, #0
 800acae:	46c4      	mov	ip, r8
 800acb0:	46ae      	mov	lr, r5
 800acb2:	46d3      	mov	fp, sl
 800acb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acb8:	b298      	uxth	r0, r3
 800acba:	fb06 a000 	mla	r0, r6, r0, sl
 800acbe:	0c02      	lsrs	r2, r0, #16
 800acc0:	0c1b      	lsrs	r3, r3, #16
 800acc2:	fb06 2303 	mla	r3, r6, r3, r2
 800acc6:	f8de 2000 	ldr.w	r2, [lr]
 800acca:	b280      	uxth	r0, r0
 800accc:	b292      	uxth	r2, r2
 800acce:	1a12      	subs	r2, r2, r0
 800acd0:	445a      	add	r2, fp
 800acd2:	f8de 0000 	ldr.w	r0, [lr]
 800acd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acda:	b29b      	uxth	r3, r3
 800acdc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ace0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ace4:	b292      	uxth	r2, r2
 800ace6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800acea:	45e1      	cmp	r9, ip
 800acec:	f84e 2b04 	str.w	r2, [lr], #4
 800acf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800acf4:	d2de      	bcs.n	800acb4 <quorem+0x42>
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	58eb      	ldr	r3, [r5, r3]
 800acfa:	b92b      	cbnz	r3, 800ad08 <quorem+0x96>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	3b04      	subs	r3, #4
 800ad00:	429d      	cmp	r5, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	d32f      	bcc.n	800ad66 <quorem+0xf4>
 800ad06:	613c      	str	r4, [r7, #16]
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f001 f97f 	bl	800c00c <__mcmp>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	db25      	blt.n	800ad5e <quorem+0xec>
 800ad12:	4629      	mov	r1, r5
 800ad14:	2000      	movs	r0, #0
 800ad16:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad1a:	f8d1 c000 	ldr.w	ip, [r1]
 800ad1e:	fa1f fe82 	uxth.w	lr, r2
 800ad22:	fa1f f38c 	uxth.w	r3, ip
 800ad26:	eba3 030e 	sub.w	r3, r3, lr
 800ad2a:	4403      	add	r3, r0
 800ad2c:	0c12      	lsrs	r2, r2, #16
 800ad2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad3c:	45c1      	cmp	r9, r8
 800ad3e:	f841 3b04 	str.w	r3, [r1], #4
 800ad42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad46:	d2e6      	bcs.n	800ad16 <quorem+0xa4>
 800ad48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad50:	b922      	cbnz	r2, 800ad5c <quorem+0xea>
 800ad52:	3b04      	subs	r3, #4
 800ad54:	429d      	cmp	r5, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	d30b      	bcc.n	800ad72 <quorem+0x100>
 800ad5a:	613c      	str	r4, [r7, #16]
 800ad5c:	3601      	adds	r6, #1
 800ad5e:	4630      	mov	r0, r6
 800ad60:	b003      	add	sp, #12
 800ad62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad66:	6812      	ldr	r2, [r2, #0]
 800ad68:	3b04      	subs	r3, #4
 800ad6a:	2a00      	cmp	r2, #0
 800ad6c:	d1cb      	bne.n	800ad06 <quorem+0x94>
 800ad6e:	3c01      	subs	r4, #1
 800ad70:	e7c6      	b.n	800ad00 <quorem+0x8e>
 800ad72:	6812      	ldr	r2, [r2, #0]
 800ad74:	3b04      	subs	r3, #4
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	d1ef      	bne.n	800ad5a <quorem+0xe8>
 800ad7a:	3c01      	subs	r4, #1
 800ad7c:	e7ea      	b.n	800ad54 <quorem+0xe2>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	e7ee      	b.n	800ad60 <quorem+0xee>
 800ad82:	0000      	movs	r0, r0
 800ad84:	0000      	movs	r0, r0
	...

0800ad88 <_dtoa_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	69c7      	ldr	r7, [r0, #28]
 800ad8e:	b097      	sub	sp, #92	@ 0x5c
 800ad90:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ad94:	ec55 4b10 	vmov	r4, r5, d0
 800ad98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ad9a:	9107      	str	r1, [sp, #28]
 800ad9c:	4681      	mov	r9, r0
 800ad9e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ada0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ada2:	b97f      	cbnz	r7, 800adc4 <_dtoa_r+0x3c>
 800ada4:	2010      	movs	r0, #16
 800ada6:	f000 fe09 	bl	800b9bc <malloc>
 800adaa:	4602      	mov	r2, r0
 800adac:	f8c9 001c 	str.w	r0, [r9, #28]
 800adb0:	b920      	cbnz	r0, 800adbc <_dtoa_r+0x34>
 800adb2:	4ba9      	ldr	r3, [pc, #676]	@ (800b058 <_dtoa_r+0x2d0>)
 800adb4:	21ef      	movs	r1, #239	@ 0xef
 800adb6:	48a9      	ldr	r0, [pc, #676]	@ (800b05c <_dtoa_r+0x2d4>)
 800adb8:	f001 fc5e 	bl	800c678 <__assert_func>
 800adbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800adc0:	6007      	str	r7, [r0, #0]
 800adc2:	60c7      	str	r7, [r0, #12]
 800adc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adc8:	6819      	ldr	r1, [r3, #0]
 800adca:	b159      	cbz	r1, 800ade4 <_dtoa_r+0x5c>
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	604a      	str	r2, [r1, #4]
 800add0:	2301      	movs	r3, #1
 800add2:	4093      	lsls	r3, r2
 800add4:	608b      	str	r3, [r1, #8]
 800add6:	4648      	mov	r0, r9
 800add8:	f000 fee6 	bl	800bba8 <_Bfree>
 800addc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	1e2b      	subs	r3, r5, #0
 800ade6:	bfb9      	ittee	lt
 800ade8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800adec:	9305      	strlt	r3, [sp, #20]
 800adee:	2300      	movge	r3, #0
 800adf0:	6033      	strge	r3, [r6, #0]
 800adf2:	9f05      	ldr	r7, [sp, #20]
 800adf4:	4b9a      	ldr	r3, [pc, #616]	@ (800b060 <_dtoa_r+0x2d8>)
 800adf6:	bfbc      	itt	lt
 800adf8:	2201      	movlt	r2, #1
 800adfa:	6032      	strlt	r2, [r6, #0]
 800adfc:	43bb      	bics	r3, r7
 800adfe:	d112      	bne.n	800ae26 <_dtoa_r+0x9e>
 800ae00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae0c:	4323      	orrs	r3, r4
 800ae0e:	f000 855a 	beq.w	800b8c6 <_dtoa_r+0xb3e>
 800ae12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b074 <_dtoa_r+0x2ec>
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 855c 	beq.w	800b8d6 <_dtoa_r+0xb4e>
 800ae1e:	f10a 0303 	add.w	r3, sl, #3
 800ae22:	f000 bd56 	b.w	800b8d2 <_dtoa_r+0xb4a>
 800ae26:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	ec51 0b17 	vmov	r0, r1, d7
 800ae30:	2300      	movs	r3, #0
 800ae32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ae36:	f7f5 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	b158      	cbz	r0, 800ae56 <_dtoa_r+0xce>
 800ae3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae40:	2301      	movs	r3, #1
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae46:	b113      	cbz	r3, 800ae4e <_dtoa_r+0xc6>
 800ae48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ae4a:	4b86      	ldr	r3, [pc, #536]	@ (800b064 <_dtoa_r+0x2dc>)
 800ae4c:	6013      	str	r3, [r2, #0]
 800ae4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b078 <_dtoa_r+0x2f0>
 800ae52:	f000 bd40 	b.w	800b8d6 <_dtoa_r+0xb4e>
 800ae56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ae5a:	aa14      	add	r2, sp, #80	@ 0x50
 800ae5c:	a915      	add	r1, sp, #84	@ 0x54
 800ae5e:	4648      	mov	r0, r9
 800ae60:	f001 f984 	bl	800c16c <__d2b>
 800ae64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae68:	9002      	str	r0, [sp, #8]
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	d078      	beq.n	800af60 <_dtoa_r+0x1d8>
 800ae6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ae74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae88:	4619      	mov	r1, r3
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	4b76      	ldr	r3, [pc, #472]	@ (800b068 <_dtoa_r+0x2e0>)
 800ae8e:	f7f5 f9fb 	bl	8000288 <__aeabi_dsub>
 800ae92:	a36b      	add	r3, pc, #428	@ (adr r3, 800b040 <_dtoa_r+0x2b8>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fbae 	bl	80005f8 <__aeabi_dmul>
 800ae9c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b048 <_dtoa_r+0x2c0>)
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f7f5 f9f3 	bl	800028c <__adddf3>
 800aea6:	4604      	mov	r4, r0
 800aea8:	4630      	mov	r0, r6
 800aeaa:	460d      	mov	r5, r1
 800aeac:	f7f5 fb3a 	bl	8000524 <__aeabi_i2d>
 800aeb0:	a367      	add	r3, pc, #412	@ (adr r3, 800b050 <_dtoa_r+0x2c8>)
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f7f5 fb9f 	bl	80005f8 <__aeabi_dmul>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 f9e3 	bl	800028c <__adddf3>
 800aec6:	4604      	mov	r4, r0
 800aec8:	460d      	mov	r5, r1
 800aeca:	f7f5 fe45 	bl	8000b58 <__aeabi_d2iz>
 800aece:	2200      	movs	r2, #0
 800aed0:	4607      	mov	r7, r0
 800aed2:	2300      	movs	r3, #0
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 fe00 	bl	8000adc <__aeabi_dcmplt>
 800aedc:	b140      	cbz	r0, 800aef0 <_dtoa_r+0x168>
 800aede:	4638      	mov	r0, r7
 800aee0:	f7f5 fb20 	bl	8000524 <__aeabi_i2d>
 800aee4:	4622      	mov	r2, r4
 800aee6:	462b      	mov	r3, r5
 800aee8:	f7f5 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeec:	b900      	cbnz	r0, 800aef0 <_dtoa_r+0x168>
 800aeee:	3f01      	subs	r7, #1
 800aef0:	2f16      	cmp	r7, #22
 800aef2:	d852      	bhi.n	800af9a <_dtoa_r+0x212>
 800aef4:	4b5d      	ldr	r3, [pc, #372]	@ (800b06c <_dtoa_r+0x2e4>)
 800aef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af02:	f7f5 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800af06:	2800      	cmp	r0, #0
 800af08:	d049      	beq.n	800af9e <_dtoa_r+0x216>
 800af0a:	3f01      	subs	r7, #1
 800af0c:	2300      	movs	r3, #0
 800af0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800af10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af12:	1b9b      	subs	r3, r3, r6
 800af14:	1e5a      	subs	r2, r3, #1
 800af16:	bf45      	ittet	mi
 800af18:	f1c3 0301 	rsbmi	r3, r3, #1
 800af1c:	9300      	strmi	r3, [sp, #0]
 800af1e:	2300      	movpl	r3, #0
 800af20:	2300      	movmi	r3, #0
 800af22:	9206      	str	r2, [sp, #24]
 800af24:	bf54      	ite	pl
 800af26:	9300      	strpl	r3, [sp, #0]
 800af28:	9306      	strmi	r3, [sp, #24]
 800af2a:	2f00      	cmp	r7, #0
 800af2c:	db39      	blt.n	800afa2 <_dtoa_r+0x21a>
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	970d      	str	r7, [sp, #52]	@ 0x34
 800af32:	443b      	add	r3, r7
 800af34:	9306      	str	r3, [sp, #24]
 800af36:	2300      	movs	r3, #0
 800af38:	9308      	str	r3, [sp, #32]
 800af3a:	9b07      	ldr	r3, [sp, #28]
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d863      	bhi.n	800b008 <_dtoa_r+0x280>
 800af40:	2b05      	cmp	r3, #5
 800af42:	bfc4      	itt	gt
 800af44:	3b04      	subgt	r3, #4
 800af46:	9307      	strgt	r3, [sp, #28]
 800af48:	9b07      	ldr	r3, [sp, #28]
 800af4a:	f1a3 0302 	sub.w	r3, r3, #2
 800af4e:	bfcc      	ite	gt
 800af50:	2400      	movgt	r4, #0
 800af52:	2401      	movle	r4, #1
 800af54:	2b03      	cmp	r3, #3
 800af56:	d863      	bhi.n	800b020 <_dtoa_r+0x298>
 800af58:	e8df f003 	tbb	[pc, r3]
 800af5c:	2b375452 	.word	0x2b375452
 800af60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800af64:	441e      	add	r6, r3
 800af66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af6a:	2b20      	cmp	r3, #32
 800af6c:	bfc1      	itttt	gt
 800af6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af72:	409f      	lslgt	r7, r3
 800af74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af78:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af7c:	bfd6      	itet	le
 800af7e:	f1c3 0320 	rsble	r3, r3, #32
 800af82:	ea47 0003 	orrgt.w	r0, r7, r3
 800af86:	fa04 f003 	lslle.w	r0, r4, r3
 800af8a:	f7f5 fabb 	bl	8000504 <__aeabi_ui2d>
 800af8e:	2201      	movs	r2, #1
 800af90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af94:	3e01      	subs	r6, #1
 800af96:	9212      	str	r2, [sp, #72]	@ 0x48
 800af98:	e776      	b.n	800ae88 <_dtoa_r+0x100>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7b7      	b.n	800af0e <_dtoa_r+0x186>
 800af9e:	9010      	str	r0, [sp, #64]	@ 0x40
 800afa0:	e7b6      	b.n	800af10 <_dtoa_r+0x188>
 800afa2:	9b00      	ldr	r3, [sp, #0]
 800afa4:	1bdb      	subs	r3, r3, r7
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	427b      	negs	r3, r7
 800afaa:	9308      	str	r3, [sp, #32]
 800afac:	2300      	movs	r3, #0
 800afae:	930d      	str	r3, [sp, #52]	@ 0x34
 800afb0:	e7c3      	b.n	800af3a <_dtoa_r+0x1b2>
 800afb2:	2301      	movs	r3, #1
 800afb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afb8:	eb07 0b03 	add.w	fp, r7, r3
 800afbc:	f10b 0301 	add.w	r3, fp, #1
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	bfb8      	it	lt
 800afc6:	2301      	movlt	r3, #1
 800afc8:	e006      	b.n	800afd8 <_dtoa_r+0x250>
 800afca:	2301      	movs	r3, #1
 800afcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dd28      	ble.n	800b026 <_dtoa_r+0x29e>
 800afd4:	469b      	mov	fp, r3
 800afd6:	9303      	str	r3, [sp, #12]
 800afd8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800afdc:	2100      	movs	r1, #0
 800afde:	2204      	movs	r2, #4
 800afe0:	f102 0514 	add.w	r5, r2, #20
 800afe4:	429d      	cmp	r5, r3
 800afe6:	d926      	bls.n	800b036 <_dtoa_r+0x2ae>
 800afe8:	6041      	str	r1, [r0, #4]
 800afea:	4648      	mov	r0, r9
 800afec:	f000 fd9c 	bl	800bb28 <_Balloc>
 800aff0:	4682      	mov	sl, r0
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d142      	bne.n	800b07c <_dtoa_r+0x2f4>
 800aff6:	4b1e      	ldr	r3, [pc, #120]	@ (800b070 <_dtoa_r+0x2e8>)
 800aff8:	4602      	mov	r2, r0
 800affa:	f240 11af 	movw	r1, #431	@ 0x1af
 800affe:	e6da      	b.n	800adb6 <_dtoa_r+0x2e>
 800b000:	2300      	movs	r3, #0
 800b002:	e7e3      	b.n	800afcc <_dtoa_r+0x244>
 800b004:	2300      	movs	r3, #0
 800b006:	e7d5      	b.n	800afb4 <_dtoa_r+0x22c>
 800b008:	2401      	movs	r4, #1
 800b00a:	2300      	movs	r3, #0
 800b00c:	9307      	str	r3, [sp, #28]
 800b00e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b010:	f04f 3bff 	mov.w	fp, #4294967295
 800b014:	2200      	movs	r2, #0
 800b016:	f8cd b00c 	str.w	fp, [sp, #12]
 800b01a:	2312      	movs	r3, #18
 800b01c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b01e:	e7db      	b.n	800afd8 <_dtoa_r+0x250>
 800b020:	2301      	movs	r3, #1
 800b022:	9309      	str	r3, [sp, #36]	@ 0x24
 800b024:	e7f4      	b.n	800b010 <_dtoa_r+0x288>
 800b026:	f04f 0b01 	mov.w	fp, #1
 800b02a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b02e:	465b      	mov	r3, fp
 800b030:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b034:	e7d0      	b.n	800afd8 <_dtoa_r+0x250>
 800b036:	3101      	adds	r1, #1
 800b038:	0052      	lsls	r2, r2, #1
 800b03a:	e7d1      	b.n	800afe0 <_dtoa_r+0x258>
 800b03c:	f3af 8000 	nop.w
 800b040:	636f4361 	.word	0x636f4361
 800b044:	3fd287a7 	.word	0x3fd287a7
 800b048:	8b60c8b3 	.word	0x8b60c8b3
 800b04c:	3fc68a28 	.word	0x3fc68a28
 800b050:	509f79fb 	.word	0x509f79fb
 800b054:	3fd34413 	.word	0x3fd34413
 800b058:	08020d59 	.word	0x08020d59
 800b05c:	08020d70 	.word	0x08020d70
 800b060:	7ff00000 	.word	0x7ff00000
 800b064:	08020d29 	.word	0x08020d29
 800b068:	3ff80000 	.word	0x3ff80000
 800b06c:	08020ec0 	.word	0x08020ec0
 800b070:	08020dc8 	.word	0x08020dc8
 800b074:	08020d55 	.word	0x08020d55
 800b078:	08020d28 	.word	0x08020d28
 800b07c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b080:	6018      	str	r0, [r3, #0]
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	2b0e      	cmp	r3, #14
 800b086:	f200 80a1 	bhi.w	800b1cc <_dtoa_r+0x444>
 800b08a:	2c00      	cmp	r4, #0
 800b08c:	f000 809e 	beq.w	800b1cc <_dtoa_r+0x444>
 800b090:	2f00      	cmp	r7, #0
 800b092:	dd33      	ble.n	800b0fc <_dtoa_r+0x374>
 800b094:	4b9c      	ldr	r3, [pc, #624]	@ (800b308 <_dtoa_r+0x580>)
 800b096:	f007 020f 	and.w	r2, r7, #15
 800b09a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b09e:	ed93 7b00 	vldr	d7, [r3]
 800b0a2:	05f8      	lsls	r0, r7, #23
 800b0a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b0a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b0ac:	d516      	bpl.n	800b0dc <_dtoa_r+0x354>
 800b0ae:	4b97      	ldr	r3, [pc, #604]	@ (800b30c <_dtoa_r+0x584>)
 800b0b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0b8:	f7f5 fbc8 	bl	800084c <__aeabi_ddiv>
 800b0bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0c0:	f004 040f 	and.w	r4, r4, #15
 800b0c4:	2603      	movs	r6, #3
 800b0c6:	4d91      	ldr	r5, [pc, #580]	@ (800b30c <_dtoa_r+0x584>)
 800b0c8:	b954      	cbnz	r4, 800b0e0 <_dtoa_r+0x358>
 800b0ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d2:	f7f5 fbbb 	bl	800084c <__aeabi_ddiv>
 800b0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0da:	e028      	b.n	800b12e <_dtoa_r+0x3a6>
 800b0dc:	2602      	movs	r6, #2
 800b0de:	e7f2      	b.n	800b0c6 <_dtoa_r+0x33e>
 800b0e0:	07e1      	lsls	r1, r4, #31
 800b0e2:	d508      	bpl.n	800b0f6 <_dtoa_r+0x36e>
 800b0e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0ec:	f7f5 fa84 	bl	80005f8 <__aeabi_dmul>
 800b0f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0f4:	3601      	adds	r6, #1
 800b0f6:	1064      	asrs	r4, r4, #1
 800b0f8:	3508      	adds	r5, #8
 800b0fa:	e7e5      	b.n	800b0c8 <_dtoa_r+0x340>
 800b0fc:	f000 80af 	beq.w	800b25e <_dtoa_r+0x4d6>
 800b100:	427c      	negs	r4, r7
 800b102:	4b81      	ldr	r3, [pc, #516]	@ (800b308 <_dtoa_r+0x580>)
 800b104:	4d81      	ldr	r5, [pc, #516]	@ (800b30c <_dtoa_r+0x584>)
 800b106:	f004 020f 	and.w	r2, r4, #15
 800b10a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b116:	f7f5 fa6f 	bl	80005f8 <__aeabi_dmul>
 800b11a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b11e:	1124      	asrs	r4, r4, #4
 800b120:	2300      	movs	r3, #0
 800b122:	2602      	movs	r6, #2
 800b124:	2c00      	cmp	r4, #0
 800b126:	f040 808f 	bne.w	800b248 <_dtoa_r+0x4c0>
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1d3      	bne.n	800b0d6 <_dtoa_r+0x34e>
 800b12e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b130:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 8094 	beq.w	800b262 <_dtoa_r+0x4da>
 800b13a:	4b75      	ldr	r3, [pc, #468]	@ (800b310 <_dtoa_r+0x588>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	4620      	mov	r0, r4
 800b140:	4629      	mov	r1, r5
 800b142:	f7f5 fccb 	bl	8000adc <__aeabi_dcmplt>
 800b146:	2800      	cmp	r0, #0
 800b148:	f000 808b 	beq.w	800b262 <_dtoa_r+0x4da>
 800b14c:	9b03      	ldr	r3, [sp, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8087 	beq.w	800b262 <_dtoa_r+0x4da>
 800b154:	f1bb 0f00 	cmp.w	fp, #0
 800b158:	dd34      	ble.n	800b1c4 <_dtoa_r+0x43c>
 800b15a:	4620      	mov	r0, r4
 800b15c:	4b6d      	ldr	r3, [pc, #436]	@ (800b314 <_dtoa_r+0x58c>)
 800b15e:	2200      	movs	r2, #0
 800b160:	4629      	mov	r1, r5
 800b162:	f7f5 fa49 	bl	80005f8 <__aeabi_dmul>
 800b166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b16a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b16e:	3601      	adds	r6, #1
 800b170:	465c      	mov	r4, fp
 800b172:	4630      	mov	r0, r6
 800b174:	f7f5 f9d6 	bl	8000524 <__aeabi_i2d>
 800b178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b17c:	f7f5 fa3c 	bl	80005f8 <__aeabi_dmul>
 800b180:	4b65      	ldr	r3, [pc, #404]	@ (800b318 <_dtoa_r+0x590>)
 800b182:	2200      	movs	r2, #0
 800b184:	f7f5 f882 	bl	800028c <__adddf3>
 800b188:	4605      	mov	r5, r0
 800b18a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b18e:	2c00      	cmp	r4, #0
 800b190:	d16a      	bne.n	800b268 <_dtoa_r+0x4e0>
 800b192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b196:	4b61      	ldr	r3, [pc, #388]	@ (800b31c <_dtoa_r+0x594>)
 800b198:	2200      	movs	r2, #0
 800b19a:	f7f5 f875 	bl	8000288 <__aeabi_dsub>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1a6:	462a      	mov	r2, r5
 800b1a8:	4633      	mov	r3, r6
 800b1aa:	f7f5 fcb5 	bl	8000b18 <__aeabi_dcmpgt>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f040 8298 	bne.w	800b6e4 <_dtoa_r+0x95c>
 800b1b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b1be:	f7f5 fc8d 	bl	8000adc <__aeabi_dcmplt>
 800b1c2:	bb38      	cbnz	r0, 800b214 <_dtoa_r+0x48c>
 800b1c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b1c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f2c0 8157 	blt.w	800b482 <_dtoa_r+0x6fa>
 800b1d4:	2f0e      	cmp	r7, #14
 800b1d6:	f300 8154 	bgt.w	800b482 <_dtoa_r+0x6fa>
 800b1da:	4b4b      	ldr	r3, [pc, #300]	@ (800b308 <_dtoa_r+0x580>)
 800b1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1e0:	ed93 7b00 	vldr	d7, [r3]
 800b1e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	ed8d 7b00 	vstr	d7, [sp]
 800b1ec:	f280 80e5 	bge.w	800b3ba <_dtoa_r+0x632>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f300 80e1 	bgt.w	800b3ba <_dtoa_r+0x632>
 800b1f8:	d10c      	bne.n	800b214 <_dtoa_r+0x48c>
 800b1fa:	4b48      	ldr	r3, [pc, #288]	@ (800b31c <_dtoa_r+0x594>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	ec51 0b17 	vmov	r0, r1, d7
 800b202:	f7f5 f9f9 	bl	80005f8 <__aeabi_dmul>
 800b206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b20a:	f7f5 fc7b 	bl	8000b04 <__aeabi_dcmpge>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f000 8266 	beq.w	800b6e0 <_dtoa_r+0x958>
 800b214:	2400      	movs	r4, #0
 800b216:	4625      	mov	r5, r4
 800b218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b21a:	4656      	mov	r6, sl
 800b21c:	ea6f 0803 	mvn.w	r8, r3
 800b220:	2700      	movs	r7, #0
 800b222:	4621      	mov	r1, r4
 800b224:	4648      	mov	r0, r9
 800b226:	f000 fcbf 	bl	800bba8 <_Bfree>
 800b22a:	2d00      	cmp	r5, #0
 800b22c:	f000 80bd 	beq.w	800b3aa <_dtoa_r+0x622>
 800b230:	b12f      	cbz	r7, 800b23e <_dtoa_r+0x4b6>
 800b232:	42af      	cmp	r7, r5
 800b234:	d003      	beq.n	800b23e <_dtoa_r+0x4b6>
 800b236:	4639      	mov	r1, r7
 800b238:	4648      	mov	r0, r9
 800b23a:	f000 fcb5 	bl	800bba8 <_Bfree>
 800b23e:	4629      	mov	r1, r5
 800b240:	4648      	mov	r0, r9
 800b242:	f000 fcb1 	bl	800bba8 <_Bfree>
 800b246:	e0b0      	b.n	800b3aa <_dtoa_r+0x622>
 800b248:	07e2      	lsls	r2, r4, #31
 800b24a:	d505      	bpl.n	800b258 <_dtoa_r+0x4d0>
 800b24c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b250:	f7f5 f9d2 	bl	80005f8 <__aeabi_dmul>
 800b254:	3601      	adds	r6, #1
 800b256:	2301      	movs	r3, #1
 800b258:	1064      	asrs	r4, r4, #1
 800b25a:	3508      	adds	r5, #8
 800b25c:	e762      	b.n	800b124 <_dtoa_r+0x39c>
 800b25e:	2602      	movs	r6, #2
 800b260:	e765      	b.n	800b12e <_dtoa_r+0x3a6>
 800b262:	9c03      	ldr	r4, [sp, #12]
 800b264:	46b8      	mov	r8, r7
 800b266:	e784      	b.n	800b172 <_dtoa_r+0x3ea>
 800b268:	4b27      	ldr	r3, [pc, #156]	@ (800b308 <_dtoa_r+0x580>)
 800b26a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b26c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b274:	4454      	add	r4, sl
 800b276:	2900      	cmp	r1, #0
 800b278:	d054      	beq.n	800b324 <_dtoa_r+0x59c>
 800b27a:	4929      	ldr	r1, [pc, #164]	@ (800b320 <_dtoa_r+0x598>)
 800b27c:	2000      	movs	r0, #0
 800b27e:	f7f5 fae5 	bl	800084c <__aeabi_ddiv>
 800b282:	4633      	mov	r3, r6
 800b284:	462a      	mov	r2, r5
 800b286:	f7f4 ffff 	bl	8000288 <__aeabi_dsub>
 800b28a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b28e:	4656      	mov	r6, sl
 800b290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b294:	f7f5 fc60 	bl	8000b58 <__aeabi_d2iz>
 800b298:	4605      	mov	r5, r0
 800b29a:	f7f5 f943 	bl	8000524 <__aeabi_i2d>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2a6:	f7f4 ffef 	bl	8000288 <__aeabi_dsub>
 800b2aa:	3530      	adds	r5, #48	@ 0x30
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2b4:	f806 5b01 	strb.w	r5, [r6], #1
 800b2b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2bc:	f7f5 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d172      	bne.n	800b3aa <_dtoa_r+0x622>
 800b2c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2c8:	4911      	ldr	r1, [pc, #68]	@ (800b310 <_dtoa_r+0x588>)
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	f7f4 ffdc 	bl	8000288 <__aeabi_dsub>
 800b2d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2d4:	f7f5 fc02 	bl	8000adc <__aeabi_dcmplt>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	f040 80b4 	bne.w	800b446 <_dtoa_r+0x6be>
 800b2de:	42a6      	cmp	r6, r4
 800b2e0:	f43f af70 	beq.w	800b1c4 <_dtoa_r+0x43c>
 800b2e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b314 <_dtoa_r+0x58c>)
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f7f5 f984 	bl	80005f8 <__aeabi_dmul>
 800b2f0:	4b08      	ldr	r3, [pc, #32]	@ (800b314 <_dtoa_r+0x58c>)
 800b2f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2fc:	f7f5 f97c 	bl	80005f8 <__aeabi_dmul>
 800b300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b304:	e7c4      	b.n	800b290 <_dtoa_r+0x508>
 800b306:	bf00      	nop
 800b308:	08020ec0 	.word	0x08020ec0
 800b30c:	08020e98 	.word	0x08020e98
 800b310:	3ff00000 	.word	0x3ff00000
 800b314:	40240000 	.word	0x40240000
 800b318:	401c0000 	.word	0x401c0000
 800b31c:	40140000 	.word	0x40140000
 800b320:	3fe00000 	.word	0x3fe00000
 800b324:	4631      	mov	r1, r6
 800b326:	4628      	mov	r0, r5
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b330:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b332:	4656      	mov	r6, sl
 800b334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b338:	f7f5 fc0e 	bl	8000b58 <__aeabi_d2iz>
 800b33c:	4605      	mov	r5, r0
 800b33e:	f7f5 f8f1 	bl	8000524 <__aeabi_i2d>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b34a:	f7f4 ff9d 	bl	8000288 <__aeabi_dsub>
 800b34e:	3530      	adds	r5, #48	@ 0x30
 800b350:	f806 5b01 	strb.w	r5, [r6], #1
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	42a6      	cmp	r6, r4
 800b35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b35e:	f04f 0200 	mov.w	r2, #0
 800b362:	d124      	bne.n	800b3ae <_dtoa_r+0x626>
 800b364:	4baf      	ldr	r3, [pc, #700]	@ (800b624 <_dtoa_r+0x89c>)
 800b366:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b36a:	f7f4 ff8f 	bl	800028c <__adddf3>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b376:	f7f5 fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d163      	bne.n	800b446 <_dtoa_r+0x6be>
 800b37e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b382:	49a8      	ldr	r1, [pc, #672]	@ (800b624 <_dtoa_r+0x89c>)
 800b384:	2000      	movs	r0, #0
 800b386:	f7f4 ff7f 	bl	8000288 <__aeabi_dsub>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b392:	f7f5 fba3 	bl	8000adc <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	f43f af14 	beq.w	800b1c4 <_dtoa_r+0x43c>
 800b39c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b39e:	1e73      	subs	r3, r6, #1
 800b3a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3a6:	2b30      	cmp	r3, #48	@ 0x30
 800b3a8:	d0f8      	beq.n	800b39c <_dtoa_r+0x614>
 800b3aa:	4647      	mov	r7, r8
 800b3ac:	e03b      	b.n	800b426 <_dtoa_r+0x69e>
 800b3ae:	4b9e      	ldr	r3, [pc, #632]	@ (800b628 <_dtoa_r+0x8a0>)
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3b8:	e7bc      	b.n	800b334 <_dtoa_r+0x5ac>
 800b3ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b3be:	4656      	mov	r6, sl
 800b3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	f7f5 fa40 	bl	800084c <__aeabi_ddiv>
 800b3cc:	f7f5 fbc4 	bl	8000b58 <__aeabi_d2iz>
 800b3d0:	4680      	mov	r8, r0
 800b3d2:	f7f5 f8a7 	bl	8000524 <__aeabi_i2d>
 800b3d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3da:	f7f5 f90d 	bl	80005f8 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3ea:	f7f4 ff4d 	bl	8000288 <__aeabi_dsub>
 800b3ee:	f806 4b01 	strb.w	r4, [r6], #1
 800b3f2:	9d03      	ldr	r5, [sp, #12]
 800b3f4:	eba6 040a 	sub.w	r4, r6, sl
 800b3f8:	42a5      	cmp	r5, r4
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	d133      	bne.n	800b468 <_dtoa_r+0x6e0>
 800b400:	f7f4 ff44 	bl	800028c <__adddf3>
 800b404:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b408:	4604      	mov	r4, r0
 800b40a:	460d      	mov	r5, r1
 800b40c:	f7f5 fb84 	bl	8000b18 <__aeabi_dcmpgt>
 800b410:	b9c0      	cbnz	r0, 800b444 <_dtoa_r+0x6bc>
 800b412:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b416:	4620      	mov	r0, r4
 800b418:	4629      	mov	r1, r5
 800b41a:	f7f5 fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800b41e:	b110      	cbz	r0, 800b426 <_dtoa_r+0x69e>
 800b420:	f018 0f01 	tst.w	r8, #1
 800b424:	d10e      	bne.n	800b444 <_dtoa_r+0x6bc>
 800b426:	9902      	ldr	r1, [sp, #8]
 800b428:	4648      	mov	r0, r9
 800b42a:	f000 fbbd 	bl	800bba8 <_Bfree>
 800b42e:	2300      	movs	r3, #0
 800b430:	7033      	strb	r3, [r6, #0]
 800b432:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b434:	3701      	adds	r7, #1
 800b436:	601f      	str	r7, [r3, #0]
 800b438:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 824b 	beq.w	800b8d6 <_dtoa_r+0xb4e>
 800b440:	601e      	str	r6, [r3, #0]
 800b442:	e248      	b.n	800b8d6 <_dtoa_r+0xb4e>
 800b444:	46b8      	mov	r8, r7
 800b446:	4633      	mov	r3, r6
 800b448:	461e      	mov	r6, r3
 800b44a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b44e:	2a39      	cmp	r2, #57	@ 0x39
 800b450:	d106      	bne.n	800b460 <_dtoa_r+0x6d8>
 800b452:	459a      	cmp	sl, r3
 800b454:	d1f8      	bne.n	800b448 <_dtoa_r+0x6c0>
 800b456:	2230      	movs	r2, #48	@ 0x30
 800b458:	f108 0801 	add.w	r8, r8, #1
 800b45c:	f88a 2000 	strb.w	r2, [sl]
 800b460:	781a      	ldrb	r2, [r3, #0]
 800b462:	3201      	adds	r2, #1
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	e7a0      	b.n	800b3aa <_dtoa_r+0x622>
 800b468:	4b6f      	ldr	r3, [pc, #444]	@ (800b628 <_dtoa_r+0x8a0>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	f7f5 f8c4 	bl	80005f8 <__aeabi_dmul>
 800b470:	2200      	movs	r2, #0
 800b472:	2300      	movs	r3, #0
 800b474:	4604      	mov	r4, r0
 800b476:	460d      	mov	r5, r1
 800b478:	f7f5 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d09f      	beq.n	800b3c0 <_dtoa_r+0x638>
 800b480:	e7d1      	b.n	800b426 <_dtoa_r+0x69e>
 800b482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b484:	2a00      	cmp	r2, #0
 800b486:	f000 80ea 	beq.w	800b65e <_dtoa_r+0x8d6>
 800b48a:	9a07      	ldr	r2, [sp, #28]
 800b48c:	2a01      	cmp	r2, #1
 800b48e:	f300 80cd 	bgt.w	800b62c <_dtoa_r+0x8a4>
 800b492:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b494:	2a00      	cmp	r2, #0
 800b496:	f000 80c1 	beq.w	800b61c <_dtoa_r+0x894>
 800b49a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b49e:	9c08      	ldr	r4, [sp, #32]
 800b4a0:	9e00      	ldr	r6, [sp, #0]
 800b4a2:	9a00      	ldr	r2, [sp, #0]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	9200      	str	r2, [sp, #0]
 800b4a8:	9a06      	ldr	r2, [sp, #24]
 800b4aa:	2101      	movs	r1, #1
 800b4ac:	441a      	add	r2, r3
 800b4ae:	4648      	mov	r0, r9
 800b4b0:	9206      	str	r2, [sp, #24]
 800b4b2:	f000 fc2d 	bl	800bd10 <__i2b>
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	b166      	cbz	r6, 800b4d4 <_dtoa_r+0x74c>
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dd09      	ble.n	800b4d4 <_dtoa_r+0x74c>
 800b4c0:	42b3      	cmp	r3, r6
 800b4c2:	9a00      	ldr	r2, [sp, #0]
 800b4c4:	bfa8      	it	ge
 800b4c6:	4633      	movge	r3, r6
 800b4c8:	1ad2      	subs	r2, r2, r3
 800b4ca:	9200      	str	r2, [sp, #0]
 800b4cc:	9a06      	ldr	r2, [sp, #24]
 800b4ce:	1af6      	subs	r6, r6, r3
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	9306      	str	r3, [sp, #24]
 800b4d4:	9b08      	ldr	r3, [sp, #32]
 800b4d6:	b30b      	cbz	r3, 800b51c <_dtoa_r+0x794>
 800b4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80c6 	beq.w	800b66c <_dtoa_r+0x8e4>
 800b4e0:	2c00      	cmp	r4, #0
 800b4e2:	f000 80c0 	beq.w	800b666 <_dtoa_r+0x8de>
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	4648      	mov	r0, r9
 800b4ec:	f000 fcc8 	bl	800be80 <__pow5mult>
 800b4f0:	9a02      	ldr	r2, [sp, #8]
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	4648      	mov	r0, r9
 800b4f8:	f000 fc20 	bl	800bd3c <__multiply>
 800b4fc:	9902      	ldr	r1, [sp, #8]
 800b4fe:	4680      	mov	r8, r0
 800b500:	4648      	mov	r0, r9
 800b502:	f000 fb51 	bl	800bba8 <_Bfree>
 800b506:	9b08      	ldr	r3, [sp, #32]
 800b508:	1b1b      	subs	r3, r3, r4
 800b50a:	9308      	str	r3, [sp, #32]
 800b50c:	f000 80b1 	beq.w	800b672 <_dtoa_r+0x8ea>
 800b510:	9a08      	ldr	r2, [sp, #32]
 800b512:	4641      	mov	r1, r8
 800b514:	4648      	mov	r0, r9
 800b516:	f000 fcb3 	bl	800be80 <__pow5mult>
 800b51a:	9002      	str	r0, [sp, #8]
 800b51c:	2101      	movs	r1, #1
 800b51e:	4648      	mov	r0, r9
 800b520:	f000 fbf6 	bl	800bd10 <__i2b>
 800b524:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b526:	4604      	mov	r4, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 81d8 	beq.w	800b8de <_dtoa_r+0xb56>
 800b52e:	461a      	mov	r2, r3
 800b530:	4601      	mov	r1, r0
 800b532:	4648      	mov	r0, r9
 800b534:	f000 fca4 	bl	800be80 <__pow5mult>
 800b538:	9b07      	ldr	r3, [sp, #28]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	4604      	mov	r4, r0
 800b53e:	f300 809f 	bgt.w	800b680 <_dtoa_r+0x8f8>
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	f040 8097 	bne.w	800b678 <_dtoa_r+0x8f0>
 800b54a:	9b05      	ldr	r3, [sp, #20]
 800b54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b550:	2b00      	cmp	r3, #0
 800b552:	f040 8093 	bne.w	800b67c <_dtoa_r+0x8f4>
 800b556:	9b05      	ldr	r3, [sp, #20]
 800b558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b55c:	0d1b      	lsrs	r3, r3, #20
 800b55e:	051b      	lsls	r3, r3, #20
 800b560:	b133      	cbz	r3, 800b570 <_dtoa_r+0x7e8>
 800b562:	9b00      	ldr	r3, [sp, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	3301      	adds	r3, #1
 800b56c:	9306      	str	r3, [sp, #24]
 800b56e:	2301      	movs	r3, #1
 800b570:	9308      	str	r3, [sp, #32]
 800b572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 81b8 	beq.w	800b8ea <_dtoa_r+0xb62>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b580:	6918      	ldr	r0, [r3, #16]
 800b582:	f000 fb79 	bl	800bc78 <__hi0bits>
 800b586:	f1c0 0020 	rsb	r0, r0, #32
 800b58a:	9b06      	ldr	r3, [sp, #24]
 800b58c:	4418      	add	r0, r3
 800b58e:	f010 001f 	ands.w	r0, r0, #31
 800b592:	f000 8082 	beq.w	800b69a <_dtoa_r+0x912>
 800b596:	f1c0 0320 	rsb	r3, r0, #32
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	dd73      	ble.n	800b686 <_dtoa_r+0x8fe>
 800b59e:	9b00      	ldr	r3, [sp, #0]
 800b5a0:	f1c0 001c 	rsb	r0, r0, #28
 800b5a4:	4403      	add	r3, r0
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	9b06      	ldr	r3, [sp, #24]
 800b5aa:	4403      	add	r3, r0
 800b5ac:	4406      	add	r6, r0
 800b5ae:	9306      	str	r3, [sp, #24]
 800b5b0:	9b00      	ldr	r3, [sp, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	dd05      	ble.n	800b5c2 <_dtoa_r+0x83a>
 800b5b6:	9902      	ldr	r1, [sp, #8]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	4648      	mov	r0, r9
 800b5bc:	f000 fcba 	bl	800bf34 <__lshift>
 800b5c0:	9002      	str	r0, [sp, #8]
 800b5c2:	9b06      	ldr	r3, [sp, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dd05      	ble.n	800b5d4 <_dtoa_r+0x84c>
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	4648      	mov	r0, r9
 800b5ce:	f000 fcb1 	bl	800bf34 <__lshift>
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d061      	beq.n	800b69e <_dtoa_r+0x916>
 800b5da:	9802      	ldr	r0, [sp, #8]
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f000 fd15 	bl	800c00c <__mcmp>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	da5b      	bge.n	800b69e <_dtoa_r+0x916>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	9902      	ldr	r1, [sp, #8]
 800b5ea:	220a      	movs	r2, #10
 800b5ec:	4648      	mov	r0, r9
 800b5ee:	f000 fafd 	bl	800bbec <__multadd>
 800b5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f4:	9002      	str	r0, [sp, #8]
 800b5f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 8177 	beq.w	800b8ee <_dtoa_r+0xb66>
 800b600:	4629      	mov	r1, r5
 800b602:	2300      	movs	r3, #0
 800b604:	220a      	movs	r2, #10
 800b606:	4648      	mov	r0, r9
 800b608:	f000 faf0 	bl	800bbec <__multadd>
 800b60c:	f1bb 0f00 	cmp.w	fp, #0
 800b610:	4605      	mov	r5, r0
 800b612:	dc6f      	bgt.n	800b6f4 <_dtoa_r+0x96c>
 800b614:	9b07      	ldr	r3, [sp, #28]
 800b616:	2b02      	cmp	r3, #2
 800b618:	dc49      	bgt.n	800b6ae <_dtoa_r+0x926>
 800b61a:	e06b      	b.n	800b6f4 <_dtoa_r+0x96c>
 800b61c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b61e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b622:	e73c      	b.n	800b49e <_dtoa_r+0x716>
 800b624:	3fe00000 	.word	0x3fe00000
 800b628:	40240000 	.word	0x40240000
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	1e5c      	subs	r4, r3, #1
 800b630:	9b08      	ldr	r3, [sp, #32]
 800b632:	42a3      	cmp	r3, r4
 800b634:	db09      	blt.n	800b64a <_dtoa_r+0x8c2>
 800b636:	1b1c      	subs	r4, r3, r4
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f6bf af30 	bge.w	800b4a0 <_dtoa_r+0x718>
 800b640:	9b00      	ldr	r3, [sp, #0]
 800b642:	9a03      	ldr	r2, [sp, #12]
 800b644:	1a9e      	subs	r6, r3, r2
 800b646:	2300      	movs	r3, #0
 800b648:	e72b      	b.n	800b4a2 <_dtoa_r+0x71a>
 800b64a:	9b08      	ldr	r3, [sp, #32]
 800b64c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b64e:	9408      	str	r4, [sp, #32]
 800b650:	1ae3      	subs	r3, r4, r3
 800b652:	441a      	add	r2, r3
 800b654:	9e00      	ldr	r6, [sp, #0]
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	920d      	str	r2, [sp, #52]	@ 0x34
 800b65a:	2400      	movs	r4, #0
 800b65c:	e721      	b.n	800b4a2 <_dtoa_r+0x71a>
 800b65e:	9c08      	ldr	r4, [sp, #32]
 800b660:	9e00      	ldr	r6, [sp, #0]
 800b662:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b664:	e728      	b.n	800b4b8 <_dtoa_r+0x730>
 800b666:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b66a:	e751      	b.n	800b510 <_dtoa_r+0x788>
 800b66c:	9a08      	ldr	r2, [sp, #32]
 800b66e:	9902      	ldr	r1, [sp, #8]
 800b670:	e750      	b.n	800b514 <_dtoa_r+0x78c>
 800b672:	f8cd 8008 	str.w	r8, [sp, #8]
 800b676:	e751      	b.n	800b51c <_dtoa_r+0x794>
 800b678:	2300      	movs	r3, #0
 800b67a:	e779      	b.n	800b570 <_dtoa_r+0x7e8>
 800b67c:	9b04      	ldr	r3, [sp, #16]
 800b67e:	e777      	b.n	800b570 <_dtoa_r+0x7e8>
 800b680:	2300      	movs	r3, #0
 800b682:	9308      	str	r3, [sp, #32]
 800b684:	e779      	b.n	800b57a <_dtoa_r+0x7f2>
 800b686:	d093      	beq.n	800b5b0 <_dtoa_r+0x828>
 800b688:	9a00      	ldr	r2, [sp, #0]
 800b68a:	331c      	adds	r3, #28
 800b68c:	441a      	add	r2, r3
 800b68e:	9200      	str	r2, [sp, #0]
 800b690:	9a06      	ldr	r2, [sp, #24]
 800b692:	441a      	add	r2, r3
 800b694:	441e      	add	r6, r3
 800b696:	9206      	str	r2, [sp, #24]
 800b698:	e78a      	b.n	800b5b0 <_dtoa_r+0x828>
 800b69a:	4603      	mov	r3, r0
 800b69c:	e7f4      	b.n	800b688 <_dtoa_r+0x900>
 800b69e:	9b03      	ldr	r3, [sp, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	46b8      	mov	r8, r7
 800b6a4:	dc20      	bgt.n	800b6e8 <_dtoa_r+0x960>
 800b6a6:	469b      	mov	fp, r3
 800b6a8:	9b07      	ldr	r3, [sp, #28]
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	dd1e      	ble.n	800b6ec <_dtoa_r+0x964>
 800b6ae:	f1bb 0f00 	cmp.w	fp, #0
 800b6b2:	f47f adb1 	bne.w	800b218 <_dtoa_r+0x490>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	465b      	mov	r3, fp
 800b6ba:	2205      	movs	r2, #5
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f000 fa95 	bl	800bbec <__multadd>
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	9802      	ldr	r0, [sp, #8]
 800b6c8:	f000 fca0 	bl	800c00c <__mcmp>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	f77f ada3 	ble.w	800b218 <_dtoa_r+0x490>
 800b6d2:	4656      	mov	r6, sl
 800b6d4:	2331      	movs	r3, #49	@ 0x31
 800b6d6:	f806 3b01 	strb.w	r3, [r6], #1
 800b6da:	f108 0801 	add.w	r8, r8, #1
 800b6de:	e59f      	b.n	800b220 <_dtoa_r+0x498>
 800b6e0:	9c03      	ldr	r4, [sp, #12]
 800b6e2:	46b8      	mov	r8, r7
 800b6e4:	4625      	mov	r5, r4
 800b6e6:	e7f4      	b.n	800b6d2 <_dtoa_r+0x94a>
 800b6e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 8101 	beq.w	800b8f6 <_dtoa_r+0xb6e>
 800b6f4:	2e00      	cmp	r6, #0
 800b6f6:	dd05      	ble.n	800b704 <_dtoa_r+0x97c>
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	4648      	mov	r0, r9
 800b6fe:	f000 fc19 	bl	800bf34 <__lshift>
 800b702:	4605      	mov	r5, r0
 800b704:	9b08      	ldr	r3, [sp, #32]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d05c      	beq.n	800b7c4 <_dtoa_r+0xa3c>
 800b70a:	6869      	ldr	r1, [r5, #4]
 800b70c:	4648      	mov	r0, r9
 800b70e:	f000 fa0b 	bl	800bb28 <_Balloc>
 800b712:	4606      	mov	r6, r0
 800b714:	b928      	cbnz	r0, 800b722 <_dtoa_r+0x99a>
 800b716:	4b82      	ldr	r3, [pc, #520]	@ (800b920 <_dtoa_r+0xb98>)
 800b718:	4602      	mov	r2, r0
 800b71a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b71e:	f7ff bb4a 	b.w	800adb6 <_dtoa_r+0x2e>
 800b722:	692a      	ldr	r2, [r5, #16]
 800b724:	3202      	adds	r2, #2
 800b726:	0092      	lsls	r2, r2, #2
 800b728:	f105 010c 	add.w	r1, r5, #12
 800b72c:	300c      	adds	r0, #12
 800b72e:	f7ff fa92 	bl	800ac56 <memcpy>
 800b732:	2201      	movs	r2, #1
 800b734:	4631      	mov	r1, r6
 800b736:	4648      	mov	r0, r9
 800b738:	f000 fbfc 	bl	800bf34 <__lshift>
 800b73c:	f10a 0301 	add.w	r3, sl, #1
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	eb0a 030b 	add.w	r3, sl, fp
 800b746:	9308      	str	r3, [sp, #32]
 800b748:	9b04      	ldr	r3, [sp, #16]
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	462f      	mov	r7, r5
 800b750:	9306      	str	r3, [sp, #24]
 800b752:	4605      	mov	r5, r0
 800b754:	9b00      	ldr	r3, [sp, #0]
 800b756:	9802      	ldr	r0, [sp, #8]
 800b758:	4621      	mov	r1, r4
 800b75a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b75e:	f7ff fa88 	bl	800ac72 <quorem>
 800b762:	4603      	mov	r3, r0
 800b764:	3330      	adds	r3, #48	@ 0x30
 800b766:	9003      	str	r0, [sp, #12]
 800b768:	4639      	mov	r1, r7
 800b76a:	9802      	ldr	r0, [sp, #8]
 800b76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b76e:	f000 fc4d 	bl	800c00c <__mcmp>
 800b772:	462a      	mov	r2, r5
 800b774:	9004      	str	r0, [sp, #16]
 800b776:	4621      	mov	r1, r4
 800b778:	4648      	mov	r0, r9
 800b77a:	f000 fc63 	bl	800c044 <__mdiff>
 800b77e:	68c2      	ldr	r2, [r0, #12]
 800b780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b782:	4606      	mov	r6, r0
 800b784:	bb02      	cbnz	r2, 800b7c8 <_dtoa_r+0xa40>
 800b786:	4601      	mov	r1, r0
 800b788:	9802      	ldr	r0, [sp, #8]
 800b78a:	f000 fc3f 	bl	800c00c <__mcmp>
 800b78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b790:	4602      	mov	r2, r0
 800b792:	4631      	mov	r1, r6
 800b794:	4648      	mov	r0, r9
 800b796:	920c      	str	r2, [sp, #48]	@ 0x30
 800b798:	9309      	str	r3, [sp, #36]	@ 0x24
 800b79a:	f000 fa05 	bl	800bba8 <_Bfree>
 800b79e:	9b07      	ldr	r3, [sp, #28]
 800b7a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7a2:	9e00      	ldr	r6, [sp, #0]
 800b7a4:	ea42 0103 	orr.w	r1, r2, r3
 800b7a8:	9b06      	ldr	r3, [sp, #24]
 800b7aa:	4319      	orrs	r1, r3
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	d10d      	bne.n	800b7cc <_dtoa_r+0xa44>
 800b7b0:	2b39      	cmp	r3, #57	@ 0x39
 800b7b2:	d027      	beq.n	800b804 <_dtoa_r+0xa7c>
 800b7b4:	9a04      	ldr	r2, [sp, #16]
 800b7b6:	2a00      	cmp	r2, #0
 800b7b8:	dd01      	ble.n	800b7be <_dtoa_r+0xa36>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	3331      	adds	r3, #49	@ 0x31
 800b7be:	f88b 3000 	strb.w	r3, [fp]
 800b7c2:	e52e      	b.n	800b222 <_dtoa_r+0x49a>
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	e7b9      	b.n	800b73c <_dtoa_r+0x9b4>
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	e7e2      	b.n	800b792 <_dtoa_r+0xa0a>
 800b7cc:	9904      	ldr	r1, [sp, #16]
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	db04      	blt.n	800b7dc <_dtoa_r+0xa54>
 800b7d2:	9807      	ldr	r0, [sp, #28]
 800b7d4:	4301      	orrs	r1, r0
 800b7d6:	9806      	ldr	r0, [sp, #24]
 800b7d8:	4301      	orrs	r1, r0
 800b7da:	d120      	bne.n	800b81e <_dtoa_r+0xa96>
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	ddee      	ble.n	800b7be <_dtoa_r+0xa36>
 800b7e0:	9902      	ldr	r1, [sp, #8]
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	4648      	mov	r0, r9
 800b7e8:	f000 fba4 	bl	800bf34 <__lshift>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	9002      	str	r0, [sp, #8]
 800b7f0:	f000 fc0c 	bl	800c00c <__mcmp>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	dc02      	bgt.n	800b800 <_dtoa_r+0xa78>
 800b7fa:	d1e0      	bne.n	800b7be <_dtoa_r+0xa36>
 800b7fc:	07da      	lsls	r2, r3, #31
 800b7fe:	d5de      	bpl.n	800b7be <_dtoa_r+0xa36>
 800b800:	2b39      	cmp	r3, #57	@ 0x39
 800b802:	d1da      	bne.n	800b7ba <_dtoa_r+0xa32>
 800b804:	2339      	movs	r3, #57	@ 0x39
 800b806:	f88b 3000 	strb.w	r3, [fp]
 800b80a:	4633      	mov	r3, r6
 800b80c:	461e      	mov	r6, r3
 800b80e:	3b01      	subs	r3, #1
 800b810:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b814:	2a39      	cmp	r2, #57	@ 0x39
 800b816:	d04e      	beq.n	800b8b6 <_dtoa_r+0xb2e>
 800b818:	3201      	adds	r2, #1
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	e501      	b.n	800b222 <_dtoa_r+0x49a>
 800b81e:	2a00      	cmp	r2, #0
 800b820:	dd03      	ble.n	800b82a <_dtoa_r+0xaa2>
 800b822:	2b39      	cmp	r3, #57	@ 0x39
 800b824:	d0ee      	beq.n	800b804 <_dtoa_r+0xa7c>
 800b826:	3301      	adds	r3, #1
 800b828:	e7c9      	b.n	800b7be <_dtoa_r+0xa36>
 800b82a:	9a00      	ldr	r2, [sp, #0]
 800b82c:	9908      	ldr	r1, [sp, #32]
 800b82e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b832:	428a      	cmp	r2, r1
 800b834:	d028      	beq.n	800b888 <_dtoa_r+0xb00>
 800b836:	9902      	ldr	r1, [sp, #8]
 800b838:	2300      	movs	r3, #0
 800b83a:	220a      	movs	r2, #10
 800b83c:	4648      	mov	r0, r9
 800b83e:	f000 f9d5 	bl	800bbec <__multadd>
 800b842:	42af      	cmp	r7, r5
 800b844:	9002      	str	r0, [sp, #8]
 800b846:	f04f 0300 	mov.w	r3, #0
 800b84a:	f04f 020a 	mov.w	r2, #10
 800b84e:	4639      	mov	r1, r7
 800b850:	4648      	mov	r0, r9
 800b852:	d107      	bne.n	800b864 <_dtoa_r+0xadc>
 800b854:	f000 f9ca 	bl	800bbec <__multadd>
 800b858:	4607      	mov	r7, r0
 800b85a:	4605      	mov	r5, r0
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	3301      	adds	r3, #1
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	e777      	b.n	800b754 <_dtoa_r+0x9cc>
 800b864:	f000 f9c2 	bl	800bbec <__multadd>
 800b868:	4629      	mov	r1, r5
 800b86a:	4607      	mov	r7, r0
 800b86c:	2300      	movs	r3, #0
 800b86e:	220a      	movs	r2, #10
 800b870:	4648      	mov	r0, r9
 800b872:	f000 f9bb 	bl	800bbec <__multadd>
 800b876:	4605      	mov	r5, r0
 800b878:	e7f0      	b.n	800b85c <_dtoa_r+0xad4>
 800b87a:	f1bb 0f00 	cmp.w	fp, #0
 800b87e:	bfcc      	ite	gt
 800b880:	465e      	movgt	r6, fp
 800b882:	2601      	movle	r6, #1
 800b884:	4456      	add	r6, sl
 800b886:	2700      	movs	r7, #0
 800b888:	9902      	ldr	r1, [sp, #8]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	2201      	movs	r2, #1
 800b88e:	4648      	mov	r0, r9
 800b890:	f000 fb50 	bl	800bf34 <__lshift>
 800b894:	4621      	mov	r1, r4
 800b896:	9002      	str	r0, [sp, #8]
 800b898:	f000 fbb8 	bl	800c00c <__mcmp>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	dcb4      	bgt.n	800b80a <_dtoa_r+0xa82>
 800b8a0:	d102      	bne.n	800b8a8 <_dtoa_r+0xb20>
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	07db      	lsls	r3, r3, #31
 800b8a6:	d4b0      	bmi.n	800b80a <_dtoa_r+0xa82>
 800b8a8:	4633      	mov	r3, r6
 800b8aa:	461e      	mov	r6, r3
 800b8ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8b0:	2a30      	cmp	r2, #48	@ 0x30
 800b8b2:	d0fa      	beq.n	800b8aa <_dtoa_r+0xb22>
 800b8b4:	e4b5      	b.n	800b222 <_dtoa_r+0x49a>
 800b8b6:	459a      	cmp	sl, r3
 800b8b8:	d1a8      	bne.n	800b80c <_dtoa_r+0xa84>
 800b8ba:	2331      	movs	r3, #49	@ 0x31
 800b8bc:	f108 0801 	add.w	r8, r8, #1
 800b8c0:	f88a 3000 	strb.w	r3, [sl]
 800b8c4:	e4ad      	b.n	800b222 <_dtoa_r+0x49a>
 800b8c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b924 <_dtoa_r+0xb9c>
 800b8cc:	b11b      	cbz	r3, 800b8d6 <_dtoa_r+0xb4e>
 800b8ce:	f10a 0308 	add.w	r3, sl, #8
 800b8d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	b017      	add	sp, #92	@ 0x5c
 800b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8de:	9b07      	ldr	r3, [sp, #28]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	f77f ae2e 	ble.w	800b542 <_dtoa_r+0x7ba>
 800b8e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8e8:	9308      	str	r3, [sp, #32]
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	e64d      	b.n	800b58a <_dtoa_r+0x802>
 800b8ee:	f1bb 0f00 	cmp.w	fp, #0
 800b8f2:	f77f aed9 	ble.w	800b6a8 <_dtoa_r+0x920>
 800b8f6:	4656      	mov	r6, sl
 800b8f8:	9802      	ldr	r0, [sp, #8]
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	f7ff f9b9 	bl	800ac72 <quorem>
 800b900:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b904:	f806 3b01 	strb.w	r3, [r6], #1
 800b908:	eba6 020a 	sub.w	r2, r6, sl
 800b90c:	4593      	cmp	fp, r2
 800b90e:	ddb4      	ble.n	800b87a <_dtoa_r+0xaf2>
 800b910:	9902      	ldr	r1, [sp, #8]
 800b912:	2300      	movs	r3, #0
 800b914:	220a      	movs	r2, #10
 800b916:	4648      	mov	r0, r9
 800b918:	f000 f968 	bl	800bbec <__multadd>
 800b91c:	9002      	str	r0, [sp, #8]
 800b91e:	e7eb      	b.n	800b8f8 <_dtoa_r+0xb70>
 800b920:	08020dc8 	.word	0x08020dc8
 800b924:	08020d4c 	.word	0x08020d4c

0800b928 <_free_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4605      	mov	r5, r0
 800b92c:	2900      	cmp	r1, #0
 800b92e:	d041      	beq.n	800b9b4 <_free_r+0x8c>
 800b930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b934:	1f0c      	subs	r4, r1, #4
 800b936:	2b00      	cmp	r3, #0
 800b938:	bfb8      	it	lt
 800b93a:	18e4      	addlt	r4, r4, r3
 800b93c:	f000 f8e8 	bl	800bb10 <__malloc_lock>
 800b940:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b8 <_free_r+0x90>)
 800b942:	6813      	ldr	r3, [r2, #0]
 800b944:	b933      	cbnz	r3, 800b954 <_free_r+0x2c>
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	6014      	str	r4, [r2, #0]
 800b94a:	4628      	mov	r0, r5
 800b94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b950:	f000 b8e4 	b.w	800bb1c <__malloc_unlock>
 800b954:	42a3      	cmp	r3, r4
 800b956:	d908      	bls.n	800b96a <_free_r+0x42>
 800b958:	6820      	ldr	r0, [r4, #0]
 800b95a:	1821      	adds	r1, r4, r0
 800b95c:	428b      	cmp	r3, r1
 800b95e:	bf01      	itttt	eq
 800b960:	6819      	ldreq	r1, [r3, #0]
 800b962:	685b      	ldreq	r3, [r3, #4]
 800b964:	1809      	addeq	r1, r1, r0
 800b966:	6021      	streq	r1, [r4, #0]
 800b968:	e7ed      	b.n	800b946 <_free_r+0x1e>
 800b96a:	461a      	mov	r2, r3
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	b10b      	cbz	r3, 800b974 <_free_r+0x4c>
 800b970:	42a3      	cmp	r3, r4
 800b972:	d9fa      	bls.n	800b96a <_free_r+0x42>
 800b974:	6811      	ldr	r1, [r2, #0]
 800b976:	1850      	adds	r0, r2, r1
 800b978:	42a0      	cmp	r0, r4
 800b97a:	d10b      	bne.n	800b994 <_free_r+0x6c>
 800b97c:	6820      	ldr	r0, [r4, #0]
 800b97e:	4401      	add	r1, r0
 800b980:	1850      	adds	r0, r2, r1
 800b982:	4283      	cmp	r3, r0
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	d1e0      	bne.n	800b94a <_free_r+0x22>
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	6053      	str	r3, [r2, #4]
 800b98e:	4408      	add	r0, r1
 800b990:	6010      	str	r0, [r2, #0]
 800b992:	e7da      	b.n	800b94a <_free_r+0x22>
 800b994:	d902      	bls.n	800b99c <_free_r+0x74>
 800b996:	230c      	movs	r3, #12
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	e7d6      	b.n	800b94a <_free_r+0x22>
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	1821      	adds	r1, r4, r0
 800b9a0:	428b      	cmp	r3, r1
 800b9a2:	bf04      	itt	eq
 800b9a4:	6819      	ldreq	r1, [r3, #0]
 800b9a6:	685b      	ldreq	r3, [r3, #4]
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	bf04      	itt	eq
 800b9ac:	1809      	addeq	r1, r1, r0
 800b9ae:	6021      	streq	r1, [r4, #0]
 800b9b0:	6054      	str	r4, [r2, #4]
 800b9b2:	e7ca      	b.n	800b94a <_free_r+0x22>
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20003e54 	.word	0x20003e54

0800b9bc <malloc>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	@ (800b9c8 <malloc+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f000 b825 	b.w	800ba10 <_malloc_r>
 800b9c6:	bf00      	nop
 800b9c8:	2000041c 	.word	0x2000041c

0800b9cc <sbrk_aligned>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	4e0f      	ldr	r6, [pc, #60]	@ (800ba0c <sbrk_aligned+0x40>)
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	6831      	ldr	r1, [r6, #0]
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	b911      	cbnz	r1, 800b9de <sbrk_aligned+0x12>
 800b9d8:	f000 fe3e 	bl	800c658 <_sbrk_r>
 800b9dc:	6030      	str	r0, [r6, #0]
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f000 fe39 	bl	800c658 <_sbrk_r>
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	d103      	bne.n	800b9f2 <sbrk_aligned+0x26>
 800b9ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	1cc4      	adds	r4, r0, #3
 800b9f4:	f024 0403 	bic.w	r4, r4, #3
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d0f8      	beq.n	800b9ee <sbrk_aligned+0x22>
 800b9fc:	1a21      	subs	r1, r4, r0
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f000 fe2a 	bl	800c658 <_sbrk_r>
 800ba04:	3001      	adds	r0, #1
 800ba06:	d1f2      	bne.n	800b9ee <sbrk_aligned+0x22>
 800ba08:	e7ef      	b.n	800b9ea <sbrk_aligned+0x1e>
 800ba0a:	bf00      	nop
 800ba0c:	20003e50 	.word	0x20003e50

0800ba10 <_malloc_r>:
 800ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba14:	1ccd      	adds	r5, r1, #3
 800ba16:	f025 0503 	bic.w	r5, r5, #3
 800ba1a:	3508      	adds	r5, #8
 800ba1c:	2d0c      	cmp	r5, #12
 800ba1e:	bf38      	it	cc
 800ba20:	250c      	movcc	r5, #12
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	4606      	mov	r6, r0
 800ba26:	db01      	blt.n	800ba2c <_malloc_r+0x1c>
 800ba28:	42a9      	cmp	r1, r5
 800ba2a:	d904      	bls.n	800ba36 <_malloc_r+0x26>
 800ba2c:	230c      	movs	r3, #12
 800ba2e:	6033      	str	r3, [r6, #0]
 800ba30:	2000      	movs	r0, #0
 800ba32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb0c <_malloc_r+0xfc>
 800ba3a:	f000 f869 	bl	800bb10 <__malloc_lock>
 800ba3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba42:	461c      	mov	r4, r3
 800ba44:	bb44      	cbnz	r4, 800ba98 <_malloc_r+0x88>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff ffbf 	bl	800b9cc <sbrk_aligned>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	4604      	mov	r4, r0
 800ba52:	d158      	bne.n	800bb06 <_malloc_r+0xf6>
 800ba54:	f8d8 4000 	ldr.w	r4, [r8]
 800ba58:	4627      	mov	r7, r4
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	d143      	bne.n	800bae6 <_malloc_r+0xd6>
 800ba5e:	2c00      	cmp	r4, #0
 800ba60:	d04b      	beq.n	800bafa <_malloc_r+0xea>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	4639      	mov	r1, r7
 800ba66:	4630      	mov	r0, r6
 800ba68:	eb04 0903 	add.w	r9, r4, r3
 800ba6c:	f000 fdf4 	bl	800c658 <_sbrk_r>
 800ba70:	4581      	cmp	r9, r0
 800ba72:	d142      	bne.n	800bafa <_malloc_r+0xea>
 800ba74:	6821      	ldr	r1, [r4, #0]
 800ba76:	1a6d      	subs	r5, r5, r1
 800ba78:	4629      	mov	r1, r5
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f7ff ffa6 	bl	800b9cc <sbrk_aligned>
 800ba80:	3001      	adds	r0, #1
 800ba82:	d03a      	beq.n	800bafa <_malloc_r+0xea>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	442b      	add	r3, r5
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	bb62      	cbnz	r2, 800baec <_malloc_r+0xdc>
 800ba92:	f8c8 7000 	str.w	r7, [r8]
 800ba96:	e00f      	b.n	800bab8 <_malloc_r+0xa8>
 800ba98:	6822      	ldr	r2, [r4, #0]
 800ba9a:	1b52      	subs	r2, r2, r5
 800ba9c:	d420      	bmi.n	800bae0 <_malloc_r+0xd0>
 800ba9e:	2a0b      	cmp	r2, #11
 800baa0:	d917      	bls.n	800bad2 <_malloc_r+0xc2>
 800baa2:	1961      	adds	r1, r4, r5
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	6025      	str	r5, [r4, #0]
 800baa8:	bf18      	it	ne
 800baaa:	6059      	strne	r1, [r3, #4]
 800baac:	6863      	ldr	r3, [r4, #4]
 800baae:	bf08      	it	eq
 800bab0:	f8c8 1000 	streq.w	r1, [r8]
 800bab4:	5162      	str	r2, [r4, r5]
 800bab6:	604b      	str	r3, [r1, #4]
 800bab8:	4630      	mov	r0, r6
 800baba:	f000 f82f 	bl	800bb1c <__malloc_unlock>
 800babe:	f104 000b 	add.w	r0, r4, #11
 800bac2:	1d23      	adds	r3, r4, #4
 800bac4:	f020 0007 	bic.w	r0, r0, #7
 800bac8:	1ac2      	subs	r2, r0, r3
 800baca:	bf1c      	itt	ne
 800bacc:	1a1b      	subne	r3, r3, r0
 800bace:	50a3      	strne	r3, [r4, r2]
 800bad0:	e7af      	b.n	800ba32 <_malloc_r+0x22>
 800bad2:	6862      	ldr	r2, [r4, #4]
 800bad4:	42a3      	cmp	r3, r4
 800bad6:	bf0c      	ite	eq
 800bad8:	f8c8 2000 	streq.w	r2, [r8]
 800badc:	605a      	strne	r2, [r3, #4]
 800bade:	e7eb      	b.n	800bab8 <_malloc_r+0xa8>
 800bae0:	4623      	mov	r3, r4
 800bae2:	6864      	ldr	r4, [r4, #4]
 800bae4:	e7ae      	b.n	800ba44 <_malloc_r+0x34>
 800bae6:	463c      	mov	r4, r7
 800bae8:	687f      	ldr	r7, [r7, #4]
 800baea:	e7b6      	b.n	800ba5a <_malloc_r+0x4a>
 800baec:	461a      	mov	r2, r3
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	d1fb      	bne.n	800baec <_malloc_r+0xdc>
 800baf4:	2300      	movs	r3, #0
 800baf6:	6053      	str	r3, [r2, #4]
 800baf8:	e7de      	b.n	800bab8 <_malloc_r+0xa8>
 800bafa:	230c      	movs	r3, #12
 800bafc:	6033      	str	r3, [r6, #0]
 800bafe:	4630      	mov	r0, r6
 800bb00:	f000 f80c 	bl	800bb1c <__malloc_unlock>
 800bb04:	e794      	b.n	800ba30 <_malloc_r+0x20>
 800bb06:	6005      	str	r5, [r0, #0]
 800bb08:	e7d6      	b.n	800bab8 <_malloc_r+0xa8>
 800bb0a:	bf00      	nop
 800bb0c:	20003e54 	.word	0x20003e54

0800bb10 <__malloc_lock>:
 800bb10:	4801      	ldr	r0, [pc, #4]	@ (800bb18 <__malloc_lock+0x8>)
 800bb12:	f7ff b89e 	b.w	800ac52 <__retarget_lock_acquire_recursive>
 800bb16:	bf00      	nop
 800bb18:	20003e4c 	.word	0x20003e4c

0800bb1c <__malloc_unlock>:
 800bb1c:	4801      	ldr	r0, [pc, #4]	@ (800bb24 <__malloc_unlock+0x8>)
 800bb1e:	f7ff b899 	b.w	800ac54 <__retarget_lock_release_recursive>
 800bb22:	bf00      	nop
 800bb24:	20003e4c 	.word	0x20003e4c

0800bb28 <_Balloc>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	69c6      	ldr	r6, [r0, #28]
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	460d      	mov	r5, r1
 800bb30:	b976      	cbnz	r6, 800bb50 <_Balloc+0x28>
 800bb32:	2010      	movs	r0, #16
 800bb34:	f7ff ff42 	bl	800b9bc <malloc>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	61e0      	str	r0, [r4, #28]
 800bb3c:	b920      	cbnz	r0, 800bb48 <_Balloc+0x20>
 800bb3e:	4b18      	ldr	r3, [pc, #96]	@ (800bba0 <_Balloc+0x78>)
 800bb40:	4818      	ldr	r0, [pc, #96]	@ (800bba4 <_Balloc+0x7c>)
 800bb42:	216b      	movs	r1, #107	@ 0x6b
 800bb44:	f000 fd98 	bl	800c678 <__assert_func>
 800bb48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb4c:	6006      	str	r6, [r0, #0]
 800bb4e:	60c6      	str	r6, [r0, #12]
 800bb50:	69e6      	ldr	r6, [r4, #28]
 800bb52:	68f3      	ldr	r3, [r6, #12]
 800bb54:	b183      	cbz	r3, 800bb78 <_Balloc+0x50>
 800bb56:	69e3      	ldr	r3, [r4, #28]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb5e:	b9b8      	cbnz	r0, 800bb90 <_Balloc+0x68>
 800bb60:	2101      	movs	r1, #1
 800bb62:	fa01 f605 	lsl.w	r6, r1, r5
 800bb66:	1d72      	adds	r2, r6, #5
 800bb68:	0092      	lsls	r2, r2, #2
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f000 fda2 	bl	800c6b4 <_calloc_r>
 800bb70:	b160      	cbz	r0, 800bb8c <_Balloc+0x64>
 800bb72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb76:	e00e      	b.n	800bb96 <_Balloc+0x6e>
 800bb78:	2221      	movs	r2, #33	@ 0x21
 800bb7a:	2104      	movs	r1, #4
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fd99 	bl	800c6b4 <_calloc_r>
 800bb82:	69e3      	ldr	r3, [r4, #28]
 800bb84:	60f0      	str	r0, [r6, #12]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e4      	bne.n	800bb56 <_Balloc+0x2e>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	6802      	ldr	r2, [r0, #0]
 800bb92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb96:	2300      	movs	r3, #0
 800bb98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb9c:	e7f7      	b.n	800bb8e <_Balloc+0x66>
 800bb9e:	bf00      	nop
 800bba0:	08020d59 	.word	0x08020d59
 800bba4:	08020dd9 	.word	0x08020dd9

0800bba8 <_Bfree>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	69c6      	ldr	r6, [r0, #28]
 800bbac:	4605      	mov	r5, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	b976      	cbnz	r6, 800bbd0 <_Bfree+0x28>
 800bbb2:	2010      	movs	r0, #16
 800bbb4:	f7ff ff02 	bl	800b9bc <malloc>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	61e8      	str	r0, [r5, #28]
 800bbbc:	b920      	cbnz	r0, 800bbc8 <_Bfree+0x20>
 800bbbe:	4b09      	ldr	r3, [pc, #36]	@ (800bbe4 <_Bfree+0x3c>)
 800bbc0:	4809      	ldr	r0, [pc, #36]	@ (800bbe8 <_Bfree+0x40>)
 800bbc2:	218f      	movs	r1, #143	@ 0x8f
 800bbc4:	f000 fd58 	bl	800c678 <__assert_func>
 800bbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbcc:	6006      	str	r6, [r0, #0]
 800bbce:	60c6      	str	r6, [r0, #12]
 800bbd0:	b13c      	cbz	r4, 800bbe2 <_Bfree+0x3a>
 800bbd2:	69eb      	ldr	r3, [r5, #28]
 800bbd4:	6862      	ldr	r2, [r4, #4]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbdc:	6021      	str	r1, [r4, #0]
 800bbde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}
 800bbe4:	08020d59 	.word	0x08020d59
 800bbe8:	08020dd9 	.word	0x08020dd9

0800bbec <__multadd>:
 800bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	690d      	ldr	r5, [r1, #16]
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	461e      	mov	r6, r3
 800bbf8:	f101 0c14 	add.w	ip, r1, #20
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f8dc 3000 	ldr.w	r3, [ip]
 800bc02:	b299      	uxth	r1, r3
 800bc04:	fb02 6101 	mla	r1, r2, r1, r6
 800bc08:	0c1e      	lsrs	r6, r3, #16
 800bc0a:	0c0b      	lsrs	r3, r1, #16
 800bc0c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc10:	b289      	uxth	r1, r1
 800bc12:	3001      	adds	r0, #1
 800bc14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc18:	4285      	cmp	r5, r0
 800bc1a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc22:	dcec      	bgt.n	800bbfe <__multadd+0x12>
 800bc24:	b30e      	cbz	r6, 800bc6a <__multadd+0x7e>
 800bc26:	68a3      	ldr	r3, [r4, #8]
 800bc28:	42ab      	cmp	r3, r5
 800bc2a:	dc19      	bgt.n	800bc60 <__multadd+0x74>
 800bc2c:	6861      	ldr	r1, [r4, #4]
 800bc2e:	4638      	mov	r0, r7
 800bc30:	3101      	adds	r1, #1
 800bc32:	f7ff ff79 	bl	800bb28 <_Balloc>
 800bc36:	4680      	mov	r8, r0
 800bc38:	b928      	cbnz	r0, 800bc46 <__multadd+0x5a>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc70 <__multadd+0x84>)
 800bc3e:	480d      	ldr	r0, [pc, #52]	@ (800bc74 <__multadd+0x88>)
 800bc40:	21ba      	movs	r1, #186	@ 0xba
 800bc42:	f000 fd19 	bl	800c678 <__assert_func>
 800bc46:	6922      	ldr	r2, [r4, #16]
 800bc48:	3202      	adds	r2, #2
 800bc4a:	f104 010c 	add.w	r1, r4, #12
 800bc4e:	0092      	lsls	r2, r2, #2
 800bc50:	300c      	adds	r0, #12
 800bc52:	f7ff f800 	bl	800ac56 <memcpy>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ffa5 	bl	800bba8 <_Bfree>
 800bc5e:	4644      	mov	r4, r8
 800bc60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc64:	3501      	adds	r5, #1
 800bc66:	615e      	str	r6, [r3, #20]
 800bc68:	6125      	str	r5, [r4, #16]
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc70:	08020dc8 	.word	0x08020dc8
 800bc74:	08020dd9 	.word	0x08020dd9

0800bc78 <__hi0bits>:
 800bc78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	bf36      	itet	cc
 800bc80:	0403      	lslcc	r3, r0, #16
 800bc82:	2000      	movcs	r0, #0
 800bc84:	2010      	movcc	r0, #16
 800bc86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc8a:	bf3c      	itt	cc
 800bc8c:	021b      	lslcc	r3, r3, #8
 800bc8e:	3008      	addcc	r0, #8
 800bc90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc94:	bf3c      	itt	cc
 800bc96:	011b      	lslcc	r3, r3, #4
 800bc98:	3004      	addcc	r0, #4
 800bc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc9e:	bf3c      	itt	cc
 800bca0:	009b      	lslcc	r3, r3, #2
 800bca2:	3002      	addcc	r0, #2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	db05      	blt.n	800bcb4 <__hi0bits+0x3c>
 800bca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bcac:	f100 0001 	add.w	r0, r0, #1
 800bcb0:	bf08      	it	eq
 800bcb2:	2020      	moveq	r0, #32
 800bcb4:	4770      	bx	lr

0800bcb6 <__lo0bits>:
 800bcb6:	6803      	ldr	r3, [r0, #0]
 800bcb8:	4602      	mov	r2, r0
 800bcba:	f013 0007 	ands.w	r0, r3, #7
 800bcbe:	d00b      	beq.n	800bcd8 <__lo0bits+0x22>
 800bcc0:	07d9      	lsls	r1, r3, #31
 800bcc2:	d421      	bmi.n	800bd08 <__lo0bits+0x52>
 800bcc4:	0798      	lsls	r0, r3, #30
 800bcc6:	bf49      	itett	mi
 800bcc8:	085b      	lsrmi	r3, r3, #1
 800bcca:	089b      	lsrpl	r3, r3, #2
 800bccc:	2001      	movmi	r0, #1
 800bcce:	6013      	strmi	r3, [r2, #0]
 800bcd0:	bf5c      	itt	pl
 800bcd2:	6013      	strpl	r3, [r2, #0]
 800bcd4:	2002      	movpl	r0, #2
 800bcd6:	4770      	bx	lr
 800bcd8:	b299      	uxth	r1, r3
 800bcda:	b909      	cbnz	r1, 800bce0 <__lo0bits+0x2a>
 800bcdc:	0c1b      	lsrs	r3, r3, #16
 800bcde:	2010      	movs	r0, #16
 800bce0:	b2d9      	uxtb	r1, r3
 800bce2:	b909      	cbnz	r1, 800bce8 <__lo0bits+0x32>
 800bce4:	3008      	adds	r0, #8
 800bce6:	0a1b      	lsrs	r3, r3, #8
 800bce8:	0719      	lsls	r1, r3, #28
 800bcea:	bf04      	itt	eq
 800bcec:	091b      	lsreq	r3, r3, #4
 800bcee:	3004      	addeq	r0, #4
 800bcf0:	0799      	lsls	r1, r3, #30
 800bcf2:	bf04      	itt	eq
 800bcf4:	089b      	lsreq	r3, r3, #2
 800bcf6:	3002      	addeq	r0, #2
 800bcf8:	07d9      	lsls	r1, r3, #31
 800bcfa:	d403      	bmi.n	800bd04 <__lo0bits+0x4e>
 800bcfc:	085b      	lsrs	r3, r3, #1
 800bcfe:	f100 0001 	add.w	r0, r0, #1
 800bd02:	d003      	beq.n	800bd0c <__lo0bits+0x56>
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	4770      	bx	lr
 800bd08:	2000      	movs	r0, #0
 800bd0a:	4770      	bx	lr
 800bd0c:	2020      	movs	r0, #32
 800bd0e:	4770      	bx	lr

0800bd10 <__i2b>:
 800bd10:	b510      	push	{r4, lr}
 800bd12:	460c      	mov	r4, r1
 800bd14:	2101      	movs	r1, #1
 800bd16:	f7ff ff07 	bl	800bb28 <_Balloc>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	b928      	cbnz	r0, 800bd2a <__i2b+0x1a>
 800bd1e:	4b05      	ldr	r3, [pc, #20]	@ (800bd34 <__i2b+0x24>)
 800bd20:	4805      	ldr	r0, [pc, #20]	@ (800bd38 <__i2b+0x28>)
 800bd22:	f240 1145 	movw	r1, #325	@ 0x145
 800bd26:	f000 fca7 	bl	800c678 <__assert_func>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	6144      	str	r4, [r0, #20]
 800bd2e:	6103      	str	r3, [r0, #16]
 800bd30:	bd10      	pop	{r4, pc}
 800bd32:	bf00      	nop
 800bd34:	08020dc8 	.word	0x08020dc8
 800bd38:	08020dd9 	.word	0x08020dd9

0800bd3c <__multiply>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	4617      	mov	r7, r2
 800bd42:	690a      	ldr	r2, [r1, #16]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	bfa8      	it	ge
 800bd4a:	463b      	movge	r3, r7
 800bd4c:	4689      	mov	r9, r1
 800bd4e:	bfa4      	itt	ge
 800bd50:	460f      	movge	r7, r1
 800bd52:	4699      	movge	r9, r3
 800bd54:	693d      	ldr	r5, [r7, #16]
 800bd56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	eb05 060a 	add.w	r6, r5, sl
 800bd62:	42b3      	cmp	r3, r6
 800bd64:	b085      	sub	sp, #20
 800bd66:	bfb8      	it	lt
 800bd68:	3101      	addlt	r1, #1
 800bd6a:	f7ff fedd 	bl	800bb28 <_Balloc>
 800bd6e:	b930      	cbnz	r0, 800bd7e <__multiply+0x42>
 800bd70:	4602      	mov	r2, r0
 800bd72:	4b41      	ldr	r3, [pc, #260]	@ (800be78 <__multiply+0x13c>)
 800bd74:	4841      	ldr	r0, [pc, #260]	@ (800be7c <__multiply+0x140>)
 800bd76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd7a:	f000 fc7d 	bl	800c678 <__assert_func>
 800bd7e:	f100 0414 	add.w	r4, r0, #20
 800bd82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bd86:	4623      	mov	r3, r4
 800bd88:	2200      	movs	r2, #0
 800bd8a:	4573      	cmp	r3, lr
 800bd8c:	d320      	bcc.n	800bdd0 <__multiply+0x94>
 800bd8e:	f107 0814 	add.w	r8, r7, #20
 800bd92:	f109 0114 	add.w	r1, r9, #20
 800bd96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bd9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bd9e:	9302      	str	r3, [sp, #8]
 800bda0:	1beb      	subs	r3, r5, r7
 800bda2:	3b15      	subs	r3, #21
 800bda4:	f023 0303 	bic.w	r3, r3, #3
 800bda8:	3304      	adds	r3, #4
 800bdaa:	3715      	adds	r7, #21
 800bdac:	42bd      	cmp	r5, r7
 800bdae:	bf38      	it	cc
 800bdb0:	2304      	movcc	r3, #4
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	9b02      	ldr	r3, [sp, #8]
 800bdb6:	9103      	str	r1, [sp, #12]
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	d80c      	bhi.n	800bdd6 <__multiply+0x9a>
 800bdbc:	2e00      	cmp	r6, #0
 800bdbe:	dd03      	ble.n	800bdc8 <__multiply+0x8c>
 800bdc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d055      	beq.n	800be74 <__multiply+0x138>
 800bdc8:	6106      	str	r6, [r0, #16]
 800bdca:	b005      	add	sp, #20
 800bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd0:	f843 2b04 	str.w	r2, [r3], #4
 800bdd4:	e7d9      	b.n	800bd8a <__multiply+0x4e>
 800bdd6:	f8b1 a000 	ldrh.w	sl, [r1]
 800bdda:	f1ba 0f00 	cmp.w	sl, #0
 800bdde:	d01f      	beq.n	800be20 <__multiply+0xe4>
 800bde0:	46c4      	mov	ip, r8
 800bde2:	46a1      	mov	r9, r4
 800bde4:	2700      	movs	r7, #0
 800bde6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdea:	f8d9 3000 	ldr.w	r3, [r9]
 800bdee:	fa1f fb82 	uxth.w	fp, r2
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bdf8:	443b      	add	r3, r7
 800bdfa:	f8d9 7000 	ldr.w	r7, [r9]
 800bdfe:	0c12      	lsrs	r2, r2, #16
 800be00:	0c3f      	lsrs	r7, r7, #16
 800be02:	fb0a 7202 	mla	r2, sl, r2, r7
 800be06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be10:	4565      	cmp	r5, ip
 800be12:	f849 3b04 	str.w	r3, [r9], #4
 800be16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800be1a:	d8e4      	bhi.n	800bde6 <__multiply+0xaa>
 800be1c:	9b01      	ldr	r3, [sp, #4]
 800be1e:	50e7      	str	r7, [r4, r3]
 800be20:	9b03      	ldr	r3, [sp, #12]
 800be22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800be26:	3104      	adds	r1, #4
 800be28:	f1b9 0f00 	cmp.w	r9, #0
 800be2c:	d020      	beq.n	800be70 <__multiply+0x134>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	4647      	mov	r7, r8
 800be32:	46a4      	mov	ip, r4
 800be34:	f04f 0a00 	mov.w	sl, #0
 800be38:	f8b7 b000 	ldrh.w	fp, [r7]
 800be3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800be40:	fb09 220b 	mla	r2, r9, fp, r2
 800be44:	4452      	add	r2, sl
 800be46:	b29b      	uxth	r3, r3
 800be48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be4c:	f84c 3b04 	str.w	r3, [ip], #4
 800be50:	f857 3b04 	ldr.w	r3, [r7], #4
 800be54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be58:	f8bc 3000 	ldrh.w	r3, [ip]
 800be5c:	fb09 330a 	mla	r3, r9, sl, r3
 800be60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800be64:	42bd      	cmp	r5, r7
 800be66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be6a:	d8e5      	bhi.n	800be38 <__multiply+0xfc>
 800be6c:	9a01      	ldr	r2, [sp, #4]
 800be6e:	50a3      	str	r3, [r4, r2]
 800be70:	3404      	adds	r4, #4
 800be72:	e79f      	b.n	800bdb4 <__multiply+0x78>
 800be74:	3e01      	subs	r6, #1
 800be76:	e7a1      	b.n	800bdbc <__multiply+0x80>
 800be78:	08020dc8 	.word	0x08020dc8
 800be7c:	08020dd9 	.word	0x08020dd9

0800be80 <__pow5mult>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	4615      	mov	r5, r2
 800be86:	f012 0203 	ands.w	r2, r2, #3
 800be8a:	4607      	mov	r7, r0
 800be8c:	460e      	mov	r6, r1
 800be8e:	d007      	beq.n	800bea0 <__pow5mult+0x20>
 800be90:	4c25      	ldr	r4, [pc, #148]	@ (800bf28 <__pow5mult+0xa8>)
 800be92:	3a01      	subs	r2, #1
 800be94:	2300      	movs	r3, #0
 800be96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be9a:	f7ff fea7 	bl	800bbec <__multadd>
 800be9e:	4606      	mov	r6, r0
 800bea0:	10ad      	asrs	r5, r5, #2
 800bea2:	d03d      	beq.n	800bf20 <__pow5mult+0xa0>
 800bea4:	69fc      	ldr	r4, [r7, #28]
 800bea6:	b97c      	cbnz	r4, 800bec8 <__pow5mult+0x48>
 800bea8:	2010      	movs	r0, #16
 800beaa:	f7ff fd87 	bl	800b9bc <malloc>
 800beae:	4602      	mov	r2, r0
 800beb0:	61f8      	str	r0, [r7, #28]
 800beb2:	b928      	cbnz	r0, 800bec0 <__pow5mult+0x40>
 800beb4:	4b1d      	ldr	r3, [pc, #116]	@ (800bf2c <__pow5mult+0xac>)
 800beb6:	481e      	ldr	r0, [pc, #120]	@ (800bf30 <__pow5mult+0xb0>)
 800beb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bebc:	f000 fbdc 	bl	800c678 <__assert_func>
 800bec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bec4:	6004      	str	r4, [r0, #0]
 800bec6:	60c4      	str	r4, [r0, #12]
 800bec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800becc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bed0:	b94c      	cbnz	r4, 800bee6 <__pow5mult+0x66>
 800bed2:	f240 2171 	movw	r1, #625	@ 0x271
 800bed6:	4638      	mov	r0, r7
 800bed8:	f7ff ff1a 	bl	800bd10 <__i2b>
 800bedc:	2300      	movs	r3, #0
 800bede:	f8c8 0008 	str.w	r0, [r8, #8]
 800bee2:	4604      	mov	r4, r0
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	f04f 0900 	mov.w	r9, #0
 800beea:	07eb      	lsls	r3, r5, #31
 800beec:	d50a      	bpl.n	800bf04 <__pow5mult+0x84>
 800beee:	4631      	mov	r1, r6
 800bef0:	4622      	mov	r2, r4
 800bef2:	4638      	mov	r0, r7
 800bef4:	f7ff ff22 	bl	800bd3c <__multiply>
 800bef8:	4631      	mov	r1, r6
 800befa:	4680      	mov	r8, r0
 800befc:	4638      	mov	r0, r7
 800befe:	f7ff fe53 	bl	800bba8 <_Bfree>
 800bf02:	4646      	mov	r6, r8
 800bf04:	106d      	asrs	r5, r5, #1
 800bf06:	d00b      	beq.n	800bf20 <__pow5mult+0xa0>
 800bf08:	6820      	ldr	r0, [r4, #0]
 800bf0a:	b938      	cbnz	r0, 800bf1c <__pow5mult+0x9c>
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4621      	mov	r1, r4
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff ff13 	bl	800bd3c <__multiply>
 800bf16:	6020      	str	r0, [r4, #0]
 800bf18:	f8c0 9000 	str.w	r9, [r0]
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	e7e4      	b.n	800beea <__pow5mult+0x6a>
 800bf20:	4630      	mov	r0, r6
 800bf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf26:	bf00      	nop
 800bf28:	08020e8c 	.word	0x08020e8c
 800bf2c:	08020d59 	.word	0x08020d59
 800bf30:	08020dd9 	.word	0x08020dd9

0800bf34 <__lshift>:
 800bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	6849      	ldr	r1, [r1, #4]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	4607      	mov	r7, r0
 800bf46:	4691      	mov	r9, r2
 800bf48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf4c:	f108 0601 	add.w	r6, r8, #1
 800bf50:	42b3      	cmp	r3, r6
 800bf52:	db0b      	blt.n	800bf6c <__lshift+0x38>
 800bf54:	4638      	mov	r0, r7
 800bf56:	f7ff fde7 	bl	800bb28 <_Balloc>
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b948      	cbnz	r0, 800bf72 <__lshift+0x3e>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	4b28      	ldr	r3, [pc, #160]	@ (800c004 <__lshift+0xd0>)
 800bf62:	4829      	ldr	r0, [pc, #164]	@ (800c008 <__lshift+0xd4>)
 800bf64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf68:	f000 fb86 	bl	800c678 <__assert_func>
 800bf6c:	3101      	adds	r1, #1
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	e7ee      	b.n	800bf50 <__lshift+0x1c>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f100 0114 	add.w	r1, r0, #20
 800bf78:	f100 0210 	add.w	r2, r0, #16
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	4553      	cmp	r3, sl
 800bf80:	db33      	blt.n	800bfea <__lshift+0xb6>
 800bf82:	6920      	ldr	r0, [r4, #16]
 800bf84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf88:	f104 0314 	add.w	r3, r4, #20
 800bf8c:	f019 091f 	ands.w	r9, r9, #31
 800bf90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf98:	d02b      	beq.n	800bff2 <__lshift+0xbe>
 800bf9a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf9e:	468a      	mov	sl, r1
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	fa00 f009 	lsl.w	r0, r0, r9
 800bfa8:	4310      	orrs	r0, r2
 800bfaa:	f84a 0b04 	str.w	r0, [sl], #4
 800bfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb2:	459c      	cmp	ip, r3
 800bfb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfb8:	d8f3      	bhi.n	800bfa2 <__lshift+0x6e>
 800bfba:	ebac 0304 	sub.w	r3, ip, r4
 800bfbe:	3b15      	subs	r3, #21
 800bfc0:	f023 0303 	bic.w	r3, r3, #3
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	f104 0015 	add.w	r0, r4, #21
 800bfca:	4560      	cmp	r0, ip
 800bfcc:	bf88      	it	hi
 800bfce:	2304      	movhi	r3, #4
 800bfd0:	50ca      	str	r2, [r1, r3]
 800bfd2:	b10a      	cbz	r2, 800bfd8 <__lshift+0xa4>
 800bfd4:	f108 0602 	add.w	r6, r8, #2
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	4638      	mov	r0, r7
 800bfdc:	612e      	str	r6, [r5, #16]
 800bfde:	4621      	mov	r1, r4
 800bfe0:	f7ff fde2 	bl	800bba8 <_Bfree>
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfea:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfee:	3301      	adds	r3, #1
 800bff0:	e7c5      	b.n	800bf7e <__lshift+0x4a>
 800bff2:	3904      	subs	r1, #4
 800bff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bffc:	459c      	cmp	ip, r3
 800bffe:	d8f9      	bhi.n	800bff4 <__lshift+0xc0>
 800c000:	e7ea      	b.n	800bfd8 <__lshift+0xa4>
 800c002:	bf00      	nop
 800c004:	08020dc8 	.word	0x08020dc8
 800c008:	08020dd9 	.word	0x08020dd9

0800c00c <__mcmp>:
 800c00c:	690a      	ldr	r2, [r1, #16]
 800c00e:	4603      	mov	r3, r0
 800c010:	6900      	ldr	r0, [r0, #16]
 800c012:	1a80      	subs	r0, r0, r2
 800c014:	b530      	push	{r4, r5, lr}
 800c016:	d10e      	bne.n	800c036 <__mcmp+0x2a>
 800c018:	3314      	adds	r3, #20
 800c01a:	3114      	adds	r1, #20
 800c01c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c02c:	4295      	cmp	r5, r2
 800c02e:	d003      	beq.n	800c038 <__mcmp+0x2c>
 800c030:	d205      	bcs.n	800c03e <__mcmp+0x32>
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	bd30      	pop	{r4, r5, pc}
 800c038:	42a3      	cmp	r3, r4
 800c03a:	d3f3      	bcc.n	800c024 <__mcmp+0x18>
 800c03c:	e7fb      	b.n	800c036 <__mcmp+0x2a>
 800c03e:	2001      	movs	r0, #1
 800c040:	e7f9      	b.n	800c036 <__mcmp+0x2a>
	...

0800c044 <__mdiff>:
 800c044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	4689      	mov	r9, r1
 800c04a:	4606      	mov	r6, r0
 800c04c:	4611      	mov	r1, r2
 800c04e:	4648      	mov	r0, r9
 800c050:	4614      	mov	r4, r2
 800c052:	f7ff ffdb 	bl	800c00c <__mcmp>
 800c056:	1e05      	subs	r5, r0, #0
 800c058:	d112      	bne.n	800c080 <__mdiff+0x3c>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff fd63 	bl	800bb28 <_Balloc>
 800c062:	4602      	mov	r2, r0
 800c064:	b928      	cbnz	r0, 800c072 <__mdiff+0x2e>
 800c066:	4b3f      	ldr	r3, [pc, #252]	@ (800c164 <__mdiff+0x120>)
 800c068:	f240 2137 	movw	r1, #567	@ 0x237
 800c06c:	483e      	ldr	r0, [pc, #248]	@ (800c168 <__mdiff+0x124>)
 800c06e:	f000 fb03 	bl	800c678 <__assert_func>
 800c072:	2301      	movs	r3, #1
 800c074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c078:	4610      	mov	r0, r2
 800c07a:	b003      	add	sp, #12
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	bfbc      	itt	lt
 800c082:	464b      	movlt	r3, r9
 800c084:	46a1      	movlt	r9, r4
 800c086:	4630      	mov	r0, r6
 800c088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c08c:	bfba      	itte	lt
 800c08e:	461c      	movlt	r4, r3
 800c090:	2501      	movlt	r5, #1
 800c092:	2500      	movge	r5, #0
 800c094:	f7ff fd48 	bl	800bb28 <_Balloc>
 800c098:	4602      	mov	r2, r0
 800c09a:	b918      	cbnz	r0, 800c0a4 <__mdiff+0x60>
 800c09c:	4b31      	ldr	r3, [pc, #196]	@ (800c164 <__mdiff+0x120>)
 800c09e:	f240 2145 	movw	r1, #581	@ 0x245
 800c0a2:	e7e3      	b.n	800c06c <__mdiff+0x28>
 800c0a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c0a8:	6926      	ldr	r6, [r4, #16]
 800c0aa:	60c5      	str	r5, [r0, #12]
 800c0ac:	f109 0310 	add.w	r3, r9, #16
 800c0b0:	f109 0514 	add.w	r5, r9, #20
 800c0b4:	f104 0e14 	add.w	lr, r4, #20
 800c0b8:	f100 0b14 	add.w	fp, r0, #20
 800c0bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c0c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	46d9      	mov	r9, fp
 800c0c8:	f04f 0c00 	mov.w	ip, #0
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c0d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	fa1f f38a 	uxth.w	r3, sl
 800c0dc:	4619      	mov	r1, r3
 800c0de:	b283      	uxth	r3, r0
 800c0e0:	1acb      	subs	r3, r1, r3
 800c0e2:	0c00      	lsrs	r0, r0, #16
 800c0e4:	4463      	add	r3, ip
 800c0e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c0ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0f4:	4576      	cmp	r6, lr
 800c0f6:	f849 3b04 	str.w	r3, [r9], #4
 800c0fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0fe:	d8e5      	bhi.n	800c0cc <__mdiff+0x88>
 800c100:	1b33      	subs	r3, r6, r4
 800c102:	3b15      	subs	r3, #21
 800c104:	f023 0303 	bic.w	r3, r3, #3
 800c108:	3415      	adds	r4, #21
 800c10a:	3304      	adds	r3, #4
 800c10c:	42a6      	cmp	r6, r4
 800c10e:	bf38      	it	cc
 800c110:	2304      	movcc	r3, #4
 800c112:	441d      	add	r5, r3
 800c114:	445b      	add	r3, fp
 800c116:	461e      	mov	r6, r3
 800c118:	462c      	mov	r4, r5
 800c11a:	4544      	cmp	r4, r8
 800c11c:	d30e      	bcc.n	800c13c <__mdiff+0xf8>
 800c11e:	f108 0103 	add.w	r1, r8, #3
 800c122:	1b49      	subs	r1, r1, r5
 800c124:	f021 0103 	bic.w	r1, r1, #3
 800c128:	3d03      	subs	r5, #3
 800c12a:	45a8      	cmp	r8, r5
 800c12c:	bf38      	it	cc
 800c12e:	2100      	movcc	r1, #0
 800c130:	440b      	add	r3, r1
 800c132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c136:	b191      	cbz	r1, 800c15e <__mdiff+0x11a>
 800c138:	6117      	str	r7, [r2, #16]
 800c13a:	e79d      	b.n	800c078 <__mdiff+0x34>
 800c13c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c140:	46e6      	mov	lr, ip
 800c142:	0c08      	lsrs	r0, r1, #16
 800c144:	fa1c fc81 	uxtah	ip, ip, r1
 800c148:	4471      	add	r1, lr
 800c14a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c14e:	b289      	uxth	r1, r1
 800c150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c154:	f846 1b04 	str.w	r1, [r6], #4
 800c158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c15c:	e7dd      	b.n	800c11a <__mdiff+0xd6>
 800c15e:	3f01      	subs	r7, #1
 800c160:	e7e7      	b.n	800c132 <__mdiff+0xee>
 800c162:	bf00      	nop
 800c164:	08020dc8 	.word	0x08020dc8
 800c168:	08020dd9 	.word	0x08020dd9

0800c16c <__d2b>:
 800c16c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c170:	460f      	mov	r7, r1
 800c172:	2101      	movs	r1, #1
 800c174:	ec59 8b10 	vmov	r8, r9, d0
 800c178:	4616      	mov	r6, r2
 800c17a:	f7ff fcd5 	bl	800bb28 <_Balloc>
 800c17e:	4604      	mov	r4, r0
 800c180:	b930      	cbnz	r0, 800c190 <__d2b+0x24>
 800c182:	4602      	mov	r2, r0
 800c184:	4b23      	ldr	r3, [pc, #140]	@ (800c214 <__d2b+0xa8>)
 800c186:	4824      	ldr	r0, [pc, #144]	@ (800c218 <__d2b+0xac>)
 800c188:	f240 310f 	movw	r1, #783	@ 0x30f
 800c18c:	f000 fa74 	bl	800c678 <__assert_func>
 800c190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c198:	b10d      	cbz	r5, 800c19e <__d2b+0x32>
 800c19a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	f1b8 0300 	subs.w	r3, r8, #0
 800c1a4:	d023      	beq.n	800c1ee <__d2b+0x82>
 800c1a6:	4668      	mov	r0, sp
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	f7ff fd84 	bl	800bcb6 <__lo0bits>
 800c1ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c1b2:	b1d0      	cbz	r0, 800c1ea <__d2b+0x7e>
 800c1b4:	f1c0 0320 	rsb	r3, r0, #32
 800c1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	40c2      	lsrs	r2, r0
 800c1c0:	6163      	str	r3, [r4, #20]
 800c1c2:	9201      	str	r2, [sp, #4]
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	61a3      	str	r3, [r4, #24]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bf0c      	ite	eq
 800c1cc:	2201      	moveq	r2, #1
 800c1ce:	2202      	movne	r2, #2
 800c1d0:	6122      	str	r2, [r4, #16]
 800c1d2:	b1a5      	cbz	r5, 800c1fe <__d2b+0x92>
 800c1d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c1d8:	4405      	add	r5, r0
 800c1da:	603d      	str	r5, [r7, #0]
 800c1dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c1e0:	6030      	str	r0, [r6, #0]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1ea:	6161      	str	r1, [r4, #20]
 800c1ec:	e7ea      	b.n	800c1c4 <__d2b+0x58>
 800c1ee:	a801      	add	r0, sp, #4
 800c1f0:	f7ff fd61 	bl	800bcb6 <__lo0bits>
 800c1f4:	9b01      	ldr	r3, [sp, #4]
 800c1f6:	6163      	str	r3, [r4, #20]
 800c1f8:	3020      	adds	r0, #32
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	e7e8      	b.n	800c1d0 <__d2b+0x64>
 800c1fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c206:	6038      	str	r0, [r7, #0]
 800c208:	6918      	ldr	r0, [r3, #16]
 800c20a:	f7ff fd35 	bl	800bc78 <__hi0bits>
 800c20e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c212:	e7e5      	b.n	800c1e0 <__d2b+0x74>
 800c214:	08020dc8 	.word	0x08020dc8
 800c218:	08020dd9 	.word	0x08020dd9

0800c21c <__ssputs_r>:
 800c21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c220:	688e      	ldr	r6, [r1, #8]
 800c222:	461f      	mov	r7, r3
 800c224:	42be      	cmp	r6, r7
 800c226:	680b      	ldr	r3, [r1, #0]
 800c228:	4682      	mov	sl, r0
 800c22a:	460c      	mov	r4, r1
 800c22c:	4690      	mov	r8, r2
 800c22e:	d82d      	bhi.n	800c28c <__ssputs_r+0x70>
 800c230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c238:	d026      	beq.n	800c288 <__ssputs_r+0x6c>
 800c23a:	6965      	ldr	r5, [r4, #20]
 800c23c:	6909      	ldr	r1, [r1, #16]
 800c23e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c242:	eba3 0901 	sub.w	r9, r3, r1
 800c246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c24a:	1c7b      	adds	r3, r7, #1
 800c24c:	444b      	add	r3, r9
 800c24e:	106d      	asrs	r5, r5, #1
 800c250:	429d      	cmp	r5, r3
 800c252:	bf38      	it	cc
 800c254:	461d      	movcc	r5, r3
 800c256:	0553      	lsls	r3, r2, #21
 800c258:	d527      	bpl.n	800c2aa <__ssputs_r+0x8e>
 800c25a:	4629      	mov	r1, r5
 800c25c:	f7ff fbd8 	bl	800ba10 <_malloc_r>
 800c260:	4606      	mov	r6, r0
 800c262:	b360      	cbz	r0, 800c2be <__ssputs_r+0xa2>
 800c264:	6921      	ldr	r1, [r4, #16]
 800c266:	464a      	mov	r2, r9
 800c268:	f7fe fcf5 	bl	800ac56 <memcpy>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	6126      	str	r6, [r4, #16]
 800c27a:	6165      	str	r5, [r4, #20]
 800c27c:	444e      	add	r6, r9
 800c27e:	eba5 0509 	sub.w	r5, r5, r9
 800c282:	6026      	str	r6, [r4, #0]
 800c284:	60a5      	str	r5, [r4, #8]
 800c286:	463e      	mov	r6, r7
 800c288:	42be      	cmp	r6, r7
 800c28a:	d900      	bls.n	800c28e <__ssputs_r+0x72>
 800c28c:	463e      	mov	r6, r7
 800c28e:	6820      	ldr	r0, [r4, #0]
 800c290:	4632      	mov	r2, r6
 800c292:	4641      	mov	r1, r8
 800c294:	f000 f9c6 	bl	800c624 <memmove>
 800c298:	68a3      	ldr	r3, [r4, #8]
 800c29a:	1b9b      	subs	r3, r3, r6
 800c29c:	60a3      	str	r3, [r4, #8]
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	4433      	add	r3, r6
 800c2a2:	6023      	str	r3, [r4, #0]
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	f000 fa28 	bl	800c700 <_realloc_r>
 800c2b0:	4606      	mov	r6, r0
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d1e0      	bne.n	800c278 <__ssputs_r+0x5c>
 800c2b6:	6921      	ldr	r1, [r4, #16]
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	f7ff fb35 	bl	800b928 <_free_r>
 800c2be:	230c      	movs	r3, #12
 800c2c0:	f8ca 3000 	str.w	r3, [sl]
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	e7e9      	b.n	800c2a6 <__ssputs_r+0x8a>
	...

0800c2d4 <_svfiprintf_r>:
 800c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d8:	4698      	mov	r8, r3
 800c2da:	898b      	ldrh	r3, [r1, #12]
 800c2dc:	061b      	lsls	r3, r3, #24
 800c2de:	b09d      	sub	sp, #116	@ 0x74
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	4614      	mov	r4, r2
 800c2e6:	d510      	bpl.n	800c30a <_svfiprintf_r+0x36>
 800c2e8:	690b      	ldr	r3, [r1, #16]
 800c2ea:	b973      	cbnz	r3, 800c30a <_svfiprintf_r+0x36>
 800c2ec:	2140      	movs	r1, #64	@ 0x40
 800c2ee:	f7ff fb8f 	bl	800ba10 <_malloc_r>
 800c2f2:	6028      	str	r0, [r5, #0]
 800c2f4:	6128      	str	r0, [r5, #16]
 800c2f6:	b930      	cbnz	r0, 800c306 <_svfiprintf_r+0x32>
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	603b      	str	r3, [r7, #0]
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	b01d      	add	sp, #116	@ 0x74
 800c302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	2340      	movs	r3, #64	@ 0x40
 800c308:	616b      	str	r3, [r5, #20]
 800c30a:	2300      	movs	r3, #0
 800c30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c30e:	2320      	movs	r3, #32
 800c310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c314:	f8cd 800c 	str.w	r8, [sp, #12]
 800c318:	2330      	movs	r3, #48	@ 0x30
 800c31a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4b8 <_svfiprintf_r+0x1e4>
 800c31e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c322:	f04f 0901 	mov.w	r9, #1
 800c326:	4623      	mov	r3, r4
 800c328:	469a      	mov	sl, r3
 800c32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c32e:	b10a      	cbz	r2, 800c334 <_svfiprintf_r+0x60>
 800c330:	2a25      	cmp	r2, #37	@ 0x25
 800c332:	d1f9      	bne.n	800c328 <_svfiprintf_r+0x54>
 800c334:	ebba 0b04 	subs.w	fp, sl, r4
 800c338:	d00b      	beq.n	800c352 <_svfiprintf_r+0x7e>
 800c33a:	465b      	mov	r3, fp
 800c33c:	4622      	mov	r2, r4
 800c33e:	4629      	mov	r1, r5
 800c340:	4638      	mov	r0, r7
 800c342:	f7ff ff6b 	bl	800c21c <__ssputs_r>
 800c346:	3001      	adds	r0, #1
 800c348:	f000 80a7 	beq.w	800c49a <_svfiprintf_r+0x1c6>
 800c34c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c34e:	445a      	add	r2, fp
 800c350:	9209      	str	r2, [sp, #36]	@ 0x24
 800c352:	f89a 3000 	ldrb.w	r3, [sl]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f000 809f 	beq.w	800c49a <_svfiprintf_r+0x1c6>
 800c35c:	2300      	movs	r3, #0
 800c35e:	f04f 32ff 	mov.w	r2, #4294967295
 800c362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c366:	f10a 0a01 	add.w	sl, sl, #1
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	9307      	str	r3, [sp, #28]
 800c36e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c372:	931a      	str	r3, [sp, #104]	@ 0x68
 800c374:	4654      	mov	r4, sl
 800c376:	2205      	movs	r2, #5
 800c378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37c:	484e      	ldr	r0, [pc, #312]	@ (800c4b8 <_svfiprintf_r+0x1e4>)
 800c37e:	f7f3 ff27 	bl	80001d0 <memchr>
 800c382:	9a04      	ldr	r2, [sp, #16]
 800c384:	b9d8      	cbnz	r0, 800c3be <_svfiprintf_r+0xea>
 800c386:	06d0      	lsls	r0, r2, #27
 800c388:	bf44      	itt	mi
 800c38a:	2320      	movmi	r3, #32
 800c38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c390:	0711      	lsls	r1, r2, #28
 800c392:	bf44      	itt	mi
 800c394:	232b      	movmi	r3, #43	@ 0x2b
 800c396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c39a:	f89a 3000 	ldrb.w	r3, [sl]
 800c39e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a0:	d015      	beq.n	800c3ce <_svfiprintf_r+0xfa>
 800c3a2:	9a07      	ldr	r2, [sp, #28]
 800c3a4:	4654      	mov	r4, sl
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	f04f 0c0a 	mov.w	ip, #10
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3b2:	3b30      	subs	r3, #48	@ 0x30
 800c3b4:	2b09      	cmp	r3, #9
 800c3b6:	d94b      	bls.n	800c450 <_svfiprintf_r+0x17c>
 800c3b8:	b1b0      	cbz	r0, 800c3e8 <_svfiprintf_r+0x114>
 800c3ba:	9207      	str	r2, [sp, #28]
 800c3bc:	e014      	b.n	800c3e8 <_svfiprintf_r+0x114>
 800c3be:	eba0 0308 	sub.w	r3, r0, r8
 800c3c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	9304      	str	r3, [sp, #16]
 800c3ca:	46a2      	mov	sl, r4
 800c3cc:	e7d2      	b.n	800c374 <_svfiprintf_r+0xa0>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	1d19      	adds	r1, r3, #4
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	9103      	str	r1, [sp, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	bfbb      	ittet	lt
 800c3da:	425b      	neglt	r3, r3
 800c3dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c3e0:	9307      	strge	r3, [sp, #28]
 800c3e2:	9307      	strlt	r3, [sp, #28]
 800c3e4:	bfb8      	it	lt
 800c3e6:	9204      	strlt	r2, [sp, #16]
 800c3e8:	7823      	ldrb	r3, [r4, #0]
 800c3ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3ec:	d10a      	bne.n	800c404 <_svfiprintf_r+0x130>
 800c3ee:	7863      	ldrb	r3, [r4, #1]
 800c3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3f2:	d132      	bne.n	800c45a <_svfiprintf_r+0x186>
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	1d1a      	adds	r2, r3, #4
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	9203      	str	r2, [sp, #12]
 800c3fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c400:	3402      	adds	r4, #2
 800c402:	9305      	str	r3, [sp, #20]
 800c404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4c8 <_svfiprintf_r+0x1f4>
 800c408:	7821      	ldrb	r1, [r4, #0]
 800c40a:	2203      	movs	r2, #3
 800c40c:	4650      	mov	r0, sl
 800c40e:	f7f3 fedf 	bl	80001d0 <memchr>
 800c412:	b138      	cbz	r0, 800c424 <_svfiprintf_r+0x150>
 800c414:	9b04      	ldr	r3, [sp, #16]
 800c416:	eba0 000a 	sub.w	r0, r0, sl
 800c41a:	2240      	movs	r2, #64	@ 0x40
 800c41c:	4082      	lsls	r2, r0
 800c41e:	4313      	orrs	r3, r2
 800c420:	3401      	adds	r4, #1
 800c422:	9304      	str	r3, [sp, #16]
 800c424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c428:	4824      	ldr	r0, [pc, #144]	@ (800c4bc <_svfiprintf_r+0x1e8>)
 800c42a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c42e:	2206      	movs	r2, #6
 800c430:	f7f3 fece 	bl	80001d0 <memchr>
 800c434:	2800      	cmp	r0, #0
 800c436:	d036      	beq.n	800c4a6 <_svfiprintf_r+0x1d2>
 800c438:	4b21      	ldr	r3, [pc, #132]	@ (800c4c0 <_svfiprintf_r+0x1ec>)
 800c43a:	bb1b      	cbnz	r3, 800c484 <_svfiprintf_r+0x1b0>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	3307      	adds	r3, #7
 800c440:	f023 0307 	bic.w	r3, r3, #7
 800c444:	3308      	adds	r3, #8
 800c446:	9303      	str	r3, [sp, #12]
 800c448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44a:	4433      	add	r3, r6
 800c44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c44e:	e76a      	b.n	800c326 <_svfiprintf_r+0x52>
 800c450:	fb0c 3202 	mla	r2, ip, r2, r3
 800c454:	460c      	mov	r4, r1
 800c456:	2001      	movs	r0, #1
 800c458:	e7a8      	b.n	800c3ac <_svfiprintf_r+0xd8>
 800c45a:	2300      	movs	r3, #0
 800c45c:	3401      	adds	r4, #1
 800c45e:	9305      	str	r3, [sp, #20]
 800c460:	4619      	mov	r1, r3
 800c462:	f04f 0c0a 	mov.w	ip, #10
 800c466:	4620      	mov	r0, r4
 800c468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c46c:	3a30      	subs	r2, #48	@ 0x30
 800c46e:	2a09      	cmp	r2, #9
 800c470:	d903      	bls.n	800c47a <_svfiprintf_r+0x1a6>
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0c6      	beq.n	800c404 <_svfiprintf_r+0x130>
 800c476:	9105      	str	r1, [sp, #20]
 800c478:	e7c4      	b.n	800c404 <_svfiprintf_r+0x130>
 800c47a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c47e:	4604      	mov	r4, r0
 800c480:	2301      	movs	r3, #1
 800c482:	e7f0      	b.n	800c466 <_svfiprintf_r+0x192>
 800c484:	ab03      	add	r3, sp, #12
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	462a      	mov	r2, r5
 800c48a:	4b0e      	ldr	r3, [pc, #56]	@ (800c4c4 <_svfiprintf_r+0x1f0>)
 800c48c:	a904      	add	r1, sp, #16
 800c48e:	4638      	mov	r0, r7
 800c490:	f7fd fe84 	bl	800a19c <_printf_float>
 800c494:	1c42      	adds	r2, r0, #1
 800c496:	4606      	mov	r6, r0
 800c498:	d1d6      	bne.n	800c448 <_svfiprintf_r+0x174>
 800c49a:	89ab      	ldrh	r3, [r5, #12]
 800c49c:	065b      	lsls	r3, r3, #25
 800c49e:	f53f af2d 	bmi.w	800c2fc <_svfiprintf_r+0x28>
 800c4a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4a4:	e72c      	b.n	800c300 <_svfiprintf_r+0x2c>
 800c4a6:	ab03      	add	r3, sp, #12
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	462a      	mov	r2, r5
 800c4ac:	4b05      	ldr	r3, [pc, #20]	@ (800c4c4 <_svfiprintf_r+0x1f0>)
 800c4ae:	a904      	add	r1, sp, #16
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7fe f90b 	bl	800a6cc <_printf_i>
 800c4b6:	e7ed      	b.n	800c494 <_svfiprintf_r+0x1c0>
 800c4b8:	08020e32 	.word	0x08020e32
 800c4bc:	08020e3c 	.word	0x08020e3c
 800c4c0:	0800a19d 	.word	0x0800a19d
 800c4c4:	0800c21d 	.word	0x0800c21d
 800c4c8:	08020e38 	.word	0x08020e38

0800c4cc <__sflush_r>:
 800c4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d4:	0716      	lsls	r6, r2, #28
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	460c      	mov	r4, r1
 800c4da:	d454      	bmi.n	800c586 <__sflush_r+0xba>
 800c4dc:	684b      	ldr	r3, [r1, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dc02      	bgt.n	800c4e8 <__sflush_r+0x1c>
 800c4e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	dd48      	ble.n	800c57a <__sflush_r+0xae>
 800c4e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4ea:	2e00      	cmp	r6, #0
 800c4ec:	d045      	beq.n	800c57a <__sflush_r+0xae>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4f4:	682f      	ldr	r7, [r5, #0]
 800c4f6:	6a21      	ldr	r1, [r4, #32]
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	d030      	beq.n	800c55e <__sflush_r+0x92>
 800c4fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	0759      	lsls	r1, r3, #29
 800c502:	d505      	bpl.n	800c510 <__sflush_r+0x44>
 800c504:	6863      	ldr	r3, [r4, #4]
 800c506:	1ad2      	subs	r2, r2, r3
 800c508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c50a:	b10b      	cbz	r3, 800c510 <__sflush_r+0x44>
 800c50c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c50e:	1ad2      	subs	r2, r2, r3
 800c510:	2300      	movs	r3, #0
 800c512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c514:	6a21      	ldr	r1, [r4, #32]
 800c516:	4628      	mov	r0, r5
 800c518:	47b0      	blx	r6
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	d106      	bne.n	800c52e <__sflush_r+0x62>
 800c520:	6829      	ldr	r1, [r5, #0]
 800c522:	291d      	cmp	r1, #29
 800c524:	d82b      	bhi.n	800c57e <__sflush_r+0xb2>
 800c526:	4a2a      	ldr	r2, [pc, #168]	@ (800c5d0 <__sflush_r+0x104>)
 800c528:	40ca      	lsrs	r2, r1
 800c52a:	07d6      	lsls	r6, r2, #31
 800c52c:	d527      	bpl.n	800c57e <__sflush_r+0xb2>
 800c52e:	2200      	movs	r2, #0
 800c530:	6062      	str	r2, [r4, #4]
 800c532:	04d9      	lsls	r1, r3, #19
 800c534:	6922      	ldr	r2, [r4, #16]
 800c536:	6022      	str	r2, [r4, #0]
 800c538:	d504      	bpl.n	800c544 <__sflush_r+0x78>
 800c53a:	1c42      	adds	r2, r0, #1
 800c53c:	d101      	bne.n	800c542 <__sflush_r+0x76>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	b903      	cbnz	r3, 800c544 <__sflush_r+0x78>
 800c542:	6560      	str	r0, [r4, #84]	@ 0x54
 800c544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c546:	602f      	str	r7, [r5, #0]
 800c548:	b1b9      	cbz	r1, 800c57a <__sflush_r+0xae>
 800c54a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c54e:	4299      	cmp	r1, r3
 800c550:	d002      	beq.n	800c558 <__sflush_r+0x8c>
 800c552:	4628      	mov	r0, r5
 800c554:	f7ff f9e8 	bl	800b928 <_free_r>
 800c558:	2300      	movs	r3, #0
 800c55a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c55c:	e00d      	b.n	800c57a <__sflush_r+0xae>
 800c55e:	2301      	movs	r3, #1
 800c560:	4628      	mov	r0, r5
 800c562:	47b0      	blx	r6
 800c564:	4602      	mov	r2, r0
 800c566:	1c50      	adds	r0, r2, #1
 800c568:	d1c9      	bne.n	800c4fe <__sflush_r+0x32>
 800c56a:	682b      	ldr	r3, [r5, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0c6      	beq.n	800c4fe <__sflush_r+0x32>
 800c570:	2b1d      	cmp	r3, #29
 800c572:	d001      	beq.n	800c578 <__sflush_r+0xac>
 800c574:	2b16      	cmp	r3, #22
 800c576:	d11e      	bne.n	800c5b6 <__sflush_r+0xea>
 800c578:	602f      	str	r7, [r5, #0]
 800c57a:	2000      	movs	r0, #0
 800c57c:	e022      	b.n	800c5c4 <__sflush_r+0xf8>
 800c57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c582:	b21b      	sxth	r3, r3
 800c584:	e01b      	b.n	800c5be <__sflush_r+0xf2>
 800c586:	690f      	ldr	r7, [r1, #16]
 800c588:	2f00      	cmp	r7, #0
 800c58a:	d0f6      	beq.n	800c57a <__sflush_r+0xae>
 800c58c:	0793      	lsls	r3, r2, #30
 800c58e:	680e      	ldr	r6, [r1, #0]
 800c590:	bf08      	it	eq
 800c592:	694b      	ldreq	r3, [r1, #20]
 800c594:	600f      	str	r7, [r1, #0]
 800c596:	bf18      	it	ne
 800c598:	2300      	movne	r3, #0
 800c59a:	eba6 0807 	sub.w	r8, r6, r7
 800c59e:	608b      	str	r3, [r1, #8]
 800c5a0:	f1b8 0f00 	cmp.w	r8, #0
 800c5a4:	dde9      	ble.n	800c57a <__sflush_r+0xae>
 800c5a6:	6a21      	ldr	r1, [r4, #32]
 800c5a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c5aa:	4643      	mov	r3, r8
 800c5ac:	463a      	mov	r2, r7
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b0      	blx	r6
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	dc08      	bgt.n	800c5c8 <__sflush_r+0xfc>
 800c5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	4407      	add	r7, r0
 800c5ca:	eba8 0800 	sub.w	r8, r8, r0
 800c5ce:	e7e7      	b.n	800c5a0 <__sflush_r+0xd4>
 800c5d0:	20400001 	.word	0x20400001

0800c5d4 <_fflush_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	690b      	ldr	r3, [r1, #16]
 800c5d8:	4605      	mov	r5, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	b913      	cbnz	r3, 800c5e4 <_fflush_r+0x10>
 800c5de:	2500      	movs	r5, #0
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	b118      	cbz	r0, 800c5ee <_fflush_r+0x1a>
 800c5e6:	6a03      	ldr	r3, [r0, #32]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <_fflush_r+0x1a>
 800c5ea:	f7fe fa19 	bl	800aa20 <__sinit>
 800c5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d0f3      	beq.n	800c5de <_fflush_r+0xa>
 800c5f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5f8:	07d0      	lsls	r0, r2, #31
 800c5fa:	d404      	bmi.n	800c606 <_fflush_r+0x32>
 800c5fc:	0599      	lsls	r1, r3, #22
 800c5fe:	d402      	bmi.n	800c606 <_fflush_r+0x32>
 800c600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c602:	f7fe fb26 	bl	800ac52 <__retarget_lock_acquire_recursive>
 800c606:	4628      	mov	r0, r5
 800c608:	4621      	mov	r1, r4
 800c60a:	f7ff ff5f 	bl	800c4cc <__sflush_r>
 800c60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c610:	07da      	lsls	r2, r3, #31
 800c612:	4605      	mov	r5, r0
 800c614:	d4e4      	bmi.n	800c5e0 <_fflush_r+0xc>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	059b      	lsls	r3, r3, #22
 800c61a:	d4e1      	bmi.n	800c5e0 <_fflush_r+0xc>
 800c61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c61e:	f7fe fb19 	bl	800ac54 <__retarget_lock_release_recursive>
 800c622:	e7dd      	b.n	800c5e0 <_fflush_r+0xc>

0800c624 <memmove>:
 800c624:	4288      	cmp	r0, r1
 800c626:	b510      	push	{r4, lr}
 800c628:	eb01 0402 	add.w	r4, r1, r2
 800c62c:	d902      	bls.n	800c634 <memmove+0x10>
 800c62e:	4284      	cmp	r4, r0
 800c630:	4623      	mov	r3, r4
 800c632:	d807      	bhi.n	800c644 <memmove+0x20>
 800c634:	1e43      	subs	r3, r0, #1
 800c636:	42a1      	cmp	r1, r4
 800c638:	d008      	beq.n	800c64c <memmove+0x28>
 800c63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c642:	e7f8      	b.n	800c636 <memmove+0x12>
 800c644:	4402      	add	r2, r0
 800c646:	4601      	mov	r1, r0
 800c648:	428a      	cmp	r2, r1
 800c64a:	d100      	bne.n	800c64e <memmove+0x2a>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c656:	e7f7      	b.n	800c648 <memmove+0x24>

0800c658 <_sbrk_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d06      	ldr	r5, [pc, #24]	@ (800c674 <_sbrk_r+0x1c>)
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	602b      	str	r3, [r5, #0]
 800c664:	f7f5 fac6 	bl	8001bf4 <_sbrk>
 800c668:	1c43      	adds	r3, r0, #1
 800c66a:	d102      	bne.n	800c672 <_sbrk_r+0x1a>
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	b103      	cbz	r3, 800c672 <_sbrk_r+0x1a>
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	20003e48 	.word	0x20003e48

0800c678 <__assert_func>:
 800c678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c67a:	4614      	mov	r4, r2
 800c67c:	461a      	mov	r2, r3
 800c67e:	4b09      	ldr	r3, [pc, #36]	@ (800c6a4 <__assert_func+0x2c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4605      	mov	r5, r0
 800c684:	68d8      	ldr	r0, [r3, #12]
 800c686:	b14c      	cbz	r4, 800c69c <__assert_func+0x24>
 800c688:	4b07      	ldr	r3, [pc, #28]	@ (800c6a8 <__assert_func+0x30>)
 800c68a:	9100      	str	r1, [sp, #0]
 800c68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c690:	4906      	ldr	r1, [pc, #24]	@ (800c6ac <__assert_func+0x34>)
 800c692:	462b      	mov	r3, r5
 800c694:	f000 f870 	bl	800c778 <fiprintf>
 800c698:	f000 f880 	bl	800c79c <abort>
 800c69c:	4b04      	ldr	r3, [pc, #16]	@ (800c6b0 <__assert_func+0x38>)
 800c69e:	461c      	mov	r4, r3
 800c6a0:	e7f3      	b.n	800c68a <__assert_func+0x12>
 800c6a2:	bf00      	nop
 800c6a4:	2000041c 	.word	0x2000041c
 800c6a8:	08020e4d 	.word	0x08020e4d
 800c6ac:	08020e5a 	.word	0x08020e5a
 800c6b0:	08020e88 	.word	0x08020e88

0800c6b4 <_calloc_r>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c6ba:	b934      	cbnz	r4, 800c6ca <_calloc_r+0x16>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	f7ff f9a7 	bl	800ba10 <_malloc_r>
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	b928      	cbnz	r0, 800c6d2 <_calloc_r+0x1e>
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	220c      	movs	r2, #12
 800c6cc:	6002      	str	r2, [r0, #0]
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	e7f9      	b.n	800c6c6 <_calloc_r+0x12>
 800c6d2:	462a      	mov	r2, r5
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	f7fe fa3e 	bl	800ab56 <memset>
 800c6da:	e7f4      	b.n	800c6c6 <_calloc_r+0x12>

0800c6dc <__ascii_mbtowc>:
 800c6dc:	b082      	sub	sp, #8
 800c6de:	b901      	cbnz	r1, 800c6e2 <__ascii_mbtowc+0x6>
 800c6e0:	a901      	add	r1, sp, #4
 800c6e2:	b142      	cbz	r2, 800c6f6 <__ascii_mbtowc+0x1a>
 800c6e4:	b14b      	cbz	r3, 800c6fa <__ascii_mbtowc+0x1e>
 800c6e6:	7813      	ldrb	r3, [r2, #0]
 800c6e8:	600b      	str	r3, [r1, #0]
 800c6ea:	7812      	ldrb	r2, [r2, #0]
 800c6ec:	1e10      	subs	r0, r2, #0
 800c6ee:	bf18      	it	ne
 800c6f0:	2001      	movne	r0, #1
 800c6f2:	b002      	add	sp, #8
 800c6f4:	4770      	bx	lr
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	e7fb      	b.n	800c6f2 <__ascii_mbtowc+0x16>
 800c6fa:	f06f 0001 	mvn.w	r0, #1
 800c6fe:	e7f8      	b.n	800c6f2 <__ascii_mbtowc+0x16>

0800c700 <_realloc_r>:
 800c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	4607      	mov	r7, r0
 800c706:	4614      	mov	r4, r2
 800c708:	460d      	mov	r5, r1
 800c70a:	b921      	cbnz	r1, 800c716 <_realloc_r+0x16>
 800c70c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c710:	4611      	mov	r1, r2
 800c712:	f7ff b97d 	b.w	800ba10 <_malloc_r>
 800c716:	b92a      	cbnz	r2, 800c724 <_realloc_r+0x24>
 800c718:	f7ff f906 	bl	800b928 <_free_r>
 800c71c:	4625      	mov	r5, r4
 800c71e:	4628      	mov	r0, r5
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	f000 f841 	bl	800c7aa <_malloc_usable_size_r>
 800c728:	4284      	cmp	r4, r0
 800c72a:	4606      	mov	r6, r0
 800c72c:	d802      	bhi.n	800c734 <_realloc_r+0x34>
 800c72e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c732:	d8f4      	bhi.n	800c71e <_realloc_r+0x1e>
 800c734:	4621      	mov	r1, r4
 800c736:	4638      	mov	r0, r7
 800c738:	f7ff f96a 	bl	800ba10 <_malloc_r>
 800c73c:	4680      	mov	r8, r0
 800c73e:	b908      	cbnz	r0, 800c744 <_realloc_r+0x44>
 800c740:	4645      	mov	r5, r8
 800c742:	e7ec      	b.n	800c71e <_realloc_r+0x1e>
 800c744:	42b4      	cmp	r4, r6
 800c746:	4622      	mov	r2, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	bf28      	it	cs
 800c74c:	4632      	movcs	r2, r6
 800c74e:	f7fe fa82 	bl	800ac56 <memcpy>
 800c752:	4629      	mov	r1, r5
 800c754:	4638      	mov	r0, r7
 800c756:	f7ff f8e7 	bl	800b928 <_free_r>
 800c75a:	e7f1      	b.n	800c740 <_realloc_r+0x40>

0800c75c <__ascii_wctomb>:
 800c75c:	4603      	mov	r3, r0
 800c75e:	4608      	mov	r0, r1
 800c760:	b141      	cbz	r1, 800c774 <__ascii_wctomb+0x18>
 800c762:	2aff      	cmp	r2, #255	@ 0xff
 800c764:	d904      	bls.n	800c770 <__ascii_wctomb+0x14>
 800c766:	228a      	movs	r2, #138	@ 0x8a
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	f04f 30ff 	mov.w	r0, #4294967295
 800c76e:	4770      	bx	lr
 800c770:	700a      	strb	r2, [r1, #0]
 800c772:	2001      	movs	r0, #1
 800c774:	4770      	bx	lr
	...

0800c778 <fiprintf>:
 800c778:	b40e      	push	{r1, r2, r3}
 800c77a:	b503      	push	{r0, r1, lr}
 800c77c:	4601      	mov	r1, r0
 800c77e:	ab03      	add	r3, sp, #12
 800c780:	4805      	ldr	r0, [pc, #20]	@ (800c798 <fiprintf+0x20>)
 800c782:	f853 2b04 	ldr.w	r2, [r3], #4
 800c786:	6800      	ldr	r0, [r0, #0]
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	f000 f83f 	bl	800c80c <_vfiprintf_r>
 800c78e:	b002      	add	sp, #8
 800c790:	f85d eb04 	ldr.w	lr, [sp], #4
 800c794:	b003      	add	sp, #12
 800c796:	4770      	bx	lr
 800c798:	2000041c 	.word	0x2000041c

0800c79c <abort>:
 800c79c:	b508      	push	{r3, lr}
 800c79e:	2006      	movs	r0, #6
 800c7a0:	f000 fa08 	bl	800cbb4 <raise>
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	f7f5 f9ad 	bl	8001b04 <_exit>

0800c7aa <_malloc_usable_size_r>:
 800c7aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ae:	1f18      	subs	r0, r3, #4
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	bfbc      	itt	lt
 800c7b4:	580b      	ldrlt	r3, [r1, r0]
 800c7b6:	18c0      	addlt	r0, r0, r3
 800c7b8:	4770      	bx	lr

0800c7ba <__sfputc_r>:
 800c7ba:	6893      	ldr	r3, [r2, #8]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	b410      	push	{r4}
 800c7c2:	6093      	str	r3, [r2, #8]
 800c7c4:	da08      	bge.n	800c7d8 <__sfputc_r+0x1e>
 800c7c6:	6994      	ldr	r4, [r2, #24]
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	db01      	blt.n	800c7d0 <__sfputc_r+0x16>
 800c7cc:	290a      	cmp	r1, #10
 800c7ce:	d103      	bne.n	800c7d8 <__sfputc_r+0x1e>
 800c7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d4:	f000 b932 	b.w	800ca3c <__swbuf_r>
 800c7d8:	6813      	ldr	r3, [r2, #0]
 800c7da:	1c58      	adds	r0, r3, #1
 800c7dc:	6010      	str	r0, [r2, #0]
 800c7de:	7019      	strb	r1, [r3, #0]
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <__sfputs_r>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	460f      	mov	r7, r1
 800c7ee:	4614      	mov	r4, r2
 800c7f0:	18d5      	adds	r5, r2, r3
 800c7f2:	42ac      	cmp	r4, r5
 800c7f4:	d101      	bne.n	800c7fa <__sfputs_r+0x12>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e007      	b.n	800c80a <__sfputs_r+0x22>
 800c7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fe:	463a      	mov	r2, r7
 800c800:	4630      	mov	r0, r6
 800c802:	f7ff ffda 	bl	800c7ba <__sfputc_r>
 800c806:	1c43      	adds	r3, r0, #1
 800c808:	d1f3      	bne.n	800c7f2 <__sfputs_r+0xa>
 800c80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c80c <_vfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	460d      	mov	r5, r1
 800c812:	b09d      	sub	sp, #116	@ 0x74
 800c814:	4614      	mov	r4, r2
 800c816:	4698      	mov	r8, r3
 800c818:	4606      	mov	r6, r0
 800c81a:	b118      	cbz	r0, 800c824 <_vfiprintf_r+0x18>
 800c81c:	6a03      	ldr	r3, [r0, #32]
 800c81e:	b90b      	cbnz	r3, 800c824 <_vfiprintf_r+0x18>
 800c820:	f7fe f8fe 	bl	800aa20 <__sinit>
 800c824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c826:	07d9      	lsls	r1, r3, #31
 800c828:	d405      	bmi.n	800c836 <_vfiprintf_r+0x2a>
 800c82a:	89ab      	ldrh	r3, [r5, #12]
 800c82c:	059a      	lsls	r2, r3, #22
 800c82e:	d402      	bmi.n	800c836 <_vfiprintf_r+0x2a>
 800c830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c832:	f7fe fa0e 	bl	800ac52 <__retarget_lock_acquire_recursive>
 800c836:	89ab      	ldrh	r3, [r5, #12]
 800c838:	071b      	lsls	r3, r3, #28
 800c83a:	d501      	bpl.n	800c840 <_vfiprintf_r+0x34>
 800c83c:	692b      	ldr	r3, [r5, #16]
 800c83e:	b99b      	cbnz	r3, 800c868 <_vfiprintf_r+0x5c>
 800c840:	4629      	mov	r1, r5
 800c842:	4630      	mov	r0, r6
 800c844:	f000 f938 	bl	800cab8 <__swsetup_r>
 800c848:	b170      	cbz	r0, 800c868 <_vfiprintf_r+0x5c>
 800c84a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c84c:	07dc      	lsls	r4, r3, #31
 800c84e:	d504      	bpl.n	800c85a <_vfiprintf_r+0x4e>
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	b01d      	add	sp, #116	@ 0x74
 800c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	0598      	lsls	r0, r3, #22
 800c85e:	d4f7      	bmi.n	800c850 <_vfiprintf_r+0x44>
 800c860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c862:	f7fe f9f7 	bl	800ac54 <__retarget_lock_release_recursive>
 800c866:	e7f3      	b.n	800c850 <_vfiprintf_r+0x44>
 800c868:	2300      	movs	r3, #0
 800c86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c86c:	2320      	movs	r3, #32
 800c86e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c872:	f8cd 800c 	str.w	r8, [sp, #12]
 800c876:	2330      	movs	r3, #48	@ 0x30
 800c878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca28 <_vfiprintf_r+0x21c>
 800c87c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	4623      	mov	r3, r4
 800c886:	469a      	mov	sl, r3
 800c888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88c:	b10a      	cbz	r2, 800c892 <_vfiprintf_r+0x86>
 800c88e:	2a25      	cmp	r2, #37	@ 0x25
 800c890:	d1f9      	bne.n	800c886 <_vfiprintf_r+0x7a>
 800c892:	ebba 0b04 	subs.w	fp, sl, r4
 800c896:	d00b      	beq.n	800c8b0 <_vfiprintf_r+0xa4>
 800c898:	465b      	mov	r3, fp
 800c89a:	4622      	mov	r2, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ffa2 	bl	800c7e8 <__sfputs_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f000 80a7 	beq.w	800c9f8 <_vfiprintf_r+0x1ec>
 800c8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ac:	445a      	add	r2, fp
 800c8ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 809f 	beq.w	800c9f8 <_vfiprintf_r+0x1ec>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c4:	f10a 0a01 	add.w	sl, sl, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	9307      	str	r3, [sp, #28]
 800c8cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8d2:	4654      	mov	r4, sl
 800c8d4:	2205      	movs	r2, #5
 800c8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8da:	4853      	ldr	r0, [pc, #332]	@ (800ca28 <_vfiprintf_r+0x21c>)
 800c8dc:	f7f3 fc78 	bl	80001d0 <memchr>
 800c8e0:	9a04      	ldr	r2, [sp, #16]
 800c8e2:	b9d8      	cbnz	r0, 800c91c <_vfiprintf_r+0x110>
 800c8e4:	06d1      	lsls	r1, r2, #27
 800c8e6:	bf44      	itt	mi
 800c8e8:	2320      	movmi	r3, #32
 800c8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8ee:	0713      	lsls	r3, r2, #28
 800c8f0:	bf44      	itt	mi
 800c8f2:	232b      	movmi	r3, #43	@ 0x2b
 800c8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8fe:	d015      	beq.n	800c92c <_vfiprintf_r+0x120>
 800c900:	9a07      	ldr	r2, [sp, #28]
 800c902:	4654      	mov	r4, sl
 800c904:	2000      	movs	r0, #0
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4621      	mov	r1, r4
 800c90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c910:	3b30      	subs	r3, #48	@ 0x30
 800c912:	2b09      	cmp	r3, #9
 800c914:	d94b      	bls.n	800c9ae <_vfiprintf_r+0x1a2>
 800c916:	b1b0      	cbz	r0, 800c946 <_vfiprintf_r+0x13a>
 800c918:	9207      	str	r2, [sp, #28]
 800c91a:	e014      	b.n	800c946 <_vfiprintf_r+0x13a>
 800c91c:	eba0 0308 	sub.w	r3, r0, r8
 800c920:	fa09 f303 	lsl.w	r3, r9, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	46a2      	mov	sl, r4
 800c92a:	e7d2      	b.n	800c8d2 <_vfiprintf_r+0xc6>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1d19      	adds	r1, r3, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bfbb      	ittet	lt
 800c938:	425b      	neglt	r3, r3
 800c93a:	f042 0202 	orrlt.w	r2, r2, #2
 800c93e:	9307      	strge	r3, [sp, #28]
 800c940:	9307      	strlt	r3, [sp, #28]
 800c942:	bfb8      	it	lt
 800c944:	9204      	strlt	r2, [sp, #16]
 800c946:	7823      	ldrb	r3, [r4, #0]
 800c948:	2b2e      	cmp	r3, #46	@ 0x2e
 800c94a:	d10a      	bne.n	800c962 <_vfiprintf_r+0x156>
 800c94c:	7863      	ldrb	r3, [r4, #1]
 800c94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c950:	d132      	bne.n	800c9b8 <_vfiprintf_r+0x1ac>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9203      	str	r2, [sp, #12]
 800c95a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c95e:	3402      	adds	r4, #2
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca38 <_vfiprintf_r+0x22c>
 800c966:	7821      	ldrb	r1, [r4, #0]
 800c968:	2203      	movs	r2, #3
 800c96a:	4650      	mov	r0, sl
 800c96c:	f7f3 fc30 	bl	80001d0 <memchr>
 800c970:	b138      	cbz	r0, 800c982 <_vfiprintf_r+0x176>
 800c972:	9b04      	ldr	r3, [sp, #16]
 800c974:	eba0 000a 	sub.w	r0, r0, sl
 800c978:	2240      	movs	r2, #64	@ 0x40
 800c97a:	4082      	lsls	r2, r0
 800c97c:	4313      	orrs	r3, r2
 800c97e:	3401      	adds	r4, #1
 800c980:	9304      	str	r3, [sp, #16]
 800c982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c986:	4829      	ldr	r0, [pc, #164]	@ (800ca2c <_vfiprintf_r+0x220>)
 800c988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c98c:	2206      	movs	r2, #6
 800c98e:	f7f3 fc1f 	bl	80001d0 <memchr>
 800c992:	2800      	cmp	r0, #0
 800c994:	d03f      	beq.n	800ca16 <_vfiprintf_r+0x20a>
 800c996:	4b26      	ldr	r3, [pc, #152]	@ (800ca30 <_vfiprintf_r+0x224>)
 800c998:	bb1b      	cbnz	r3, 800c9e2 <_vfiprintf_r+0x1d6>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	3307      	adds	r3, #7
 800c99e:	f023 0307 	bic.w	r3, r3, #7
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	9303      	str	r3, [sp, #12]
 800c9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a8:	443b      	add	r3, r7
 800c9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ac:	e76a      	b.n	800c884 <_vfiprintf_r+0x78>
 800c9ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	2001      	movs	r0, #1
 800c9b6:	e7a8      	b.n	800c90a <_vfiprintf_r+0xfe>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	3401      	adds	r4, #1
 800c9bc:	9305      	str	r3, [sp, #20]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	f04f 0c0a 	mov.w	ip, #10
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ca:	3a30      	subs	r2, #48	@ 0x30
 800c9cc:	2a09      	cmp	r2, #9
 800c9ce:	d903      	bls.n	800c9d8 <_vfiprintf_r+0x1cc>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0c6      	beq.n	800c962 <_vfiprintf_r+0x156>
 800c9d4:	9105      	str	r1, [sp, #20]
 800c9d6:	e7c4      	b.n	800c962 <_vfiprintf_r+0x156>
 800c9d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9dc:	4604      	mov	r4, r0
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e7f0      	b.n	800c9c4 <_vfiprintf_r+0x1b8>
 800c9e2:	ab03      	add	r3, sp, #12
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	462a      	mov	r2, r5
 800c9e8:	4b12      	ldr	r3, [pc, #72]	@ (800ca34 <_vfiprintf_r+0x228>)
 800c9ea:	a904      	add	r1, sp, #16
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f7fd fbd5 	bl	800a19c <_printf_float>
 800c9f2:	4607      	mov	r7, r0
 800c9f4:	1c78      	adds	r0, r7, #1
 800c9f6:	d1d6      	bne.n	800c9a6 <_vfiprintf_r+0x19a>
 800c9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9fa:	07d9      	lsls	r1, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_vfiprintf_r+0x1fe>
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	059a      	lsls	r2, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_vfiprintf_r+0x1fe>
 800ca04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca06:	f7fe f925 	bl	800ac54 <__retarget_lock_release_recursive>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	065b      	lsls	r3, r3, #25
 800ca0e:	f53f af1f 	bmi.w	800c850 <_vfiprintf_r+0x44>
 800ca12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca14:	e71e      	b.n	800c854 <_vfiprintf_r+0x48>
 800ca16:	ab03      	add	r3, sp, #12
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <_vfiprintf_r+0x228>)
 800ca1e:	a904      	add	r1, sp, #16
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7fd fe53 	bl	800a6cc <_printf_i>
 800ca26:	e7e4      	b.n	800c9f2 <_vfiprintf_r+0x1e6>
 800ca28:	08020e32 	.word	0x08020e32
 800ca2c:	08020e3c 	.word	0x08020e3c
 800ca30:	0800a19d 	.word	0x0800a19d
 800ca34:	0800c7e9 	.word	0x0800c7e9
 800ca38:	08020e38 	.word	0x08020e38

0800ca3c <__swbuf_r>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	460e      	mov	r6, r1
 800ca40:	4614      	mov	r4, r2
 800ca42:	4605      	mov	r5, r0
 800ca44:	b118      	cbz	r0, 800ca4e <__swbuf_r+0x12>
 800ca46:	6a03      	ldr	r3, [r0, #32]
 800ca48:	b90b      	cbnz	r3, 800ca4e <__swbuf_r+0x12>
 800ca4a:	f7fd ffe9 	bl	800aa20 <__sinit>
 800ca4e:	69a3      	ldr	r3, [r4, #24]
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	071a      	lsls	r2, r3, #28
 800ca56:	d501      	bpl.n	800ca5c <__swbuf_r+0x20>
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	b943      	cbnz	r3, 800ca6e <__swbuf_r+0x32>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f000 f82a 	bl	800cab8 <__swsetup_r>
 800ca64:	b118      	cbz	r0, 800ca6e <__swbuf_r+0x32>
 800ca66:	f04f 37ff 	mov.w	r7, #4294967295
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	6922      	ldr	r2, [r4, #16]
 800ca72:	1a98      	subs	r0, r3, r2
 800ca74:	6963      	ldr	r3, [r4, #20]
 800ca76:	b2f6      	uxtb	r6, r6
 800ca78:	4283      	cmp	r3, r0
 800ca7a:	4637      	mov	r7, r6
 800ca7c:	dc05      	bgt.n	800ca8a <__swbuf_r+0x4e>
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f7ff fda7 	bl	800c5d4 <_fflush_r>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d1ed      	bne.n	800ca66 <__swbuf_r+0x2a>
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	60a3      	str	r3, [r4, #8]
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	6022      	str	r2, [r4, #0]
 800ca96:	701e      	strb	r6, [r3, #0]
 800ca98:	6962      	ldr	r2, [r4, #20]
 800ca9a:	1c43      	adds	r3, r0, #1
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d004      	beq.n	800caaa <__swbuf_r+0x6e>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	07db      	lsls	r3, r3, #31
 800caa4:	d5e1      	bpl.n	800ca6a <__swbuf_r+0x2e>
 800caa6:	2e0a      	cmp	r6, #10
 800caa8:	d1df      	bne.n	800ca6a <__swbuf_r+0x2e>
 800caaa:	4621      	mov	r1, r4
 800caac:	4628      	mov	r0, r5
 800caae:	f7ff fd91 	bl	800c5d4 <_fflush_r>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d0d9      	beq.n	800ca6a <__swbuf_r+0x2e>
 800cab6:	e7d6      	b.n	800ca66 <__swbuf_r+0x2a>

0800cab8 <__swsetup_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4b29      	ldr	r3, [pc, #164]	@ (800cb60 <__swsetup_r+0xa8>)
 800cabc:	4605      	mov	r5, r0
 800cabe:	6818      	ldr	r0, [r3, #0]
 800cac0:	460c      	mov	r4, r1
 800cac2:	b118      	cbz	r0, 800cacc <__swsetup_r+0x14>
 800cac4:	6a03      	ldr	r3, [r0, #32]
 800cac6:	b90b      	cbnz	r3, 800cacc <__swsetup_r+0x14>
 800cac8:	f7fd ffaa 	bl	800aa20 <__sinit>
 800cacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad0:	0719      	lsls	r1, r3, #28
 800cad2:	d422      	bmi.n	800cb1a <__swsetup_r+0x62>
 800cad4:	06da      	lsls	r2, r3, #27
 800cad6:	d407      	bmi.n	800cae8 <__swsetup_r+0x30>
 800cad8:	2209      	movs	r2, #9
 800cada:	602a      	str	r2, [r5, #0]
 800cadc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cae0:	81a3      	strh	r3, [r4, #12]
 800cae2:	f04f 30ff 	mov.w	r0, #4294967295
 800cae6:	e033      	b.n	800cb50 <__swsetup_r+0x98>
 800cae8:	0758      	lsls	r0, r3, #29
 800caea:	d512      	bpl.n	800cb12 <__swsetup_r+0x5a>
 800caec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caee:	b141      	cbz	r1, 800cb02 <__swsetup_r+0x4a>
 800caf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caf4:	4299      	cmp	r1, r3
 800caf6:	d002      	beq.n	800cafe <__swsetup_r+0x46>
 800caf8:	4628      	mov	r0, r5
 800cafa:	f7fe ff15 	bl	800b928 <_free_r>
 800cafe:	2300      	movs	r3, #0
 800cb00:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	6063      	str	r3, [r4, #4]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	f043 0308 	orr.w	r3, r3, #8
 800cb18:	81a3      	strh	r3, [r4, #12]
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	b94b      	cbnz	r3, 800cb32 <__swsetup_r+0x7a>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb28:	d003      	beq.n	800cb32 <__swsetup_r+0x7a>
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f000 f883 	bl	800cc38 <__smakebuf_r>
 800cb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb36:	f013 0201 	ands.w	r2, r3, #1
 800cb3a:	d00a      	beq.n	800cb52 <__swsetup_r+0x9a>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	60a2      	str	r2, [r4, #8]
 800cb40:	6962      	ldr	r2, [r4, #20]
 800cb42:	4252      	negs	r2, r2
 800cb44:	61a2      	str	r2, [r4, #24]
 800cb46:	6922      	ldr	r2, [r4, #16]
 800cb48:	b942      	cbnz	r2, 800cb5c <__swsetup_r+0xa4>
 800cb4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb4e:	d1c5      	bne.n	800cadc <__swsetup_r+0x24>
 800cb50:	bd38      	pop	{r3, r4, r5, pc}
 800cb52:	0799      	lsls	r1, r3, #30
 800cb54:	bf58      	it	pl
 800cb56:	6962      	ldrpl	r2, [r4, #20]
 800cb58:	60a2      	str	r2, [r4, #8]
 800cb5a:	e7f4      	b.n	800cb46 <__swsetup_r+0x8e>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	e7f7      	b.n	800cb50 <__swsetup_r+0x98>
 800cb60:	2000041c 	.word	0x2000041c

0800cb64 <_raise_r>:
 800cb64:	291f      	cmp	r1, #31
 800cb66:	b538      	push	{r3, r4, r5, lr}
 800cb68:	4605      	mov	r5, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	d904      	bls.n	800cb78 <_raise_r+0x14>
 800cb6e:	2316      	movs	r3, #22
 800cb70:	6003      	str	r3, [r0, #0]
 800cb72:	f04f 30ff 	mov.w	r0, #4294967295
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb7a:	b112      	cbz	r2, 800cb82 <_raise_r+0x1e>
 800cb7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb80:	b94b      	cbnz	r3, 800cb96 <_raise_r+0x32>
 800cb82:	4628      	mov	r0, r5
 800cb84:	f000 f830 	bl	800cbe8 <_getpid_r>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb92:	f000 b817 	b.w	800cbc4 <_kill_r>
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d00a      	beq.n	800cbb0 <_raise_r+0x4c>
 800cb9a:	1c59      	adds	r1, r3, #1
 800cb9c:	d103      	bne.n	800cba6 <_raise_r+0x42>
 800cb9e:	2316      	movs	r3, #22
 800cba0:	6003      	str	r3, [r0, #0]
 800cba2:	2001      	movs	r0, #1
 800cba4:	e7e7      	b.n	800cb76 <_raise_r+0x12>
 800cba6:	2100      	movs	r1, #0
 800cba8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cbac:	4620      	mov	r0, r4
 800cbae:	4798      	blx	r3
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	e7e0      	b.n	800cb76 <_raise_r+0x12>

0800cbb4 <raise>:
 800cbb4:	4b02      	ldr	r3, [pc, #8]	@ (800cbc0 <raise+0xc>)
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f7ff bfd3 	b.w	800cb64 <_raise_r>
 800cbbe:	bf00      	nop
 800cbc0:	2000041c 	.word	0x2000041c

0800cbc4 <_kill_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d07      	ldr	r5, [pc, #28]	@ (800cbe4 <_kill_r+0x20>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	4611      	mov	r1, r2
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	f7f4 ff87 	bl	8001ae4 <_kill>
 800cbd6:	1c43      	adds	r3, r0, #1
 800cbd8:	d102      	bne.n	800cbe0 <_kill_r+0x1c>
 800cbda:	682b      	ldr	r3, [r5, #0]
 800cbdc:	b103      	cbz	r3, 800cbe0 <_kill_r+0x1c>
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	bd38      	pop	{r3, r4, r5, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20003e48 	.word	0x20003e48

0800cbe8 <_getpid_r>:
 800cbe8:	f7f4 bf74 	b.w	8001ad4 <_getpid>

0800cbec <__swhatbuf_r>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	460c      	mov	r4, r1
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	b096      	sub	sp, #88	@ 0x58
 800cbf8:	4615      	mov	r5, r2
 800cbfa:	461e      	mov	r6, r3
 800cbfc:	da0d      	bge.n	800cc1a <__swhatbuf_r+0x2e>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc04:	f04f 0100 	mov.w	r1, #0
 800cc08:	bf14      	ite	ne
 800cc0a:	2340      	movne	r3, #64	@ 0x40
 800cc0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc10:	2000      	movs	r0, #0
 800cc12:	6031      	str	r1, [r6, #0]
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	b016      	add	sp, #88	@ 0x58
 800cc18:	bd70      	pop	{r4, r5, r6, pc}
 800cc1a:	466a      	mov	r2, sp
 800cc1c:	f000 f848 	bl	800ccb0 <_fstat_r>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	dbec      	blt.n	800cbfe <__swhatbuf_r+0x12>
 800cc24:	9901      	ldr	r1, [sp, #4]
 800cc26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc2e:	4259      	negs	r1, r3
 800cc30:	4159      	adcs	r1, r3
 800cc32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc36:	e7eb      	b.n	800cc10 <__swhatbuf_r+0x24>

0800cc38 <__smakebuf_r>:
 800cc38:	898b      	ldrh	r3, [r1, #12]
 800cc3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc3c:	079d      	lsls	r5, r3, #30
 800cc3e:	4606      	mov	r6, r0
 800cc40:	460c      	mov	r4, r1
 800cc42:	d507      	bpl.n	800cc54 <__smakebuf_r+0x1c>
 800cc44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	6163      	str	r3, [r4, #20]
 800cc50:	b003      	add	sp, #12
 800cc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc54:	ab01      	add	r3, sp, #4
 800cc56:	466a      	mov	r2, sp
 800cc58:	f7ff ffc8 	bl	800cbec <__swhatbuf_r>
 800cc5c:	9f00      	ldr	r7, [sp, #0]
 800cc5e:	4605      	mov	r5, r0
 800cc60:	4639      	mov	r1, r7
 800cc62:	4630      	mov	r0, r6
 800cc64:	f7fe fed4 	bl	800ba10 <_malloc_r>
 800cc68:	b948      	cbnz	r0, 800cc7e <__smakebuf_r+0x46>
 800cc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6e:	059a      	lsls	r2, r3, #22
 800cc70:	d4ee      	bmi.n	800cc50 <__smakebuf_r+0x18>
 800cc72:	f023 0303 	bic.w	r3, r3, #3
 800cc76:	f043 0302 	orr.w	r3, r3, #2
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	e7e2      	b.n	800cc44 <__smakebuf_r+0xc>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	6020      	str	r0, [r4, #0]
 800cc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc8e:	b15b      	cbz	r3, 800cca8 <__smakebuf_r+0x70>
 800cc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc94:	4630      	mov	r0, r6
 800cc96:	f000 f81d 	bl	800ccd4 <_isatty_r>
 800cc9a:	b128      	cbz	r0, 800cca8 <__smakebuf_r+0x70>
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	f023 0303 	bic.w	r3, r3, #3
 800cca2:	f043 0301 	orr.w	r3, r3, #1
 800cca6:	81a3      	strh	r3, [r4, #12]
 800cca8:	89a3      	ldrh	r3, [r4, #12]
 800ccaa:	431d      	orrs	r5, r3
 800ccac:	81a5      	strh	r5, [r4, #12]
 800ccae:	e7cf      	b.n	800cc50 <__smakebuf_r+0x18>

0800ccb0 <_fstat_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	@ (800ccd0 <_fstat_r+0x20>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	f7f4 ff71 	bl	8001ba4 <_fstat>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d102      	bne.n	800cccc <_fstat_r+0x1c>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b103      	cbz	r3, 800cccc <_fstat_r+0x1c>
 800ccca:	6023      	str	r3, [r4, #0]
 800cccc:	bd38      	pop	{r3, r4, r5, pc}
 800ccce:	bf00      	nop
 800ccd0:	20003e48 	.word	0x20003e48

0800ccd4 <_isatty_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	@ (800ccf0 <_isatty_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7f4 ff70 	bl	8001bc4 <_isatty>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_isatty_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_isatty_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	20003e48 	.word	0x20003e48

0800ccf4 <log10f>:
 800ccf4:	b508      	push	{r3, lr}
 800ccf6:	ed2d 8b02 	vpush	{d8}
 800ccfa:	eeb0 8a40 	vmov.f32	s16, s0
 800ccfe:	f000 f9cf 	bl	800d0a0 <__ieee754_log10f>
 800cd02:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0a:	d60f      	bvs.n	800cd2c <log10f+0x38>
 800cd0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd14:	d80a      	bhi.n	800cd2c <log10f+0x38>
 800cd16:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd1e:	d108      	bne.n	800cd32 <log10f+0x3e>
 800cd20:	f7fd ff6c 	bl	800abfc <__errno>
 800cd24:	2322      	movs	r3, #34	@ 0x22
 800cd26:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800cd48 <log10f+0x54>
 800cd2a:	6003      	str	r3, [r0, #0]
 800cd2c:	ecbd 8b02 	vpop	{d8}
 800cd30:	bd08      	pop	{r3, pc}
 800cd32:	f7fd ff63 	bl	800abfc <__errno>
 800cd36:	ecbd 8b02 	vpop	{d8}
 800cd3a:	2321      	movs	r3, #33	@ 0x21
 800cd3c:	6003      	str	r3, [r0, #0]
 800cd3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd42:	4802      	ldr	r0, [pc, #8]	@ (800cd4c <log10f+0x58>)
 800cd44:	f000 b866 	b.w	800ce14 <nanf>
 800cd48:	ff800000 	.word	0xff800000
 800cd4c:	08020e88 	.word	0x08020e88

0800cd50 <powf>:
 800cd50:	b508      	push	{r3, lr}
 800cd52:	ed2d 8b04 	vpush	{d8-d9}
 800cd56:	eeb0 8a60 	vmov.f32	s16, s1
 800cd5a:	eeb0 9a40 	vmov.f32	s18, s0
 800cd5e:	f000 f9f7 	bl	800d150 <__ieee754_powf>
 800cd62:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6a:	eef0 8a40 	vmov.f32	s17, s0
 800cd6e:	d63e      	bvs.n	800cdee <powf+0x9e>
 800cd70:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd78:	d112      	bne.n	800cda0 <powf+0x50>
 800cd7a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd82:	d039      	beq.n	800cdf8 <powf+0xa8>
 800cd84:	eeb0 0a48 	vmov.f32	s0, s16
 800cd88:	f000 f839 	bl	800cdfe <finitef>
 800cd8c:	b378      	cbz	r0, 800cdee <powf+0x9e>
 800cd8e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd96:	d52a      	bpl.n	800cdee <powf+0x9e>
 800cd98:	f7fd ff30 	bl	800abfc <__errno>
 800cd9c:	2322      	movs	r3, #34	@ 0x22
 800cd9e:	e014      	b.n	800cdca <powf+0x7a>
 800cda0:	f000 f82d 	bl	800cdfe <finitef>
 800cda4:	b998      	cbnz	r0, 800cdce <powf+0x7e>
 800cda6:	eeb0 0a49 	vmov.f32	s0, s18
 800cdaa:	f000 f828 	bl	800cdfe <finitef>
 800cdae:	b170      	cbz	r0, 800cdce <powf+0x7e>
 800cdb0:	eeb0 0a48 	vmov.f32	s0, s16
 800cdb4:	f000 f823 	bl	800cdfe <finitef>
 800cdb8:	b148      	cbz	r0, 800cdce <powf+0x7e>
 800cdba:	eef4 8a68 	vcmp.f32	s17, s17
 800cdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc2:	d7e9      	bvc.n	800cd98 <powf+0x48>
 800cdc4:	f7fd ff1a 	bl	800abfc <__errno>
 800cdc8:	2321      	movs	r3, #33	@ 0x21
 800cdca:	6003      	str	r3, [r0, #0]
 800cdcc:	e00f      	b.n	800cdee <powf+0x9e>
 800cdce:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd6:	d10a      	bne.n	800cdee <powf+0x9e>
 800cdd8:	eeb0 0a49 	vmov.f32	s0, s18
 800cddc:	f000 f80f 	bl	800cdfe <finitef>
 800cde0:	b128      	cbz	r0, 800cdee <powf+0x9e>
 800cde2:	eeb0 0a48 	vmov.f32	s0, s16
 800cde6:	f000 f80a 	bl	800cdfe <finitef>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d1d4      	bne.n	800cd98 <powf+0x48>
 800cdee:	eeb0 0a68 	vmov.f32	s0, s17
 800cdf2:	ecbd 8b04 	vpop	{d8-d9}
 800cdf6:	bd08      	pop	{r3, pc}
 800cdf8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800cdfc:	e7f7      	b.n	800cdee <powf+0x9e>

0800cdfe <finitef>:
 800cdfe:	ee10 3a10 	vmov	r3, s0
 800ce02:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ce06:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ce0a:	bfac      	ite	ge
 800ce0c:	2000      	movge	r0, #0
 800ce0e:	2001      	movlt	r0, #1
 800ce10:	4770      	bx	lr
	...

0800ce14 <nanf>:
 800ce14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ce1c <nanf+0x8>
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	7fc00000 	.word	0x7fc00000

0800ce20 <with_errnof>:
 800ce20:	b510      	push	{r4, lr}
 800ce22:	ed2d 8b02 	vpush	{d8}
 800ce26:	eeb0 8a40 	vmov.f32	s16, s0
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	f7fd fee6 	bl	800abfc <__errno>
 800ce30:	eeb0 0a48 	vmov.f32	s0, s16
 800ce34:	ecbd 8b02 	vpop	{d8}
 800ce38:	6004      	str	r4, [r0, #0]
 800ce3a:	bd10      	pop	{r4, pc}

0800ce3c <xflowf>:
 800ce3c:	b130      	cbz	r0, 800ce4c <xflowf+0x10>
 800ce3e:	eef1 7a40 	vneg.f32	s15, s0
 800ce42:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ce46:	2022      	movs	r0, #34	@ 0x22
 800ce48:	f7ff bfea 	b.w	800ce20 <with_errnof>
 800ce4c:	eef0 7a40 	vmov.f32	s15, s0
 800ce50:	e7f7      	b.n	800ce42 <xflowf+0x6>
	...

0800ce54 <__math_uflowf>:
 800ce54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ce5c <__math_uflowf+0x8>
 800ce58:	f7ff bff0 	b.w	800ce3c <xflowf>
 800ce5c:	10000000 	.word	0x10000000

0800ce60 <__math_oflowf>:
 800ce60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ce68 <__math_oflowf+0x8>
 800ce64:	f7ff bfea 	b.w	800ce3c <xflowf>
 800ce68:	70000000 	.word	0x70000000

0800ce6c <__ieee754_sqrtf>:
 800ce6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ce70:	4770      	bx	lr
	...

0800ce74 <roundf>:
 800ce74:	ee10 0a10 	vmov	r0, s0
 800ce78:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ce7c:	3a7f      	subs	r2, #127	@ 0x7f
 800ce7e:	2a16      	cmp	r2, #22
 800ce80:	dc15      	bgt.n	800ceae <roundf+0x3a>
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	da08      	bge.n	800ce98 <roundf+0x24>
 800ce86:	3201      	adds	r2, #1
 800ce88:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800ce8c:	d101      	bne.n	800ce92 <roundf+0x1e>
 800ce8e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800ce92:	ee00 3a10 	vmov	s0, r3
 800ce96:	4770      	bx	lr
 800ce98:	4907      	ldr	r1, [pc, #28]	@ (800ceb8 <roundf+0x44>)
 800ce9a:	4111      	asrs	r1, r2
 800ce9c:	4201      	tst	r1, r0
 800ce9e:	d0fa      	beq.n	800ce96 <roundf+0x22>
 800cea0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cea4:	4113      	asrs	r3, r2
 800cea6:	4403      	add	r3, r0
 800cea8:	ea23 0301 	bic.w	r3, r3, r1
 800ceac:	e7f1      	b.n	800ce92 <roundf+0x1e>
 800ceae:	2a80      	cmp	r2, #128	@ 0x80
 800ceb0:	d1f1      	bne.n	800ce96 <roundf+0x22>
 800ceb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ceb6:	4770      	bx	lr
 800ceb8:	007fffff 	.word	0x007fffff

0800cebc <__ieee754_logf>:
 800cebc:	ee10 3a10 	vmov	r3, s0
 800cec0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cec4:	d106      	bne.n	800ced4 <__ieee754_logf+0x18>
 800cec6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800d060 <__ieee754_logf+0x1a4>
 800ceca:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800d064 <__ieee754_logf+0x1a8>
 800cece:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ced2:	4770      	bx	lr
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	461a      	mov	r2, r3
 800ced8:	da02      	bge.n	800cee0 <__ieee754_logf+0x24>
 800ceda:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cede:	e7f4      	b.n	800ceca <__ieee754_logf+0xe>
 800cee0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cee4:	db02      	blt.n	800ceec <__ieee754_logf+0x30>
 800cee6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ceea:	4770      	bx	lr
 800ceec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cef0:	bfb8      	it	lt
 800cef2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800d068 <__ieee754_logf+0x1ac>
 800cef6:	485d      	ldr	r0, [pc, #372]	@ (800d06c <__ieee754_logf+0x1b0>)
 800cef8:	bfbe      	ittt	lt
 800cefa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cefe:	f06f 0118 	mvnlt.w	r1, #24
 800cf02:	ee17 2a90 	vmovlt	r2, s15
 800cf06:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800cf0a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800cf0e:	4410      	add	r0, r2
 800cf10:	bfa8      	it	ge
 800cf12:	2100      	movge	r1, #0
 800cf14:	3b7f      	subs	r3, #127	@ 0x7f
 800cf16:	440b      	add	r3, r1
 800cf18:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800cf1c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800cf20:	4311      	orrs	r1, r2
 800cf22:	ee00 1a10 	vmov	s0, r1
 800cf26:	4952      	ldr	r1, [pc, #328]	@ (800d070 <__ieee754_logf+0x1b4>)
 800cf28:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800cf2c:	f102 000f 	add.w	r0, r2, #15
 800cf30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cf34:	4001      	ands	r1, r0
 800cf36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf3a:	bb89      	cbnz	r1, 800cfa0 <__ieee754_logf+0xe4>
 800cf3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf44:	d10f      	bne.n	800cf66 <__ieee754_logf+0xaa>
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 8087 	beq.w	800d05a <__ieee754_logf+0x19e>
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800d074 <__ieee754_logf+0x1b8>
 800cf54:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800d078 <__ieee754_logf+0x1bc>
 800cf58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf5c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cf60:	eea7 0a87 	vfma.f32	s0, s15, s14
 800cf64:	4770      	bx	lr
 800cf66:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800d07c <__ieee754_logf+0x1c0>
 800cf6a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cf6e:	eee0 7a66 	vfms.f32	s15, s0, s13
 800cf72:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cf76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf7a:	b913      	cbnz	r3, 800cf82 <__ieee754_logf+0xc6>
 800cf7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cf80:	4770      	bx	lr
 800cf82:	ee07 3a90 	vmov	s15, r3
 800cf86:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d074 <__ieee754_logf+0x1b8>
 800cf8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf8e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cf92:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cf96:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d078 <__ieee754_logf+0x1bc>
 800cf9a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800cf9e:	4770      	bx	lr
 800cfa0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cfa4:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cfa8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d080 <__ieee754_logf+0x1c4>
 800cfac:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800d084 <__ieee754_logf+0x1c8>
 800cfb0:	4935      	ldr	r1, [pc, #212]	@ (800d088 <__ieee754_logf+0x1cc>)
 800cfb2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800cfb6:	4411      	add	r1, r2
 800cfb8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800cfbc:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800cfc0:	430a      	orrs	r2, r1
 800cfc2:	2a00      	cmp	r2, #0
 800cfc4:	ee07 3a90 	vmov	s15, r3
 800cfc8:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cfcc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cfd0:	ee25 7a05 	vmul.f32	s14, s10, s10
 800cfd4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800d08c <__ieee754_logf+0x1d0>
 800cfd8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cfdc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800d090 <__ieee754_logf+0x1d4>
 800cfe0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cfe4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800d094 <__ieee754_logf+0x1d8>
 800cfe8:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cfec:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800d098 <__ieee754_logf+0x1dc>
 800cff0:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cff4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800d09c <__ieee754_logf+0x1e0>
 800cff8:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cffc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d000:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d004:	dd1a      	ble.n	800d03c <__ieee754_logf+0x180>
 800d006:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d00a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d00e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d012:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d016:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d01a:	b913      	cbnz	r3, 800d022 <__ieee754_logf+0x166>
 800d01c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d020:	e7ac      	b.n	800cf7c <__ieee754_logf+0xc0>
 800d022:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800d074 <__ieee754_logf+0x1b8>
 800d026:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d02a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d02e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d032:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800d078 <__ieee754_logf+0x1bc>
 800d036:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d03a:	4770      	bx	lr
 800d03c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d040:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d044:	b913      	cbnz	r3, 800d04c <__ieee754_logf+0x190>
 800d046:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d04a:	4770      	bx	lr
 800d04c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800d074 <__ieee754_logf+0x1b8>
 800d050:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d054:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d058:	e7eb      	b.n	800d032 <__ieee754_logf+0x176>
 800d05a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800d064 <__ieee754_logf+0x1a8>
 800d05e:	4770      	bx	lr
 800d060:	cc000000 	.word	0xcc000000
 800d064:	00000000 	.word	0x00000000
 800d068:	4c000000 	.word	0x4c000000
 800d06c:	004afb20 	.word	0x004afb20
 800d070:	007ffff0 	.word	0x007ffff0
 800d074:	3717f7d1 	.word	0x3717f7d1
 800d078:	3f317180 	.word	0x3f317180
 800d07c:	3eaaaaab 	.word	0x3eaaaaab
 800d080:	3e1cd04f 	.word	0x3e1cd04f
 800d084:	3e178897 	.word	0x3e178897
 800d088:	ffcf5c30 	.word	0xffcf5c30
 800d08c:	3e638e29 	.word	0x3e638e29
 800d090:	3ecccccd 	.word	0x3ecccccd
 800d094:	3e3a3325 	.word	0x3e3a3325
 800d098:	3e924925 	.word	0x3e924925
 800d09c:	3f2aaaab 	.word	0x3f2aaaab

0800d0a0 <__ieee754_log10f>:
 800d0a0:	b508      	push	{r3, lr}
 800d0a2:	ee10 3a10 	vmov	r3, s0
 800d0a6:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d0aa:	ed2d 8b02 	vpush	{d8}
 800d0ae:	d108      	bne.n	800d0c2 <__ieee754_log10f+0x22>
 800d0b0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800d138 <__ieee754_log10f+0x98>
 800d0b4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800d13c <__ieee754_log10f+0x9c>
 800d0b8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d0bc:	ecbd 8b02 	vpop	{d8}
 800d0c0:	bd08      	pop	{r3, pc}
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	da02      	bge.n	800d0ce <__ieee754_log10f+0x2e>
 800d0c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d0cc:	e7f2      	b.n	800d0b4 <__ieee754_log10f+0x14>
 800d0ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0d2:	db02      	blt.n	800d0da <__ieee754_log10f+0x3a>
 800d0d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d0d8:	e7f0      	b.n	800d0bc <__ieee754_log10f+0x1c>
 800d0da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0de:	bfbf      	itttt	lt
 800d0e0:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800d140 <__ieee754_log10f+0xa0>
 800d0e4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d0e8:	f06f 0118 	mvnlt.w	r1, #24
 800d0ec:	ee17 2a90 	vmovlt	r2, s15
 800d0f0:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d0f4:	bfa8      	it	ge
 800d0f6:	2100      	movge	r1, #0
 800d0f8:	3b7f      	subs	r3, #127	@ 0x7f
 800d0fa:	440b      	add	r3, r1
 800d0fc:	0fd9      	lsrs	r1, r3, #31
 800d0fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d10a:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800d10e:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d112:	ee00 3a10 	vmov	s0, r3
 800d116:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800d11a:	f7ff fecf 	bl	800cebc <__ieee754_logf>
 800d11e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d144 <__ieee754_log10f+0xa4>
 800d122:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d126:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d148 <__ieee754_log10f+0xa8>
 800d12a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d12e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800d14c <__ieee754_log10f+0xac>
 800d132:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d136:	e7c1      	b.n	800d0bc <__ieee754_log10f+0x1c>
 800d138:	cc000000 	.word	0xcc000000
 800d13c:	00000000 	.word	0x00000000
 800d140:	4c000000 	.word	0x4c000000
 800d144:	3ede5bd9 	.word	0x3ede5bd9
 800d148:	355427db 	.word	0x355427db
 800d14c:	3e9a2080 	.word	0x3e9a2080

0800d150 <__ieee754_powf>:
 800d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d154:	ee10 4a90 	vmov	r4, s1
 800d158:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800d15c:	ed2d 8b02 	vpush	{d8}
 800d160:	ee10 6a10 	vmov	r6, s0
 800d164:	eeb0 8a40 	vmov.f32	s16, s0
 800d168:	eef0 8a60 	vmov.f32	s17, s1
 800d16c:	d10c      	bne.n	800d188 <__ieee754_powf+0x38>
 800d16e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800d172:	0076      	lsls	r6, r6, #1
 800d174:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800d178:	f240 8274 	bls.w	800d664 <__ieee754_powf+0x514>
 800d17c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d180:	ecbd 8b02 	vpop	{d8}
 800d184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d188:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800d18c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800d190:	d802      	bhi.n	800d198 <__ieee754_powf+0x48>
 800d192:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d196:	d908      	bls.n	800d1aa <__ieee754_powf+0x5a>
 800d198:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800d19c:	d1ee      	bne.n	800d17c <__ieee754_powf+0x2c>
 800d19e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d1a2:	0064      	lsls	r4, r4, #1
 800d1a4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d1a8:	e7e6      	b.n	800d178 <__ieee754_powf+0x28>
 800d1aa:	2e00      	cmp	r6, #0
 800d1ac:	da1f      	bge.n	800d1ee <__ieee754_powf+0x9e>
 800d1ae:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800d1b2:	f080 8260 	bcs.w	800d676 <__ieee754_powf+0x526>
 800d1b6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d1ba:	d32f      	bcc.n	800d21c <__ieee754_powf+0xcc>
 800d1bc:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800d1c0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d1c4:	fa49 f503 	asr.w	r5, r9, r3
 800d1c8:	fa05 f303 	lsl.w	r3, r5, r3
 800d1cc:	454b      	cmp	r3, r9
 800d1ce:	d123      	bne.n	800d218 <__ieee754_powf+0xc8>
 800d1d0:	f005 0501 	and.w	r5, r5, #1
 800d1d4:	f1c5 0502 	rsb	r5, r5, #2
 800d1d8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d1dc:	d11f      	bne.n	800d21e <__ieee754_powf+0xce>
 800d1de:	2c00      	cmp	r4, #0
 800d1e0:	f280 8246 	bge.w	800d670 <__ieee754_powf+0x520>
 800d1e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d1e8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d1ec:	e7c8      	b.n	800d180 <__ieee754_powf+0x30>
 800d1ee:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d1f2:	d111      	bne.n	800d218 <__ieee754_powf+0xc8>
 800d1f4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800d1f8:	f000 8234 	beq.w	800d664 <__ieee754_powf+0x514>
 800d1fc:	d906      	bls.n	800d20c <__ieee754_powf+0xbc>
 800d1fe:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800d514 <__ieee754_powf+0x3c4>
 800d202:	2c00      	cmp	r4, #0
 800d204:	bfa8      	it	ge
 800d206:	eeb0 0a68 	vmovge.f32	s0, s17
 800d20a:	e7b9      	b.n	800d180 <__ieee754_powf+0x30>
 800d20c:	2c00      	cmp	r4, #0
 800d20e:	f280 822c 	bge.w	800d66a <__ieee754_powf+0x51a>
 800d212:	eeb1 0a68 	vneg.f32	s0, s17
 800d216:	e7b3      	b.n	800d180 <__ieee754_powf+0x30>
 800d218:	2500      	movs	r5, #0
 800d21a:	e7dd      	b.n	800d1d8 <__ieee754_powf+0x88>
 800d21c:	2500      	movs	r5, #0
 800d21e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d222:	d102      	bne.n	800d22a <__ieee754_powf+0xda>
 800d224:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d228:	e7aa      	b.n	800d180 <__ieee754_powf+0x30>
 800d22a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d22e:	f040 8227 	bne.w	800d680 <__ieee754_powf+0x530>
 800d232:	2e00      	cmp	r6, #0
 800d234:	f2c0 8224 	blt.w	800d680 <__ieee754_powf+0x530>
 800d238:	eeb0 0a48 	vmov.f32	s0, s16
 800d23c:	ecbd 8b02 	vpop	{d8}
 800d240:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d244:	f7ff be12 	b.w	800ce6c <__ieee754_sqrtf>
 800d248:	2d01      	cmp	r5, #1
 800d24a:	d199      	bne.n	800d180 <__ieee754_powf+0x30>
 800d24c:	eeb1 0a40 	vneg.f32	s0, s0
 800d250:	e796      	b.n	800d180 <__ieee754_powf+0x30>
 800d252:	0ff0      	lsrs	r0, r6, #31
 800d254:	3801      	subs	r0, #1
 800d256:	ea55 0300 	orrs.w	r3, r5, r0
 800d25a:	d104      	bne.n	800d266 <__ieee754_powf+0x116>
 800d25c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d260:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d264:	e78c      	b.n	800d180 <__ieee754_powf+0x30>
 800d266:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800d26a:	d96d      	bls.n	800d348 <__ieee754_powf+0x1f8>
 800d26c:	4baa      	ldr	r3, [pc, #680]	@ (800d518 <__ieee754_powf+0x3c8>)
 800d26e:	4598      	cmp	r8, r3
 800d270:	d808      	bhi.n	800d284 <__ieee754_powf+0x134>
 800d272:	2c00      	cmp	r4, #0
 800d274:	da0b      	bge.n	800d28e <__ieee754_powf+0x13e>
 800d276:	2000      	movs	r0, #0
 800d278:	ecbd 8b02 	vpop	{d8}
 800d27c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d280:	f7ff bdee 	b.w	800ce60 <__math_oflowf>
 800d284:	4ba5      	ldr	r3, [pc, #660]	@ (800d51c <__ieee754_powf+0x3cc>)
 800d286:	4598      	cmp	r8, r3
 800d288:	d908      	bls.n	800d29c <__ieee754_powf+0x14c>
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	dcf3      	bgt.n	800d276 <__ieee754_powf+0x126>
 800d28e:	2000      	movs	r0, #0
 800d290:	ecbd 8b02 	vpop	{d8}
 800d294:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d298:	f7ff bddc 	b.w	800ce54 <__math_uflowf>
 800d29c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d2a4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800d520 <__ieee754_powf+0x3d0>
 800d2a8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800d2ac:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d2b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d2b4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d2b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d2bc:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800d524 <__ieee754_powf+0x3d4>
 800d2c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800d528 <__ieee754_powf+0x3d8>
 800d2c8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d2cc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800d52c <__ieee754_powf+0x3dc>
 800d2d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d2d4:	eeb0 7a67 	vmov.f32	s14, s15
 800d2d8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800d2dc:	ee17 3a10 	vmov	r3, s14
 800d2e0:	f36f 030b 	bfc	r3, #0, #12
 800d2e4:	ee07 3a10 	vmov	s14, r3
 800d2e8:	eeb0 6a47 	vmov.f32	s12, s14
 800d2ec:	eea0 6a66 	vfms.f32	s12, s0, s13
 800d2f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d2f4:	3d01      	subs	r5, #1
 800d2f6:	4305      	orrs	r5, r0
 800d2f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2fc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800d300:	f36f 040b 	bfc	r4, #0, #12
 800d304:	bf18      	it	ne
 800d306:	eeb0 8a66 	vmovne.f32	s16, s13
 800d30a:	ee06 4a90 	vmov	s13, r4
 800d30e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d312:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800d316:	ee67 7a26 	vmul.f32	s15, s14, s13
 800d31a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d31e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d322:	ee17 1a10 	vmov	r1, s14
 800d326:	2900      	cmp	r1, #0
 800d328:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d32c:	f340 80dd 	ble.w	800d4ea <__ieee754_powf+0x39a>
 800d330:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800d334:	f240 80ca 	bls.w	800d4cc <__ieee754_powf+0x37c>
 800d338:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d340:	bf4c      	ite	mi
 800d342:	2001      	movmi	r0, #1
 800d344:	2000      	movpl	r0, #0
 800d346:	e797      	b.n	800d278 <__ieee754_powf+0x128>
 800d348:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800d34c:	bf01      	itttt	eq
 800d34e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800d530 <__ieee754_powf+0x3e0>
 800d352:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d356:	f06f 0317 	mvneq.w	r3, #23
 800d35a:	ee17 7a90 	vmoveq	r7, s15
 800d35e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800d362:	bf18      	it	ne
 800d364:	2300      	movne	r3, #0
 800d366:	3a7f      	subs	r2, #127	@ 0x7f
 800d368:	441a      	add	r2, r3
 800d36a:	4b72      	ldr	r3, [pc, #456]	@ (800d534 <__ieee754_powf+0x3e4>)
 800d36c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800d370:	429f      	cmp	r7, r3
 800d372:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800d376:	dd06      	ble.n	800d386 <__ieee754_powf+0x236>
 800d378:	4b6f      	ldr	r3, [pc, #444]	@ (800d538 <__ieee754_powf+0x3e8>)
 800d37a:	429f      	cmp	r7, r3
 800d37c:	f340 80a4 	ble.w	800d4c8 <__ieee754_powf+0x378>
 800d380:	3201      	adds	r2, #1
 800d382:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800d386:	2600      	movs	r6, #0
 800d388:	4b6c      	ldr	r3, [pc, #432]	@ (800d53c <__ieee754_powf+0x3ec>)
 800d38a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800d38e:	ee07 1a10 	vmov	s14, r1
 800d392:	edd3 5a00 	vldr	s11, [r3]
 800d396:	4b6a      	ldr	r3, [pc, #424]	@ (800d540 <__ieee754_powf+0x3f0>)
 800d398:	ee75 7a87 	vadd.f32	s15, s11, s14
 800d39c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3a0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800d3a4:	1049      	asrs	r1, r1, #1
 800d3a6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800d3aa:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800d3ae:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800d3b2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800d3b6:	ee07 1a90 	vmov	s15, r1
 800d3ba:	ee26 5a24 	vmul.f32	s10, s12, s9
 800d3be:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800d3c2:	ee15 7a10 	vmov	r7, s10
 800d3c6:	401f      	ands	r7, r3
 800d3c8:	ee06 7a90 	vmov	s13, r7
 800d3cc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800d3d0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d3d4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800d3d8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d3dc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d544 <__ieee754_powf+0x3f4>
 800d3e0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800d548 <__ieee754_powf+0x3f8>
 800d3e4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d3e8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800d54c <__ieee754_powf+0x3fc>
 800d3ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d3f0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800d520 <__ieee754_powf+0x3d0>
 800d3f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d3f8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800d550 <__ieee754_powf+0x400>
 800d3fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d400:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800d554 <__ieee754_powf+0x404>
 800d404:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d408:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d40c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800d410:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800d414:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d418:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800d41c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800d420:	eef0 5a67 	vmov.f32	s11, s15
 800d424:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800d428:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d42c:	ee15 1a90 	vmov	r1, s11
 800d430:	4019      	ands	r1, r3
 800d432:	ee05 1a90 	vmov	s11, r1
 800d436:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d43a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800d43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d442:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d446:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d44a:	eeb0 6a67 	vmov.f32	s12, s15
 800d44e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d452:	ee16 1a10 	vmov	r1, s12
 800d456:	4019      	ands	r1, r3
 800d458:	ee06 1a10 	vmov	s12, r1
 800d45c:	eeb0 7a46 	vmov.f32	s14, s12
 800d460:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800d464:	493c      	ldr	r1, [pc, #240]	@ (800d558 <__ieee754_powf+0x408>)
 800d466:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800d46a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d46e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800d55c <__ieee754_powf+0x40c>
 800d472:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800d560 <__ieee754_powf+0x410>
 800d476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d47a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800d564 <__ieee754_powf+0x414>
 800d47e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d482:	ed91 7a00 	vldr	s14, [r1]
 800d486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d48a:	ee07 2a10 	vmov	s14, r2
 800d48e:	4a36      	ldr	r2, [pc, #216]	@ (800d568 <__ieee754_powf+0x418>)
 800d490:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d494:	eeb0 7a67 	vmov.f32	s14, s15
 800d498:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d49c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800d4a0:	ed92 5a00 	vldr	s10, [r2]
 800d4a4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d4a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d4ac:	ee17 2a10 	vmov	r2, s14
 800d4b0:	401a      	ands	r2, r3
 800d4b2:	ee07 2a10 	vmov	s14, r2
 800d4b6:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d4ba:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d4be:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d4c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4c6:	e715      	b.n	800d2f4 <__ieee754_powf+0x1a4>
 800d4c8:	2601      	movs	r6, #1
 800d4ca:	e75d      	b.n	800d388 <__ieee754_powf+0x238>
 800d4cc:	d152      	bne.n	800d574 <__ieee754_powf+0x424>
 800d4ce:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d56c <__ieee754_powf+0x41c>
 800d4d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4d6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d4da:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e2:	f73f af29 	bgt.w	800d338 <__ieee754_powf+0x1e8>
 800d4e6:	2386      	movs	r3, #134	@ 0x86
 800d4e8:	e048      	b.n	800d57c <__ieee754_powf+0x42c>
 800d4ea:	4a21      	ldr	r2, [pc, #132]	@ (800d570 <__ieee754_powf+0x420>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d907      	bls.n	800d500 <__ieee754_powf+0x3b0>
 800d4f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f8:	bf4c      	ite	mi
 800d4fa:	2001      	movmi	r0, #1
 800d4fc:	2000      	movpl	r0, #0
 800d4fe:	e6c7      	b.n	800d290 <__ieee754_powf+0x140>
 800d500:	d138      	bne.n	800d574 <__ieee754_powf+0x424>
 800d502:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d506:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50e:	dbea      	blt.n	800d4e6 <__ieee754_powf+0x396>
 800d510:	e7ee      	b.n	800d4f0 <__ieee754_powf+0x3a0>
 800d512:	bf00      	nop
 800d514:	00000000 	.word	0x00000000
 800d518:	3f7ffff3 	.word	0x3f7ffff3
 800d51c:	3f800007 	.word	0x3f800007
 800d520:	3eaaaaab 	.word	0x3eaaaaab
 800d524:	3fb8aa00 	.word	0x3fb8aa00
 800d528:	3fb8aa3b 	.word	0x3fb8aa3b
 800d52c:	36eca570 	.word	0x36eca570
 800d530:	4b800000 	.word	0x4b800000
 800d534:	001cc471 	.word	0x001cc471
 800d538:	005db3d6 	.word	0x005db3d6
 800d53c:	0802109c 	.word	0x0802109c
 800d540:	fffff000 	.word	0xfffff000
 800d544:	3e6c3255 	.word	0x3e6c3255
 800d548:	3e53f142 	.word	0x3e53f142
 800d54c:	3e8ba305 	.word	0x3e8ba305
 800d550:	3edb6db7 	.word	0x3edb6db7
 800d554:	3f19999a 	.word	0x3f19999a
 800d558:	0802108c 	.word	0x0802108c
 800d55c:	3f76384f 	.word	0x3f76384f
 800d560:	3f763800 	.word	0x3f763800
 800d564:	369dc3a0 	.word	0x369dc3a0
 800d568:	08021094 	.word	0x08021094
 800d56c:	3338aa3c 	.word	0x3338aa3c
 800d570:	43160000 	.word	0x43160000
 800d574:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d578:	d96f      	bls.n	800d65a <__ieee754_powf+0x50a>
 800d57a:	15db      	asrs	r3, r3, #23
 800d57c:	3b7e      	subs	r3, #126	@ 0x7e
 800d57e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800d582:	4118      	asrs	r0, r3
 800d584:	4408      	add	r0, r1
 800d586:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d58a:	4a4e      	ldr	r2, [pc, #312]	@ (800d6c4 <__ieee754_powf+0x574>)
 800d58c:	3b7f      	subs	r3, #127	@ 0x7f
 800d58e:	411a      	asrs	r2, r3
 800d590:	4002      	ands	r2, r0
 800d592:	ee07 2a10 	vmov	s14, r2
 800d596:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800d59a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d59e:	f1c3 0317 	rsb	r3, r3, #23
 800d5a2:	4118      	asrs	r0, r3
 800d5a4:	2900      	cmp	r1, #0
 800d5a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5aa:	bfb8      	it	lt
 800d5ac:	4240      	neglt	r0, r0
 800d5ae:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800d5b2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800d6c8 <__ieee754_powf+0x578>
 800d5b6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800d6cc <__ieee754_powf+0x57c>
 800d5ba:	ee16 3a90 	vmov	r3, s13
 800d5be:	f36f 030b 	bfc	r3, #0, #12
 800d5c2:	ee06 3a90 	vmov	s13, r3
 800d5c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d5ca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d5ce:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d5d2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800d6d0 <__ieee754_powf+0x580>
 800d5d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5da:	eee0 7a87 	vfma.f32	s15, s1, s14
 800d5de:	eeb0 7a67 	vmov.f32	s14, s15
 800d5e2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800d5e6:	eef0 5a47 	vmov.f32	s11, s14
 800d5ea:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800d5ee:	ee67 6a07 	vmul.f32	s13, s14, s14
 800d5f2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d5f6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800d6d4 <__ieee754_powf+0x584>
 800d5fa:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800d6d8 <__ieee754_powf+0x588>
 800d5fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d602:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d6dc <__ieee754_powf+0x58c>
 800d606:	eee6 5a26 	vfma.f32	s11, s12, s13
 800d60a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800d6e0 <__ieee754_powf+0x590>
 800d60e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800d612:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d6e4 <__ieee754_powf+0x594>
 800d616:	eee6 5a26 	vfma.f32	s11, s12, s13
 800d61a:	eeb0 6a47 	vmov.f32	s12, s14
 800d61e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800d622:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d626:	ee67 5a06 	vmul.f32	s11, s14, s12
 800d62a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d62e:	eee7 7a27 	vfma.f32	s15, s14, s15
 800d632:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d636:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d63a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d63e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d642:	ee10 3a10 	vmov	r3, s0
 800d646:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d64a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d64e:	da06      	bge.n	800d65e <__ieee754_powf+0x50e>
 800d650:	f000 f854 	bl	800d6fc <scalbnf>
 800d654:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d658:	e592      	b.n	800d180 <__ieee754_powf+0x30>
 800d65a:	2000      	movs	r0, #0
 800d65c:	e7a7      	b.n	800d5ae <__ieee754_powf+0x45e>
 800d65e:	ee00 3a10 	vmov	s0, r3
 800d662:	e7f7      	b.n	800d654 <__ieee754_powf+0x504>
 800d664:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d668:	e58a      	b.n	800d180 <__ieee754_powf+0x30>
 800d66a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800d6e8 <__ieee754_powf+0x598>
 800d66e:	e587      	b.n	800d180 <__ieee754_powf+0x30>
 800d670:	eeb0 0a48 	vmov.f32	s0, s16
 800d674:	e584      	b.n	800d180 <__ieee754_powf+0x30>
 800d676:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d67a:	f43f adbb 	beq.w	800d1f4 <__ieee754_powf+0xa4>
 800d67e:	2502      	movs	r5, #2
 800d680:	eeb0 0a48 	vmov.f32	s0, s16
 800d684:	f000 f832 	bl	800d6ec <fabsf>
 800d688:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d68c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d690:	4647      	mov	r7, r8
 800d692:	d003      	beq.n	800d69c <__ieee754_powf+0x54c>
 800d694:	f1b8 0f00 	cmp.w	r8, #0
 800d698:	f47f addb 	bne.w	800d252 <__ieee754_powf+0x102>
 800d69c:	2c00      	cmp	r4, #0
 800d69e:	bfbc      	itt	lt
 800d6a0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800d6a4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d6a8:	2e00      	cmp	r6, #0
 800d6aa:	f6bf ad69 	bge.w	800d180 <__ieee754_powf+0x30>
 800d6ae:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800d6b2:	ea58 0805 	orrs.w	r8, r8, r5
 800d6b6:	f47f adc7 	bne.w	800d248 <__ieee754_powf+0xf8>
 800d6ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d6be:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d6c2:	e55d      	b.n	800d180 <__ieee754_powf+0x30>
 800d6c4:	ff800000 	.word	0xff800000
 800d6c8:	3f317218 	.word	0x3f317218
 800d6cc:	3f317200 	.word	0x3f317200
 800d6d0:	35bfbe8c 	.word	0x35bfbe8c
 800d6d4:	b5ddea0e 	.word	0xb5ddea0e
 800d6d8:	3331bb4c 	.word	0x3331bb4c
 800d6dc:	388ab355 	.word	0x388ab355
 800d6e0:	bb360b61 	.word	0xbb360b61
 800d6e4:	3e2aaaab 	.word	0x3e2aaaab
 800d6e8:	00000000 	.word	0x00000000

0800d6ec <fabsf>:
 800d6ec:	ee10 3a10 	vmov	r3, s0
 800d6f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6f4:	ee00 3a10 	vmov	s0, r3
 800d6f8:	4770      	bx	lr
	...

0800d6fc <scalbnf>:
 800d6fc:	ee10 3a10 	vmov	r3, s0
 800d700:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d704:	d02b      	beq.n	800d75e <scalbnf+0x62>
 800d706:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d70a:	d302      	bcc.n	800d712 <scalbnf+0x16>
 800d70c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d710:	4770      	bx	lr
 800d712:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d716:	d123      	bne.n	800d760 <scalbnf+0x64>
 800d718:	4b24      	ldr	r3, [pc, #144]	@ (800d7ac <scalbnf+0xb0>)
 800d71a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d7b0 <scalbnf+0xb4>
 800d71e:	4298      	cmp	r0, r3
 800d720:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d724:	db17      	blt.n	800d756 <scalbnf+0x5a>
 800d726:	ee10 3a10 	vmov	r3, s0
 800d72a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d72e:	3a19      	subs	r2, #25
 800d730:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d734:	4288      	cmp	r0, r1
 800d736:	dd15      	ble.n	800d764 <scalbnf+0x68>
 800d738:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d7b4 <scalbnf+0xb8>
 800d73c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d7b8 <scalbnf+0xbc>
 800d740:	ee10 3a10 	vmov	r3, s0
 800d744:	eeb0 7a67 	vmov.f32	s14, s15
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bfb8      	it	lt
 800d74c:	eef0 7a66 	vmovlt.f32	s15, s13
 800d750:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d754:	4770      	bx	lr
 800d756:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d7bc <scalbnf+0xc0>
 800d75a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d75e:	4770      	bx	lr
 800d760:	0dd2      	lsrs	r2, r2, #23
 800d762:	e7e5      	b.n	800d730 <scalbnf+0x34>
 800d764:	4410      	add	r0, r2
 800d766:	28fe      	cmp	r0, #254	@ 0xfe
 800d768:	dce6      	bgt.n	800d738 <scalbnf+0x3c>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	dd06      	ble.n	800d77c <scalbnf+0x80>
 800d76e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d772:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d776:	ee00 3a10 	vmov	s0, r3
 800d77a:	4770      	bx	lr
 800d77c:	f110 0f16 	cmn.w	r0, #22
 800d780:	da09      	bge.n	800d796 <scalbnf+0x9a>
 800d782:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d7bc <scalbnf+0xc0>
 800d786:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d7c0 <scalbnf+0xc4>
 800d78a:	ee10 3a10 	vmov	r3, s0
 800d78e:	eeb0 7a67 	vmov.f32	s14, s15
 800d792:	2b00      	cmp	r3, #0
 800d794:	e7d9      	b.n	800d74a <scalbnf+0x4e>
 800d796:	3019      	adds	r0, #25
 800d798:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d79c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d7a0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d7c4 <scalbnf+0xc8>
 800d7a4:	ee07 3a90 	vmov	s15, r3
 800d7a8:	e7d7      	b.n	800d75a <scalbnf+0x5e>
 800d7aa:	bf00      	nop
 800d7ac:	ffff3cb0 	.word	0xffff3cb0
 800d7b0:	4c000000 	.word	0x4c000000
 800d7b4:	7149f2ca 	.word	0x7149f2ca
 800d7b8:	f149f2ca 	.word	0xf149f2ca
 800d7bc:	0da24260 	.word	0x0da24260
 800d7c0:	8da24260 	.word	0x8da24260
 800d7c4:	33000000 	.word	0x33000000

0800d7c8 <_init>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	bf00      	nop
 800d7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ce:	bc08      	pop	{r3}
 800d7d0:	469e      	mov	lr, r3
 800d7d2:	4770      	bx	lr

0800d7d4 <_fini>:
 800d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d6:	bf00      	nop
 800d7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7da:	bc08      	pop	{r3}
 800d7dc:	469e      	mov	lr, r3
 800d7de:	4770      	bx	lr
