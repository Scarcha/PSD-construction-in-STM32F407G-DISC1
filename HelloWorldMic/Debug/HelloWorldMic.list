
HelloWorldMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d68  08009d68  0000b468  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d68  08009d68  0000ad68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d70  08009d70  0000b468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d74  08009d74  0000ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  08009d78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b468  2**0
                  CONTENTS
 10 .bss          000038b4  20000468  20000468  0000b468  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003d1c  20003d1c  0000b468  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b468  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132fb  00000000  00000000  0000b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003572  00000000  00000000  0001e793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00021d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c90  00000000  00000000  00022d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dfe  00000000  00000000  000239f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001779e  00000000  00000000  000467f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca9eb  00000000  00000000  0005df94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0012897f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044e8  00000000  00000000  00128a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0012cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000468 	.word	0x20000468
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ce0 	.word	0x08009ce0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000046c 	.word	0x2000046c
 80001c4:	08009ce0 	.word	0x08009ce0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_CRC_Init+0x20>)
 80004fa:	4a07      	ldr	r2, [pc, #28]	@ (8000518 <MX_CRC_Init+0x24>)
 80004fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_CRC_Init+0x20>)
 8000500:	f001 fbcd 	bl	8001c9e <HAL_CRC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050a:	f000 fce5 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000484 	.word	0x20000484
 8000518:	40023000 	.word	0x40023000

0800051c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <HAL_CRC_MspInit+0x3c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023000 	.word	0x40023000
 800055c:	40023800 	.word	0x40023800

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_DMA_Init+0x5c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <MX_DMA_Init+0x5c>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_DMA_Init+0x5c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200e      	movs	r0, #14
 8000588:	f001 fb45 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800058c:	200e      	movs	r0, #14
 800058e:	f001 fb5e 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f001 fb3d 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f001 fb56 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2011      	movs	r0, #17
 80005a8:	f001 fb35 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f001 fb4e 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a25      	ldr	r2, [pc, #148]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2110      	movs	r1, #16
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000668:	f002 f9de 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RESET_Pin */
  GPIO_InitStruct.Pin = AUDIO_RESET_Pin;
 800066c:	2310      	movs	r3, #16
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RESET_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000684:	f001 ff38 	bl	80024f8 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020c00 	.word	0x40020c00

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f002 f9c1 	bl	8002a5c <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 fbfa 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000048c 	.word	0x2000048c
 80006ec:	40005400 	.word	0x40005400
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <HAL_I2C_MspInit+0xa4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13c      	bne.n	8000790 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000732:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000744:	2304      	movs	r3, #4
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <HAL_I2C_MspInit+0xac>)
 8000750:	f001 fed2 	bl	80024f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800075e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	201f      	movs	r0, #31
 8000776:	f001 fa4e 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800077a:	201f      	movs	r0, #31
 800077c:	f001 fa67 	bl	8001c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2020      	movs	r0, #32
 8000786:	f001 fa46 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800078a:	2020      	movs	r0, #32
 800078c:	f001 fa5f 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40005400 	.word	0x40005400
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400

080007a4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <HAL_I2C_MspDeInit+0x44>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d114      	bne.n	80007e0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_I2C_MspDeInit+0x48>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <HAL_I2C_MspDeInit+0x48>)
 80007bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80007c2:	2140      	movs	r1, #64	@ 0x40
 80007c4:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <HAL_I2C_MspDeInit+0x4c>)
 80007c6:	f002 f833 	bl	8002830 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80007ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ce:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <HAL_I2C_MspDeInit+0x4c>)
 80007d0:	f002 f82e 	bl	8002830 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80007d4:	201f      	movs	r0, #31
 80007d6:	f001 fa48 	bl	8001c6a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80007da:	2020      	movs	r0, #32
 80007dc:	f001 fa45 	bl	8001c6a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40005400 	.word	0x40005400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_I2S2_Init+0x54>)
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <MX_I2S2_Init+0x58>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000800:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000804:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2S2_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = 64000;
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_I2S2_Init+0x54>)
 800081a:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800081e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2S2_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000834:	f004 fb0c 	bl	8004e50 <HAL_I2S_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800083e:	f000 fb4b 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200004e0 	.word	0x200004e0
 800084c:	40003800 	.word	0x40003800

08000850 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800087c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000892:	f004 fadd 	bl	8004e50 <HAL_I2S_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800089c:	f000 fb1c 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000528 	.word	0x20000528
 80008a8:	40003c00 	.word	0x40003c00

080008ac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a8a      	ldr	r2, [pc, #552]	@ (8000af4 <HAL_I2S_MspInit+0x248>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f040 8084 	bne.w	80009d8 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
 80008d4:	4b88      	ldr	r3, [pc, #544]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a87      	ldr	r2, [pc, #540]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	4b85      	ldr	r3, [pc, #532]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	4b81      	ldr	r3, [pc, #516]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a80      	ldr	r2, [pc, #512]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fc:	4b7e      	ldr	r3, [pc, #504]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	4b7a      	ldr	r3, [pc, #488]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000910:	4a79      	ldr	r2, [pc, #484]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	6313      	str	r3, [r2, #48]	@ 0x30
 8000918:	4b77      	ldr	r3, [pc, #476]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000924:	2308      	movs	r3, #8
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000934:	2305      	movs	r3, #5
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	486f      	ldr	r0, [pc, #444]	@ (8000afc <HAL_I2S_MspInit+0x250>)
 8000940:	f001 fdda 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4867      	ldr	r0, [pc, #412]	@ (8000b00 <HAL_I2S_MspInit+0x254>)
 8000962:	f001 fdc9 	bl	80024f8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000966:	4b67      	ldr	r3, [pc, #412]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000968:	4a67      	ldr	r2, [pc, #412]	@ (8000b08 <HAL_I2S_MspInit+0x25c>)
 800096a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800096c:	4b65      	ldr	r3, [pc, #404]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000972:	4b64      	ldr	r3, [pc, #400]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b62      	ldr	r3, [pc, #392]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b61      	ldr	r3, [pc, #388]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000984:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000986:	4b5f      	ldr	r3, [pc, #380]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800098c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800098e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000994:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000996:	4b5b      	ldr	r3, [pc, #364]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800099c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a4:	4b57      	ldr	r3, [pc, #348]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80009aa:	4856      	ldr	r0, [pc, #344]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009ac:	f001 f994 	bl	8001cd8 <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 80009b6:	f000 fa8f 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a51      	ldr	r2, [pc, #324]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009c0:	4a50      	ldr	r2, [pc, #320]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2024      	movs	r0, #36	@ 0x24
 80009cc:	f001 f923 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009d0:	2024      	movs	r0, #36	@ 0x24
 80009d2:	f001 f93c 	bl	8001c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009d6:	e088      	b.n	8000aea <HAL_I2S_MspInit+0x23e>
  else if(i2sHandle->Instance==SPI3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a4b      	ldr	r2, [pc, #300]	@ (8000b0c <HAL_I2S_MspInit+0x260>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	f040 8083 	bne.w	8000aea <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a42      	ldr	r2, [pc, #264]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a3b      	ldr	r2, [pc, #236]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a10:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	4a34      	ldr	r2, [pc, #208]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	482f      	ldr	r0, [pc, #188]	@ (8000b10 <HAL_I2S_MspInit+0x264>)
 8000a54:	f001 fd50 	bl	80024f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000a58:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <HAL_I2S_MspInit+0x250>)
 8000a76:	f001 fd3f 	bl	80024f8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a7c:	4a26      	ldr	r2, [pc, #152]	@ (8000b18 <HAL_I2S_MspInit+0x26c>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a88:	2240      	movs	r2, #64	@ 0x40
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000abe:	4815      	ldr	r0, [pc, #84]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ac0:	f001 f90a 	bl	8001cd8 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_I2S_MspInit+0x222>
      Error_Handler();
 8000aca:	f000 fa05 	bl	8000ed8 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2033      	movs	r0, #51	@ 0x33
 8000ae0:	f001 f899 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ae4:	2033      	movs	r0, #51	@ 0x33
 8000ae6:	f001 f8b2 	bl	8001c4e <HAL_NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3738      	adds	r7, #56	@ 0x38
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40003800 	.word	0x40003800
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	20000570 	.word	0x20000570
 8000b08:	40026058 	.word	0x40026058
 8000b0c:	40003c00 	.word	0x40003c00
 8000b10:	40020000 	.word	0x40020000
 8000b14:	200005d0 	.word	0x200005d0
 8000b18:	40026088 	.word	0x40026088

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t initial_codec_volume = 120;
 8000b22:	2378      	movs	r3, #120	@ 0x78
 8000b24:	717b      	strb	r3, [r7, #5]
	uint16_t pdm_buffer_offset_uint16 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	82fb      	strh	r3, [r7, #22]
	uint16_t pcm_mono_buffer_offset = 0; // Offset para pcm_mono_processed_half_buffer
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fedd 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f8cf 	bl	8000cd4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b36:	f000 f937 	bl	8000da8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f7ff fd41 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3e:	f7ff fd0f 	bl	8000560 <MX_DMA_Init>
  MX_CRC_Init();
 8000b42:	f7ff fcd7 	bl	80004f4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000b46:	f006 fd73 	bl	8007630 <MX_PDM2PCM_Init>
  MX_I2S2_Init();
 8000b4a:	f7ff fe53 	bl	80007f4 <MX_I2S2_Init>
  MX_I2C1_Init();
 8000b4e:	f7ff fda3 	bl	8000698 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b52:	f7ff fe7d 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b56:	f000 f9c5 	bl	8000ee4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b5a:	f000 fafd 	bl	8001158 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if (cs43l22_Init(CS43L22_ADDRESS, OUTPUT_DEVICE_HEADPHONE, initial_codec_volume, PCM_SAMPLING_FREQ) != 0) {
 8000b5e:	797a      	ldrb	r2, [r7, #5]
 8000b60:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8000b64:	2102      	movs	r1, #2
 8000b66:	2094      	movs	r0, #148	@ 0x94
 8000b68:	f000 fbcc 	bl	8001304 <cs43l22_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d004      	beq.n	8000b7c <main+0x60>
      e = CODEC;
 8000b72:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca8 <main+0x18c>)
 8000b74:	22ea      	movs	r2, #234	@ 0xea
 8000b76:	701a      	strb	r2, [r3, #0]
      Error_Handler();
 8000b78:	f000 f9ae 	bl	8000ed8 <Error_Handler>
  }

  if (cs43l22_Play(CS43L22_ADDRESS, NULL, 0) != 0) {
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2094      	movs	r0, #148	@ 0x94
 8000b82:	f000 fca3 	bl	80014cc <cs43l22_Play>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <main+0x7a>
	  e = CODEC;
 8000b8c:	4b46      	ldr	r3, [pc, #280]	@ (8000ca8 <main+0x18c>)
 8000b8e:	22ea      	movs	r2, #234	@ 0xea
 8000b90:	701a      	strb	r2, [r3, #0]
      Error_Handler();
 8000b92:	f000 f9a1 	bl	8000ed8 <Error_Handler>
  }

  memset(pcm_stereo_output_buffer, 0, sizeof(pcm_stereo_output_buffer));
 8000b96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4843      	ldr	r0, [pc, #268]	@ (8000cac <main+0x190>)
 8000b9e:	f008 fc83 	bl	80094a8 <memset>

  if (HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)pcm_stereo_output_buffer, PCM_STEREO_OUTPUT_HALF_BUFFER_SIZE_UINT16 * 2) != HAL_OK) {
 8000ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba6:	4941      	ldr	r1, [pc, #260]	@ (8000cac <main+0x190>)
 8000ba8:	4841      	ldr	r0, [pc, #260]	@ (8000cb0 <main+0x194>)
 8000baa:	f004 fa91 	bl	80050d0 <HAL_I2S_Transmit_DMA>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <main+0x9c>
    Error_Handler();
 8000bb4:	f000 f990 	bl	8000ed8 <Error_Handler>
  }

  if (HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)pdm_raw_buffer, PDM_RAW_INPUT_HALF_BUFFER_SIZE_UINT16 * 2) != HAL_OK) {
 8000bb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bbc:	493d      	ldr	r1, [pc, #244]	@ (8000cb4 <main+0x198>)
 8000bbe:	483e      	ldr	r0, [pc, #248]	@ (8000cb8 <main+0x19c>)
 8000bc0:	f004 fb2a 	bl	8005218 <HAL_I2S_Receive_DMA>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <main+0xb2>
    Error_Handler();
 8000bca:	f000 f985 	bl	8000ed8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (pdm_input_buffer_idx != 2) { // Un buffer PDM está listo (0 o 1)
 8000bce:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <main+0x1a0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d0fa      	beq.n	8000bce <main+0xb2>
	        uint16_t* pdm_half_buffer_start_ptr;
	        uint16_t* pcm_stereo_half_buffer_start_ptr;

	        if (pdm_input_buffer_idx == 0) {
 8000bd8:	4b38      	ldr	r3, [pc, #224]	@ (8000cbc <main+0x1a0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <main+0xcc>
	          pdm_half_buffer_start_ptr = pdm_raw_buffer[0];
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <main+0x198>)
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e001      	b.n	8000bec <main+0xd0>
	        } else {
	          pdm_half_buffer_start_ptr = pdm_raw_buffer[1];
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <main+0x1a4>)
 8000bea:	613b      	str	r3, [r7, #16]
	        }

	        // Procesar el PDM_RAW_INPUT_HALF_BUFFER en trozos, llenando pcm_mono_processed_half_buffer
	        pdm_buffer_offset_uint16 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	82fb      	strh	r3, [r7, #22]
	        pcm_mono_buffer_offset = 0; // Offset para pcm_mono_processed_half_buffer
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	82bb      	strh	r3, [r7, #20]

	        for (int i = 0; i < NUM_PDM_PROCESS_CALLS_PER_HALF_BUFFER; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	e01c      	b.n	8000c34 <main+0x118>
	          // MX_PDM2PCM_Process ahora toma (uint16_t *PDMBuf, uint16_t *PCMBuf)
	          // y PDM1_filter_config.output_samples_number = 16 (mono)
	          if (MX_PDM2PCM_Process(
	                  pdm_half_buffer_start_ptr + pdm_buffer_offset_uint16,
 8000bfa:	8afb      	ldrh	r3, [r7, #22]
 8000bfc:	005b      	lsls	r3, r3, #1
	          if (MX_PDM2PCM_Process(
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	441a      	add	r2, r3
	                  (uint16_t*)(pcm_mono_processed_half_buffer + pcm_mono_buffer_offset) // Escribe 16 muestras mono aquí
 8000c02:	8abb      	ldrh	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
	          if (MX_PDM2PCM_Process(
 8000c06:	492f      	ldr	r1, [pc, #188]	@ (8000cc4 <main+0x1a8>)
 8000c08:	440b      	add	r3, r1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	f006 fd39 	bl	8007684 <MX_PDM2PCM_Process>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <main+0x102>
	               ) != 0) { // Retorna 0 para éxito
	              e = PDM2PCM;
 8000c18:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <main+0x18c>)
 8000c1a:	22eb      	movs	r2, #235	@ 0xeb
 8000c1c:	701a      	strb	r2, [r3, #0]
	          }
	          pdm_buffer_offset_uint16 += (PDM_BYTES_PER_PROCESS_CALL / 2U);
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	3340      	adds	r3, #64	@ 0x40
 8000c22:	82fb      	strh	r3, [r7, #22]
	          pcm_mono_buffer_offset += PDM1_filter_config.output_samples_number; // Avanza por 16 muestras mono
 8000c24:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <main+0x1ac>)
 8000c26:	885a      	ldrh	r2, [r3, #2]
 8000c28:	8abb      	ldrh	r3, [r7, #20]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	82bb      	strh	r3, [r7, #20]
	        for (int i = 0; i < NUM_PDM_PROCESS_CALLS_PER_HALF_BUFFER; i++) {
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b1f      	cmp	r3, #31
 8000c38:	dddf      	ble.n	8000bfa <main+0xde>
	        }

	        // Ahora que pcm_mono_processed_half_buffer está lleno, espera a que un buffer de salida estéreo esté libre
	        while (pcm_output_buffer_ready_for_filling_idx == 2) { /* Espera ocupada */ }
 8000c3a:	bf00      	nop
 8000c3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <main+0x1b0>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d0fa      	beq.n	8000c3c <main+0x120>

	        if (pcm_output_buffer_ready_for_filling_idx == 0) {
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <main+0x1b0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <main+0x13a>
	          pcm_stereo_half_buffer_start_ptr = pcm_stereo_output_buffer[0];
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <main+0x190>)
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e001      	b.n	8000c5a <main+0x13e>
	        } else { // pcm_output_buffer_ready_for_filling_idx == 1
	          pcm_stereo_half_buffer_start_ptr = pcm_stereo_output_buffer[1];
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <main+0x1b4>)
 8000c58:	60fb      	str	r3, [r7, #12]
	        }

	        // Convertir el pcm_mono_processed_half_buffer a pcm_stereo_half_buffer_start_ptr
	        for (uint16_t i = 0; i < PCM_MONO_SAMPLES_PER_HALF_BUFFER; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	e017      	b.n	8000c90 <main+0x174>
	          pcm_stereo_half_buffer_start_ptr[i * 2]     = (uint16_t)pcm_mono_processed_half_buffer[i];
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <main+0x1a8>)
 8000c64:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b28a      	uxth	r2, r1
 8000c72:	801a      	strh	r2, [r3, #0]
	          pcm_stereo_half_buffer_start_ptr[i * 2 + 1] = (uint16_t)pcm_mono_processed_half_buffer[i];
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <main+0x1a8>)
 8000c78:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	b28a      	uxth	r2, r1
 8000c88:	801a      	strh	r2, [r3, #0]
	        for (uint16_t i = 0; i < PCM_MONO_SAMPLES_PER_HALF_BUFFER; i++) {
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	80fb      	strh	r3, [r7, #6]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c96:	d3e3      	bcc.n	8000c60 <main+0x144>
	        }

	        pdm_input_buffer_idx = 2;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <main+0x1a0>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	701a      	strb	r2, [r3, #0]
	        pcm_output_buffer_ready_for_filling_idx = 2;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <main+0x1b0>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	701a      	strb	r2, [r3, #0]
	  if (pdm_input_buffer_idx != 2) { // Un buffer PDM está listo (0 o 1)
 8000ca4:	e793      	b.n	8000bce <main+0xb2>
 8000ca6:	bf00      	nop
 8000ca8:	20000001 	.word	0x20000001
 8000cac:	20002a30 	.word	0x20002a30
 8000cb0:	20000528 	.word	0x20000528
 8000cb4:	20000630 	.word	0x20000630
 8000cb8:	200004e0 	.word	0x200004e0
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20001630 	.word	0x20001630
 8000cc4:	20002630 	.word	0x20002630
 8000cc8:	20003bdc 	.word	0x20003bdc
 8000ccc:	20003a30 	.word	0x20003a30
 8000cd0:	20003230 	.word	0x20003230

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	@ 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2230      	movs	r2, #48	@ 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 fbe0 	bl	80094a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d44:	2308      	movs	r3, #8
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d52:	2307      	movs	r3, #7
 8000d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fee6 	bl	8005b2c <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d66:	f000 f8b7 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2105      	movs	r1, #5
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 f947 	bl	800601c <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d94:	f000 f8a0 	bl	8000ed8 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	@ 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000dbe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dc2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fb46 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000dd6:	f000 f87f 	bl	8000ed8 <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d102      	bne.n	8000dfc <HAL_I2S_RxHalfCpltCallback+0x18>
    pdm_input_buffer_idx = 0;
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40003800 	.word	0x40003800
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <HAL_I2S_RxCpltCallback+0x24>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d102      	bne.n	8000e28 <HAL_I2S_RxCpltCallback+0x18>
    pdm_input_buffer_idx = 1;
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_I2S_RxCpltCallback+0x28>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
  }
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40003800 	.word	0x40003800
 8000e38:	20000000 	.word	0x20000000

08000e3c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d102      	bne.n	8000e54 <HAL_I2S_TxHalfCpltCallback+0x18>
    pcm_output_buffer_ready_for_filling_idx = 0;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
  }
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40003c00 	.word	0x40003c00
 8000e64:	20003a30 	.word	0x20003a30

08000e68 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <HAL_I2S_TxCpltCallback+0x24>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d102      	bne.n	8000e80 <HAL_I2S_TxCpltCallback+0x18>
     pcm_output_buffer_ready_for_filling_idx = 1;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_I2S_TxCpltCallback+0x28>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
  }
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40003c00 	.word	0x40003c00
 8000e90:	20003a30 	.word	0x20003a30

08000e94 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_I2S_ErrorCallback+0x38>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d103      	bne.n	8000eae <HAL_I2S_ErrorCallback+0x1a>
    e = I2S_RX;
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_I2S_ErrorCallback+0x3c>)
 8000ea8:	22e8      	movs	r2, #232	@ 0xe8
 8000eaa:	701a      	strb	r2, [r3, #0]
  } else if (hi2s->Instance == SPI3) {
	e = I2S_TX;
  }
}
 8000eac:	e007      	b.n	8000ebe <HAL_I2S_ErrorCallback+0x2a>
  } else if (hi2s->Instance == SPI3) {
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <HAL_I2S_ErrorCallback+0x40>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d102      	bne.n	8000ebe <HAL_I2S_ErrorCallback+0x2a>
	e = I2S_TX;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_I2S_ErrorCallback+0x3c>)
 8000eba:	22e9      	movs	r2, #233	@ 0xe9
 8000ebc:	701a      	strb	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40003800 	.word	0x40003800
 8000ed0:	20000001 	.word	0x20000001
 8000ed4:	40003c00 	.word	0x40003c00

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <Error_Handler+0x8>

08000ee4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000eea:	4a19      	ldr	r2, [pc, #100]	@ (8000f50 <MX_SPI1_Init+0x6c>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000ef0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000efc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f32:	220a      	movs	r2, #10
 8000f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000f38:	f005 fbd2 	bl	80066e0 <HAL_SPI_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000f42:	f7ff ffc9 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20003a34 	.word	0x20003a34
 8000f50:	40013000 	.word	0x40013000

08000f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <HAL_SPI_MspInit+0x84>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d12b      	bne.n	8000fce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_SPI_MspInit+0x88>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <HAL_SPI_MspInit+0x88>)
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_SPI_MspInit+0x88>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_SPI_MspInit+0x88>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <HAL_SPI_MspInit+0x88>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_SPI_MspInit+0x88>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fae:	2360      	movs	r3, #96	@ 0x60
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000fca:	f001 fa95 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40013000 	.word	0x40013000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fdec 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 fc81 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <DMA1_Stream3_IRQHandler+0x10>)
 800109a:	f000 ffb5 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000570 	.word	0x20000570

080010a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <DMA1_Stream5_IRQHandler+0x10>)
 80010ae:	f000 ffab 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200005d0 	.word	0x200005d0

080010bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <DMA1_Stream6_IRQHandler+0x10>)
 80010c2:	f000 ffa1 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20003ad4 	.word	0x20003ad4

080010d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010d4:	4802      	ldr	r0, [pc, #8]	@ (80010e0 <I2C1_EV_IRQHandler+0x10>)
 80010d6:	f001 ff43 	bl	8002f60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000048c 	.word	0x2000048c

080010e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <I2C1_ER_IRQHandler+0x10>)
 80010ea:	f002 f8aa 	bl	8003242 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000048c 	.word	0x2000048c

080010f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <SPI2_IRQHandler+0x10>)
 80010fe:	f004 f943 	bl	8005388 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200004e0 	.word	0x200004e0

0800110c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <USART2_IRQHandler+0x10>)
 8001112:	f005 fbbf 	bl	8006894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20003a8c 	.word	0x20003a8c

08001120 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <SPI3_IRQHandler+0x10>)
 8001126:	f004 f92f 	bl	8005388 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000528 	.word	0x20000528

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_USART2_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001190:	f005 fb2f 	bl	80067f2 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f7ff fe9d 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20003a8c 	.word	0x20003a8c
 80011a8:	40004400 	.word	0x40004400

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a34      	ldr	r2, [pc, #208]	@ (800129c <HAL_UART_MspInit+0xf0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d161      	bne.n	8001292 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a32      	ldr	r2, [pc, #200]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a2b      	ldr	r2, [pc, #172]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4820      	ldr	r0, [pc, #128]	@ (80012a4 <HAL_UART_MspInit+0xf8>)
 8001222:	f001 f969 	bl	80024f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001228:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <HAL_UART_MspInit+0x100>)
 800122a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800122c:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 800122e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001232:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001246:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001266:	4810      	ldr	r0, [pc, #64]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 8001268:	f000 fd36 	bl	8001cd8 <HAL_DMA_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001272:	f7ff fe31 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 800127a:	639a      	str	r2, [r3, #56]	@ 0x38
 800127c:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2026      	movs	r0, #38	@ 0x26
 8001288:	f000 fcc5 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800128c:	2026      	movs	r0, #38	@ 0x26
 800128e:	f000 fcde 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40004400 	.word	0x40004400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	20003ad4 	.word	0x20003ad4
 80012ac:	400260a0 	.word	0x400260a0

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012b4:	f7ff ff3e 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	@ (80012fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f008 f8f1 	bl	80094c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fc1b 	bl	8000b1c <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80012f4:	08009d78 	.word	0x08009d78
  ldr r2, =_sbss
 80012f8:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80012fc:	20003d1c 	.word	0x20003d1c

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4603      	mov	r3, r0
 800130e:	81fb      	strh	r3, [r7, #14]
 8001310:	460b      	mov	r3, r1
 8001312:	81bb      	strh	r3, [r7, #12]
 8001314:	4613      	mov	r3, r2
 8001316:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 800131c:	f000 fa9a 	bl	8001854 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2201      	movs	r2, #1
 8001326:	2102      	movs	r1, #2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f9c5 	bl	80016b8 <CODEC_IO_Write>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001338:	89bb      	ldrh	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	2b03      	cmp	r3, #3
 800133e:	d81b      	bhi.n	8001378 <cs43l22_Init+0x74>
 8001340:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <cs43l22_Init+0x44>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001359 	.word	0x08001359
 800134c:	08001361 	.word	0x08001361
 8001350:	08001369 	.word	0x08001369
 8001354:	08001371 	.word	0x08001371
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001358:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <cs43l22_Init+0x1c4>)
 800135a:	22fa      	movs	r2, #250	@ 0xfa
 800135c:	701a      	strb	r2, [r3, #0]
    break;
 800135e:	e00f      	b.n	8001380 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001360:	4b59      	ldr	r3, [pc, #356]	@ (80014c8 <cs43l22_Init+0x1c4>)
 8001362:	22af      	movs	r2, #175	@ 0xaf
 8001364:	701a      	strb	r2, [r3, #0]
    break;
 8001366:	e00b      	b.n	8001380 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001368:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <cs43l22_Init+0x1c4>)
 800136a:	22aa      	movs	r2, #170	@ 0xaa
 800136c:	701a      	strb	r2, [r3, #0]
    break;
 800136e:	e007      	b.n	8001380 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001370:	4b55      	ldr	r3, [pc, #340]	@ (80014c8 <cs43l22_Init+0x1c4>)
 8001372:	2205      	movs	r2, #5
 8001374:	701a      	strb	r2, [r3, #0]
    break;    
 8001376:	e003      	b.n	8001380 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <cs43l22_Init+0x1c4>)
 800137a:	2205      	movs	r2, #5
 800137c:	701a      	strb	r2, [r3, #0]
    break;    
 800137e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4a50      	ldr	r2, [pc, #320]	@ (80014c8 <cs43l22_Init+0x1c4>)
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	2104      	movs	r1, #4
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f993 	bl	80016b8 <CODEC_IO_Write>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2281      	movs	r2, #129	@ 0x81
 80013a2:	2105      	movs	r1, #5
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f987 	bl	80016b8 <CODEC_IO_Write>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4413      	add	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2204      	movs	r2, #4
 80013ba:	2106      	movs	r1, #6
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f97b 	bl	80016b8 <CODEC_IO_Write>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80013cc:	7afa      	ldrb	r2, [r7, #11]
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f8b4 	bl	8001540 <cs43l22_SetVolume>
 80013d8:	4602      	mov	r2, r0
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d023      	beq.n	800142e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2206      	movs	r2, #6
 80013ec:	210f      	movs	r1, #15
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f962 	bl	80016b8 <CODEC_IO_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4413      	add	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2200      	movs	r2, #0
 8001404:	2124      	movs	r1, #36	@ 0x24
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f956 	bl	80016b8 <CODEC_IO_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2200      	movs	r2, #0
 800141c:	2125      	movs	r1, #37	@ 0x25
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f94a 	bl	80016b8 <CODEC_IO_Write>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2200      	movs	r2, #0
 8001434:	210a      	movs	r1, #10
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f93e 	bl	80016b8 <CODEC_IO_Write>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4413      	add	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2204      	movs	r2, #4
 800144c:	210e      	movs	r1, #14
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f932 	bl	80016b8 <CODEC_IO_Write>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	2127      	movs	r1, #39	@ 0x27
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f926 	bl	80016b8 <CODEC_IO_Write>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	220f      	movs	r2, #15
 800147c:	211f      	movs	r1, #31
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f91a 	bl	80016b8 <CODEC_IO_Write>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	220a      	movs	r2, #10
 8001494:	211a      	movs	r1, #26
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f90e 	bl	80016b8 <CODEC_IO_Write>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	220a      	movs	r2, #10
 80014ac:	211b      	movs	r1, #27
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f902 	bl	80016b8 <CODEC_IO_Write>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	4413      	add	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80014be:	697b      	ldr	r3, [r7, #20]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20003b34 	.word	0x20003b34

080014cc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <cs43l22_Play+0x70>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d123      	bne.n	8001530 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2206      	movs	r2, #6
 80014ee:	210e      	movs	r1, #14
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f8e1 	bl	80016b8 <CODEC_IO_Write>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f879 	bl	80015fc <cs43l22_SetMute>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	229e      	movs	r2, #158	@ 0x9e
 8001518:	2102      	movs	r1, #2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f8cc 	bl	80016b8 <CODEC_IO_Write>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <cs43l22_Play+0x70>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001530:	68fb      	ldr	r3, [r7, #12]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008

08001540 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001554:	797b      	ldrb	r3, [r7, #5]
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d80b      	bhi.n	8001572 <cs43l22_SetVolume+0x32>
 800155a:	797a      	ldrb	r2, [r7, #5]
 800155c:	4613      	mov	r3, r2
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <cs43l22_SetVolume+0xb8>)
 8001564:	fb82 1203 	smull	r1, r2, r2, r3
 8001568:	1152      	asrs	r2, r2, #5
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	e000      	b.n	8001574 <cs43l22_SetVolume+0x34>
 8001572:	23ff      	movs	r3, #255	@ 0xff
 8001574:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001576:	7afb      	ldrb	r3, [r7, #11]
 8001578:	2be6      	cmp	r3, #230	@ 0xe6
 800157a:	d91c      	bls.n	80015b6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	b2d8      	uxtb	r0, r3
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	3319      	adds	r3, #25
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	2120      	movs	r1, #32
 800158a:	f000 f895 	bl	80016b8 <CODEC_IO_Write>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2d8      	uxtb	r0, r3
 800159c:	7afb      	ldrb	r3, [r7, #11]
 800159e:	3319      	adds	r3, #25
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	2121      	movs	r1, #33	@ 0x21
 80015a6:	f000 f887 	bl	80016b8 <CODEC_IO_Write>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e01b      	b.n	80015ee <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	3319      	adds	r3, #25
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	2120      	movs	r1, #32
 80015c4:	f000 f878 	bl	80016b8 <CODEC_IO_Write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	b2d8      	uxtb	r0, r3
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	3319      	adds	r3, #25
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	2121      	movs	r1, #33	@ 0x21
 80015e0:	f000 f86a 	bl	80016b8 <CODEC_IO_Write>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	51eb851f 	.word	0x51eb851f

080015fc <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d124      	bne.n	800165c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	22ff      	movs	r2, #255	@ 0xff
 8001618:	2104      	movs	r1, #4
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f84c 	bl	80016b8 <CODEC_IO_Write>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2201      	movs	r2, #1
 8001630:	2122      	movs	r1, #34	@ 0x22
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f840 	bl	80016b8 <CODEC_IO_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2201      	movs	r2, #1
 8001648:	2123      	movs	r1, #35	@ 0x23
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f834 	bl	80016b8 <CODEC_IO_Write>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e025      	b.n	80016a8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2200      	movs	r2, #0
 8001662:	2122      	movs	r1, #34	@ 0x22
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f827 	bl	80016b8 <CODEC_IO_Write>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2200      	movs	r2, #0
 800167a:	2123      	movs	r1, #35	@ 0x23
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f81b 	bl	80016b8 <CODEC_IO_Write>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <cs43l22_SetMute+0xb8>)
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	2104      	movs	r1, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f000 f80d 	bl	80016b8 <CODEC_IO_Write>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80016a8:	68fb      	ldr	r3, [r7, #12]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20003b34 	.word	0x20003b34

080016b8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	460b      	mov	r3, r1
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	4613      	mov	r3, r2
 80016c8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80016ce:	797a      	ldrb	r2, [r7, #5]
 80016d0:	79b9      	ldrb	r1, [r7, #6]
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f8f5 	bl	80018c4 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80016ec:	480e      	ldr	r0, [pc, #56]	@ (8001728 <I2Cx_Init+0x40>)
 80016ee:	f001 feb7 	bl	8003460 <HAL_I2C_GetState>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d114      	bne.n	8001722 <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <I2Cx_Init+0x40>)
 80016fa:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <I2Cx_Init+0x44>)
 80016fc:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <I2Cx_Init+0x40>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <I2Cx_Init+0x40>)
 8001706:	2233      	movs	r2, #51	@ 0x33
 8001708:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <I2Cx_Init+0x40>)
 800170c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001710:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <I2Cx_Init+0x40>)
 8001714:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <I2Cx_Init+0x48>)
 8001716:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001718:	f000 f848 	bl	80017ac <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <I2Cx_Init+0x40>)
 800171e:	f001 f99d 	bl	8002a5c <HAL_I2C_Init>
  }
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20003b38 	.word	0x20003b38
 800172c:	000186a0 	.word	0x000186a0
 8001730:	40005400 	.word	0x40005400

08001734 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af04      	add	r7, sp, #16
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	460b      	mov	r3, r1
 8001740:	71bb      	strb	r3, [r7, #6]
 8001742:	4613      	mov	r3, r2
 8001744:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	b299      	uxth	r1, r3
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <I2Cx_WriteData+0x50>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2301      	movs	r3, #1
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	1d7b      	adds	r3, r7, #5
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <I2Cx_WriteData+0x54>)
 8001764:	f001 fb02 	bl	8002d6c <HAL_I2C_Mem_Write>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f809 	bl	800178c <I2Cx_Error>
  }
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000000c 	.word	0x2000000c
 8001788:	20003b38 	.word	0x20003b38

0800178c <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 8001796:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <I2Cx_Error+0x1c>)
 8001798:	f001 faa4 	bl	8002ce4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 800179c:	f7ff ffa4 	bl	80016e8 <I2Cx_Init>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20003b38 	.word	0x20003b38

080017ac <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <I2Cx_MspInit+0xa0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a24      	ldr	r2, [pc, #144]	@ (800184c <I2Cx_MspInit+0xa0>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <I2Cx_MspInit+0xa0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 80017ce:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80017d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d4:	2312      	movs	r3, #18
 80017d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 80017e0:	2304      	movs	r3, #4
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4819      	ldr	r0, [pc, #100]	@ (8001850 <I2Cx_MspInit+0xa4>)
 80017ec:	f000 fe84 	bl	80024f8 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <I2Cx_MspInit+0xa0>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <I2Cx_MspInit+0xa0>)
 80017fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <I2Cx_MspInit+0xa0>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <I2Cx_MspInit+0xa0>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <I2Cx_MspInit+0xa0>)
 8001812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001816:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <I2Cx_MspInit+0xa0>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <I2Cx_MspInit+0xa0>)
 800181e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001822:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	201f      	movs	r0, #31
 800182a:	f000 f9f4 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800182e:	201f      	movs	r0, #31
 8001830:	f000 fa0d 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2020      	movs	r0, #32
 800183a:	f000 f9ec 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 800183e:	2020      	movs	r0, #32
 8001840:	f000 fa05 	bl	8001c4e <HAL_NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40020400 	.word	0x40020400

08001854 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <AUDIO_IO_Init+0x68>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a16      	ldr	r2, [pc, #88]	@ (80018bc <AUDIO_IO_Init+0x68>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <AUDIO_IO_Init+0x68>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8001876:	2310      	movs	r3, #16
 8001878:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800187e:	2302      	movs	r3, #2
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <AUDIO_IO_Init+0x6c>)
 800188c:	f000 fe34 	bl	80024f8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001890:	f7ff ff2a 	bl	80016e8 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2110      	movs	r1, #16
 8001898:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <AUDIO_IO_Init+0x6c>)
 800189a:	f001 f8c5 	bl	8002a28 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800189e:	2005      	movs	r0, #5
 80018a0:	f000 f896 	bl	80019d0 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2110      	movs	r1, #16
 80018a8:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <AUDIO_IO_Init+0x6c>)
 80018aa:	f001 f8bd 	bl	8002a28 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80018ae:	2005      	movs	r0, #5
 80018b0:	f000 f88e 	bl	80019d0 <HAL_Delay>
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020c00 	.word	0x40020c00

080018c4 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	460b      	mov	r3, r1
 80018d0:	71bb      	strb	r3, [r7, #6]
 80018d2:	4613      	mov	r3, r2
 80018d4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80018d6:	797a      	ldrb	r2, [r7, #5]
 80018d8:	79b9      	ldrb	r1, [r7, #6]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff29 	bl	8001734 <I2Cx_WriteData>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f0:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <HAL_Init+0x40>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_Init+0x40>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <HAL_Init+0x40>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f973 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f808 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fb60 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_InitTick+0x54>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_InitTick+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f999 	bl	8001c86 <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00e      	b.n	800197c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d80a      	bhi.n	800197a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 f953 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4a06      	ldr	r2, [pc, #24]	@ (800198c <HAL_InitTick+0x5c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000004 	.word	0x20000004
 8001988:	20000014 	.word	0x20000014
 800198c:	20000010 	.word	0x20000010

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000014 	.word	0x20000014
 80019b4:	20003b8c 	.word	0x20003b8c

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20003b8c 	.word	0x20003b8c

080019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff ffee 	bl	80019b8 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d005      	beq.n	80019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_Delay+0x44>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f6:	bf00      	nop
 80019f8:	f7ff ffde 	bl	80019b8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f7      	bhi.n	80019f8 <HAL_Delay+0x28>
  {
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000014 	.word	0x20000014

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	@ (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db12      	blt.n	8001af0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	490a      	ldr	r1, [pc, #40]	@ (8001afc <__NVIC_DisableIRQ+0x44>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	3320      	adds	r3, #32
 8001ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae4:	f3bf 8f4f 	dsb	sy
}
 8001ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aea:	f3bf 8f6f 	isb	sy
}
 8001aee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff05 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff1a 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff0d 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff1d 	bl	8001ab8 <__NVIC_DisableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff94 	bl	8001bbc <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e00e      	b.n	8001cce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	795b      	ldrb	r3, [r3, #5]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d105      	bne.n	8001cc6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fc2b 	bl	800051c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff fe68 	bl	80019b8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e099      	b.n	8001e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d14:	e00f      	b.n	8001d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d16:	f7ff fe4f 	bl	80019b8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d908      	bls.n	8001d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e078      	b.n	8001e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e8      	bne.n	8001d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	@ (8001e30 <HAL_DMA_Init+0x158>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0307 	bic.w	r3, r3, #7
 8001db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d117      	bne.n	8001dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fb0f 	bl	8002400 <DMA_CheckFifoParam>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001df6:	2301      	movs	r3, #1
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fac6 	bl	8002394 <DMA_CalcBaseAndBitshift>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	223f      	movs	r2, #63	@ 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	f010803f 	.word	0xf010803f

08001e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Start_IT+0x26>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e040      	b.n	8001edc <HAL_DMA_Start_IT+0xa8>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d12f      	bne.n	8001ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fa58 	bl	8002338 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	223f      	movs	r2, #63	@ 0x3f
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0216 	orr.w	r2, r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e005      	b.n	8001eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ef2:	f7ff fd61 	bl	80019b8 <HAL_GetTick>
 8001ef6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e052      	b.n	8001fbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_Abort+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	e013      	b.n	8001f90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f68:	f7ff fd26 	bl	80019b8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d90c      	bls.n	8001f90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e015      	b.n	8001fbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1e4      	bne.n	8001f68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	223f      	movs	r2, #63	@ 0x3f
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00c      	b.n	8001ffc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002014:	4b8e      	ldr	r3, [pc, #568]	@ (8002250 <HAL_DMA_IRQHandler+0x248>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a8e      	ldr	r2, [pc, #568]	@ (8002254 <HAL_DMA_IRQHandler+0x24c>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0a9b      	lsrs	r3, r3, #10
 8002020:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002026:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	2208      	movs	r2, #8
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01a      	beq.n	8002074 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	2208      	movs	r2, #8
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002096:	2201      	movs	r2, #1
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2204      	movs	r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	2204      	movs	r2, #4
 80020ce:	409a      	lsls	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2210      	movs	r2, #16
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d043      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03c      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	2210      	movs	r2, #16
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d024      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	e01f      	b.n	8002178 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e016      	b.n	8002178 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0208 	bic.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	2220      	movs	r2, #32
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 808f 	beq.w	80022a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8087 	beq.w	80022a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	2220      	movs	r2, #32
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d136      	bne.n	8002220 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0216 	bic.w	r2, r2, #22
 80021c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x1da>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0208 	bic.w	r2, r2, #8
 80021f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f6:	223f      	movs	r2, #63	@ 0x3f
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07e      	beq.n	8002314 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
        }
        return;
 800221e:	e079      	b.n	8002314 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01d      	beq.n	800226a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	2b00      	cmp	r3, #0
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e02c      	b.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
 800224e:	bf00      	nop
 8002250:	20000004 	.word	0x20000004
 8002254:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
 8002268:	e01e      	b.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10f      	bne.n	8002298 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d032      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d307      	bcc.n	80022f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f2      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x2cc>
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
 8002312:	e000      	b.n	8002316 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002314:	bf00      	nop
    }
  }
}
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800232a:	b2db      	uxtb	r3, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002354:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b40      	cmp	r3, #64	@ 0x40
 8002364:	d108      	bne.n	8002378 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002376:	e007      	b.n	8002388 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3b10      	subs	r3, #16
 80023a4:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <DMA_CalcBaseAndBitshift+0x64>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ae:	4a13      	ldr	r2, [pc, #76]	@ (80023fc <DMA_CalcBaseAndBitshift+0x68>)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d909      	bls.n	80023d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	1d1a      	adds	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80023d4:	e007      	b.n	80023e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	aaaaaaab 	.word	0xaaaaaaab
 80023fc:	08009d10 	.word	0x08009d10

08002400 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11f      	bne.n	800245a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d856      	bhi.n	80024ce <DMA_CheckFifoParam+0xce>
 8002420:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <DMA_CheckFifoParam+0x28>)
 8002422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002426:	bf00      	nop
 8002428:	08002439 	.word	0x08002439
 800242c:	0800244b 	.word	0x0800244b
 8002430:	08002439 	.word	0x08002439
 8002434:	080024cf 	.word	0x080024cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d046      	beq.n	80024d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002448:	e043      	b.n	80024d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002452:	d140      	bne.n	80024d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e03d      	b.n	80024d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002462:	d121      	bne.n	80024a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d837      	bhi.n	80024da <DMA_CheckFifoParam+0xda>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <DMA_CheckFifoParam+0x70>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	08002481 	.word	0x08002481
 8002474:	08002487 	.word	0x08002487
 8002478:	08002481 	.word	0x08002481
 800247c:	08002499 	.word	0x08002499
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e030      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d025      	beq.n	80024de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002496:	e022      	b.n	80024de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024a0:	d11f      	bne.n	80024e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024a6:	e01c      	b.n	80024e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d903      	bls.n	80024b6 <DMA_CheckFifoParam+0xb6>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d003      	beq.n	80024bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024b4:	e018      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ba:	e015      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      break;
 80024cc:	e00b      	b.n	80024e6 <DMA_CheckFifoParam+0xe6>
      break;
 80024ce:	bf00      	nop
 80024d0:	e00a      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e008      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
 80024d8:	e006      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
 80024dc:	e004      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
 80024e0:	e002      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
    }
  } 
  
  return status; 
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e16b      	b.n	80027ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 815a 	bne.w	80027e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d005      	beq.n	800254a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	2b02      	cmp	r3, #2
 8002548:	d130      	bne.n	80025ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d017      	beq.n	80025e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d123      	bne.n	800263c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80b4 	beq.w	80027e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b60      	ldr	r3, [pc, #384]	@ (8002804 <HAL_GPIO_Init+0x30c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a5f      	ldr	r2, [pc, #380]	@ (8002804 <HAL_GPIO_Init+0x30c>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b5d      	ldr	r3, [pc, #372]	@ (8002804 <HAL_GPIO_Init+0x30c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269a:	4a5b      	ldr	r2, [pc, #364]	@ (8002808 <HAL_GPIO_Init+0x310>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_GPIO_Init+0x314>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02b      	beq.n	800271e <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	@ (8002810 <HAL_GPIO_Init+0x318>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_GPIO_Init+0x31c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002818 <HAL_GPIO_Init+0x320>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x21a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	@ (800281c <HAL_GPIO_Init+0x324>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x216>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002820 <HAL_GPIO_Init+0x328>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x212>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002824 <HAL_GPIO_Init+0x32c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x20e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002828 <HAL_GPIO_Init+0x330>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x20a>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00e      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002702:	2308      	movs	r3, #8
 8002704:	e00c      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002706:	2306      	movs	r3, #6
 8002708:	e00a      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800270a:	2305      	movs	r3, #5
 800270c:	e008      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800270e:	2304      	movs	r3, #4
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002712:	2303      	movs	r3, #3
 8002714:	e004      	b.n	8002720 <HAL_GPIO_Init+0x228>
 8002716:	2302      	movs	r3, #2
 8002718:	e002      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x228>
 800271e:	2300      	movs	r3, #0
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f002 0203 	and.w	r2, r2, #3
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	4093      	lsls	r3, r2
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002730:	4935      	ldr	r1, [pc, #212]	@ (8002808 <HAL_GPIO_Init+0x310>)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_GPIO_Init+0x334>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002762:	4a32      	ldr	r2, [pc, #200]	@ (800282c <HAL_GPIO_Init+0x334>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002768:	4b30      	ldr	r3, [pc, #192]	@ (800282c <HAL_GPIO_Init+0x334>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800278c:	4a27      	ldr	r2, [pc, #156]	@ (800282c <HAL_GPIO_Init+0x334>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002792:	4b26      	ldr	r3, [pc, #152]	@ (800282c <HAL_GPIO_Init+0x334>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b6:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_GPIO_Init+0x334>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_GPIO_Init+0x334>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e0:	4a12      	ldr	r2, [pc, #72]	@ (800282c <HAL_GPIO_Init+0x334>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	f67f ae90 	bls.w	8002514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3724      	adds	r7, #36	@ 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40013800 	.word	0x40013800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40021400 	.word	0x40021400
 8002824:	40021800 	.word	0x40021800
 8002828:	40021c00 	.word	0x40021c00
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e0cd      	b.n	80029e8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800284c:	2201      	movs	r2, #1
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	f040 80bd 	bne.w	80029e2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002868:	4a65      	ldr	r2, [pc, #404]	@ (8002a00 <HAL_GPIO_DeInit+0x1d0>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a04 <HAL_GPIO_DeInit+0x1d4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02b      	beq.n	80028ea <HAL_GPIO_DeInit+0xba>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a5c      	ldr	r2, [pc, #368]	@ (8002a08 <HAL_GPIO_DeInit+0x1d8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_DeInit+0xb6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a5b      	ldr	r2, [pc, #364]	@ (8002a0c <HAL_GPIO_DeInit+0x1dc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_DeInit+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002a10 <HAL_GPIO_DeInit+0x1e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_DeInit+0xae>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a59      	ldr	r2, [pc, #356]	@ (8002a14 <HAL_GPIO_DeInit+0x1e4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_DeInit+0xaa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a58      	ldr	r2, [pc, #352]	@ (8002a18 <HAL_GPIO_DeInit+0x1e8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_DeInit+0xa6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a57      	ldr	r2, [pc, #348]	@ (8002a1c <HAL_GPIO_DeInit+0x1ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_DeInit+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a56      	ldr	r2, [pc, #344]	@ (8002a20 <HAL_GPIO_DeInit+0x1f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_DeInit+0x9e>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00e      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e00c      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e00a      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028d6:	2305      	movs	r3, #5
 80028d8:	e008      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028da:	2304      	movs	r3, #4
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028de:	2303      	movs	r3, #3
 80028e0:	e004      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_DeInit+0xbc>
 80028ea:	2300      	movs	r3, #0
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	f002 0203 	and.w	r2, r2, #3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4093      	lsls	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d132      	bne.n	8002962 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028fc:	4b49      	ldr	r3, [pc, #292]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	4947      	ldr	r1, [pc, #284]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002906:	4013      	ands	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800290a:	4b46      	ldr	r3, [pc, #280]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43db      	mvns	r3, r3
 8002912:	4944      	ldr	r1, [pc, #272]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002914:	4013      	ands	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002918:	4b42      	ldr	r3, [pc, #264]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	4940      	ldr	r1, [pc, #256]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002922:	4013      	ands	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002926:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43db      	mvns	r3, r3
 800292e:	493d      	ldr	r1, [pc, #244]	@ (8002a24 <HAL_GPIO_DeInit+0x1f4>)
 8002930:	4013      	ands	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002944:	4a2e      	ldr	r2, [pc, #184]	@ (8002a00 <HAL_GPIO_DeInit+0x1d0>)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	43da      	mvns	r2, r3
 8002954:	482a      	ldr	r0, [pc, #168]	@ (8002a00 <HAL_GPIO_DeInit+0x1d0>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	400a      	ands	r2, r1
 800295c:	3302      	adds	r3, #2
 800295e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2103      	movs	r1, #3
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	08d2      	lsrs	r2, r2, #3
 8002998:	4019      	ands	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2103      	movs	r1, #3
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2101      	movs	r1, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2103      	movs	r1, #3
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f af2e 	bls.w	800284c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40021c00 	.word	0x40021c00
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e12b      	b.n	8002cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fe36 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	@ 0x24
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f003 fca4 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a81      	ldr	r2, [pc, #516]	@ (8002cd0 <HAL_I2C_Init+0x274>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d807      	bhi.n	8002ae0 <HAL_I2C_Init+0x84>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a80      	ldr	r2, [pc, #512]	@ (8002cd4 <HAL_I2C_Init+0x278>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e006      	b.n	8002aee <HAL_I2C_Init+0x92>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8002cd8 <HAL_I2C_Init+0x27c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf94      	ite	ls
 8002ae8:	2301      	movls	r3, #1
 8002aea:	2300      	movhi	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0e7      	b.n	8002cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a78      	ldr	r2, [pc, #480]	@ (8002cdc <HAL_I2C_Init+0x280>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0c9b      	lsrs	r3, r3, #18
 8002b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a6a      	ldr	r2, [pc, #424]	@ (8002cd0 <HAL_I2C_Init+0x274>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d802      	bhi.n	8002b30 <HAL_I2C_Init+0xd4>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	e009      	b.n	8002b44 <HAL_I2C_Init+0xe8>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	4a69      	ldr	r2, [pc, #420]	@ (8002ce0 <HAL_I2C_Init+0x284>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	3301      	adds	r3, #1
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	495c      	ldr	r1, [pc, #368]	@ (8002cd0 <HAL_I2C_Init+0x274>)
 8002b60:	428b      	cmp	r3, r1
 8002b62:	d819      	bhi.n	8002b98 <HAL_I2C_Init+0x13c>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e59      	subs	r1, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b78:	400b      	ands	r3, r1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_I2C_Init+0x138>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e59      	subs	r1, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b92:	e051      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002b94:	2304      	movs	r3, #4
 8002b96:	e04f      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <HAL_I2C_Init+0x168>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e012      	b.n	8002bea <HAL_I2C_Init+0x18e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Init+0x196>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e022      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10e      	bne.n	8002c18 <HAL_I2C_Init+0x1bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e58      	subs	r0, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c16:	e00f      	b.n	8002c38 <HAL_I2C_Init+0x1dc>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1e58      	subs	r0, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	0099      	lsls	r1, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6809      	ldr	r1, [r1, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6911      	ldr	r1, [r2, #16]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	000186a0 	.word	0x000186a0
 8002cd4:	001e847f 	.word	0x001e847f
 8002cd8:	003d08ff 	.word	0x003d08ff
 8002cdc:	431bde83 	.word	0x431bde83
 8002ce0:	10624dd3 	.word	0x10624dd3

08002ce4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e021      	b.n	8002d3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2224      	movs	r2, #36	@ 0x24
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fd fd48 	bl	80007a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d54:	2b80      	cmp	r3, #128	@ 0x80
 8002d56:	d103      	bne.n	8002d60 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  }
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	817b      	strh	r3, [r7, #10]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	813b      	strh	r3, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d86:	f7fe fe17 	bl	80019b8 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	f040 80d9 	bne.w	8002f4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2319      	movs	r3, #25
 8002da0:	2201      	movs	r2, #1
 8002da2:	496d      	ldr	r1, [pc, #436]	@ (8002f58 <HAL_I2C_Mem_Write+0x1ec>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f001 fe2d 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0cc      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Mem_Write+0x56>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0c5      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d007      	beq.n	8002de8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2221      	movs	r2, #33	@ 0x21
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2240      	movs	r2, #64	@ 0x40
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a4d      	ldr	r2, [pc, #308]	@ (8002f5c <HAL_I2C_Mem_Write+0x1f0>)
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e2a:	88f8      	ldrh	r0, [r7, #6]
 8002e2c:	893a      	ldrh	r2, [r7, #8]
 8002e2e:	8979      	ldrh	r1, [r7, #10]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4603      	mov	r3, r0
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f001 fca4 	bl	8004788 <I2C_RequestMemoryWrite>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d052      	beq.n	8002eec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e081      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 fef2 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11b      	bne.n	8002eec <HAL_I2C_Mem_Write+0x180>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1aa      	bne.n	8002e4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f001 fee5 	bl	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d107      	bne.n	8002f1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e016      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d003      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0x38>
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b40      	cmp	r3, #64	@ 0x40
 8002f94:	f040 80c1 	bne.w	800311a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10d      	bne.n	8002fce <HAL_I2C_EV_IRQHandler+0x6e>
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002fb8:	d003      	beq.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x62>
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_EV_IRQHandler+0x66>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x68>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f000 8132 	beq.w	8003232 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x92>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 ff18 	bl	8004e1a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fdad 	bl	8003b4a <I2C_Master_SB>
 8002ff0:	e092      	b.n	8003118 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0xb2>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fe23 	bl	8003c56 <I2C_Master_ADD10>
 8003010:	e082      	b.n	8003118 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0xd2>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	0a5b      	lsrs	r3, r3, #9
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fe3d 	bl	8003caa <I2C_Master_ADDR>
 8003030:	e072      	b.n	8003118 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d03b      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800304c:	f000 80f3 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	09db      	lsrs	r3, r3, #7
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00f      	beq.n	800307c <HAL_I2C_EV_IRQHandler+0x11c>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_I2C_EV_IRQHandler+0x11c>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fa01 	bl	800347c <I2C_MasterTransmit_TXE>
 800307a:	e04d      	b.n	8003118 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80d6 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	0a5b      	lsrs	r3, r3, #9
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80cf 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003098:	7bbb      	ldrb	r3, [r7, #14]
 800309a:	2b21      	cmp	r3, #33	@ 0x21
 800309c:	d103      	bne.n	80030a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa88 	bl	80035b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a4:	e0c7      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	f040 80c4 	bne.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 faf6 	bl	80036a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b4:	e0bf      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030c4:	f000 80b7 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00f      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x194>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	0a9b      	lsrs	r3, r3, #10
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x194>
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb6f 	bl	80037d0 <I2C_MasterReceive_RXNE>
 80030f2:	e011      	b.n	8003118 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 809a 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	0a5b      	lsrs	r3, r3, #9
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8093 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fc25 	bl	8003960 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003116:	e08e      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003118:	e08d      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e007      	b.n	800313c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_I2C_EV_IRQHandler+0x20e>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	0a5b      	lsrs	r3, r3, #9
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003164:	69b9      	ldr	r1, [r7, #24]
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 ffee 	bl	8004148 <I2C_Slave_ADDR>
 800316c:	e066      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_I2C_EV_IRQHandler+0x22e>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	0a5b      	lsrs	r3, r3, #9
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f001 f828 	bl	80041dc <I2C_Slave_STOPF>
 800318c:	e056      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800318e:	7bbb      	ldrb	r3, [r7, #14]
 8003190:	2b21      	cmp	r3, #33	@ 0x21
 8003192:	d002      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x23a>
 8003194:	7bbb      	ldrb	r3, [r7, #14]
 8003196:	2b29      	cmp	r3, #41	@ 0x29
 8003198:	d125      	bne.n	80031e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	09db      	lsrs	r3, r3, #7
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00f      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x266>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0a9b      	lsrs	r3, r3, #10
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x266>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 ff04 	bl	8003fcc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c4:	e039      	b.n	800323a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d033      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x2da>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	0a5b      	lsrs	r3, r3, #9
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02d      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 ff31 	bl	8004046 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e4:	e029      	b.n	800323a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00f      	beq.n	8003212 <HAL_I2C_EV_IRQHandler+0x2b2>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0a9b      	lsrs	r3, r3, #10
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_I2C_EV_IRQHandler+0x2b2>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 ff3c 	bl	8004088 <I2C_SlaveReceive_RXNE>
 8003210:	e014      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00e      	beq.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	0a5b      	lsrs	r3, r3, #9
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 ff6a 	bl	8004104 <I2C_SlaveReceive_BTF>
 8003230:	e004      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	@ 0x28
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003264:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00e      	beq.n	8003290 <HAL_I2C_ER_IRQHandler+0x4e>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800328e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	0a5b      	lsrs	r3, r3, #9
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0x78>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80032b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	0a9b      	lsrs	r3, r3, #10
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03f      	beq.n	8003346 <HAL_I2C_ER_IRQHandler+0x104>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d039      	beq.n	8003346 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80032d2:	7efb      	ldrb	r3, [r7, #27]
 80032d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032ec:	7ebb      	ldrb	r3, [r7, #26]
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d112      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xd6>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xd6>
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b21      	cmp	r3, #33	@ 0x21
 80032fc:	d008      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b29      	cmp	r3, #41	@ 0x29
 8003302:	d005      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0xce>
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b28      	cmp	r3, #40	@ 0x28
 8003308:	d106      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b21      	cmp	r3, #33	@ 0x21
 800330e:	d103      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 f893 	bl	800443c <I2C_Slave_AF>
 8003316:	e016      	b.n	8003346 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003320:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800332a:	7efb      	ldrb	r3, [r7, #27]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d002      	beq.n	8003336 <HAL_I2C_ER_IRQHandler+0xf4>
 8003330:	7efb      	ldrb	r3, [r7, #27]
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	d107      	bne.n	8003346 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003344:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	0adb      	lsrs	r3, r3, #11
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0x12e>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800336e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f001 f8ce 	bl	8004524 <I2C_ITError>
  }
}
 8003388:	bf00      	nop
 800338a:	3728      	adds	r7, #40	@ 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	4613      	mov	r3, r2
 80033ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346e:	b2db      	uxtb	r3, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003492:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d150      	bne.n	8003544 <I2C_MasterTransmit_TXE+0xc8>
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b21      	cmp	r3, #33	@ 0x21
 80034a6:	d14d      	bne.n	8003544 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d01d      	beq.n	80034ea <I2C_MasterTransmit_TXE+0x6e>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d01a      	beq.n	80034ea <I2C_MasterTransmit_TXE+0x6e>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ba:	d016      	beq.n	80034ea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034ca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2211      	movs	r2, #17
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff54 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034e8:	e060      	b.n	80035ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034f8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003508:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d107      	bne.n	8003534 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff6f 	bl	8003410 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003532:	e03b      	b.n	80035ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff27 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003542:	e033      	b.n	80035ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b21      	cmp	r3, #33	@ 0x21
 8003548:	d005      	beq.n	8003556 <I2C_MasterTransmit_TXE+0xda>
 800354a:	7bbb      	ldrb	r3, [r7, #14]
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d12d      	bne.n	80035ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b22      	cmp	r3, #34	@ 0x22
 8003554:	d12a      	bne.n	80035ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003570:	e01c      	b.n	80035ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b40      	cmp	r3, #64	@ 0x40
 800357c:	d103      	bne.n	8003586 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f88e 	bl	80036a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003584:	e012      	b.n	80035ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035aa:	e7ff      	b.n	80035ac <I2C_MasterTransmit_TXE+0x130>
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b21      	cmp	r3, #33	@ 0x21
 80035cc:	d164      	bne.n	8003698 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035fc:	e04c      	b.n	8003698 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d01d      	beq.n	8003640 <I2C_MasterTransmit_BTF+0x8c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b20      	cmp	r3, #32
 8003608:	d01a      	beq.n	8003640 <I2C_MasterTransmit_BTF+0x8c>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003610:	d016      	beq.n	8003640 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003620:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2211      	movs	r2, #17
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fea9 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
}
 800363e:	e02b      	b.n	8003698 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800364e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b40      	cmp	r3, #64	@ 0x40
 8003678:	d107      	bne.n	800368a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fec4 	bl	8003410 <HAL_I2C_MemTxCpltCallback>
}
 8003688:	e006      	b.n	8003698 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe7c 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11d      	bne.n	80036f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10b      	bne.n	80036d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80036d6:	e077      	b.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036dc:	b29b      	uxth	r3, r3
 80036de:	121b      	asrs	r3, r3, #8
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036f2:	e069      	b.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10b      	bne.n	8003714 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	b2da      	uxtb	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003712:	e059      	b.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	2b02      	cmp	r3, #2
 800371a:	d152      	bne.n	80037c2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b22      	cmp	r3, #34	@ 0x22
 8003720:	d10d      	bne.n	800373e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003730:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800373c:	e044      	b.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b21      	cmp	r3, #33	@ 0x21
 800374c:	d112      	bne.n	8003774 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003772:	e029      	b.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d124      	bne.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b21      	cmp	r3, #33	@ 0x21
 8003782:	d121      	bne.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003792:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fe28 	bl	8003410 <HAL_I2C_MemTxCpltCallback>
}
 80037c0:	e002      	b.n	80037c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fabd 	bl	8002d42 <I2C_Flush_DR>
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b22      	cmp	r3, #34	@ 0x22
 80037e2:	f040 80b9 	bne.w	8003958 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d921      	bls.n	800383e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b03      	cmp	r3, #3
 8003828:	f040 8096 	bne.w	8003958 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800383c:	e08c      	b.n	8003958 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	2b02      	cmp	r3, #2
 8003844:	d07f      	beq.n	8003946 <I2C_MasterReceive_RXNE+0x176>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d002      	beq.n	8003852 <I2C_MasterReceive_RXNE+0x82>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d179      	bne.n	8003946 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 fa80 	bl	8004d58 <I2C_WaitOnSTOPRequestThroughIT>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14c      	bne.n	80038f8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800386c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800387c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d10a      	bne.n	80038ce <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fdac 	bl	8003424 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038cc:	e044      	b.n	8003958 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d002      	beq.n	80038e2 <I2C_MasterReceive_RXNE+0x112>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d103      	bne.n	80038ea <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80038e8:	e002      	b.n	80038f0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2212      	movs	r2, #18
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fd57 	bl	80033a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038f6:	e02f      	b.n	8003958 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003906:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fd7a 	bl	8003438 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003944:	e008      	b.n	8003958 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003954:	605a      	str	r2, [r3, #4]
}
 8003956:	e7ff      	b.n	8003958 <I2C_MasterReceive_RXNE+0x188>
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b04      	cmp	r3, #4
 8003976:	d11b      	bne.n	80039b0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003986:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039ae:	e0c8      	b.n	8003b42 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d129      	bne.n	8003a0e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d00a      	beq.n	80039e6 <I2C_MasterReceive_BTF+0x86>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d007      	beq.n	80039e6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a0c:	e099      	b.n	8003b42 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	f040 8081 	bne.w	8003b1c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d002      	beq.n	8003a26 <I2C_MasterReceive_BTF+0xc6>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d108      	bne.n	8003a38 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e019      	b.n	8003a6c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d002      	beq.n	8003a44 <I2C_MasterReceive_BTF+0xe4>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d108      	bne.n	8003a56 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e00a      	b.n	8003a6c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d007      	beq.n	8003a6c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ac6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b40      	cmp	r3, #64	@ 0x40
 8003ada:	d10a      	bne.n	8003af2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fc9a 	bl	8003424 <HAL_I2C_MemRxCpltCallback>
}
 8003af0:	e027      	b.n	8003b42 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d002      	beq.n	8003b06 <I2C_MasterReceive_BTF+0x1a6>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d103      	bne.n	8003b0e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b0c:	e002      	b.n	8003b14 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2212      	movs	r2, #18
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fc45 	bl	80033a4 <HAL_I2C_MasterRxCpltCallback>
}
 8003b1a:	e012      	b.n	8003b42 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d117      	bne.n	8003b8e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b76:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b78:	e067      	b.n	8003c4a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]
}
 8003b8c:	e05d      	b.n	8003c4a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b96:	d133      	bne.n	8003c00 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b21      	cmp	r3, #33	@ 0x21
 8003ba2:	d109      	bne.n	8003bb8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bb4:	611a      	str	r2, [r3, #16]
 8003bb6:	e008      	b.n	8003bca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <I2C_Master_SB+0x92>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d032      	beq.n	8003c4a <I2C_Master_SB+0x100>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02d      	beq.n	8003c4a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bfc:	605a      	str	r2, [r3, #4]
}
 8003bfe:	e024      	b.n	8003c4a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10e      	bne.n	8003c26 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	11db      	asrs	r3, r3, #7
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0306 	and.w	r3, r3, #6
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f063 030f 	orn	r3, r3, #15
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
}
 8003c24:	e011      	b.n	8003c4a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10d      	bne.n	8003c4a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	11db      	asrs	r3, r3, #7
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0306 	and.w	r3, r3, #6
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f063 030e 	orn	r3, r3, #14
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <I2C_Master_ADD10+0x26>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <I2C_Master_ADD10+0x48>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c9c:	605a      	str	r2, [r3, #4]
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b091      	sub	sp, #68	@ 0x44
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b22      	cmp	r3, #34	@ 0x22
 8003cd2:	f040 8169 	bne.w	8003fa8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <I2C_Master_ADDR+0x54>
 8003cde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d10b      	bne.n	8003cfe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	e160      	b.n	8003fc0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11d      	bne.n	8003d42 <I2C_Master_ADDR+0x98>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d0e:	d118      	bne.n	8003d42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d40:	e13e      	b.n	8003fc0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d113      	bne.n	8003d74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e115      	b.n	8003fa0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	f040 808a 	bne.w	8003e94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d86:	d137      	bne.n	8003df8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da6:	d113      	bne.n	8003dd0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	e0e7      	b.n	8003fa0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e0d3      	b.n	8003fa0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d02e      	beq.n	8003e5c <I2C_Master_ADDR+0x1b2>
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d02b      	beq.n	8003e5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e06:	2b12      	cmp	r3, #18
 8003e08:	d102      	bne.n	8003e10 <I2C_Master_ADDR+0x166>
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d125      	bne.n	8003e5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d00e      	beq.n	8003e34 <I2C_Master_ADDR+0x18a>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d00b      	beq.n	8003e34 <I2C_Master_ADDR+0x18a>
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d008      	beq.n	8003e34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e007      	b.n	8003e44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	e0a1      	b.n	8003fa0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e085      	b.n	8003fa0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d14d      	bne.n	8003f3a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d016      	beq.n	8003ed2 <I2C_Master_ADDR+0x228>
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d013      	beq.n	8003ed2 <I2C_Master_ADDR+0x228>
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d010      	beq.n	8003ed2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e007      	b.n	8003ee2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ee0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef0:	d117      	bne.n	8003f22 <I2C_Master_ADDR+0x278>
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ef8:	d00b      	beq.n	8003f12 <I2C_Master_ADDR+0x268>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d008      	beq.n	8003f12 <I2C_Master_ADDR+0x268>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d005      	beq.n	8003f12 <I2C_Master_ADDR+0x268>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d002      	beq.n	8003f12 <I2C_Master_ADDR+0x268>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d107      	bne.n	8003f22 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	e032      	b.n	8003fa0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f48:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f58:	d117      	bne.n	8003f8a <I2C_Master_ADDR+0x2e0>
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f60:	d00b      	beq.n	8003f7a <I2C_Master_ADDR+0x2d0>
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d008      	beq.n	8003f7a <I2C_Master_ADDR+0x2d0>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d005      	beq.n	8003f7a <I2C_Master_ADDR+0x2d0>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d002      	beq.n	8003f7a <I2C_Master_ADDR+0x2d0>
 8003f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d107      	bne.n	8003f8a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fa6:	e00b      	b.n	8003fc0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	e7ff      	b.n	8003fc0 <I2C_Master_ADDR+0x316>
 8003fc0:	bf00      	nop
 8003fc2:	3744      	adds	r7, #68	@ 0x44
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02b      	beq.n	800403e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	781a      	ldrb	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d114      	bne.n	800403e <I2C_SlaveTransmit_TXE+0x72>
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b29      	cmp	r3, #41	@ 0x29
 8004018:	d111      	bne.n	800403e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004028:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2221      	movs	r2, #33	@ 0x21
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2228      	movs	r2, #40	@ 0x28
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff f9bd 	bl	80033b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d011      	beq.n	800407c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004096:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02c      	beq.n	80040fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d114      	bne.n	80040fc <I2C_SlaveReceive_RXNE+0x74>
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d6:	d111      	bne.n	80040fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2222      	movs	r2, #34	@ 0x22
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2228      	movs	r2, #40	@ 0x28
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff f968 	bl	80033cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004162:	2b28      	cmp	r3, #40	@ 0x28
 8004164:	d127      	bne.n	80041b6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004174:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	09db      	lsrs	r3, r3, #7
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	81bb      	strh	r3, [r7, #12]
 8004198:	e002      	b.n	80041a0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041a8:	89ba      	ldrh	r2, [r7, #12]
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff f916 	bl	80033e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041b4:	e00e      	b.n	80041d4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004228:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004238:	d172      	bne.n	8004320 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b22      	cmp	r3, #34	@ 0x22
 800423e:	d002      	beq.n	8004246 <I2C_Slave_STOPF+0x6a>
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b2a      	cmp	r3, #42	@ 0x2a
 8004244:	d135      	bne.n	80042b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004278:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe f84c 	bl	800231c <HAL_DMA_GetState>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d049      	beq.n	800431e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	4a69      	ldr	r2, [pc, #420]	@ (8004434 <I2C_Slave_STOPF+0x258>)
 8004290:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fe94 	bl	8001fc4 <HAL_DMA_Abort_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d03d      	beq.n	800431e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042ac:	4610      	mov	r0, r2
 80042ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042b0:	e035      	b.n	800431e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe f816 	bl	800231c <HAL_DMA_GetState>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d014      	beq.n	8004320 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004434 <I2C_Slave_STOPF+0x258>)
 80042fc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd fe5e 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004318:	4610      	mov	r0, r2
 800431a:	4798      	blx	r3
 800431c:	e000      	b.n	8004320 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d03e      	beq.n	80043a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b04      	cmp	r3, #4
 8004336:	d112      	bne.n	800435e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d112      	bne.n	8004392 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f8b7 	bl	8004524 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043b6:	e039      	b.n	800442c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80043bc:	d109      	bne.n	80043d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2228      	movs	r2, #40	@ 0x28
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fe fffd 	bl	80033cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b28      	cmp	r3, #40	@ 0x28
 80043dc:	d111      	bne.n	8004402 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a15      	ldr	r2, [pc, #84]	@ (8004438 <I2C_Slave_STOPF+0x25c>)
 80043e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fe fffe 	bl	80033fc <HAL_I2C_ListenCpltCallback>
}
 8004400:	e014      	b.n	800442c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	2b22      	cmp	r3, #34	@ 0x22
 8004408:	d002      	beq.n	8004410 <I2C_Slave_STOPF+0x234>
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b22      	cmp	r3, #34	@ 0x22
 800440e:	d10d      	bne.n	800442c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fe ffd0 	bl	80033cc <HAL_I2C_SlaveRxCpltCallback>
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	080048b5 	.word	0x080048b5
 8004438:	ffff0000 	.word	0xffff0000

0800443c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d002      	beq.n	800445e <I2C_Slave_AF+0x22>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b20      	cmp	r3, #32
 800445c:	d129      	bne.n	80044b2 <I2C_Slave_AF+0x76>
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b28      	cmp	r3, #40	@ 0x28
 8004462:	d126      	bne.n	80044b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a2e      	ldr	r2, [pc, #184]	@ (8004520 <I2C_Slave_AF+0xe4>)
 8004468:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004478:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004482:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe ffa6 	bl	80033fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044b0:	e031      	b.n	8004516 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b21      	cmp	r3, #33	@ 0x21
 80044b6:	d129      	bne.n	800450c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <I2C_Slave_AF+0xe4>)
 80044bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2221      	movs	r2, #33	@ 0x21
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fe fc1f 	bl	8002d42 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fe ff57 	bl	80033b8 <HAL_I2C_SlaveTxCpltCallback>
}
 800450a:	e004      	b.n	8004516 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004514:	615a      	str	r2, [r3, #20]
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	ffff0000 	.word	0xffff0000

08004524 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004532:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800453a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800453c:	7bbb      	ldrb	r3, [r7, #14]
 800453e:	2b10      	cmp	r3, #16
 8004540:	d002      	beq.n	8004548 <I2C_ITError+0x24>
 8004542:	7bbb      	ldrb	r3, [r7, #14]
 8004544:	2b40      	cmp	r3, #64	@ 0x40
 8004546:	d10a      	bne.n	800455e <I2C_ITError+0x3a>
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b22      	cmp	r3, #34	@ 0x22
 800454c:	d107      	bne.n	800455e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004564:	2b28      	cmp	r3, #40	@ 0x28
 8004566:	d107      	bne.n	8004578 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2228      	movs	r2, #40	@ 0x28
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004576:	e015      	b.n	80045a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004586:	d00a      	beq.n	800459e <I2C_ITError+0x7a>
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b60      	cmp	r3, #96	@ 0x60
 800458c:	d007      	beq.n	800459e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b2:	d162      	bne.n	800467a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d020      	beq.n	8004614 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004780 <I2C_ITError+0x25c>)
 80045d8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd fcf0 	bl	8001fc4 <HAL_DMA_Abort_IT>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8089 	beq.w	80046fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800460e:	4610      	mov	r0, r2
 8004610:	4798      	blx	r3
 8004612:	e074      	b.n	80046fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	4a59      	ldr	r2, [pc, #356]	@ (8004780 <I2C_ITError+0x25c>)
 800461a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	4618      	mov	r0, r3
 8004622:	f7fd fccf 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d068      	beq.n	80046fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004636:	2b40      	cmp	r3, #64	@ 0x40
 8004638:	d10b      	bne.n	8004652 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004674:	4610      	mov	r0, r2
 8004676:	4798      	blx	r3
 8004678:	e041      	b.n	80046fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b60      	cmp	r3, #96	@ 0x60
 8004684:	d125      	bne.n	80046d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d10b      	bne.n	80046ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe febe 	bl	800344c <HAL_I2C_AbortCpltCallback>
 80046d0:	e015      	b.n	80046fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d10b      	bne.n	80046f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fe fe9d 	bl	8003438 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10e      	bne.n	800472c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004742:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d113      	bne.n	8004778 <I2C_ITError+0x254>
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b28      	cmp	r3, #40	@ 0x28
 8004754:	d110      	bne.n	8004778 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <I2C_ITError+0x260>)
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fe fe42 	bl	80033fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	080048b5 	.word	0x080048b5
 8004784:	ffff0000 	.word	0xffff0000

08004788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	4608      	mov	r0, r1
 8004792:	4611      	mov	r1, r2
 8004794:	461a      	mov	r2, r3
 8004796:	4603      	mov	r3, r0
 8004798:	817b      	strh	r3, [r7, #10]
 800479a:	460b      	mov	r3, r1
 800479c:	813b      	strh	r3, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f920 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d8:	d103      	bne.n	80047e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e05f      	b.n	80048a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	6a3a      	ldr	r2, [r7, #32]
 80047fa:	492d      	ldr	r1, [pc, #180]	@ (80048b0 <I2C_RequestMemoryWrite+0x128>)
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f97b 	bl	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e04c      	b.n	80048a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	6a39      	ldr	r1, [r7, #32]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fa06 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	2b04      	cmp	r3, #4
 8004838:	d107      	bne.n	800484a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e02b      	b.n	80048a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004854:	893b      	ldrh	r3, [r7, #8]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	611a      	str	r2, [r3, #16]
 800485e:	e021      	b.n	80048a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004860:	893b      	ldrh	r3, [r7, #8]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	b29b      	uxth	r3, r3
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004870:	6a39      	ldr	r1, [r7, #32]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f9e0 	bl	8004c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	2b04      	cmp	r3, #4
 8004884:	d107      	bne.n	8004896 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e005      	b.n	80048a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800489a:	893b      	ldrh	r3, [r7, #8]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	00010002 	.word	0x00010002

080048b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048ce:	4b4b      	ldr	r3, [pc, #300]	@ (80049fc <I2C_DMAAbort+0x148>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	08db      	lsrs	r3, r3, #3
 80048d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a00 <I2C_DMAAbort+0x14c>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0a1a      	lsrs	r2, r3, #8
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	00da      	lsls	r2, r3, #3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80048fa:	e00a      	b.n	8004912 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3b01      	subs	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800490c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004910:	d0ea      	beq.n	80048e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491e:	2200      	movs	r2, #0
 8004920:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	2200      	movs	r2, #0
 8004930:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004940:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004954:	2200      	movs	r2, #0
 8004956:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	2200      	movs	r2, #0
 8004966:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b60      	cmp	r3, #96	@ 0x60
 8004982:	d10e      	bne.n	80049a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800499a:	6978      	ldr	r0, [r7, #20]
 800499c:	f7fe fd56 	bl	800344c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049a0:	e027      	b.n	80049f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049a8:	2b28      	cmp	r3, #40	@ 0x28
 80049aa:	d117      	bne.n	80049dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2228      	movs	r2, #40	@ 0x28
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049da:	e007      	b.n	80049ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049ec:	6978      	ldr	r0, [r7, #20]
 80049ee:	f7fe fd23 	bl	8003438 <HAL_I2C_ErrorCallback>
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000004 	.word	0x20000004
 8004a00:	14f8b589 	.word	0x14f8b589

08004a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a14:	e048      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d044      	beq.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1e:	f7fc ffcb 	bl	80019b8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d139      	bne.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10d      	bne.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	e00c      	b.n	8004a74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	43da      	mvns	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d116      	bne.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e023      	b.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10d      	bne.n	8004ace <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	43da      	mvns	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	e00c      	b.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d093      	beq.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b06:	e071      	b.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b16:	d123      	bne.n	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e067      	b.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d041      	beq.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b68:	f7fc ff26 	bl	80019b8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d136      	bne.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e00b      	b.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e021      	b.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10c      	bne.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e00b      	b.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af6d 	bne.w	8004b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f8b8 	bl	8004dbc <I2C_IsAcknowledgeFailed>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e034      	b.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d028      	beq.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fc feab 	bl	80019b8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11d      	bne.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7e:	2b80      	cmp	r3, #128	@ 0x80
 8004c80:	d016      	beq.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e007      	b.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d1c3      	bne.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd4:	e034      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f870 	bl	8004dbc <I2C_IsAcknowledgeFailed>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e034      	b.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d028      	beq.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7fc fe63 	bl	80019b8 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11d      	bne.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d016      	beq.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e007      	b.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d1c3      	bne.n	8004cd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d64:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	4a13      	ldr	r2, [pc, #76]	@ (8004db8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	0a1a      	lsrs	r2, r3, #8
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e008      	b.n	8004da8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da4:	d0e9      	beq.n	8004d7a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000004 	.word	0x20000004
 8004db8:	14f8b589 	.word	0x14f8b589

08004dbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	d11b      	bne.n	8004e0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ddc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	f043 0204 	orr.w	r2, r3, #4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e2a:	d103      	bne.n	8004e34 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e32:	e007      	b.n	8004e44 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e3c:	d102      	bne.n	8004e44 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2208      	movs	r2, #8
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e128      	b.n	80050b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a90      	ldr	r2, [pc, #576]	@ (80050bc <HAL_I2S_Init+0x26c>)
 8004e7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fb fd15 	bl	80008ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004e98:	f023 030f 	bic.w	r3, r3, #15
 8004e9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d060      	beq.n	8004f70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e001      	b.n	8004ec0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d802      	bhi.n	8004ece <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ece:	2001      	movs	r0, #1
 8004ed0:	f001 fba6 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ed4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ede:	d125      	bne.n	8004f2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	3305      	adds	r3, #5
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e01f      	b.n	8004f4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	3305      	adds	r3, #5
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	e00e      	b.n	8004f4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	3305      	adds	r3, #5
 8004f48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80050c0 <HAL_I2S_Init+0x270>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	08db      	lsrs	r3, r3, #3
 8004f54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e003      	b.n	8004f78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004f70:	2302      	movs	r3, #2
 8004f72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d902      	bls.n	8004f84 <HAL_I2S_Init+0x134>
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2bff      	cmp	r3, #255	@ 0xff
 8004f82:	d907      	bls.n	8004f94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f88:	f043 0210 	orr.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e08f      	b.n	80050b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	ea42 0103 	orr.w	r1, r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004fb2:	f023 030f 	bic.w	r3, r3, #15
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6851      	ldr	r1, [r2, #4]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6892      	ldr	r2, [r2, #8]
 8004fbe:	4311      	orrs	r1, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68d2      	ldr	r2, [r2, #12]
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6992      	ldr	r2, [r2, #24]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d161      	bne.n	80050a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a38      	ldr	r2, [pc, #224]	@ (80050c4 <HAL_I2S_Init+0x274>)
 8004fe4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a37      	ldr	r2, [pc, #220]	@ (80050c8 <HAL_I2S_Init+0x278>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2S_Init+0x1a4>
 8004ff0:	4b36      	ldr	r3, [pc, #216]	@ (80050cc <HAL_I2S_Init+0x27c>)
 8004ff2:	e001      	b.n	8004ff8 <HAL_I2S_Init+0x1a8>
 8004ff4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	4932      	ldr	r1, [pc, #200]	@ (80050c8 <HAL_I2S_Init+0x278>)
 8005000:	428a      	cmp	r2, r1
 8005002:	d101      	bne.n	8005008 <HAL_I2S_Init+0x1b8>
 8005004:	4a31      	ldr	r2, [pc, #196]	@ (80050cc <HAL_I2S_Init+0x27c>)
 8005006:	e001      	b.n	800500c <HAL_I2S_Init+0x1bc>
 8005008:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800500c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005010:	f023 030f 	bic.w	r3, r3, #15
 8005014:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2b      	ldr	r2, [pc, #172]	@ (80050c8 <HAL_I2S_Init+0x278>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_I2S_Init+0x1d4>
 8005020:	4b2a      	ldr	r3, [pc, #168]	@ (80050cc <HAL_I2S_Init+0x27c>)
 8005022:	e001      	b.n	8005028 <HAL_I2S_Init+0x1d8>
 8005024:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005028:	2202      	movs	r2, #2
 800502a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a25      	ldr	r2, [pc, #148]	@ (80050c8 <HAL_I2S_Init+0x278>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_I2S_Init+0x1ea>
 8005036:	4b25      	ldr	r3, [pc, #148]	@ (80050cc <HAL_I2S_Init+0x27c>)
 8005038:	e001      	b.n	800503e <HAL_I2S_Init+0x1ee>
 800503a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800504a:	d003      	beq.n	8005054 <HAL_I2S_Init+0x204>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e001      	b.n	8005060 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800506a:	4313      	orrs	r3, r2
 800506c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005074:	4313      	orrs	r3, r2
 8005076:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800507e:	4313      	orrs	r3, r2
 8005080:	b29a      	uxth	r2, r3
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	4313      	orrs	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800508c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a0d      	ldr	r2, [pc, #52]	@ (80050c8 <HAL_I2S_Init+0x278>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_I2S_Init+0x24c>
 8005098:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <HAL_I2S_Init+0x27c>)
 800509a:	e001      	b.n	80050a0 <HAL_I2S_Init+0x250>
 800509c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050a0:	897a      	ldrh	r2, [r7, #10]
 80050a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	08005563 	.word	0x08005563
 80050c0:	cccccccd 	.word	0xcccccccd
 80050c4:	08005679 	.word	0x08005679
 80050c8:	40003800 	.word	0x40003800
 80050cc:	40003400 	.word	0x40003400

080050d0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_I2S_Transmit_DMA+0x1a>
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e08a      	b.n	8005204 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	e082      	b.n	8005204 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2S_Transmit_DMA+0x3e>
 800510a:	2302      	movs	r3, #2
 800510c:	e07a      	b.n	8005204 <HAL_I2S_Transmit_DMA+0x134>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d002      	beq.n	8005142 <HAL_I2S_Transmit_DMA+0x72>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b05      	cmp	r3, #5
 8005140:	d10a      	bne.n	8005158 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005156:	e005      	b.n	8005164 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	4a28      	ldr	r2, [pc, #160]	@ (800520c <HAL_I2S_Transmit_DMA+0x13c>)
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	4a27      	ldr	r2, [pc, #156]	@ (8005210 <HAL_I2S_Transmit_DMA+0x140>)
 8005172:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	4a26      	ldr	r2, [pc, #152]	@ (8005214 <HAL_I2S_Transmit_DMA+0x144>)
 800517a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005184:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800518c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005192:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005194:	f7fc fe4e 	bl	8001e34 <HAL_DMA_Start_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00f      	beq.n	80051be <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f043 0208 	orr.w	r2, r3, #8
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e022      	b.n	8005204 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0202 	orr.w	r2, r2, #2
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d107      	bne.n	8005202 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005200:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	080053e3 	.word	0x080053e3
 8005210:	080053a1 	.word	0x080053a1
 8005214:	0800545d 	.word	0x0800545d

08005218 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_I2S_Receive_DMA+0x1a>
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e09d      	b.n	8005372 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d001      	beq.n	8005246 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	e095      	b.n	8005372 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_I2S_Receive_DMA+0x3e>
 8005252:	2302      	movs	r3, #2
 8005254:	e08d      	b.n	8005372 <HAL_I2S_Receive_DMA+0x15a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2204      	movs	r2, #4
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d002      	beq.n	800528a <HAL_I2S_Receive_DMA+0x72>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d10a      	bne.n	80052a0 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800529e:	e005      	b.n	80052ac <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	4a32      	ldr	r2, [pc, #200]	@ (800537c <HAL_I2S_Receive_DMA+0x164>)
 80052b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b8:	4a31      	ldr	r2, [pc, #196]	@ (8005380 <HAL_I2S_Receive_DMA+0x168>)
 80052ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	4a30      	ldr	r2, [pc, #192]	@ (8005384 <HAL_I2S_Receive_DMA+0x16c>)
 80052c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052d2:	d10a      	bne.n	80052ea <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	4619      	mov	r1, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005300:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005302:	f7fc fd97 	bl	8001e34 <HAL_DMA_Start_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00f      	beq.n	800532c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005310:	f043 0208 	orr.w	r2, r3, #8
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e022      	b.n	8005372 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535c:	2b00      	cmp	r3, #0
 800535e:	d107      	bne.n	8005370 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800536e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	08005441 	.word	0x08005441
 8005380:	080053ff 	.word	0x080053ff
 8005384:	0800545d 	.word	0x0800545d

08005388 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10e      	bne.n	80053d4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0202 	bic.w	r2, r2, #2
 80053c4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7fb fd47 	bl	8000e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7fb fd23 	bl	8000e3c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10e      	bne.n	8005432 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7fb fcec 	bl	8000e10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7fb fcc8 	bl	8000de4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0203 	bic.w	r2, r2, #3
 8005478:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f043 0208 	orr.w	r2, r3, #8
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7fb fcfa 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	881a      	ldrh	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10e      	bne.n	80054fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fb fcb6 	bl	8000e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	b292      	uxth	r2, r2
 8005518:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10e      	bne.n	800555a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800554a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fb fc5b 	bl	8000e10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b04      	cmp	r3, #4
 800557c:	d13a      	bne.n	80055f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b01      	cmp	r3, #1
 8005586:	d109      	bne.n	800559c <I2S_IRQHandler+0x3a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005592:	2b40      	cmp	r3, #64	@ 0x40
 8005594:	d102      	bne.n	800559c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ffb4 	bl	8005504 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a2:	2b40      	cmp	r3, #64	@ 0x40
 80055a4:	d126      	bne.n	80055f4 <I2S_IRQHandler+0x92>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d11f      	bne.n	80055f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f043 0202 	orr.w	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fc50 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d136      	bne.n	800566e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d109      	bne.n	800561e <I2S_IRQHandler+0xbc>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005614:	2b80      	cmp	r3, #128	@ 0x80
 8005616:	d102      	bne.n	800561e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff45 	bl	80054a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b08      	cmp	r3, #8
 8005626:	d122      	bne.n	800566e <I2S_IRQHandler+0x10c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b20      	cmp	r3, #32
 8005634:	d11b      	bne.n	800566e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005644:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005660:	f043 0204 	orr.w	r2, r3, #4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fb fc13 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a92      	ldr	r2, [pc, #584]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d101      	bne.n	8005696 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005692:	4b92      	ldr	r3, [pc, #584]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005694:	e001      	b.n	800569a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005696:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a8b      	ldr	r2, [pc, #556]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d101      	bne.n	80056b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80056b0:	4b8a      	ldr	r3, [pc, #552]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056b2:	e001      	b.n	80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80056b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c4:	d004      	beq.n	80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 8099 	bne.w	8005802 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d107      	bne.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f925 	bl	8005934 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9c8 	bl	8005a94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d13a      	bne.n	8005784 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d035      	beq.n	8005784 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6e      	ldr	r2, [pc, #440]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005722:	4b6e      	ldr	r3, [pc, #440]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005724:	e001      	b.n	800572a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4969      	ldr	r1, [pc, #420]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005732:	428b      	cmp	r3, r1
 8005734:	d101      	bne.n	800573a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005736:	4b69      	ldr	r3, [pc, #420]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005738:	e001      	b.n	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800573a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800573e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005742:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005752:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f043 0202 	orr.w	r2, r3, #2
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fb fb88 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b08      	cmp	r3, #8
 800578c:	f040 80c3 	bne.w	8005916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80bd 	beq.w	8005916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a49      	ldr	r2, [pc, #292]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80057b6:	4b49      	ldr	r3, [pc, #292]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057b8:	e001      	b.n	80057be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80057ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4944      	ldr	r1, [pc, #272]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057c6:	428b      	cmp	r3, r1
 80057c8:	d101      	bne.n	80057ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80057ca:	4b44      	ldr	r3, [pc, #272]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057cc:	e001      	b.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057d8:	2300      	movs	r3, #0
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	f043 0204 	orr.w	r2, r3, #4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fb fb4a 	bl	8000e94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005800:	e089      	b.n	8005916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d107      	bne.n	800581c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f8be 	bl	8005998 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d107      	bne.n	8005836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f8fd 	bl	8005a30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583c:	2b40      	cmp	r3, #64	@ 0x40
 800583e:	d12f      	bne.n	80058a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d02a      	beq.n	80058a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005858:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1e      	ldr	r2, [pc, #120]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005864:	4b1d      	ldr	r3, [pc, #116]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005866:	e001      	b.n	800586c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005868:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4919      	ldr	r1, [pc, #100]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005874:	428b      	cmp	r3, r1
 8005876:	d101      	bne.n	800587c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005878:	4b18      	ldr	r3, [pc, #96]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800587a:	e001      	b.n	8005880 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800587c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005880:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005884:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	f043 0202 	orr.w	r2, r3, #2
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fafa 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d136      	bne.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d031      	beq.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a07      	ldr	r2, [pc, #28]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80058be:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058c0:	e001      	b.n	80058c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80058c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4902      	ldr	r1, [pc, #8]	@ (80058d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058ce:	428b      	cmp	r3, r1
 80058d0:	d106      	bne.n	80058e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058d2:	4b02      	ldr	r3, [pc, #8]	@ (80058dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058d4:	e006      	b.n	80058e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058d6:	bf00      	nop
 80058d8:	40003800 	.word	0x40003800
 80058dc:	40003400 	.word	0x40003400
 80058e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f043 0204 	orr.w	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fb fac0 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005914:	e000      	b.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005916:	bf00      	nop
}
 8005918:	bf00      	nop
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	1c99      	adds	r1, r3, #2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6251      	str	r1, [r2, #36]	@ 0x24
 8005946:	881a      	ldrh	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d113      	bne.n	800598e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005974:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ffc9 	bl	8005920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	1c99      	adds	r1, r3, #2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80059aa:	8819      	ldrh	r1, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a28 <I2SEx_TxISR_I2SExt+0x90>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d101      	bne.n	80059ba <I2SEx_TxISR_I2SExt+0x22>
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <I2SEx_TxISR_I2SExt+0x94>)
 80059b8:	e001      	b.n	80059be <I2SEx_TxISR_I2SExt+0x26>
 80059ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059be:	460a      	mov	r2, r1
 80059c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d121      	bne.n	8005a1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a12      	ldr	r2, [pc, #72]	@ (8005a28 <I2SEx_TxISR_I2SExt+0x90>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <I2SEx_TxISR_I2SExt+0x50>
 80059e4:	4b11      	ldr	r3, [pc, #68]	@ (8005a2c <I2SEx_TxISR_I2SExt+0x94>)
 80059e6:	e001      	b.n	80059ec <I2SEx_TxISR_I2SExt+0x54>
 80059e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	490d      	ldr	r1, [pc, #52]	@ (8005a28 <I2SEx_TxISR_I2SExt+0x90>)
 80059f4:	428b      	cmp	r3, r1
 80059f6:	d101      	bne.n	80059fc <I2SEx_TxISR_I2SExt+0x64>
 80059f8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <I2SEx_TxISR_I2SExt+0x94>)
 80059fa:	e001      	b.n	8005a00 <I2SEx_TxISR_I2SExt+0x68>
 80059fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff81 	bl	8005920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40003800 	.word	0x40003800
 8005a2c:	40003400 	.word	0x40003400

08005a30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68d8      	ldr	r0, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	1c99      	adds	r1, r3, #2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a48:	b282      	uxth	r2, r0
 8005a4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d113      	bne.n	8005a8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ff4a 	bl	8005920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	@ (8005b24 <I2SEx_RxISR_I2SExt+0x90>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <I2SEx_RxISR_I2SExt+0x16>
 8005aa6:	4b20      	ldr	r3, [pc, #128]	@ (8005b28 <I2SEx_RxISR_I2SExt+0x94>)
 8005aa8:	e001      	b.n	8005aae <I2SEx_RxISR_I2SExt+0x1a>
 8005aaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aae:	68d8      	ldr	r0, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	1c99      	adds	r1, r3, #2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005aba:	b282      	uxth	r2, r0
 8005abc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d121      	bne.n	8005b1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <I2SEx_RxISR_I2SExt+0x90>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <I2SEx_RxISR_I2SExt+0x50>
 8005ae0:	4b11      	ldr	r3, [pc, #68]	@ (8005b28 <I2SEx_RxISR_I2SExt+0x94>)
 8005ae2:	e001      	b.n	8005ae8 <I2SEx_RxISR_I2SExt+0x54>
 8005ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	490d      	ldr	r1, [pc, #52]	@ (8005b24 <I2SEx_RxISR_I2SExt+0x90>)
 8005af0:	428b      	cmp	r3, r1
 8005af2:	d101      	bne.n	8005af8 <I2SEx_RxISR_I2SExt+0x64>
 8005af4:	4b0c      	ldr	r3, [pc, #48]	@ (8005b28 <I2SEx_RxISR_I2SExt+0x94>)
 8005af6:	e001      	b.n	8005afc <I2SEx_RxISR_I2SExt+0x68>
 8005af8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005afc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff03 	bl	8005920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40003800 	.word	0x40003800
 8005b28:	40003400 	.word	0x40003400

08005b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e267      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d075      	beq.n	8005c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b4a:	4b88      	ldr	r3, [pc, #544]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d00c      	beq.n	8005b70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b56:	4b85      	ldr	r3, [pc, #532]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d112      	bne.n	8005b88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b62:	4b82      	ldr	r3, [pc, #520]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b6e:	d10b      	bne.n	8005b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	4b7e      	ldr	r3, [pc, #504]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d05b      	beq.n	8005c34 <HAL_RCC_OscConfig+0x108>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d157      	bne.n	8005c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e242      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x74>
 8005b92:	4b76      	ldr	r3, [pc, #472]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a75      	ldr	r2, [pc, #468]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e01d      	b.n	8005bdc <HAL_RCC_OscConfig+0xb0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x98>
 8005baa:	4b70      	ldr	r3, [pc, #448]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6f      	ldr	r2, [pc, #444]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a6c      	ldr	r2, [pc, #432]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0xb0>
 8005bc4:	4b69      	ldr	r3, [pc, #420]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a68      	ldr	r2, [pc, #416]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b66      	ldr	r3, [pc, #408]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a65      	ldr	r2, [pc, #404]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d013      	beq.n	8005c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fb fee8 	bl	80019b8 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fb fee4 	bl	80019b8 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	@ 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e207      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0xc0>
 8005c0a:	e014      	b.n	8005c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fb fed4 	bl	80019b8 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fb fed0 	bl	80019b8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	@ 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1f3      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c26:	4b51      	ldr	r3, [pc, #324]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0xe8>
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d063      	beq.n	8005d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c42:	4b4a      	ldr	r3, [pc, #296]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c4e:	4b47      	ldr	r3, [pc, #284]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d11c      	bne.n	8005c94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5a:	4b44      	ldr	r3, [pc, #272]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d116      	bne.n	8005c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	4b41      	ldr	r3, [pc, #260]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCC_OscConfig+0x152>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d001      	beq.n	8005c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e1c7      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4937      	ldr	r1, [pc, #220]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c92:	e03a      	b.n	8005d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c9c:	4b34      	ldr	r3, [pc, #208]	@ (8005d70 <HAL_RCC_OscConfig+0x244>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fb fe89 	bl	80019b8 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fb fe85 	bl	80019b8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e1a8      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b28      	ldr	r3, [pc, #160]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4925      	ldr	r1, [pc, #148]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cde:	4b24      	ldr	r3, [pc, #144]	@ (8005d70 <HAL_RCC_OscConfig+0x244>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fb fe68 	bl	80019b8 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fb fe64 	bl	80019b8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e187      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d036      	beq.n	8005d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d016      	beq.n	8005d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1e:	4b15      	ldr	r3, [pc, #84]	@ (8005d74 <HAL_RCC_OscConfig+0x248>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fb fe48 	bl	80019b8 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fb fe44 	bl	80019b8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e167      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_RCC_OscConfig+0x240>)
 8005d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x200>
 8005d4a:	e01b      	b.n	8005d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4c:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <HAL_RCC_OscConfig+0x248>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d52:	f7fb fe31 	bl	80019b8 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d58:	e00e      	b.n	8005d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d5a:	f7fb fe2d 	bl	80019b8 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d907      	bls.n	8005d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e150      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	42470000 	.word	0x42470000
 8005d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d78:	4b88      	ldr	r3, [pc, #544]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ea      	bne.n	8005d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8097 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b81      	ldr	r3, [pc, #516]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10f      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	4b7d      	ldr	r3, [pc, #500]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	4a7c      	ldr	r2, [pc, #496]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005db2:	4b7a      	ldr	r3, [pc, #488]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	4b77      	ldr	r3, [pc, #476]	@ (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d118      	bne.n	8005e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dce:	4b74      	ldr	r3, [pc, #464]	@ (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a73      	ldr	r2, [pc, #460]	@ (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dda:	f7fb fded 	bl	80019b8 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de2:	f7fb fde9 	bl	80019b8 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e10c      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df4:	4b6a      	ldr	r3, [pc, #424]	@ (8005fa0 <HAL_RCC_OscConfig+0x474>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x2ea>
 8005e08:	4b64      	ldr	r3, [pc, #400]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0c:	4a63      	ldr	r2, [pc, #396]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e14:	e01c      	b.n	8005e50 <HAL_RCC_OscConfig+0x324>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x30c>
 8005e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e22:	4a5e      	ldr	r2, [pc, #376]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e24:	f043 0304 	orr.w	r3, r3, #4
 8005e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0x324>
 8005e38:	4b58      	ldr	r3, [pc, #352]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3c:	4a57      	ldr	r2, [pc, #348]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e44:	4b55      	ldr	r3, [pc, #340]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e48:	4a54      	ldr	r2, [pc, #336]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e4a:	f023 0304 	bic.w	r3, r3, #4
 8005e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fb fdae 	bl	80019b8 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fb fdaa 	bl	80019b8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0cb      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	4b49      	ldr	r3, [pc, #292]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ee      	beq.n	8005e60 <HAL_RCC_OscConfig+0x334>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e84:	f7fb fd98 	bl	80019b8 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fb fd94 	bl	80019b8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e0b5      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ee      	bne.n	8005e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb4:	4b39      	ldr	r3, [pc, #228]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb8:	4a38      	ldr	r2, [pc, #224]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a1 	beq.w	800600c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eca:	4b34      	ldr	r3, [pc, #208]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d05c      	beq.n	8005f90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d141      	bne.n	8005f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <HAL_RCC_OscConfig+0x478>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fb fd68 	bl	80019b8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fb fd64 	bl	80019b8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e087      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	3b01      	subs	r3, #1
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	491b      	ldr	r1, [pc, #108]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f34:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_RCC_OscConfig+0x478>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7fb fd3d 	bl	80019b8 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fb fd39 	bl	80019b8 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e05c      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f54:	4b11      	ldr	r3, [pc, #68]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x416>
 8005f60:	e054      	b.n	800600c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <HAL_RCC_OscConfig+0x478>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fb fd26 	bl	80019b8 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f70:	f7fb fd22 	bl	80019b8 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e045      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <HAL_RCC_OscConfig+0x470>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x444>
 8005f8e:	e03d      	b.n	800600c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e038      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <HAL_RCC_OscConfig+0x4ec>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d028      	beq.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d121      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d11a      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d111      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800

0800601c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0cc      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006030:	4b68      	ldr	r3, [pc, #416]	@ (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d90c      	bls.n	8006058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	4b65      	ldr	r3, [pc, #404]	@ (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b63      	ldr	r3, [pc, #396]	@ (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0b8      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d020      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006070:	4b59      	ldr	r3, [pc, #356]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	4a58      	ldr	r2, [pc, #352]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800607a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006088:	4b53      	ldr	r3, [pc, #332]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a52      	ldr	r2, [pc, #328]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006094:	4b50      	ldr	r3, [pc, #320]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	494d      	ldr	r1, [pc, #308]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d044      	beq.n	800613c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	4b47      	ldr	r3, [pc, #284]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d119      	bne.n	80060fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e07f      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d003      	beq.n	80060da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d107      	bne.n	80060ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060da:	4b3f      	ldr	r3, [pc, #252]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e06f      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ea:	4b3b      	ldr	r3, [pc, #236]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e067      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060fa:	4b37      	ldr	r3, [pc, #220]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f023 0203 	bic.w	r2, r3, #3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4934      	ldr	r1, [pc, #208]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	4313      	orrs	r3, r2
 800610a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800610c:	f7fb fc54 	bl	80019b8 <HAL_GetTick>
 8006110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006112:	e00a      	b.n	800612a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006114:	f7fb fc50 	bl	80019b8 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e04f      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612a:	4b2b      	ldr	r3, [pc, #172]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 020c 	and.w	r2, r3, #12
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	429a      	cmp	r2, r3
 800613a:	d1eb      	bne.n	8006114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800613c:	4b25      	ldr	r3, [pc, #148]	@ (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d20c      	bcs.n	8006164 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614a:	4b22      	ldr	r3, [pc, #136]	@ (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006152:	4b20      	ldr	r3, [pc, #128]	@ (80061d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e032      	b.n	80061ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006170:	4b19      	ldr	r3, [pc, #100]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4916      	ldr	r1, [pc, #88]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800618e:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	490e      	ldr	r1, [pc, #56]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061a2:	f000 f821 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4b0b      	ldr	r3, [pc, #44]	@ (80061d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	490a      	ldr	r1, [pc, #40]	@ (80061dc <HAL_RCC_ClockConfig+0x1c0>)
 80061b4:	5ccb      	ldrb	r3, [r1, r3]
 80061b6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ba:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <HAL_RCC_ClockConfig+0x1c4>)
 80061bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <HAL_RCC_ClockConfig+0x1c8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fb fbb4 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40023c00 	.word	0x40023c00
 80061d8:	40023800 	.word	0x40023800
 80061dc:	08009cf8 	.word	0x08009cf8
 80061e0:	20000004 	.word	0x20000004
 80061e4:	20000010 	.word	0x20000010

080061e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ec:	b094      	sub	sp, #80	@ 0x50
 80061ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006200:	4b79      	ldr	r3, [pc, #484]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 030c 	and.w	r3, r3, #12
 8006208:	2b08      	cmp	r3, #8
 800620a:	d00d      	beq.n	8006228 <HAL_RCC_GetSysClockFreq+0x40>
 800620c:	2b08      	cmp	r3, #8
 800620e:	f200 80e1 	bhi.w	80063d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x34>
 8006216:	2b04      	cmp	r3, #4
 8006218:	d003      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0x3a>
 800621a:	e0db      	b.n	80063d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800621c:	4b73      	ldr	r3, [pc, #460]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x204>)
 800621e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006220:	e0db      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006222:	4b73      	ldr	r3, [pc, #460]	@ (80063f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006226:	e0d8      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006228:	4b6f      	ldr	r3, [pc, #444]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006230:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006232:	4b6d      	ldr	r3, [pc, #436]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d063      	beq.n	8006306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800623e:	4b6a      	ldr	r3, [pc, #424]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	2200      	movs	r2, #0
 8006246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30
 8006252:	2300      	movs	r3, #0
 8006254:	637b      	str	r3, [r7, #52]	@ 0x34
 8006256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	f04f 0000 	mov.w	r0, #0
 8006262:	f04f 0100 	mov.w	r1, #0
 8006266:	0159      	lsls	r1, r3, #5
 8006268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800626c:	0150      	lsls	r0, r2, #5
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4621      	mov	r1, r4
 8006274:	1a51      	subs	r1, r2, r1
 8006276:	6139      	str	r1, [r7, #16]
 8006278:	4629      	mov	r1, r5
 800627a:	eb63 0301 	sbc.w	r3, r3, r1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800628c:	4659      	mov	r1, fp
 800628e:	018b      	lsls	r3, r1, #6
 8006290:	4651      	mov	r1, sl
 8006292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006296:	4651      	mov	r1, sl
 8006298:	018a      	lsls	r2, r1, #6
 800629a:	4651      	mov	r1, sl
 800629c:	ebb2 0801 	subs.w	r8, r2, r1
 80062a0:	4659      	mov	r1, fp
 80062a2:	eb63 0901 	sbc.w	r9, r3, r1
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ba:	4690      	mov	r8, r2
 80062bc:	4699      	mov	r9, r3
 80062be:	4623      	mov	r3, r4
 80062c0:	eb18 0303 	adds.w	r3, r8, r3
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	462b      	mov	r3, r5
 80062c8:	eb49 0303 	adc.w	r3, r9, r3
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062da:	4629      	mov	r1, r5
 80062dc:	024b      	lsls	r3, r1, #9
 80062de:	4621      	mov	r1, r4
 80062e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062e4:	4621      	mov	r1, r4
 80062e6:	024a      	lsls	r2, r1, #9
 80062e8:	4610      	mov	r0, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ee:	2200      	movs	r2, #0
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062f8:	f7f9 ff66 	bl	80001c8 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4613      	mov	r3, r2
 8006302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006304:	e058      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006306:	4b38      	ldr	r3, [pc, #224]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	099b      	lsrs	r3, r3, #6
 800630c:	2200      	movs	r2, #0
 800630e:	4618      	mov	r0, r3
 8006310:	4611      	mov	r1, r2
 8006312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	2300      	movs	r3, #0
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
 800631c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	0159      	lsls	r1, r3, #5
 800632e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006332:	0150      	lsls	r0, r2, #5
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4641      	mov	r1, r8
 800633a:	ebb2 0a01 	subs.w	sl, r2, r1
 800633e:	4649      	mov	r1, r9
 8006340:	eb63 0b01 	sbc.w	fp, r3, r1
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006358:	ebb2 040a 	subs.w	r4, r2, sl
 800635c:	eb63 050b 	sbc.w	r5, r3, fp
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	00eb      	lsls	r3, r5, #3
 800636a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800636e:	00e2      	lsls	r2, r4, #3
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	4643      	mov	r3, r8
 8006376:	18e3      	adds	r3, r4, r3
 8006378:	603b      	str	r3, [r7, #0]
 800637a:	464b      	mov	r3, r9
 800637c:	eb45 0303 	adc.w	r3, r5, r3
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800638e:	4629      	mov	r1, r5
 8006390:	028b      	lsls	r3, r1, #10
 8006392:	4621      	mov	r1, r4
 8006394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006398:	4621      	mov	r1, r4
 800639a:	028a      	lsls	r2, r1, #10
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a2:	2200      	movs	r2, #0
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	61fa      	str	r2, [r7, #28]
 80063a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ac:	f7f9 ff0c 	bl	80001c8 <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4613      	mov	r3, r2
 80063b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	3301      	adds	r3, #1
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d4:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x204>)
 80063d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3750      	adds	r7, #80	@ 0x50
 80063e0:	46bd      	mov	sp, r7
 80063e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800
 80063ec:	00f42400 	.word	0x00f42400
 80063f0:	007a1200 	.word	0x007a1200

080063f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f8:	4b03      	ldr	r3, [pc, #12]	@ (8006408 <HAL_RCC_GetHCLKFreq+0x14>)
 80063fa:	681b      	ldr	r3, [r3, #0]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000004 	.word	0x20000004

0800640c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006410:	f7ff fff0 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	@ (800642c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0a9b      	lsrs	r3, r3, #10
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	@ (8006430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	08009d08 	.word	0x08009d08

08006434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006438:	f7ff ffdc 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0b5b      	lsrs	r3, r3, #13
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4903      	ldr	r1, [pc, #12]	@ (8006458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40023800 	.word	0x40023800
 8006458:	08009d08 	.word	0x08009d08

0800645c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d105      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006480:	2b00      	cmp	r3, #0
 8006482:	d035      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006484:	4b62      	ldr	r3, [pc, #392]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800648a:	f7fb fa95 	bl	80019b8 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006490:	e008      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006492:	f7fb fa91 	bl	80019b8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0b0      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f0      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	019a      	lsls	r2, r3, #6
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	071b      	lsls	r3, r3, #28
 80064bc:	4955      	ldr	r1, [pc, #340]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064c4:	4b52      	ldr	r3, [pc, #328]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ca:	f7fb fa75 	bl	80019b8 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064d2:	f7fb fa71 	bl	80019b8 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e090      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8083 	beq.w	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	4b44      	ldr	r3, [pc, #272]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	4a43      	ldr	r2, [pc, #268]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650c:	6413      	str	r3, [r2, #64]	@ 0x40
 800650e:	4b41      	ldr	r3, [pc, #260]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800651a:	4b3f      	ldr	r3, [pc, #252]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a3e      	ldr	r2, [pc, #248]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006524:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006526:	f7fb fa47 	bl	80019b8 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fb fa43 	bl	80019b8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e062      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006540:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800654c:	4b31      	ldr	r3, [pc, #196]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006554:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02f      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d028      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800656a:	4b2a      	ldr	r3, [pc, #168]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006572:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006574:	4b29      	ldr	r3, [pc, #164]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800657a:	4b28      	ldr	r3, [pc, #160]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006580:	4a24      	ldr	r2, [pc, #144]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006586:	4b23      	ldr	r3, [pc, #140]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d114      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006592:	f7fb fa11 	bl	80019b8 <HAL_GetTick>
 8006596:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006598:	e00a      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659a:	f7fb fa0d 	bl	80019b8 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e02a      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b0:	4b18      	ldr	r3, [pc, #96]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ee      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80065ca:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065de:	490d      	ldr	r1, [pc, #52]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	608b      	str	r3, [r1, #8]
 80065e4:	e005      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065f0:	6093      	str	r3, [r2, #8]
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fe:	4905      	ldr	r1, [pc, #20]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006600:	4313      	orrs	r3, r2
 8006602:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	42470068 	.word	0x42470068
 8006614:	40023800 	.word	0x40023800
 8006618:	40007000 	.word	0x40007000
 800661c:	42470e40 	.word	0x42470e40

08006620 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d13f      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800663e:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006646:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006654:	d12f      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006656:	4b1f      	ldr	r3, [pc, #124]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006658:	617b      	str	r3, [r7, #20]
          break;
 800665a:	e02f      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800665c:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006668:	d108      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800666a:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006672:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e007      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800667c:	4b14      	ldr	r3, [pc, #80]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800668c:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800668e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006692:	099b      	lsrs	r3, r3, #6
 8006694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a6:	0f1b      	lsrs	r3, r3, #28
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	617b      	str	r3, [r7, #20]
          break;
 80066b4:	e002      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
          break;
 80066ba:	bf00      	nop
        }
      }
      break;
 80066bc:	e000      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80066be:	bf00      	nop
    }
  }
  return frequency;
 80066c0:	697b      	ldr	r3, [r7, #20]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
 80066d4:	00bb8000 	.word	0x00bb8000
 80066d8:	007a1200 	.word	0x007a1200
 80066dc:	00f42400 	.word	0x00f42400

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e07b      	b.n	80067ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006702:	d009      	beq.n	8006718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e005      	b.n	8006718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fa fc0e 	bl	8000f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800674e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	ea42 0103 	orr.w	r1, r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f003 0104 	and.w	r1, r3, #4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	f003 0210 	and.w	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e042      	b.n	800688a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fa fcc7 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2224      	movs	r2, #36	@ 0x24
 8006822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006834:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fc86 	bl	8007148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800684a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800685a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800686a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b0ba      	sub	sp, #232	@ 0xe8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10f      	bne.n	80068fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_UART_IRQHandler+0x66>
 80068e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb69 	bl	8006fca <UART_Receive_IT>
      return;
 80068f8:	e25b      	b.n	8006db2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80de 	beq.w	8006ac0 <HAL_UART_IRQHandler+0x22c>
 8006904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006914:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80d1 	beq.w	8006ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <HAL_UART_IRQHandler+0xae>
 800692a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	f043 0201 	orr.w	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <HAL_UART_IRQHandler+0xd2>
 800694e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695e:	f043 0202 	orr.w	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <HAL_UART_IRQHandler+0xf6>
 8006972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f043 0204 	orr.w	r2, r3, #4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d011      	beq.n	80069ba <HAL_UART_IRQHandler+0x126>
 8006996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f043 0208 	orr.w	r2, r3, #8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 81f2 	beq.w	8006da8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <HAL_UART_IRQHandler+0x14e>
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 faf4 	bl	8006fca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ec:	2b40      	cmp	r3, #64	@ 0x40
 80069ee:	bf0c      	ite	eq
 80069f0:	2301      	moveq	r3, #1
 80069f2:	2300      	movne	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d103      	bne.n	8006a0e <HAL_UART_IRQHandler+0x17a>
 8006a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d04f      	beq.n	8006aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9fc 	bl	8006e0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1e:	2b40      	cmp	r3, #64	@ 0x40
 8006a20:	d141      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3314      	adds	r3, #20
 8006a28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3314      	adds	r3, #20
 8006a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1d9      	bne.n	8006a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d013      	beq.n	8006a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c74 <HAL_UART_IRQHandler+0x3e0>)
 8006a7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fb fa9e 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d016      	beq.n	8006abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	e00e      	b.n	8006abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f99e 	bl	8006de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	e00a      	b.n	8006abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f99a 	bl	8006de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	e006      	b.n	8006abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f996 	bl	8006de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006aba:	e175      	b.n	8006da8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abc:	bf00      	nop
    return;
 8006abe:	e173      	b.n	8006da8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	f040 814f 	bne.w	8006d68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 8148 	beq.w	8006d68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8141 	beq.w	8006d68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	f040 80b6 	bne.w	8006c78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8145 	beq.w	8006dac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	f080 813e 	bcs.w	8006dac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b42:	f000 8088 	beq.w	8006c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1d9      	bne.n	8006b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e1      	bne.n	8006b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e3      	bne.n	8006c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fb f947 	bl	8001ee4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8c1 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c72:	e09b      	b.n	8006dac <HAL_UART_IRQHandler+0x518>
 8006c74:	08006ed3 	.word	0x08006ed3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 808e 	beq.w	8006db0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8089 	beq.w	8006db0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e3      	bne.n	8006c9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e3      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0310 	bic.w	r3, r3, #16
 8006d32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d40:	61fa      	str	r2, [r7, #28]
 8006d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	69b9      	ldr	r1, [r7, #24]
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e3      	bne.n	8006d1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f847 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d66:	e023      	b.n	8006db0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <HAL_UART_IRQHandler+0x4f4>
 8006d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f8ba 	bl	8006efa <UART_Transmit_IT>
    return;
 8006d86:	e014      	b.n	8006db2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <HAL_UART_IRQHandler+0x51e>
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f8fa 	bl	8006f9a <UART_EndTransmit_IT>
    return;
 8006da6:	e004      	b.n	8006db2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006da8:	bf00      	nop
 8006daa:	e002      	b.n	8006db2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006db0:	bf00      	nop
  }
}
 8006db2:	37e8      	adds	r7, #232	@ 0xe8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b095      	sub	sp, #84	@ 0x54
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e34:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e5      	bne.n	8006e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3314      	adds	r3, #20
 8006e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d119      	bne.n	8006eb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea4:	61ba      	str	r2, [r7, #24]
 8006ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6979      	ldr	r1, [r7, #20]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e5      	bne.n	8006e84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ec6:	bf00      	nop
 8006ec8:	3754      	adds	r7, #84	@ 0x54
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff77 	bl	8006de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b21      	cmp	r3, #33	@ 0x21
 8006f0c:	d13e      	bne.n	8006f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f16:	d114      	bne.n	8006f42 <UART_Transmit_IT+0x48>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d110      	bne.n	8006f42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	621a      	str	r2, [r3, #32]
 8006f40:	e008      	b.n	8006f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	1c59      	adds	r1, r3, #1
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6211      	str	r1, [r2, #32]
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4619      	mov	r1, r3
 8006f62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10f      	bne.n	8006f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f8c:	2302      	movs	r3, #2
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fefc 	bl	8006db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08c      	sub	sp, #48	@ 0x30
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b22      	cmp	r3, #34	@ 0x22
 8006fdc:	f040 80ae 	bne.w	800713c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe8:	d117      	bne.n	800701a <UART_Receive_IT+0x50>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d113      	bne.n	800701a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007008:	b29a      	uxth	r2, r3
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	@ 0x28
 8007018:	e026      	b.n	8007068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702c:	d007      	beq.n	800703e <UART_Receive_IT+0x74>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <UART_Receive_IT+0x82>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e008      	b.n	800705e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29b      	uxth	r3, r3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4619      	mov	r1, r3
 8007076:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007078:	2b00      	cmp	r3, #0
 800707a:	d15d      	bne.n	8007138 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0220 	bic.w	r2, r2, #32
 800708a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800709a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695a      	ldr	r2, [r3, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d135      	bne.n	800712e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b10      	cmp	r3, #16
 8007108:	d10a      	bne.n	8007120 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fe64 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
 800712c:	e002      	b.n	8007134 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fe4c 	bl	8006dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e002      	b.n	800713e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3730      	adds	r7, #48	@ 0x30
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800714c:	b0c0      	sub	sp, #256	@ 0x100
 800714e:	af00      	add	r7, sp, #0
 8007150:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	ea40 0301 	orr.w	r3, r0, r1
 8007170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	431a      	orrs	r2, r3
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	431a      	orrs	r2, r3
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071a0:	f021 010c 	bic.w	r1, r1, #12
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071ae:	430b      	orrs	r3, r1
 80071b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c2:	6999      	ldr	r1, [r3, #24]
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	ea40 0301 	orr.w	r3, r0, r1
 80071ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007414 <UART_SetConfig+0x2cc>)
 80071d8:	429a      	cmp	r2, r3
 80071da:	d005      	beq.n	80071e8 <UART_SetConfig+0xa0>
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007418 <UART_SetConfig+0x2d0>)
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d104      	bne.n	80071f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7ff f924 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 80071ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071f0:	e003      	b.n	80071fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071f2:	f7ff f90b 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 80071f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007204:	f040 810c 	bne.w	8007420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720c:	2200      	movs	r2, #0
 800720e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007212:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	1891      	adds	r1, r2, r2
 8007220:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007222:	415b      	adcs	r3, r3
 8007224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800722a:	4621      	mov	r1, r4
 800722c:	eb12 0801 	adds.w	r8, r2, r1
 8007230:	4629      	mov	r1, r5
 8007232:	eb43 0901 	adc.w	r9, r3, r1
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800724a:	4690      	mov	r8, r2
 800724c:	4699      	mov	r9, r3
 800724e:	4623      	mov	r3, r4
 8007250:	eb18 0303 	adds.w	r3, r8, r3
 8007254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007258:	462b      	mov	r3, r5
 800725a:	eb49 0303 	adc.w	r3, r9, r3
 800725e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800726e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007276:	460b      	mov	r3, r1
 8007278:	18db      	adds	r3, r3, r3
 800727a:	653b      	str	r3, [r7, #80]	@ 0x50
 800727c:	4613      	mov	r3, r2
 800727e:	eb42 0303 	adc.w	r3, r2, r3
 8007282:	657b      	str	r3, [r7, #84]	@ 0x54
 8007284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800728c:	f7f8 ff9c 	bl	80001c8 <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4b61      	ldr	r3, [pc, #388]	@ (800741c <UART_SetConfig+0x2d4>)
 8007296:	fba3 2302 	umull	r2, r3, r3, r2
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	011c      	lsls	r4, r3, #4
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072b8:	415b      	adcs	r3, r3
 80072ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072c0:	4641      	mov	r1, r8
 80072c2:	eb12 0a01 	adds.w	sl, r2, r1
 80072c6:	4649      	mov	r1, r9
 80072c8:	eb43 0b01 	adc.w	fp, r3, r1
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e0:	4692      	mov	sl, r2
 80072e2:	469b      	mov	fp, r3
 80072e4:	4643      	mov	r3, r8
 80072e6:	eb1a 0303 	adds.w	r3, sl, r3
 80072ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072ee:	464b      	mov	r3, r9
 80072f0:	eb4b 0303 	adc.w	r3, fp, r3
 80072f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007304:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800730c:	460b      	mov	r3, r1
 800730e:	18db      	adds	r3, r3, r3
 8007310:	643b      	str	r3, [r7, #64]	@ 0x40
 8007312:	4613      	mov	r3, r2
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	647b      	str	r3, [r7, #68]	@ 0x44
 800731a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800731e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007322:	f7f8 ff51 	bl	80001c8 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4611      	mov	r1, r2
 800732c:	4b3b      	ldr	r3, [pc, #236]	@ (800741c <UART_SetConfig+0x2d4>)
 800732e:	fba3 2301 	umull	r2, r3, r3, r1
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2264      	movs	r2, #100	@ 0x64
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	1acb      	subs	r3, r1, r3
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007342:	4b36      	ldr	r3, [pc, #216]	@ (800741c <UART_SetConfig+0x2d4>)
 8007344:	fba3 2302 	umull	r2, r3, r3, r2
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007350:	441c      	add	r4, r3
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800735c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800736c:	415b      	adcs	r3, r3
 800736e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007374:	4641      	mov	r1, r8
 8007376:	1851      	adds	r1, r2, r1
 8007378:	6339      	str	r1, [r7, #48]	@ 0x30
 800737a:	4649      	mov	r1, r9
 800737c:	414b      	adcs	r3, r1
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800738c:	4659      	mov	r1, fp
 800738e:	00cb      	lsls	r3, r1, #3
 8007390:	4651      	mov	r1, sl
 8007392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007396:	4651      	mov	r1, sl
 8007398:	00ca      	lsls	r2, r1, #3
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	4642      	mov	r2, r8
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073a8:	464b      	mov	r3, r9
 80073aa:	460a      	mov	r2, r1
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073c8:	460b      	mov	r3, r1
 80073ca:	18db      	adds	r3, r3, r3
 80073cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ce:	4613      	mov	r3, r2
 80073d0:	eb42 0303 	adc.w	r3, r2, r3
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073de:	f7f8 fef3 	bl	80001c8 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <UART_SetConfig+0x2d4>)
 80073e8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	2164      	movs	r1, #100	@ 0x64
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	3332      	adds	r3, #50	@ 0x32
 80073fa:	4a08      	ldr	r2, [pc, #32]	@ (800741c <UART_SetConfig+0x2d4>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	f003 0207 	and.w	r2, r3, #7
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4422      	add	r2, r4
 800740e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007410:	e106      	b.n	8007620 <UART_SetConfig+0x4d8>
 8007412:	bf00      	nop
 8007414:	40011000 	.word	0x40011000
 8007418:	40011400 	.word	0x40011400
 800741c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007424:	2200      	movs	r2, #0
 8007426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800742a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800742e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007432:	4642      	mov	r2, r8
 8007434:	464b      	mov	r3, r9
 8007436:	1891      	adds	r1, r2, r2
 8007438:	6239      	str	r1, [r7, #32]
 800743a:	415b      	adcs	r3, r3
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
 800743e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007442:	4641      	mov	r1, r8
 8007444:	1854      	adds	r4, r2, r1
 8007446:	4649      	mov	r1, r9
 8007448:	eb43 0501 	adc.w	r5, r3, r1
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	00eb      	lsls	r3, r5, #3
 8007456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800745a:	00e2      	lsls	r2, r4, #3
 800745c:	4614      	mov	r4, r2
 800745e:	461d      	mov	r5, r3
 8007460:	4643      	mov	r3, r8
 8007462:	18e3      	adds	r3, r4, r3
 8007464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007468:	464b      	mov	r3, r9
 800746a:	eb45 0303 	adc.w	r3, r5, r3
 800746e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800747e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800748e:	4629      	mov	r1, r5
 8007490:	008b      	lsls	r3, r1, #2
 8007492:	4621      	mov	r1, r4
 8007494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007498:	4621      	mov	r1, r4
 800749a:	008a      	lsls	r2, r1, #2
 800749c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074a0:	f7f8 fe92 	bl	80001c8 <__aeabi_uldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4b60      	ldr	r3, [pc, #384]	@ (800762c <UART_SetConfig+0x4e4>)
 80074aa:	fba3 2302 	umull	r2, r3, r3, r2
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	011c      	lsls	r4, r3, #4
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	1891      	adds	r1, r2, r2
 80074ca:	61b9      	str	r1, [r7, #24]
 80074cc:	415b      	adcs	r3, r3
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d4:	4641      	mov	r1, r8
 80074d6:	1851      	adds	r1, r2, r1
 80074d8:	6139      	str	r1, [r7, #16]
 80074da:	4649      	mov	r1, r9
 80074dc:	414b      	adcs	r3, r1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ec:	4659      	mov	r1, fp
 80074ee:	00cb      	lsls	r3, r1, #3
 80074f0:	4651      	mov	r1, sl
 80074f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f6:	4651      	mov	r1, sl
 80074f8:	00ca      	lsls	r2, r1, #3
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	4642      	mov	r2, r8
 8007502:	189b      	adds	r3, r3, r2
 8007504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007508:	464b      	mov	r3, r9
 800750a:	460a      	mov	r2, r1
 800750c:	eb42 0303 	adc.w	r3, r2, r3
 8007510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800751e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800752c:	4649      	mov	r1, r9
 800752e:	008b      	lsls	r3, r1, #2
 8007530:	4641      	mov	r1, r8
 8007532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007536:	4641      	mov	r1, r8
 8007538:	008a      	lsls	r2, r1, #2
 800753a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800753e:	f7f8 fe43 	bl	80001c8 <__aeabi_uldivmod>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4611      	mov	r1, r2
 8007548:	4b38      	ldr	r3, [pc, #224]	@ (800762c <UART_SetConfig+0x4e4>)
 800754a:	fba3 2301 	umull	r2, r3, r3, r1
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	2264      	movs	r2, #100	@ 0x64
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	1acb      	subs	r3, r1, r3
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	3332      	adds	r3, #50	@ 0x32
 800755c:	4a33      	ldr	r2, [pc, #204]	@ (800762c <UART_SetConfig+0x4e4>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007568:	441c      	add	r4, r3
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756e:	2200      	movs	r2, #0
 8007570:	673b      	str	r3, [r7, #112]	@ 0x70
 8007572:	677a      	str	r2, [r7, #116]	@ 0x74
 8007574:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	415b      	adcs	r3, r3
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ba:	464b      	mov	r3, r9
 80075bc:	460a      	mov	r2, r1
 80075be:	eb42 0303 	adc.w	r3, r2, r3
 80075c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075dc:	4649      	mov	r1, r9
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	4641      	mov	r1, r8
 80075e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e6:	4641      	mov	r1, r8
 80075e8:	008a      	lsls	r2, r1, #2
 80075ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075ee:	f7f8 fdeb 	bl	80001c8 <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <UART_SetConfig+0x4e4>)
 80075f8:	fba3 1302 	umull	r1, r3, r3, r2
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	2164      	movs	r1, #100	@ 0x64
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	3332      	adds	r3, #50	@ 0x32
 800760a:	4a08      	ldr	r2, [pc, #32]	@ (800762c <UART_SetConfig+0x4e4>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4422      	add	r2, r4
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8007634:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 8007636:	2200      	movs	r2, #0
 8007638:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800763a:	4b0f      	ldr	r3, [pc, #60]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 800763c:	2201      	movs	r2, #1
 800763e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007640:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 8007642:	4a0e      	ldr	r2, [pc, #56]	@ (800767c <MX_PDM2PCM_Init+0x4c>)
 8007644:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8007646:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 8007648:	2201      	movs	r2, #1
 800764a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 800764e:	2201      	movs	r2, #1
 8007650:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007652:	4809      	ldr	r0, [pc, #36]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 8007654:	f001 fd38 	bl	80090c8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <MX_PDM2PCM_Init+0x50>)
 800765a:	2202      	movs	r2, #2
 800765c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800765e:	4b08      	ldr	r3, [pc, #32]	@ (8007680 <MX_PDM2PCM_Init+0x50>)
 8007660:	2210      	movs	r2, #16
 8007662:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007664:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <MX_PDM2PCM_Init+0x50>)
 8007666:	2200      	movs	r2, #0
 8007668:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800766a:	4905      	ldr	r1, [pc, #20]	@ (8007680 <MX_PDM2PCM_Init+0x50>)
 800766c:	4802      	ldr	r0, [pc, #8]	@ (8007678 <MX_PDM2PCM_Init+0x48>)
 800766e:	f001 fdfb 	bl	8009268 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007672:	bf00      	nop
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20003b90 	.word	0x20003b90
 800767c:	7d70a3d6 	.word	0x7d70a3d6
 8007680:	20003bdc 	.word	0x20003bdc

08007684 <MX_PDM2PCM_Process>:

/* USER CODE BEGIN 4 */

/* process function */
uint8_t MX_PDM2PCM_Process(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  // La librería PDM a menudo espera uint8_t* para la entrada PDM (ya que son bits empaquetados)
  // y int16_t* para la salida PCM (audio con signo).

  // Ajusta los casts según la firma exacta de PDM_Filter en tu pdm_filter.h.
  // Es muy común que la entrada PDM sea (uint8_t*) y la salida PCM (int16_t*).
  PDM_Filter((uint8_t*)PDMBuf, (int16_t*)PCMBuf, &PDM1_filter_handler);
 800768e:	4a05      	ldr	r2, [pc, #20]	@ (80076a4 <MX_PDM2PCM_Process+0x20>)
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 feee 	bl	8009474 <PDM_Filter>

  // Si la función PDM_Filter no devuelve un código de error, asumimos éxito.
  return 0; // Retorna 0 para éxito (AUDIO_OK)
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20003b90 	.word	0x20003b90

080076a8 <D16_GENERIC>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 80076b0:	b089      	sub	sp, #36	@ 0x24
 80076b2:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80076b4:	6993      	ldr	r3, [r2, #24]
 80076b6:	9406      	str	r4, [sp, #24]
 80076b8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80076ba:	9307      	str	r3, [sp, #28]
 80076bc:	9402      	str	r4, [sp, #8]
 80076be:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 80076c2:	69d3      	ldr	r3, [r2, #28]
 80076c4:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80076c6:	9103      	str	r1, [sp, #12]
 80076c8:	2d00      	cmp	r5, #0
 80076ca:	d066      	beq.n	800779a <D16_GENERIC+0xf2>
 80076cc:	f004 0520 	and.w	r5, r4, #32
 80076d0:	f004 0410 	and.w	r4, r4, #16
 80076d4:	9505      	str	r5, [sp, #20]
 80076d6:	4937      	ldr	r1, [pc, #220]	@ (80077b4 <D16_GENERIC+0x10c>)
 80076d8:	9404      	str	r4, [sp, #16]
 80076da:	f04f 0c00 	mov.w	ip, #0
 80076de:	4635      	mov	r5, r6
 80076e0:	e04f      	b.n	8007782 <D16_GENERIC+0xda>
 80076e2:	5d87      	ldrb	r7, [r0, r6]
 80076e4:	7804      	ldrb	r4, [r0, #0]
 80076e6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80076ea:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80076ee:	b2e6      	uxtb	r6, r4
 80076f0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80076f4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80076f8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80076fc:	4433      	add	r3, r6
 80076fe:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8007702:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8007706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800770a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800770e:	0aa3      	lsrs	r3, r4, #10
 8007710:	4c29      	ldr	r4, [pc, #164]	@ (80077b8 <D16_GENERIC+0x110>)
 8007712:	fb26 5404 	smlad	r4, r6, r4, r5
 8007716:	4d29      	ldr	r5, [pc, #164]	@ (80077bc <D16_GENERIC+0x114>)
 8007718:	fb26 f505 	smuad	r5, r6, r5
 800771c:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8007720:	eb04 080a 	add.w	r8, r4, sl
 8007724:	eba8 080b 	sub.w	r8, r8, fp
 8007728:	4646      	mov	r6, r8
 800772a:	17f7      	asrs	r7, r6, #31
 800772c:	e9cd 6700 	strd	r6, r7, [sp]
 8007730:	9e04      	ldr	r6, [sp, #16]
 8007732:	f10c 0e01 	add.w	lr, ip, #1
 8007736:	b16e      	cbz	r6, 8007754 <D16_GENERIC+0xac>
 8007738:	6a16      	ldr	r6, [r2, #32]
 800773a:	9f01      	ldr	r7, [sp, #4]
 800773c:	fba8 ab06 	umull	sl, fp, r8, r6
 8007740:	fb06 bb07 	mla	fp, r6, r7, fp
 8007744:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8007748:	f14b 0900 	adc.w	r9, fp, #0
 800774c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007750:	46a3      	mov	fp, r4
 8007752:	4654      	mov	r4, sl
 8007754:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007756:	9f02      	ldr	r7, [sp, #8]
 8007758:	0424      	lsls	r4, r4, #16
 800775a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	fb0c fc06 	mul.w	ip, ip, r6
 8007766:	fbc7 8904 	smlal	r8, r9, r7, r4
 800776a:	9e03      	ldr	r6, [sp, #12]
 800776c:	464f      	mov	r7, r9
 800776e:	10bc      	asrs	r4, r7, #2
 8007770:	f304 040f 	ssat	r4, #16, r4
 8007774:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8007778:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 800777a:	fa1f fc8e 	uxth.w	ip, lr
 800777e:	4564      	cmp	r4, ip
 8007780:	d90a      	bls.n	8007798 <D16_GENERIC+0xf0>
 8007782:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8007784:	2c01      	cmp	r4, #1
 8007786:	b2e6      	uxtb	r6, r4
 8007788:	d1ab      	bne.n	80076e2 <D16_GENERIC+0x3a>
 800778a:	9e05      	ldr	r6, [sp, #20]
 800778c:	f850 4b02 	ldr.w	r4, [r0], #2
 8007790:	2e00      	cmp	r6, #0
 8007792:	d0ac      	beq.n	80076ee <D16_GENERIC+0x46>
 8007794:	ba64      	rev16	r4, r4
 8007796:	e7aa      	b.n	80076ee <D16_GENERIC+0x46>
 8007798:	462e      	mov	r6, r5
 800779a:	9906      	ldr	r1, [sp, #24]
 800779c:	61d3      	str	r3, [r2, #28]
 800779e:	9b07      	ldr	r3, [sp, #28]
 80077a0:	6096      	str	r6, [r2, #8]
 80077a2:	2000      	movs	r0, #0
 80077a4:	60d1      	str	r1, [r2, #12]
 80077a6:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 80077aa:	6193      	str	r3, [r2, #24]
 80077ac:	b009      	add	sp, #36	@ 0x24
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	bf00      	nop
 80077b4:	20000018 	.word	0x20000018
 80077b8:	00030001 	.word	0x00030001
 80077bc:	00010003 	.word	0x00010003

080077c0 <D24_GENERIC>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80077c6:	6993      	ldr	r3, [r2, #24]
 80077c8:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80077ca:	b089      	sub	sp, #36	@ 0x24
 80077cc:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80077d0:	9307      	str	r3, [sp, #28]
 80077d2:	9503      	str	r5, [sp, #12]
 80077d4:	69d3      	ldr	r3, [r2, #28]
 80077d6:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80077d8:	9104      	str	r1, [sp, #16]
 80077da:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 80077de:	2e00      	cmp	r6, #0
 80077e0:	f000 808f 	beq.w	8007902 <D24_GENERIC+0x142>
 80077e4:	f005 0620 	and.w	r6, r5, #32
 80077e8:	f005 0510 	and.w	r5, r5, #16
 80077ec:	4953      	ldr	r1, [pc, #332]	@ (800793c <D24_GENERIC+0x17c>)
 80077ee:	9606      	str	r6, [sp, #24]
 80077f0:	9505      	str	r5, [sp, #20]
 80077f2:	f04f 0c00 	mov.w	ip, #0
 80077f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80077fa:	e068      	b.n	80078ce <D24_GENERIC+0x10e>
 80077fc:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007800:	f810 8007 	ldrb.w	r8, [r0, r7]
 8007804:	042d      	lsls	r5, r5, #16
 8007806:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800780a:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800780e:	44ae      	add	lr, r5
 8007810:	4438      	add	r0, r7
 8007812:	fa5f f68e 	uxtb.w	r6, lr
 8007816:	f3ce 2507 	ubfx	r5, lr, #8, #8
 800781a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800781e:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8007822:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8007826:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800782a:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800782e:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8007832:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007836:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800783a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800783e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007842:	4d3f      	ldr	r5, [pc, #252]	@ (8007940 <D24_GENERIC+0x180>)
 8007844:	fb26 b705 	smlad	r7, r6, r5, fp
 8007848:	4d3e      	ldr	r5, [pc, #248]	@ (8007944 <D24_GENERIC+0x184>)
 800784a:	fb26 4b05 	smlad	fp, r6, r5, r4
 800784e:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8007852:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8007856:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800785a:	2401      	movs	r4, #1
 800785c:	fb26 f604 	smuad	r6, r6, r4
 8007860:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8007864:	9f02      	ldr	r7, [sp, #8]
 8007866:	eb0c 0e04 	add.w	lr, ip, r4
 800786a:	eb08 0406 	add.w	r4, r8, r6
 800786e:	eb05 060a 	add.w	r6, r5, sl
 8007872:	1bf6      	subs	r6, r6, r7
 8007874:	4637      	mov	r7, r6
 8007876:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800787a:	e9cd 7800 	strd	r7, r8, [sp]
 800787e:	9f05      	ldr	r7, [sp, #20]
 8007880:	b177      	cbz	r7, 80078a0 <D24_GENERIC+0xe0>
 8007882:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007886:	9502      	str	r5, [sp, #8]
 8007888:	fba6 9a08 	umull	r9, sl, r6, r8
 800788c:	9e01      	ldr	r6, [sp, #4]
 800788e:	fb08 aa06 	mla	sl, r8, r6, sl
 8007892:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007896:	f14a 0700 	adc.w	r7, sl, #0
 800789a:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800789e:	4655      	mov	r5, sl
 80078a0:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80078a2:	9f03      	ldr	r7, [sp, #12]
 80078a4:	03ad      	lsls	r5, r5, #14
 80078a6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80078aa:	f04f 0900 	mov.w	r9, #0
 80078ae:	fb0c fc06 	mul.w	ip, ip, r6
 80078b2:	fbc7 8905 	smlal	r8, r9, r7, r5
 80078b6:	9e04      	ldr	r6, [sp, #16]
 80078b8:	464f      	mov	r7, r9
 80078ba:	10bd      	asrs	r5, r7, #2
 80078bc:	f305 050f 	ssat	r5, #16, r5
 80078c0:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 80078c4:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80078c6:	fa1f fc8e 	uxth.w	ip, lr
 80078ca:	4565      	cmp	r5, ip
 80078cc:	d917      	bls.n	80078fe <D24_GENERIC+0x13e>
 80078ce:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80078d0:	f890 e000 	ldrb.w	lr, [r0]
 80078d4:	b2ef      	uxtb	r7, r5
 80078d6:	2d01      	cmp	r5, #1
 80078d8:	b23e      	sxth	r6, r7
 80078da:	d18f      	bne.n	80077fc <D24_GENERIC+0x3c>
 80078dc:	9d06      	ldr	r5, [sp, #24]
 80078de:	b1dd      	cbz	r5, 8007918 <D24_GENERIC+0x158>
 80078e0:	78c5      	ldrb	r5, [r0, #3]
 80078e2:	ea4f 280e 	mov.w	r8, lr, lsl #8
 80078e6:	f01c 0f01 	tst.w	ip, #1
 80078ea:	ea4f 2605 	mov.w	r6, r5, lsl #8
 80078ee:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 80078f2:	d11b      	bne.n	800792c <D24_GENERIC+0x16c>
 80078f4:	f890 e001 	ldrb.w	lr, [r0, #1]
 80078f8:	3002      	adds	r0, #2
 80078fa:	44c6      	add	lr, r8
 80078fc:	e789      	b.n	8007812 <D24_GENERIC+0x52>
 80078fe:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007902:	61d3      	str	r3, [r2, #28]
 8007904:	9b07      	ldr	r3, [sp, #28]
 8007906:	6193      	str	r3, [r2, #24]
 8007908:	2000      	movs	r0, #0
 800790a:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 800790e:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8007912:	b009      	add	sp, #36	@ 0x24
 8007914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007918:	f890 8001 	ldrb.w	r8, [r0, #1]
 800791c:	7885      	ldrb	r5, [r0, #2]
 800791e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8007922:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8007926:	44c6      	add	lr, r8
 8007928:	3003      	adds	r0, #3
 800792a:	e772      	b.n	8007812 <D24_GENERIC+0x52>
 800792c:	f890 8002 	ldrb.w	r8, [r0, #2]
 8007930:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8007934:	44c6      	add	lr, r8
 8007936:	3004      	adds	r0, #4
 8007938:	e76b      	b.n	8007812 <D24_GENERIC+0x52>
 800793a:	bf00      	nop
 800793c:	20000018 	.word	0x20000018
 8007940:	00030001 	.word	0x00030001
 8007944:	00060007 	.word	0x00060007

08007948 <D32_GENERIC>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800794e:	6993      	ldr	r3, [r2, #24]
 8007950:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007952:	69d6      	ldr	r6, [r2, #28]
 8007954:	b089      	sub	sp, #36	@ 0x24
 8007956:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 800795a:	9307      	str	r3, [sp, #28]
 800795c:	9403      	str	r4, [sp, #12]
 800795e:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8007962:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007964:	9104      	str	r1, [sp, #16]
 8007966:	2d00      	cmp	r5, #0
 8007968:	f000 809a 	beq.w	8007aa0 <D32_GENERIC+0x158>
 800796c:	f004 0520 	and.w	r5, r4, #32
 8007970:	f004 0410 	and.w	r4, r4, #16
 8007974:	9506      	str	r5, [sp, #24]
 8007976:	4951      	ldr	r1, [pc, #324]	@ (8007abc <D32_GENERIC+0x174>)
 8007978:	9405      	str	r4, [sp, #20]
 800797a:	f04f 0e00 	mov.w	lr, #0
 800797e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007982:	461d      	mov	r5, r3
 8007984:	4617      	mov	r7, r2
 8007986:	e077      	b.n	8007a78 <D32_GENERIC+0x130>
 8007988:	7823      	ldrb	r3, [r4, #0]
 800798a:	f810 800c 	ldrb.w	r8, [r0, ip]
 800798e:	f810 c002 	ldrb.w	ip, [r0, r2]
 8007992:	7800      	ldrb	r0, [r0, #0]
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800799a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800799e:	4403      	add	r3, r0
 80079a0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80079a4:	b2dc      	uxtb	r4, r3
 80079a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80079aa:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80079ae:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80079b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80079b6:	0e1b      	lsrs	r3, r3, #24
 80079b8:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80079bc:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80079c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80079c4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80079c8:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 80079cc:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 80079d0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80079d4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80079d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80079dc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80079e0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80079e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079e8:	4b35      	ldr	r3, [pc, #212]	@ (8007ac0 <D32_GENERIC+0x178>)
 80079ea:	fb22 b403 	smlad	r4, r2, r3, fp
 80079ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80079f2:	fb2c 4803 	smlad	r8, ip, r3, r4
 80079f6:	4b33      	ldr	r3, [pc, #204]	@ (8007ac4 <D32_GENERIC+0x17c>)
 80079f8:	fb22 5503 	smlad	r5, r2, r3, r5
 80079fc:	4b32      	ldr	r3, [pc, #200]	@ (8007ac8 <D32_GENERIC+0x180>)
 80079fe:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8007a02:	2301      	movs	r3, #1
 8007a04:	fb22 f203 	smuad	r2, r2, r3
 8007a08:	4b30      	ldr	r3, [pc, #192]	@ (8007acc <D32_GENERIC+0x184>)
 8007a0a:	fb2c 2503 	smlad	r5, ip, r3, r2
 8007a0e:	9b02      	ldr	r3, [sp, #8]
 8007a10:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8007a14:	eb04 080a 	add.w	r8, r4, sl
 8007a18:	eba8 0803 	sub.w	r8, r8, r3
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	17d3      	asrs	r3, r2, #31
 8007a20:	e9cd 2300 	strd	r2, r3, [sp]
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	f10e 0c01 	add.w	ip, lr, #1
 8007a2a:	b173      	cbz	r3, 8007a4a <D32_GENERIC+0x102>
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	9402      	str	r4, [sp, #8]
 8007a32:	fba8 8902 	umull	r8, r9, r8, r2
 8007a36:	469a      	mov	sl, r3
 8007a38:	fb02 930a 	mla	r3, r2, sl, r9
 8007a3c:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8007a40:	f143 0900 	adc.w	r9, r3, #0
 8007a44:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007a48:	4654      	mov	r4, sl
 8007a4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a4c:	9a04      	ldr	r2, [sp, #16]
 8007a4e:	fb0e fe03 	mul.w	lr, lr, r3
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	0364      	lsls	r4, r4, #13
 8007a56:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007a62:	464b      	mov	r3, r9
 8007a64:	109b      	asrs	r3, r3, #2
 8007a66:	f303 030f 	ssat	r3, #16, r3
 8007a6a:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8007a6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a70:	fa1f fe8c 	uxth.w	lr, ip
 8007a74:	4573      	cmp	r3, lr
 8007a76:	d90f      	bls.n	8007a98 <D32_GENERIC+0x150>
 8007a78:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8007a82:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8007a86:	f47f af7f 	bne.w	8007988 <D32_GENERIC+0x40>
 8007a8a:	1d02      	adds	r2, r0, #4
 8007a8c:	6803      	ldr	r3, [r0, #0]
 8007a8e:	9806      	ldr	r0, [sp, #24]
 8007a90:	b188      	cbz	r0, 8007ab6 <D32_GENERIC+0x16e>
 8007a92:	ba5b      	rev16	r3, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	e785      	b.n	80079a4 <D32_GENERIC+0x5c>
 8007a98:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	61d6      	str	r6, [r2, #28]
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8007aae:	6193      	str	r3, [r2, #24]
 8007ab0:	b009      	add	sp, #36	@ 0x24
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	e774      	b.n	80079a4 <D32_GENERIC+0x5c>
 8007aba:	bf00      	nop
 8007abc:	20000018 	.word	0x20000018
 8007ac0:	00060003 	.word	0x00060003
 8007ac4:	000a000c 	.word	0x000a000c
 8007ac8:	000c000a 	.word	0x000c000a
 8007acc:	00030006 	.word	0x00030006

08007ad0 <D48_GENERIC>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8007ad8:	b08b      	sub	sp, #44	@ 0x2c
 8007ada:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	6993      	ldr	r3, [r2, #24]
 8007ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae2:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8007ae6:	9401      	str	r4, [sp, #4]
 8007ae8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007aea:	9405      	str	r4, [sp, #20]
 8007aec:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007af0:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007af2:	9106      	str	r1, [sp, #24]
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	f000 80c2 	beq.w	8007c7e <D48_GENERIC+0x1ae>
 8007afa:	f004 0520 	and.w	r5, r4, #32
 8007afe:	f04f 0900 	mov.w	r9, #0
 8007b02:	f004 0410 	and.w	r4, r4, #16
 8007b06:	9508      	str	r5, [sp, #32]
 8007b08:	4964      	ldr	r1, [pc, #400]	@ (8007c9c <D48_GENERIC+0x1cc>)
 8007b0a:	9407      	str	r4, [sp, #28]
 8007b0c:	464d      	mov	r5, r9
 8007b0e:	e09e      	b.n	8007c4e <D48_GENERIC+0x17e>
 8007b10:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8007b14:	f810 b008 	ldrb.w	fp, [r0, r8]
 8007b18:	f819 8008 	ldrb.w	r8, [r9, r8]
 8007b1c:	f810 9006 	ldrb.w	r9, [r0, r6]
 8007b20:	7800      	ldrb	r0, [r0, #0]
 8007b22:	0424      	lsls	r4, r4, #16
 8007b24:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007b28:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8007b2c:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8007b30:	44be      	add	lr, r7
 8007b32:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8007b36:	eb0b 0700 	add.w	r7, fp, r0
 8007b3a:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8007b3e:	fa5f fe87 	uxtb.w	lr, r7
 8007b42:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8007b46:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8007b4a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007b4e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8007b52:	0e3f      	lsrs	r7, r7, #24
 8007b54:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8007b58:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8007b5c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8007b60:	b2e7      	uxtb	r7, r4
 8007b62:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007b66:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007b6a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007b6e:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007b72:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8007b76:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8007b7a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007b7e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007b82:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007b86:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007b8a:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8007b8e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007b92:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007b96:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007b9a:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8007b9e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8007ba2:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8007ba6:	4c3e      	ldr	r4, [pc, #248]	@ (8007ca0 <D48_GENERIC+0x1d0>)
 8007ba8:	9e01      	ldr	r6, [sp, #4]
 8007baa:	fb29 6404 	smlad	r4, r9, r4, r6
 8007bae:	4e3d      	ldr	r6, [pc, #244]	@ (8007ca4 <D48_GENERIC+0x1d4>)
 8007bb0:	fb2e 4406 	smlad	r4, lr, r6, r4
 8007bb4:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007bb8:	fb27 4b06 	smlad	fp, r7, r6, r4
 8007bbc:	4c3a      	ldr	r4, [pc, #232]	@ (8007ca8 <D48_GENERIC+0x1d8>)
 8007bbe:	fb29 3304 	smlad	r3, r9, r4, r3
 8007bc2:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8007bc6:	fb2e 3304 	smlad	r3, lr, r4, r3
 8007bca:	4c38      	ldr	r4, [pc, #224]	@ (8007cac <D48_GENERIC+0x1dc>)
 8007bcc:	fb27 3304 	smlad	r3, r7, r4, r3
 8007bd0:	2601      	movs	r6, #1
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	fb29 f906 	smuad	r9, r9, r6
 8007bd8:	4b35      	ldr	r3, [pc, #212]	@ (8007cb0 <D48_GENERIC+0x1e0>)
 8007bda:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8007bde:	4b35      	ldr	r3, [pc, #212]	@ (8007cb4 <D48_GENERIC+0x1e4>)
 8007be0:	fb27 e303 	smlad	r3, r7, r3, lr
 8007be4:	9f04      	ldr	r7, [sp, #16]
 8007be6:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8007bea:	eb05 0e06 	add.w	lr, r5, r6
 8007bee:	eb04 060a 	add.w	r6, r4, sl
 8007bf2:	1bf6      	subs	r6, r6, r7
 8007bf4:	4637      	mov	r7, r6
 8007bf6:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007bfa:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007bfe:	9f07      	ldr	r7, [sp, #28]
 8007c00:	b177      	cbz	r7, 8007c20 <D48_GENERIC+0x150>
 8007c02:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007c06:	9404      	str	r4, [sp, #16]
 8007c08:	fba6 9a08 	umull	r9, sl, r6, r8
 8007c0c:	9e03      	ldr	r6, [sp, #12]
 8007c0e:	fb08 aa06 	mla	sl, r8, r6, sl
 8007c12:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007c16:	f14a 0700 	adc.w	r7, sl, #0
 8007c1a:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007c1e:	4654      	mov	r4, sl
 8007c20:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007c22:	fb05 f606 	mul.w	r6, r5, r6
 8007c26:	9d05      	ldr	r5, [sp, #20]
 8007c28:	02e4      	lsls	r4, r4, #11
 8007c2a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007c2e:	f04f 0800 	mov.w	r8, #0
 8007c32:	fbc5 7804 	smlal	r7, r8, r5, r4
 8007c36:	4645      	mov	r5, r8
 8007c38:	10ac      	asrs	r4, r5, #2
 8007c3a:	9d06      	ldr	r5, [sp, #24]
 8007c3c:	f304 040f 	ssat	r4, #16, r4
 8007c40:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007c44:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007c46:	fa1f f58e 	uxth.w	r5, lr
 8007c4a:	42ac      	cmp	r4, r5
 8007c4c:	d917      	bls.n	8007c7e <D48_GENERIC+0x1ae>
 8007c4e:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8007c50:	b2e6      	uxtb	r6, r4
 8007c52:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8007c56:	4277      	negs	r7, r6
 8007c58:	eb00 0b08 	add.w	fp, r0, r8
 8007c5c:	eb0b 0907 	add.w	r9, fp, r7
 8007c60:	2c01      	cmp	r4, #1
 8007c62:	eb09 0e08 	add.w	lr, r9, r8
 8007c66:	f47f af53 	bne.w	8007b10 <D48_GENERIC+0x40>
 8007c6a:	9e08      	ldr	r6, [sp, #32]
 8007c6c:	e9d0 7400 	ldrd	r7, r4, [r0]
 8007c70:	3006      	adds	r0, #6
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	f43f af63 	beq.w	8007b3e <D48_GENERIC+0x6e>
 8007c78:	ba7f      	rev16	r7, r7
 8007c7a:	ba64      	rev16	r4, r4
 8007c7c:	e75f      	b.n	8007b3e <D48_GENERIC+0x6e>
 8007c7e:	6093      	str	r3, [r2, #8]
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	60d3      	str	r3, [r2, #12]
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	6153      	str	r3, [r2, #20]
 8007c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8a:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f8c2 a010 	str.w	sl, [r2, #16]
 8007c94:	6193      	str	r3, [r2, #24]
 8007c96:	b00b      	add	sp, #44	@ 0x2c
 8007c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9c:	20000018 	.word	0x20000018
 8007ca0:	000f000a 	.word	0x000f000a
 8007ca4:	00060003 	.word	0x00060003
 8007ca8:	00150019 	.word	0x00150019
 8007cac:	00190015 	.word	0x00190015
 8007cb0:	00030006 	.word	0x00030006
 8007cb4:	000a000f 	.word	0x000a000f

08007cb8 <D64_GENERIC>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	b089      	sub	sp, #36	@ 0x24
 8007cbe:	6895      	ldr	r5, [r2, #8]
 8007cc0:	6913      	ldr	r3, [r2, #16]
 8007cc2:	9501      	str	r5, [sp, #4]
 8007cc4:	68d5      	ldr	r5, [r2, #12]
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	9500      	str	r5, [sp, #0]
 8007cca:	6953      	ldr	r3, [r2, #20]
 8007ccc:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8007cce:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	6993      	ldr	r3, [r2, #24]
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8007cda:	69d3      	ldr	r3, [r2, #28]
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	f000 80d7 	beq.w	8007e90 <D64_GENERIC+0x1d8>
 8007ce2:	6a11      	ldr	r1, [r2, #32]
 8007ce4:	9106      	str	r1, [sp, #24]
 8007ce6:	f04f 0e00 	mov.w	lr, #0
 8007cea:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8007ed0 <D64_GENERIC+0x218>
 8007cee:	4681      	mov	r9, r0
 8007cf0:	e0bf      	b.n	8007e72 <D64_GENERIC+0x1ba>
 8007cf2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007cf6:	426c      	negs	r4, r5
 8007cf8:	eb09 0708 	add.w	r7, r9, r8
 8007cfc:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007d00:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8007d04:	5d38      	ldrb	r0, [r7, r4]
 8007d06:	5d31      	ldrb	r1, [r6, r4]
 8007d08:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007d0c:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007d10:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007d14:	f899 7000 	ldrb.w	r7, [r9]
 8007d18:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8007d1c:	4426      	add	r6, r4
 8007d1e:	0409      	lsls	r1, r1, #16
 8007d20:	0400      	lsls	r0, r0, #16
 8007d22:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8007d26:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007d2a:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8007d2e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8007d32:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8007d36:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8007d3a:	4459      	add	r1, fp
 8007d3c:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8007d40:	4438      	add	r0, r7
 8007d42:	b2c5      	uxtb	r5, r0
 8007d44:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8007d48:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8007d4c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8007d50:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8007d54:	0e00      	lsrs	r0, r0, #24
 8007d56:	eb03 0806 	add.w	r8, r3, r6
 8007d5a:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007d5e:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8007d62:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007d66:	b2c8      	uxtb	r0, r1
 8007d68:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007d6c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007d70:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8007d74:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8007d78:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007d7c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007d80:	0e09      	lsrs	r1, r1, #24
 8007d82:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8007d86:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8007d8a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007d8e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8007d92:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8007d96:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007d9a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8007d9e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007da2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007da6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007daa:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8007dae:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007db2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007db6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007dba:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007dbe:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8007dc2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8007dc6:	0a8b      	lsrs	r3, r1, #10
 8007dc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007dcc:	4938      	ldr	r1, [pc, #224]	@ (8007eb0 <D64_GENERIC+0x1f8>)
 8007dce:	9c00      	ldr	r4, [sp, #0]
 8007dd0:	fb28 4101 	smlad	r1, r8, r1, r4
 8007dd4:	4c37      	ldr	r4, [pc, #220]	@ (8007eb4 <D64_GENERIC+0x1fc>)
 8007dd6:	fb27 1104 	smlad	r1, r7, r4, r1
 8007dda:	4c37      	ldr	r4, [pc, #220]	@ (8007eb8 <D64_GENERIC+0x200>)
 8007ddc:	fb20 1104 	smlad	r1, r0, r4, r1
 8007de0:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007de4:	fb2a 1106 	smlad	r1, sl, r6, r1
 8007de8:	4d34      	ldr	r5, [pc, #208]	@ (8007ebc <D64_GENERIC+0x204>)
 8007dea:	9c01      	ldr	r4, [sp, #4]
 8007dec:	fb28 4405 	smlad	r4, r8, r5, r4
 8007df0:	fb2a 4415 	smladx	r4, sl, r5, r4
 8007df4:	4d32      	ldr	r5, [pc, #200]	@ (8007ec0 <D64_GENERIC+0x208>)
 8007df6:	fb27 4405 	smlad	r4, r7, r5, r4
 8007dfa:	fb20 4415 	smladx	r4, r0, r5, r4
 8007dfe:	2501      	movs	r5, #1
 8007e00:	9400      	str	r4, [sp, #0]
 8007e02:	fb28 f805 	smuad	r8, r8, r5
 8007e06:	4c2f      	ldr	r4, [pc, #188]	@ (8007ec4 <D64_GENERIC+0x20c>)
 8007e08:	fb27 8704 	smlad	r7, r7, r4, r8
 8007e0c:	4c2e      	ldr	r4, [pc, #184]	@ (8007ec8 <D64_GENERIC+0x210>)
 8007e0e:	fb20 7004 	smlad	r0, r0, r4, r7
 8007e12:	4c2e      	ldr	r4, [pc, #184]	@ (8007ecc <D64_GENERIC+0x214>)
 8007e14:	fb2a 0004 	smlad	r0, sl, r4, r0
 8007e18:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8007e1c:	9906      	ldr	r1, [sp, #24]
 8007e1e:	9001      	str	r0, [sp, #4]
 8007e20:	b181      	cbz	r1, 8007e44 <D64_GENERIC+0x18c>
 8007e22:	9802      	ldr	r0, [sp, #8]
 8007e24:	9c03      	ldr	r4, [sp, #12]
 8007e26:	4430      	add	r0, r6
 8007e28:	1b00      	subs	r0, r0, r4
 8007e2a:	fba0 7801 	umull	r7, r8, r0, r1
 8007e2e:	17c5      	asrs	r5, r0, #31
 8007e30:	fb01 8805 	mla	r8, r1, r5, r8
 8007e34:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8007e38:	f148 0100 	adc.w	r1, r8, #0
 8007e3c:	0049      	lsls	r1, r1, #1
 8007e3e:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8007e42:	460e      	mov	r6, r1
 8007e44:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8007e46:	9904      	ldr	r1, [sp, #16]
 8007e48:	9805      	ldr	r0, [sp, #20]
 8007e4a:	02b6      	lsls	r6, r6, #10
 8007e4c:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007e50:	f04f 0800 	mov.w	r8, #0
 8007e54:	fb0e f404 	mul.w	r4, lr, r4
 8007e58:	fbc1 7806 	smlal	r7, r8, r1, r6
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	1089      	asrs	r1, r1, #2
 8007e60:	f301 010f 	ssat	r1, #16, r1
 8007e64:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8007e68:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8007e6a:	f10e 0e01 	add.w	lr, lr, #1
 8007e6e:	4571      	cmp	r1, lr
 8007e70:	dd0e      	ble.n	8007e90 <D64_GENERIC+0x1d8>
 8007e72:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8007e74:	2d01      	cmp	r5, #1
 8007e76:	f47f af3c 	bne.w	8007cf2 <D64_GENERIC+0x3a>
 8007e7a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007e7c:	06ac      	lsls	r4, r5, #26
 8007e7e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007e82:	f109 0908 	add.w	r9, r9, #8
 8007e86:	f57f af5c 	bpl.w	8007d42 <D64_GENERIC+0x8a>
 8007e8a:	ba40      	rev16	r0, r0
 8007e8c:	ba49      	rev16	r1, r1
 8007e8e:	e758      	b.n	8007d42 <D64_GENERIC+0x8a>
 8007e90:	61d3      	str	r3, [r2, #28]
 8007e92:	9b02      	ldr	r3, [sp, #8]
 8007e94:	9901      	ldr	r1, [sp, #4]
 8007e96:	6113      	str	r3, [r2, #16]
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	6091      	str	r1, [r2, #8]
 8007e9c:	6153      	str	r3, [r2, #20]
 8007e9e:	9900      	ldr	r1, [sp, #0]
 8007ea0:	9b07      	ldr	r3, [sp, #28]
 8007ea2:	60d1      	str	r1, [r2, #12]
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	6193      	str	r3, [r2, #24]
 8007ea8:	b009      	add	sp, #36	@ 0x24
 8007eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	bf00      	nop
 8007eb0:	001c0015 	.word	0x001c0015
 8007eb4:	000f000a 	.word	0x000f000a
 8007eb8:	00060003 	.word	0x00060003
 8007ebc:	0024002a 	.word	0x0024002a
 8007ec0:	002e0030 	.word	0x002e0030
 8007ec4:	00030006 	.word	0x00030006
 8007ec8:	000a000f 	.word	0x000a000f
 8007ecc:	0015001c 	.word	0x0015001c
 8007ed0:	20000018 	.word	0x20000018

08007ed4 <D80_GENERIC>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	b08b      	sub	sp, #44	@ 0x2c
 8007eda:	6914      	ldr	r4, [r2, #16]
 8007edc:	9405      	str	r4, [sp, #20]
 8007ede:	6954      	ldr	r4, [r2, #20]
 8007ee0:	9406      	str	r4, [sp, #24]
 8007ee2:	6994      	ldr	r4, [r2, #24]
 8007ee4:	9409      	str	r4, [sp, #36]	@ 0x24
 8007ee6:	6894      	ldr	r4, [r2, #8]
 8007ee8:	9402      	str	r4, [sp, #8]
 8007eea:	68d4      	ldr	r4, [r2, #12]
 8007eec:	9401      	str	r4, [sp, #4]
 8007eee:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007ef0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007ef2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8007ef6:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 810a 	beq.w	8008114 <D80_GENERIC+0x240>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8008164 <D80_GENERIC+0x290>
 8007f06:	e9cd b303 	strd	fp, r3, [sp, #12]
 8007f0a:	e0ee      	b.n	80080ea <D80_GENERIC+0x216>
 8007f0c:	fa5f fe8e 	uxtb.w	lr, lr
 8007f10:	fa0f f48e 	sxth.w	r4, lr
 8007f14:	0066      	lsls	r6, r4, #1
 8007f16:	eb06 0804 	add.w	r8, r6, r4
 8007f1a:	f1ce 0500 	rsb	r5, lr, #0
 8007f1e:	eb00 0108 	add.w	r1, r0, r8
 8007f22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007f26:	194b      	adds	r3, r1, r5
 8007f28:	5d49      	ldrb	r1, [r1, r5]
 8007f2a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8007f2e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8007f32:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8007f36:	f890 8000 	ldrb.w	r8, [r0]
 8007f3a:	eb03 0c04 	add.w	ip, r3, r4
 8007f3e:	eb0c 0705 	add.w	r7, ip, r5
 8007f42:	0409      	lsls	r1, r1, #16
 8007f44:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8007f48:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8007f4c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007f50:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8007f54:	eb0a 0004 	add.w	r0, sl, r4
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8007f5e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8007f62:	5d44      	ldrb	r4, [r0, r5]
 8007f64:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007f68:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8007f6c:	4428      	add	r0, r5
 8007f6e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8007f72:	4441      	add	r1, r8
 8007f74:	4430      	add	r0, r6
 8007f76:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8007f7a:	441f      	add	r7, r3
 8007f7c:	b2cd      	uxtb	r5, r1
 8007f7e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007f82:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8007f86:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007f90:	0e09      	lsrs	r1, r1, #24
 8007f92:	4433      	add	r3, r6
 8007f94:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8007f98:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8007f9c:	b2fd      	uxtb	r5, r7
 8007f9e:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8007fa2:	469b      	mov	fp, r3
 8007fa4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8007fa8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8007fac:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8007fb0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8007fb4:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8007fb8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8007fbc:	0e3b      	lsrs	r3, r7, #24
 8007fbe:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007fc2:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8007fc6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007fca:	fa5f fc84 	uxtb.w	ip, r4
 8007fce:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8007fd2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007fd6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007fda:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8007fde:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8007fe2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007fe6:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8007fea:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8007fee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ff6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007ffa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007ffe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008002:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008006:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800800a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800800e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8008012:	0aa3      	lsrs	r3, r4, #10
 8008014:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008018:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800801c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008020:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8008024:	9303      	str	r3, [sp, #12]
 8008026:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800802a:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 800802e:	4b41      	ldr	r3, [pc, #260]	@ (8008134 <D80_GENERIC+0x260>)
 8008030:	9901      	ldr	r1, [sp, #4]
 8008032:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008036:	4940      	ldr	r1, [pc, #256]	@ (8008138 <D80_GENERIC+0x264>)
 8008038:	fb28 3301 	smlad	r3, r8, r1, r3
 800803c:	493f      	ldr	r1, [pc, #252]	@ (800813c <D80_GENERIC+0x268>)
 800803e:	fb2e 3301 	smlad	r3, lr, r1, r3
 8008042:	493f      	ldr	r1, [pc, #252]	@ (8008140 <D80_GENERIC+0x26c>)
 8008044:	fb27 3301 	smlad	r3, r7, r1, r3
 8008048:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 800804c:	fb2c 3404 	smlad	r4, ip, r4, r3
 8008050:	4b3c      	ldr	r3, [pc, #240]	@ (8008144 <D80_GENERIC+0x270>)
 8008052:	9902      	ldr	r1, [sp, #8]
 8008054:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008058:	493b      	ldr	r1, [pc, #236]	@ (8008148 <D80_GENERIC+0x274>)
 800805a:	fb28 3301 	smlad	r3, r8, r1, r3
 800805e:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8008062:	fb2e 3101 	smlad	r1, lr, r1, r3
 8008066:	4b39      	ldr	r3, [pc, #228]	@ (800814c <D80_GENERIC+0x278>)
 8008068:	fb27 1103 	smlad	r1, r7, r3, r1
 800806c:	4b38      	ldr	r3, [pc, #224]	@ (8008150 <D80_GENERIC+0x27c>)
 800806e:	fb2c 1303 	smlad	r3, ip, r3, r1
 8008072:	2101      	movs	r1, #1
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	fb2b fb01 	smuad	fp, fp, r1
 800807a:	4b36      	ldr	r3, [pc, #216]	@ (8008154 <D80_GENERIC+0x280>)
 800807c:	fb28 b803 	smlad	r8, r8, r3, fp
 8008080:	4d35      	ldr	r5, [pc, #212]	@ (8008158 <D80_GENERIC+0x284>)
 8008082:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8008086:	4d35      	ldr	r5, [pc, #212]	@ (800815c <D80_GENERIC+0x288>)
 8008088:	fb27 e705 	smlad	r7, r7, r5, lr
 800808c:	4b34      	ldr	r3, [pc, #208]	@ (8008160 <D80_GENERIC+0x28c>)
 800808e:	fb2c 7303 	smlad	r3, ip, r3, r7
 8008092:	6a11      	ldr	r1, [r2, #32]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 800809a:	b181      	cbz	r1, 80080be <D80_GENERIC+0x1ea>
 800809c:	9c05      	ldr	r4, [sp, #20]
 800809e:	9d06      	ldr	r5, [sp, #24]
 80080a0:	441c      	add	r4, r3
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	fba4 ab01 	umull	sl, fp, r4, r1
 80080a8:	17e7      	asrs	r7, r4, #31
 80080aa:	fb01 bb07 	mla	fp, r1, r7, fp
 80080ae:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 80080b2:	f14b 0500 	adc.w	r5, fp, #0
 80080b6:	0069      	lsls	r1, r5, #1
 80080b8:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80080bc:	460b      	mov	r3, r1
 80080be:	9e04      	ldr	r6, [sp, #16]
 80080c0:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80080c2:	9f07      	ldr	r7, [sp, #28]
 80080c4:	025b      	lsls	r3, r3, #9
 80080c6:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80080ca:	2500      	movs	r5, #0
 80080cc:	fb06 f101 	mul.w	r1, r6, r1
 80080d0:	fbc7 4503 	smlal	r4, r5, r7, r3
 80080d4:	9c08      	ldr	r4, [sp, #32]
 80080d6:	10ab      	asrs	r3, r5, #2
 80080d8:	f303 030f 	ssat	r3, #16, r3
 80080dc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80080e0:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80080e2:	1c71      	adds	r1, r6, #1
 80080e4:	428b      	cmp	r3, r1
 80080e6:	9104      	str	r1, [sp, #16]
 80080e8:	dd12      	ble.n	8008110 <D80_GENERIC+0x23c>
 80080ea:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 80080ee:	f1be 0f01 	cmp.w	lr, #1
 80080f2:	f47f af0b 	bne.w	8007f0c <D80_GENERIC+0x38>
 80080f6:	6801      	ldr	r1, [r0, #0]
 80080f8:	6847      	ldr	r7, [r0, #4]
 80080fa:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80080fc:	6884      	ldr	r4, [r0, #8]
 80080fe:	069b      	lsls	r3, r3, #26
 8008100:	f100 000a 	add.w	r0, r0, #10
 8008104:	f57f af3a 	bpl.w	8007f7c <D80_GENERIC+0xa8>
 8008108:	ba49      	rev16	r1, r1
 800810a:	ba7f      	rev16	r7, r7
 800810c:	ba64      	rev16	r4, r4
 800810e:	e735      	b.n	8007f7c <D80_GENERIC+0xa8>
 8008110:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008114:	9b02      	ldr	r3, [sp, #8]
 8008116:	6093      	str	r3, [r2, #8]
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	60d3      	str	r3, [r2, #12]
 800811c:	9b05      	ldr	r3, [sp, #20]
 800811e:	6113      	str	r3, [r2, #16]
 8008120:	9b06      	ldr	r3, [sp, #24]
 8008122:	6153      	str	r3, [r2, #20]
 8008124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008126:	f8c2 b01c 	str.w	fp, [r2, #28]
 800812a:	2000      	movs	r0, #0
 800812c:	6193      	str	r3, [r2, #24]
 800812e:	b00b      	add	sp, #44	@ 0x2c
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008134:	002d0024 	.word	0x002d0024
 8008138:	001c0015 	.word	0x001c0015
 800813c:	000f000a 	.word	0x000f000a
 8008140:	00060003 	.word	0x00060003
 8008144:	0037003f 	.word	0x0037003f
 8008148:	00450049 	.word	0x00450049
 800814c:	00490045 	.word	0x00490045
 8008150:	003f0037 	.word	0x003f0037
 8008154:	00030006 	.word	0x00030006
 8008158:	000a000f 	.word	0x000a000f
 800815c:	0015001c 	.word	0x0015001c
 8008160:	0024002d 	.word	0x0024002d
 8008164:	20000018 	.word	0x20000018

08008168 <D128_GENERIC>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	b091      	sub	sp, #68	@ 0x44
 800816e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008170:	9004      	str	r0, [sp, #16]
 8008172:	6910      	ldr	r0, [r2, #16]
 8008174:	900a      	str	r0, [sp, #40]	@ 0x28
 8008176:	6950      	ldr	r0, [r2, #20]
 8008178:	900b      	str	r0, [sp, #44]	@ 0x2c
 800817a:	6990      	ldr	r0, [r2, #24]
 800817c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800817e:	69d0      	ldr	r0, [r2, #28]
 8008180:	9002      	str	r0, [sp, #8]
 8008182:	6890      	ldr	r0, [r2, #8]
 8008184:	9003      	str	r0, [sp, #12]
 8008186:	68d0      	ldr	r0, [r2, #12]
 8008188:	9001      	str	r0, [sp, #4]
 800818a:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800818c:	9200      	str	r2, [sp, #0]
 800818e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8196 	beq.w	80084c4 <D128_GENERIC+0x35c>
 8008198:	2300      	movs	r3, #0
 800819a:	6a12      	ldr	r2, [r2, #32]
 800819c:	920e      	str	r2, [sp, #56]	@ 0x38
 800819e:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8008540 <D128_GENERIC+0x3d8>
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	e177      	b.n	8008496 <D128_GENERIC+0x32e>
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	9d04      	ldr	r5, [sp, #16]
 80081aa:	b214      	sxth	r4, r2
 80081ac:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80081b0:	4250      	negs	r0, r2
 80081b2:	eb05 010a 	add.w	r1, r5, sl
 80081b6:	00a6      	lsls	r6, r4, #2
 80081b8:	eb01 0800 	add.w	r8, r1, r0
 80081bc:	eb06 0e04 	add.w	lr, r6, r4
 80081c0:	eb08 070e 	add.w	r7, r8, lr
 80081c4:	183b      	adds	r3, r7, r0
 80081c6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80081ca:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 80081ce:	9608      	str	r6, [sp, #32]
 80081d0:	eb0c 0604 	add.w	r6, ip, r4
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	1833      	adds	r3, r6, r0
 80081d8:	f815 b00a 	ldrb.w	fp, [r5, sl]
 80081dc:	9306      	str	r3, [sp, #24]
 80081de:	f818 a00e 	ldrb.w	sl, [r8, lr]
 80081e2:	9b04      	ldr	r3, [sp, #16]
 80081e4:	f815 e002 	ldrb.w	lr, [r5, r2]
 80081e8:	782d      	ldrb	r5, [r5, #0]
 80081ea:	5c3a      	ldrb	r2, [r7, r0]
 80081ec:	9507      	str	r5, [sp, #28]
 80081ee:	9d06      	ldr	r5, [sp, #24]
 80081f0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80081f4:	f81c 8004 	ldrb.w	r8, [ip, r4]
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 80081fe:	5c33      	ldrb	r3, [r6, r0]
 8008200:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8008204:	5c09      	ldrb	r1, [r1, r0]
 8008206:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800820a:	0412      	lsls	r2, r2, #16
 800820c:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8008210:	eb06 0a04 	add.w	sl, r6, r4
 8008214:	5d36      	ldrb	r6, [r6, r4]
 8008216:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 800821a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800821e:	042d      	lsls	r5, r5, #16
 8008220:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8008224:	0409      	lsls	r1, r1, #16
 8008226:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800822a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800822e:	041b      	lsls	r3, r3, #16
 8008230:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8008234:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8008238:	eb0a 0e00 	add.w	lr, sl, r0
 800823c:	9d07      	ldr	r5, [sp, #28]
 800823e:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 8008242:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8008246:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800824a:	9f08      	ldr	r7, [sp, #32]
 800824c:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8008250:	4429      	add	r1, r5
 8008252:	9d04      	ldr	r5, [sp, #16]
 8008254:	4438      	add	r0, r7
 8008256:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800825a:	9004      	str	r0, [sp, #16]
 800825c:	442a      	add	r2, r5
 800825e:	eb06 0a0b 	add.w	sl, r6, fp
 8008262:	1918      	adds	r0, r3, r4
 8008264:	b2cb      	uxtb	r3, r1
 8008266:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800826a:	9e02      	ldr	r6, [sp, #8]
 800826c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008270:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008274:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8008278:	441e      	add	r6, r3
 800827a:	0e09      	lsrs	r1, r1, #24
 800827c:	4633      	mov	r3, r6
 800827e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008282:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8008286:	b2d4      	uxtb	r4, r2
 8008288:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800828c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008290:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8008294:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8008298:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800829c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80082a0:	0e12      	lsrs	r2, r2, #24
 80082a2:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80082a6:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80082aa:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80082ae:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80082b2:	9702      	str	r7, [sp, #8]
 80082b4:	b2c2      	uxtb	r2, r0
 80082b6:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80082ba:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 80082be:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80082c2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80082c6:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80082ca:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 80082ce:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80082d2:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80082d6:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80082da:	0e00      	lsrs	r0, r0, #24
 80082dc:	fa5f f68a 	uxtb.w	r6, sl
 80082e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082e4:	9308      	str	r3, [sp, #32]
 80082e6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80082ea:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80082ee:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80082f2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80082f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80082fa:	9509      	str	r5, [sp, #36]	@ 0x24
 80082fc:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008300:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008304:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008308:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800830c:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008310:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008314:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008318:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800831c:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008320:	9306      	str	r3, [sp, #24]
 8008322:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008326:	9b02      	ldr	r3, [sp, #8]
 8008328:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800832c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008330:	f8cd a01c 	str.w	sl, [sp, #28]
 8008334:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008338:	9b06      	ldr	r3, [sp, #24]
 800833a:	9506      	str	r5, [sp, #24]
 800833c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800833e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008342:	f8cd e008 	str.w	lr, [sp, #8]
 8008346:	46ae      	mov	lr, r5
 8008348:	9d08      	ldr	r5, [sp, #32]
 800834a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800834e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8008352:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008356:	9d02      	ldr	r5, [sp, #8]
 8008358:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800835c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008360:	9f07      	ldr	r7, [sp, #28]
 8008362:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008366:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800836a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800836e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008372:	9d06      	ldr	r5, [sp, #24]
 8008374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008378:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800837c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008380:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8008384:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008388:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 800838c:	0abe      	lsrs	r6, r7, #10
 800838e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008392:	9602      	str	r6, [sp, #8]
 8008394:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8008398:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800839c:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 80083a0:	4e52      	ldr	r6, [pc, #328]	@ (80084ec <D128_GENERIC+0x384>)
 80083a2:	9f01      	ldr	r7, [sp, #4]
 80083a4:	fb2e 7606 	smlad	r6, lr, r6, r7
 80083a8:	4f51      	ldr	r7, [pc, #324]	@ (80084f0 <D128_GENERIC+0x388>)
 80083aa:	fb2a 6607 	smlad	r6, sl, r7, r6
 80083ae:	4f51      	ldr	r7, [pc, #324]	@ (80084f4 <D128_GENERIC+0x38c>)
 80083b0:	fb21 6607 	smlad	r6, r1, r7, r6
 80083b4:	4f50      	ldr	r7, [pc, #320]	@ (80084f8 <D128_GENERIC+0x390>)
 80083b6:	fb24 6607 	smlad	r6, r4, r7, r6
 80083ba:	4f50      	ldr	r7, [pc, #320]	@ (80084fc <D128_GENERIC+0x394>)
 80083bc:	fb22 6607 	smlad	r6, r2, r7, r6
 80083c0:	4f4f      	ldr	r7, [pc, #316]	@ (8008500 <D128_GENERIC+0x398>)
 80083c2:	fb20 6607 	smlad	r6, r0, r7, r6
 80083c6:	4f4f      	ldr	r7, [pc, #316]	@ (8008504 <D128_GENERIC+0x39c>)
 80083c8:	fb23 6607 	smlad	r6, r3, r7, r6
 80083cc:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 80083d0:	fb25 6807 	smlad	r8, r5, r7, r6
 80083d4:	4f4c      	ldr	r7, [pc, #304]	@ (8008508 <D128_GENERIC+0x3a0>)
 80083d6:	9e03      	ldr	r6, [sp, #12]
 80083d8:	fb2e 6c07 	smlad	ip, lr, r7, r6
 80083dc:	4e4b      	ldr	r6, [pc, #300]	@ (800850c <D128_GENERIC+0x3a4>)
 80083de:	fb2a cc06 	smlad	ip, sl, r6, ip
 80083e2:	4f4b      	ldr	r7, [pc, #300]	@ (8008510 <D128_GENERIC+0x3a8>)
 80083e4:	fb21 cc07 	smlad	ip, r1, r7, ip
 80083e8:	4f4a      	ldr	r7, [pc, #296]	@ (8008514 <D128_GENERIC+0x3ac>)
 80083ea:	fb24 cc07 	smlad	ip, r4, r7, ip
 80083ee:	4f4a      	ldr	r7, [pc, #296]	@ (8008518 <D128_GENERIC+0x3b0>)
 80083f0:	fb22 cc07 	smlad	ip, r2, r7, ip
 80083f4:	4f49      	ldr	r7, [pc, #292]	@ (800851c <D128_GENERIC+0x3b4>)
 80083f6:	fb20 cc07 	smlad	ip, r0, r7, ip
 80083fa:	4f49      	ldr	r7, [pc, #292]	@ (8008520 <D128_GENERIC+0x3b8>)
 80083fc:	fb23 c707 	smlad	r7, r3, r7, ip
 8008400:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8008544 <D128_GENERIC+0x3dc>
 8008404:	fb25 760c 	smlad	r6, r5, ip, r7
 8008408:	f04f 0b01 	mov.w	fp, #1
 800840c:	9601      	str	r6, [sp, #4]
 800840e:	fb2e fb0b 	smuad	fp, lr, fp
 8008412:	4f44      	ldr	r7, [pc, #272]	@ (8008524 <D128_GENERIC+0x3bc>)
 8008414:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008418:	4f43      	ldr	r7, [pc, #268]	@ (8008528 <D128_GENERIC+0x3c0>)
 800841a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800841e:	4f43      	ldr	r7, [pc, #268]	@ (800852c <D128_GENERIC+0x3c4>)
 8008420:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008424:	4f42      	ldr	r7, [pc, #264]	@ (8008530 <D128_GENERIC+0x3c8>)
 8008426:	fb22 a707 	smlad	r7, r2, r7, sl
 800842a:	4a42      	ldr	r2, [pc, #264]	@ (8008534 <D128_GENERIC+0x3cc>)
 800842c:	fb20 7702 	smlad	r7, r0, r2, r7
 8008430:	4a41      	ldr	r2, [pc, #260]	@ (8008538 <D128_GENERIC+0x3d0>)
 8008432:	fb23 7702 	smlad	r7, r3, r2, r7
 8008436:	4b41      	ldr	r3, [pc, #260]	@ (800853c <D128_GENERIC+0x3d4>)
 8008438:	fb25 7303 	smlad	r3, r5, r3, r7
 800843c:	9303      	str	r3, [sp, #12]
 800843e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008440:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8008444:	b183      	cbz	r3, 8008468 <D128_GENERIC+0x300>
 8008446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800844a:	4432      	add	r2, r6
 800844c:	1a52      	subs	r2, r2, r1
 800844e:	fba2 4503 	umull	r4, r5, r2, r3
 8008452:	17d1      	asrs	r1, r2, #31
 8008454:	fb03 5501 	mla	r5, r3, r1, r5
 8008458:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 800845c:	f145 0300 	adc.w	r3, r5, #0
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 8008466:	461e      	mov	r6, r3
 8008468:	9800      	ldr	r0, [sp, #0]
 800846a:	9c05      	ldr	r4, [sp, #20]
 800846c:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 800846e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008470:	01f6      	lsls	r6, r6, #7
 8008472:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008476:	2300      	movs	r3, #0
 8008478:	fbc5 2306 	smlal	r2, r3, r5, r6
 800847c:	fb04 f101 	mul.w	r1, r4, r1
 8008480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008482:	109b      	asrs	r3, r3, #2
 8008484:	f303 030f 	ssat	r3, #16, r3
 8008488:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800848c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800848e:	1c62      	adds	r2, r4, #1
 8008490:	4293      	cmp	r3, r2
 8008492:	9205      	str	r2, [sp, #20]
 8008494:	dd16      	ble.n	80084c4 <D128_GENERIC+0x35c>
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800849a:	2a01      	cmp	r2, #1
 800849c:	f47f ae83 	bne.w	80081a6 <D128_GENERIC+0x3e>
 80084a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a2:	9c04      	ldr	r4, [sp, #16]
 80084a4:	069b      	lsls	r3, r3, #26
 80084a6:	e9d4 1200 	ldrd	r1, r2, [r4]
 80084aa:	68a0      	ldr	r0, [r4, #8]
 80084ac:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80084b0:	f104 0410 	add.w	r4, r4, #16
 80084b4:	d517      	bpl.n	80084e6 <D128_GENERIC+0x37e>
 80084b6:	ba49      	rev16	r1, r1
 80084b8:	ba52      	rev16	r2, r2
 80084ba:	ba40      	rev16	r0, r0
 80084bc:	fa9a fa9a 	rev16.w	sl, sl
 80084c0:	9404      	str	r4, [sp, #16]
 80084c2:	e6cf      	b.n	8008264 <D128_GENERIC+0xfc>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	9903      	ldr	r1, [sp, #12]
 80084c8:	6099      	str	r1, [r3, #8]
 80084ca:	9901      	ldr	r1, [sp, #4]
 80084cc:	60d9      	str	r1, [r3, #12]
 80084ce:	9902      	ldr	r1, [sp, #8]
 80084d0:	61d9      	str	r1, [r3, #28]
 80084d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084d4:	6119      	str	r1, [r3, #16]
 80084d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084da:	6159      	str	r1, [r3, #20]
 80084dc:	2000      	movs	r0, #0
 80084de:	619a      	str	r2, [r3, #24]
 80084e0:	b011      	add	sp, #68	@ 0x44
 80084e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e6:	9404      	str	r4, [sp, #16]
 80084e8:	e6bc      	b.n	8008264 <D128_GENERIC+0xfc>
 80084ea:	bf00      	nop
 80084ec:	00780069 	.word	0x00780069
 80084f0:	005b004e 	.word	0x005b004e
 80084f4:	00420037 	.word	0x00420037
 80084f8:	002d0024 	.word	0x002d0024
 80084fc:	001c0015 	.word	0x001c0015
 8008500:	000f000a 	.word	0x000f000a
 8008504:	00060003 	.word	0x00060003
 8008508:	00880096 	.word	0x00880096
 800850c:	00a200ac 	.word	0x00a200ac
 8008510:	00b400ba 	.word	0x00b400ba
 8008514:	00be00c0 	.word	0x00be00c0
 8008518:	00c000be 	.word	0x00c000be
 800851c:	00ba00b4 	.word	0x00ba00b4
 8008520:	00ac00a2 	.word	0x00ac00a2
 8008524:	00030006 	.word	0x00030006
 8008528:	000a000f 	.word	0x000a000f
 800852c:	0015001c 	.word	0x0015001c
 8008530:	0024002d 	.word	0x0024002d
 8008534:	00370042 	.word	0x00370042
 8008538:	004e005b 	.word	0x004e005b
 800853c:	00690078 	.word	0x00690078
 8008540:	20000018 	.word	0x20000018
 8008544:	00960088 	.word	0x00960088

08008548 <D16_1CH_HTONS_VOL_HP>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008550:	b085      	sub	sp, #20
 8008552:	4681      	mov	r9, r0
 8008554:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8008556:	6993      	ldr	r3, [r2, #24]
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800855e:	69d3      	ldr	r3, [r2, #28]
 8008560:	9402      	str	r4, [sp, #8]
 8008562:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8008566:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800856a:	2800      	cmp	r0, #0
 800856c:	d057      	beq.n	800861e <D16_1CH_HTONS_VOL_HP+0xd6>
 800856e:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8008572:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 800862c <D16_1CH_HTONS_VOL_HP+0xe4>
 8008576:	f1a1 0802 	sub.w	r8, r1, #2
 800857a:	4639      	mov	r1, r7
 800857c:	465f      	mov	r7, fp
 800857e:	46d3      	mov	fp, sl
 8008580:	46ca      	mov	sl, r9
 8008582:	4699      	mov	r9, r3
 8008584:	4633      	mov	r3, r6
 8008586:	4616      	mov	r6, r2
 8008588:	f85a 2b02 	ldr.w	r2, [sl], #2
 800858c:	ba52      	rev16	r2, r2
 800858e:	b2d4      	uxtb	r4, r2
 8008590:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8008594:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 8008598:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800859c:	4491      	add	r9, r2
 800859e:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 80085a2:	f3c0 0209 	ubfx	r2, r0, #0, #10
 80085a6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80085aa:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80085ae:	ea4f 2990 	mov.w	r9, r0, lsr #10
 80085b2:	481c      	ldr	r0, [pc, #112]	@ (8008624 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80085b4:	fb22 5400 	smlad	r4, r2, r0, r5
 80085b8:	481b      	ldr	r0, [pc, #108]	@ (8008628 <D16_1CH_HTONS_VOL_HP+0xe0>)
 80085ba:	fb22 f500 	smuad	r5, r2, r0
 80085be:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80085c2:	18e2      	adds	r2, r4, r3
 80085c4:	1a52      	subs	r2, r2, r1
 80085c6:	17d1      	asrs	r1, r2, #31
 80085c8:	fba2 230c 	umull	r2, r3, r2, ip
 80085cc:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 80085d0:	fb0c 3301 	mla	r3, ip, r1, r3
 80085d4:	f143 0100 	adc.w	r1, r3, #0
 80085d8:	e9cd 0100 	strd	r0, r1, [sp]
 80085dc:	044a      	lsls	r2, r1, #17
 80085de:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80085e2:	2100      	movs	r1, #0
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	fbcb 0102 	smlal	r0, r1, fp, r2
 80085ea:	45ba      	cmp	sl, r7
 80085ec:	ea4f 02a1 	mov.w	r2, r1, asr #2
 80085f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085f4:	f302 020f 	ssat	r2, #16, r2
 80085f8:	4621      	mov	r1, r4
 80085fa:	f828 2f02 	strh.w	r2, [r8, #2]!
 80085fe:	d1c3      	bne.n	8008588 <D16_1CH_HTONS_VOL_HP+0x40>
 8008600:	4632      	mov	r2, r6
 8008602:	461e      	mov	r6, r3
 8008604:	464b      	mov	r3, r9
 8008606:	9902      	ldr	r1, [sp, #8]
 8008608:	61d3      	str	r3, [r2, #28]
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	6095      	str	r5, [r2, #8]
 800860e:	2000      	movs	r0, #0
 8008610:	60d1      	str	r1, [r2, #12]
 8008612:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008616:	6193      	str	r3, [r2, #24]
 8008618:	b005      	add	sp, #20
 800861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861e:	463c      	mov	r4, r7
 8008620:	e7f1      	b.n	8008606 <D16_1CH_HTONS_VOL_HP+0xbe>
 8008622:	bf00      	nop
 8008624:	00030001 	.word	0x00030001
 8008628:	00010003 	.word	0x00010003
 800862c:	20000018 	.word	0x20000018

08008630 <D24_1CH_HTONS_VOL_HP>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	4696      	mov	lr, r2
 8008636:	b089      	sub	sp, #36	@ 0x24
 8008638:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 800863c:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 800863e:	f8de 3018 	ldr.w	r3, [lr, #24]
 8008642:	9703      	str	r7, [sp, #12]
 8008644:	f8de 7020 	ldr.w	r7, [lr, #32]
 8008648:	9306      	str	r3, [sp, #24]
 800864a:	9205      	str	r2, [sp, #20]
 800864c:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8008650:	f8de 601c 	ldr.w	r6, [lr, #28]
 8008654:	9704      	str	r7, [sp, #16]
 8008656:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 800865a:	2a00      	cmp	r2, #0
 800865c:	f000 8081 	beq.w	8008762 <D24_1CH_HTONS_VOL_HP+0x132>
 8008660:	f1a1 0b02 	sub.w	fp, r1, #2
 8008664:	2700      	movs	r7, #0
 8008666:	46d9      	mov	r9, fp
 8008668:	f8cd e01c 	str.w	lr, [sp, #28]
 800866c:	46d3      	mov	fp, sl
 800866e:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8008770 <D24_1CH_HTONS_VOL_HP+0x140>
 8008672:	46a8      	mov	r8, r5
 8008674:	46ba      	mov	sl, r7
 8008676:	469e      	mov	lr, r3
 8008678:	e052      	b.n	8008720 <D24_1CH_HTONS_VOL_HP+0xf0>
 800867a:	7842      	ldrb	r2, [r0, #1]
 800867c:	3002      	adds	r0, #2
 800867e:	4413      	add	r3, r2
 8008680:	b2d9      	uxtb	r1, r3
 8008682:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008686:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800868a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800868e:	0c1b      	lsrs	r3, r3, #16
 8008690:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008694:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008698:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 800869c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80086a0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80086a4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80086a8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80086ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008768 <D24_1CH_HTONS_VOL_HP+0x138>)
 80086ae:	fb23 b102 	smlad	r1, r3, r2, fp
 80086b2:	4a2e      	ldr	r2, [pc, #184]	@ (800876c <D24_1CH_HTONS_VOL_HP+0x13c>)
 80086b4:	fb23 eb02 	smlad	fp, r3, r2, lr
 80086b8:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 80086bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80086c0:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 80086c4:	2201      	movs	r2, #1
 80086c6:	fb23 f702 	smuad	r7, r3, r2
 80086ca:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 80086ce:	eb01 0208 	add.w	r2, r1, r8
 80086d2:	1b12      	subs	r2, r2, r4
 80086d4:	17d4      	asrs	r4, r2, #31
 80086d6:	4613      	mov	r3, r2
 80086d8:	e9cd 3400 	strd	r3, r4, [sp]
 80086dc:	9c04      	ldr	r4, [sp, #16]
 80086de:	9d01      	ldr	r5, [sp, #4]
 80086e0:	fba2 2304 	umull	r2, r3, r2, r4
 80086e4:	fb04 3305 	mla	r3, r4, r5, r3
 80086e8:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80086ec:	f143 0500 	adc.w	r5, r3, #0
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	e9cd 4500 	strd	r4, r5, [sp]
 80086f6:	03ea      	lsls	r2, r5, #15
 80086f8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80086fc:	2500      	movs	r5, #0
 80086fe:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008708:	10ab      	asrs	r3, r5, #2
 800870a:	f303 030f 	ssat	r3, #16, r3
 800870e:	f829 3f02 	strh.w	r3, [r9, #2]!
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	f10a 0a01 	add.w	sl, sl, #1
 8008718:	459a      	cmp	sl, r3
 800871a:	44be      	add	lr, r7
 800871c:	460c      	mov	r4, r1
 800871e:	d00e      	beq.n	800873e <D24_1CH_HTONS_VOL_HP+0x10e>
 8008720:	7801      	ldrb	r1, [r0, #0]
 8008722:	78c2      	ldrb	r2, [r0, #3]
 8008724:	020b      	lsls	r3, r1, #8
 8008726:	f01a 0f01 	tst.w	sl, #1
 800872a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800872e:	d0a4      	beq.n	800867a <D24_1CH_HTONS_VOL_HP+0x4a>
 8008730:	7885      	ldrb	r5, [r0, #2]
 8008732:	0212      	lsls	r2, r2, #8
 8008734:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8008738:	440b      	add	r3, r1
 800873a:	3004      	adds	r0, #4
 800873c:	e7a0      	b.n	8008680 <D24_1CH_HTONS_VOL_HP+0x50>
 800873e:	4673      	mov	r3, lr
 8008740:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008744:	46da      	mov	sl, fp
 8008746:	4645      	mov	r5, r8
 8008748:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 800874c:	9b06      	ldr	r3, [sp, #24]
 800874e:	f8ce 601c 	str.w	r6, [lr, #28]
 8008752:	2000      	movs	r0, #0
 8008754:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8008758:	f8ce 3018 	str.w	r3, [lr, #24]
 800875c:	b009      	add	sp, #36	@ 0x24
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	4621      	mov	r1, r4
 8008764:	e7f0      	b.n	8008748 <D24_1CH_HTONS_VOL_HP+0x118>
 8008766:	bf00      	nop
 8008768:	00030001 	.word	0x00030001
 800876c:	00060007 	.word	0x00060007
 8008770:	20000018 	.word	0x20000018

08008774 <D32_1CH_HTONS_VOL_HP>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	4682      	mov	sl, r0
 800877a:	b087      	sub	sp, #28
 800877c:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800877e:	6993      	ldr	r3, [r2, #24]
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8008786:	69d5      	ldr	r5, [r2, #28]
 8008788:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800878a:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800878e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008792:	2800      	cmp	r0, #0
 8008794:	d070      	beq.n	8008878 <D32_1CH_HTONS_VOL_HP+0x104>
 8008796:	468e      	mov	lr, r1
 8008798:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 800888c <D32_1CH_HTONS_VOL_HP+0x118>
 800879c:	9205      	str	r2, [sp, #20]
 800879e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80087a2:	46d3      	mov	fp, sl
 80087a4:	4638      	mov	r0, r7
 80087a6:	46ca      	mov	sl, r9
 80087a8:	9103      	str	r1, [sp, #12]
 80087aa:	4627      	mov	r7, r4
 80087ac:	4699      	mov	r9, r3
 80087ae:	f85b 1b04 	ldr.w	r1, [fp], #4
 80087b2:	ba49      	rev16	r1, r1
 80087b4:	b2ca      	uxtb	r2, r1
 80087b6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80087ba:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80087be:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80087c2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80087c6:	0e09      	lsrs	r1, r1, #24
 80087c8:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80087cc:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80087d0:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 80087d4:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80087d8:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80087dc:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 80087e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087e4:	f3c5 0109 	ubfx	r1, r5, #0, #10
 80087e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ec:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80087f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087f4:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80087f8:	4a20      	ldr	r2, [pc, #128]	@ (800887c <D32_1CH_HTONS_VOL_HP+0x108>)
 80087fa:	fb23 8802 	smlad	r8, r3, r2, r8
 80087fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008802:	fb24 8102 	smlad	r1, r4, r2, r8
 8008806:	4a1e      	ldr	r2, [pc, #120]	@ (8008880 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8008808:	fb23 9802 	smlad	r8, r3, r2, r9
 800880c:	4a1d      	ldr	r2, [pc, #116]	@ (8008884 <D32_1CH_HTONS_VOL_HP+0x110>)
 800880e:	fb24 8802 	smlad	r8, r4, r2, r8
 8008812:	2201      	movs	r2, #1
 8008814:	fb23 f302 	smuad	r3, r3, r2
 8008818:	4a1b      	ldr	r2, [pc, #108]	@ (8008888 <D32_1CH_HTONS_VOL_HP+0x114>)
 800881a:	fb24 3902 	smlad	r9, r4, r2, r3
 800881e:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8008822:	19a2      	adds	r2, r4, r6
 8008824:	1a12      	subs	r2, r2, r0
 8008826:	17d1      	asrs	r1, r2, #31
 8008828:	fba2 230a 	umull	r2, r3, r2, sl
 800882c:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8008830:	fb0a 3301 	mla	r3, sl, r1, r3
 8008834:	f143 0100 	adc.w	r1, r3, #0
 8008838:	e9cd 0100 	strd	r0, r1, [sp]
 800883c:	038a      	lsls	r2, r1, #14
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008844:	2100      	movs	r1, #0
 8008846:	fbc7 0102 	smlal	r0, r1, r7, r2
 800884a:	108a      	asrs	r2, r1, #2
 800884c:	005e      	lsls	r6, r3, #1
 800884e:	f302 020f 	ssat	r2, #16, r2
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	f82e 2b02 	strh.w	r2, [lr], #2
 8008858:	459e      	cmp	lr, r3
 800885a:	4620      	mov	r0, r4
 800885c:	d1a7      	bne.n	80087ae <D32_1CH_HTONS_VOL_HP+0x3a>
 800885e:	9a05      	ldr	r2, [sp, #20]
 8008860:	464b      	mov	r3, r9
 8008862:	e9c2 3802 	strd	r3, r8, [r2, #8]
 8008866:	9b04      	ldr	r3, [sp, #16]
 8008868:	61d5      	str	r5, [r2, #28]
 800886a:	2000      	movs	r0, #0
 800886c:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008870:	6193      	str	r3, [r2, #24]
 8008872:	b007      	add	sp, #28
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008878:	463c      	mov	r4, r7
 800887a:	e7f2      	b.n	8008862 <D32_1CH_HTONS_VOL_HP+0xee>
 800887c:	00060003 	.word	0x00060003
 8008880:	000a000c 	.word	0x000a000c
 8008884:	000c000a 	.word	0x000c000a
 8008888:	00030006 	.word	0x00030006
 800888c:	20000018 	.word	0x20000018

08008890 <D48_1CH_HTONS_VOL_HP>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	b087      	sub	sp, #28
 8008896:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8008898:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800889a:	6993      	ldr	r3, [r2, #24]
 800889c:	9702      	str	r7, [sp, #8]
 800889e:	6a17      	ldr	r7, [r2, #32]
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 80088a6:	69d6      	ldr	r6, [r2, #28]
 80088a8:	9705      	str	r7, [sp, #20]
 80088aa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	f000 8093 	beq.w	80089da <D48_1CH_HTONS_VOL_HP+0x14a>
 80088b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088b8:	46ba      	mov	sl, r7
 80088ba:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80088be:	3902      	subs	r1, #2
 80088c0:	4f47      	ldr	r7, [pc, #284]	@ (80089e0 <D48_1CH_HTONS_VOL_HP+0x150>)
 80088c2:	9503      	str	r5, [sp, #12]
 80088c4:	9101      	str	r1, [sp, #4]
 80088c6:	469e      	mov	lr, r3
 80088c8:	9205      	str	r2, [sp, #20]
 80088ca:	e9d0 3500 	ldrd	r3, r5, [r0]
 80088ce:	3006      	adds	r0, #6
 80088d0:	ba5b      	rev16	r3, r3
 80088d2:	ba6d      	rev16	r5, r5
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80088da:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80088de:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80088e2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80088e6:	0e1b      	lsrs	r3, r3, #24
 80088e8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80088ec:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 80088f0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80088f4:	fa5f fb85 	uxtb.w	fp, r5
 80088f8:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 80088fc:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8008900:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8008904:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8008908:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800890c:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8008910:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008914:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008918:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800891c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008920:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8008924:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008928:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800892c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008930:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8008934:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008938:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 800893c:	4b29      	ldr	r3, [pc, #164]	@ (80089e4 <D48_1CH_HTONS_VOL_HP+0x154>)
 800893e:	fb22 c103 	smlad	r1, r2, r3, ip
 8008942:	4b29      	ldr	r3, [pc, #164]	@ (80089e8 <D48_1CH_HTONS_VOL_HP+0x158>)
 8008944:	fb28 1103 	smlad	r1, r8, r3, r1
 8008948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800894c:	fb25 1103 	smlad	r1, r5, r3, r1
 8008950:	4b26      	ldr	r3, [pc, #152]	@ (80089ec <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008952:	fb22 ec03 	smlad	ip, r2, r3, lr
 8008956:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 800895a:	fb28 cc03 	smlad	ip, r8, r3, ip
 800895e:	4b24      	ldr	r3, [pc, #144]	@ (80089f0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008960:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008964:	f04f 0e01 	mov.w	lr, #1
 8008968:	fb22 f20e 	smuad	r2, r2, lr
 800896c:	4b21      	ldr	r3, [pc, #132]	@ (80089f4 <D48_1CH_HTONS_VOL_HP+0x164>)
 800896e:	fb28 2803 	smlad	r8, r8, r3, r2
 8008972:	4b21      	ldr	r3, [pc, #132]	@ (80089f8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8008974:	fb25 8e03 	smlad	lr, r5, r3, r8
 8008978:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 800897c:	190a      	adds	r2, r1, r4
 800897e:	eba2 0209 	sub.w	r2, r2, r9
 8008982:	17d5      	asrs	r5, r2, #31
 8008984:	fba2 230a 	umull	r2, r3, r2, sl
 8008988:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 800898c:	fb0a 3305 	mla	r3, sl, r5, r3
 8008990:	f143 0500 	adc.w	r5, r3, #0
 8008994:	9b02      	ldr	r3, [sp, #8]
 8008996:	032a      	lsls	r2, r5, #12
 8008998:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800899c:	f04f 0900 	mov.w	r9, #0
 80089a0:	fbc3 8902 	smlal	r8, r9, r3, r2
 80089a4:	9a01      	ldr	r2, [sp, #4]
 80089a6:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80089aa:	f303 030f 	ssat	r3, #16, r3
 80089ae:	f822 3f02 	strh.w	r3, [r2, #2]!
 80089b2:	9b03      	ldr	r3, [sp, #12]
 80089b4:	9201      	str	r2, [sp, #4]
 80089b6:	4283      	cmp	r3, r0
 80089b8:	ea4f 0445 	mov.w	r4, r5, lsl #1
 80089bc:	4689      	mov	r9, r1
 80089be:	d184      	bne.n	80088ca <D48_1CH_HTONS_VOL_HP+0x3a>
 80089c0:	9a05      	ldr	r2, [sp, #20]
 80089c2:	4673      	mov	r3, lr
 80089c4:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 80089c8:	9b04      	ldr	r3, [sp, #16]
 80089ca:	61d6      	str	r6, [r2, #28]
 80089cc:	2000      	movs	r0, #0
 80089ce:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80089d2:	6193      	str	r3, [r2, #24]
 80089d4:	b007      	add	sp, #28
 80089d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089da:	4649      	mov	r1, r9
 80089dc:	e7f2      	b.n	80089c4 <D48_1CH_HTONS_VOL_HP+0x134>
 80089de:	bf00      	nop
 80089e0:	20000018 	.word	0x20000018
 80089e4:	000f000a 	.word	0x000f000a
 80089e8:	00060003 	.word	0x00060003
 80089ec:	00150019 	.word	0x00150019
 80089f0:	00190015 	.word	0x00190015
 80089f4:	00030006 	.word	0x00030006
 80089f8:	000a000f 	.word	0x000a000f

080089fc <D64_1CH_HTONS_VOL_HP>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	b087      	sub	sp, #28
 8008a02:	6913      	ldr	r3, [r2, #16]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8008a0a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8008a0c:	9601      	str	r6, [sp, #4]
 8008a0e:	4681      	mov	r9, r0
 8008a10:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8008a12:	6a16      	ldr	r6, [r2, #32]
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8008a1a:	69d3      	ldr	r3, [r2, #28]
 8008a1c:	9602      	str	r6, [sp, #8]
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f000 809d 	beq.w	8008b5e <D64_1CH_HTONS_VOL_HP+0x162>
 8008a24:	468e      	mov	lr, r1
 8008a26:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8008b98 <D64_1CH_HTONS_VOL_HP+0x19c>
 8008a2a:	9205      	str	r2, [sp, #20]
 8008a2c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008a30:	9103      	str	r1, [sp, #12]
 8008a32:	4622      	mov	r2, r4
 8008a34:	4619      	mov	r1, r3
 8008a36:	f859 3b08 	ldr.w	r3, [r9], #8
 8008a3a:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8008a3e:	ba5b      	rev16	r3, r3
 8008a40:	ba76      	rev16	r6, r6
 8008a42:	b2dc      	uxtb	r4, r3
 8008a44:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008a48:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008a4c:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8008a50:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	eb01 0b07 	add.w	fp, r1, r7
 8008a5a:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8008a5e:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8008a62:	b2f1      	uxtb	r1, r6
 8008a64:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8008a68:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008a6c:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8008a70:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8008a74:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8008a78:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8008a7c:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8008a80:	0e36      	lsrs	r6, r6, #24
 8008a82:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8008a86:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008a8a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008a8e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8008a92:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008a96:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008a9a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a9e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008aa2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aaa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008aae:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8008ab2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008ab6:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008aba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008abe:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8008ac2:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008ac6:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008aca:	4b2b      	ldr	r3, [pc, #172]	@ (8008b78 <D64_1CH_HTONS_VOL_HP+0x17c>)
 8008acc:	0ab1      	lsrs	r1, r6, #10
 8008ace:	fb2b 8803 	smlad	r8, fp, r3, r8
 8008ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8008b7c <D64_1CH_HTONS_VOL_HP+0x180>)
 8008ad4:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008ad8:	4b29      	ldr	r3, [pc, #164]	@ (8008b80 <D64_1CH_HTONS_VOL_HP+0x184>)
 8008ada:	fb27 8803 	smlad	r8, r7, r3, r8
 8008ade:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008ae2:	fb20 8604 	smlad	r6, r0, r4, r8
 8008ae6:	4b27      	ldr	r3, [pc, #156]	@ (8008b84 <D64_1CH_HTONS_VOL_HP+0x188>)
 8008ae8:	fb2b 5803 	smlad	r8, fp, r3, r5
 8008aec:	fb20 8813 	smladx	r8, r0, r3, r8
 8008af0:	4b25      	ldr	r3, [pc, #148]	@ (8008b88 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008af2:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008af6:	fb27 8813 	smladx	r8, r7, r3, r8
 8008afa:	2401      	movs	r4, #1
 8008afc:	fb2b fb04 	smuad	fp, fp, r4
 8008b00:	4b22      	ldr	r3, [pc, #136]	@ (8008b8c <D64_1CH_HTONS_VOL_HP+0x190>)
 8008b02:	fb2a ba03 	smlad	sl, sl, r3, fp
 8008b06:	4b22      	ldr	r3, [pc, #136]	@ (8008b90 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008b08:	fb27 a703 	smlad	r7, r7, r3, sl
 8008b0c:	4b21      	ldr	r3, [pc, #132]	@ (8008b94 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008b0e:	fb20 7503 	smlad	r5, r0, r3, r7
 8008b12:	9b00      	ldr	r3, [sp, #0]
 8008b14:	9802      	ldr	r0, [sp, #8]
 8008b16:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8008b1a:	4423      	add	r3, r4
 8008b1c:	1a9a      	subs	r2, r3, r2
 8008b1e:	17d7      	asrs	r7, r2, #31
 8008b20:	fba2 2300 	umull	r2, r3, r2, r0
 8008b24:	fb00 3307 	mla	r3, r0, r7, r3
 8008b28:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8008b2c:	f143 0b00 	adc.w	fp, r3, #0
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8008b36:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8008b3a:	2700      	movs	r7, #0
 8008b3c:	fbc3 6702 	smlal	r6, r7, r3, r2
 8008b40:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008b44:	10ba      	asrs	r2, r7, #2
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	f302 020f 	ssat	r2, #16, r2
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	f82e 2b02 	strh.w	r2, [lr], #2
 8008b52:	459e      	cmp	lr, r3
 8008b54:	4622      	mov	r2, r4
 8008b56:	f47f af6e 	bne.w	8008a36 <D64_1CH_HTONS_VOL_HP+0x3a>
 8008b5a:	9a05      	ldr	r2, [sp, #20]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	61d3      	str	r3, [r2, #28]
 8008b60:	9b00      	ldr	r3, [sp, #0]
 8008b62:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	6193      	str	r3, [r2, #24]
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8008b70:	b007      	add	sp, #28
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	bf00      	nop
 8008b78:	001c0015 	.word	0x001c0015
 8008b7c:	000f000a 	.word	0x000f000a
 8008b80:	00060003 	.word	0x00060003
 8008b84:	0024002a 	.word	0x0024002a
 8008b88:	002e0030 	.word	0x002e0030
 8008b8c:	00030006 	.word	0x00030006
 8008b90:	000a000f 	.word	0x000a000f
 8008b94:	0015001c 	.word	0x0015001c
 8008b98:	20000018 	.word	0x20000018

08008b9c <D80_1CH_HTONS_VOL_HP>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	4615      	mov	r5, r2
 8008ba2:	b089      	sub	sp, #36	@ 0x24
 8008ba4:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8008ba8:	692b      	ldr	r3, [r5, #16]
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8008bb0:	9400      	str	r4, [sp, #0]
 8008bb2:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008bb4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8008bb6:	9403      	str	r4, [sp, #12]
 8008bb8:	6a2c      	ldr	r4, [r5, #32]
 8008bba:	9306      	str	r3, [sp, #24]
 8008bbc:	9404      	str	r4, [sp, #16]
 8008bbe:	69eb      	ldr	r3, [r5, #28]
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	f000 80d3 	beq.w	8008d6c <D80_1CH_HTONS_VOL_HP+0x1d0>
 8008bc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008bca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008bce:	9205      	str	r2, [sp, #20]
 8008bd0:	4c67      	ldr	r4, [pc, #412]	@ (8008d70 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008bd2:	9507      	str	r5, [sp, #28]
 8008bd4:	1e8a      	subs	r2, r1, #2
 8008bd6:	9202      	str	r2, [sp, #8]
 8008bd8:	469b      	mov	fp, r3
 8008bda:	6807      	ldr	r7, [r0, #0]
 8008bdc:	6842      	ldr	r2, [r0, #4]
 8008bde:	6883      	ldr	r3, [r0, #8]
 8008be0:	300a      	adds	r0, #10
 8008be2:	ba7f      	rev16	r7, r7
 8008be4:	ba52      	rev16	r2, r2
 8008be6:	ba5b      	rev16	r3, r3
 8008be8:	b2fd      	uxtb	r5, r7
 8008bea:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8008bee:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8008bf2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008bf6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8008bfa:	44f3      	add	fp, lr
 8008bfc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008c00:	0e3f      	lsrs	r7, r7, #24
 8008c02:	fa5f fe82 	uxtb.w	lr, r2
 8008c06:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8008c0a:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8008c0e:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8008c12:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8008c16:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8008c1a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8008c1e:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8008c22:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008c26:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8008c2a:	0e12      	lsrs	r2, r2, #24
 8008c2c:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008c30:	fa5f fe83 	uxtb.w	lr, r3
 8008c34:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8008c38:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c3c:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8008c40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008c44:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8008c48:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008c4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008c50:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8008c54:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008c58:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008c5c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c60:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008c64:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008c68:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008c6c:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8008c70:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c74:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8008c78:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008c7c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008c80:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c84:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8008c88:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8008c8c:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8008c90:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8008c94:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8008c98:	4b36      	ldr	r3, [pc, #216]	@ (8008d74 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008c9a:	9a00      	ldr	r2, [sp, #0]
 8008c9c:	fb21 2303 	smlad	r3, r1, r3, r2
 8008ca0:	4a35      	ldr	r2, [pc, #212]	@ (8008d78 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008ca2:	fb27 3302 	smlad	r3, r7, r2, r3
 8008ca6:	4a35      	ldr	r2, [pc, #212]	@ (8008d7c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008ca8:	fb25 3302 	smlad	r3, r5, r2, r3
 8008cac:	4a34      	ldr	r2, [pc, #208]	@ (8008d80 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008cae:	fb28 3302 	smlad	r3, r8, r2, r3
 8008cb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008cb6:	fb2e 3302 	smlad	r3, lr, r2, r3
 8008cba:	4a32      	ldr	r2, [pc, #200]	@ (8008d84 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008cbc:	fb21 cc02 	smlad	ip, r1, r2, ip
 8008cc0:	4a31      	ldr	r2, [pc, #196]	@ (8008d88 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008cc2:	fb27 cc02 	smlad	ip, r7, r2, ip
 8008cc6:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8008cca:	fb25 c909 	smlad	r9, r5, r9, ip
 8008cce:	4a2f      	ldr	r2, [pc, #188]	@ (8008d8c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008cd0:	fb28 9902 	smlad	r9, r8, r2, r9
 8008cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8008d90 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008cd6:	fb2e 9202 	smlad	r2, lr, r2, r9
 8008cda:	f04f 0a01 	mov.w	sl, #1
 8008cde:	9200      	str	r2, [sp, #0]
 8008ce0:	fb21 fa0a 	smuad	sl, r1, sl
 8008ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8008d94 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008ce6:	fb27 a702 	smlad	r7, r7, r2, sl
 8008cea:	4a2b      	ldr	r2, [pc, #172]	@ (8008d98 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8008cec:	fb25 7702 	smlad	r7, r5, r2, r7
 8008cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8008d9c <D80_1CH_HTONS_VOL_HP+0x200>)
 8008cf2:	fb28 7202 	smlad	r2, r8, r2, r7
 8008cf6:	4d2a      	ldr	r5, [pc, #168]	@ (8008da0 <D80_1CH_HTONS_VOL_HP+0x204>)
 8008cf8:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8008cfc:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	9903      	ldr	r1, [sp, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	1b9e      	subs	r6, r3, r6
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008d0e:	fba6 5603 	umull	r5, r6, r6, r3
 8008d12:	fb03 6309 	mla	r3, r3, r9, r6
 8008d16:	462e      	mov	r6, r5
 8008d18:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8008d1c:	f143 0700 	adc.w	r7, r3, #0
 8008d20:	02bb      	lsls	r3, r7, #10
 8008d22:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008d26:	f04f 0900 	mov.w	r9, #0
 8008d2a:	fbc1 8903 	smlal	r8, r9, r1, r3
 8008d2e:	9902      	ldr	r1, [sp, #8]
 8008d30:	007b      	lsls	r3, r7, #1
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008d38:	f303 030f 	ssat	r3, #16, r3
 8008d3c:	f821 3f02 	strh.w	r3, [r1, #2]!
 8008d40:	9b05      	ldr	r3, [sp, #20]
 8008d42:	9102      	str	r1, [sp, #8]
 8008d44:	4283      	cmp	r3, r0
 8008d46:	4616      	mov	r6, r2
 8008d48:	f47f af47 	bne.w	8008bda <D80_1CH_HTONS_VOL_HP+0x3e>
 8008d4c:	9d07      	ldr	r5, [sp, #28]
 8008d4e:	465b      	mov	r3, fp
 8008d50:	61eb      	str	r3, [r5, #28]
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	9900      	ldr	r1, [sp, #0]
 8008d56:	f8c5 c008 	str.w	ip, [r5, #8]
 8008d5a:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8008d5e:	9b06      	ldr	r3, [sp, #24]
 8008d60:	60e9      	str	r1, [r5, #12]
 8008d62:	2000      	movs	r0, #0
 8008d64:	61ab      	str	r3, [r5, #24]
 8008d66:	b009      	add	sp, #36	@ 0x24
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	e7ef      	b.n	8008d50 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8008d70:	20000018 	.word	0x20000018
 8008d74:	002d0024 	.word	0x002d0024
 8008d78:	001c0015 	.word	0x001c0015
 8008d7c:	000f000a 	.word	0x000f000a
 8008d80:	00060003 	.word	0x00060003
 8008d84:	0037003f 	.word	0x0037003f
 8008d88:	00450049 	.word	0x00450049
 8008d8c:	00490045 	.word	0x00490045
 8008d90:	003f0037 	.word	0x003f0037
 8008d94:	00030006 	.word	0x00030006
 8008d98:	000a000f 	.word	0x000a000f
 8008d9c:	0015001c 	.word	0x0015001c
 8008da0:	0024002d 	.word	0x0024002d

08008da4 <D128_1CH_HTONS_VOL_HP>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	b093      	sub	sp, #76	@ 0x4c
 8008daa:	6914      	ldr	r4, [r2, #16]
 8008dac:	9404      	str	r4, [sp, #16]
 8008dae:	6954      	ldr	r4, [r2, #20]
 8008db0:	9406      	str	r4, [sp, #24]
 8008db2:	6994      	ldr	r4, [r2, #24]
 8008db4:	9410      	str	r4, [sp, #64]	@ 0x40
 8008db6:	6894      	ldr	r4, [r2, #8]
 8008db8:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008dba:	9403      	str	r4, [sp, #12]
 8008dbc:	68d4      	ldr	r4, [r2, #12]
 8008dbe:	9211      	str	r2, [sp, #68]	@ 0x44
 8008dc0:	69d6      	ldr	r6, [r2, #28]
 8008dc2:	9402      	str	r4, [sp, #8]
 8008dc4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008dc6:	6a12      	ldr	r2, [r2, #32]
 8008dc8:	940d      	str	r4, [sp, #52]	@ 0x34
 8008dca:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 814a 	beq.w	8009066 <D128_1CH_HTONS_VOL_HP+0x2c2>
 8008dd2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008dd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dd8:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 80090a4 <D128_1CH_HTONS_VOL_HP+0x300>
 8008ddc:	9107      	str	r1, [sp, #28]
 8008dde:	f100 0310 	add.w	r3, r0, #16
 8008de2:	469b      	mov	fp, r3
 8008de4:	9605      	str	r6, [sp, #20]
 8008de6:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 8008dea:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8008dee:	ba49      	rev16	r1, r1
 8008df0:	ba52      	rev16	r2, r2
 8008df2:	ba5b      	rev16	r3, r3
 8008df4:	fa90 fa90 	rev16.w	sl, r0
 8008df8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8008dfc:	b2cc      	uxtb	r4, r1
 8008dfe:	9e05      	ldr	r6, [sp, #20]
 8008e00:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8008e04:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8008e08:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008e0c:	0e09      	lsrs	r1, r1, #24
 8008e0e:	4426      	add	r6, r4
 8008e10:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8008e14:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8008e18:	b2d0      	uxtb	r0, r2
 8008e1a:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008e1e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008e22:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8008e26:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8008e2a:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8008e2e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008e32:	0e12      	lsrs	r2, r2, #24
 8008e34:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008e38:	9401      	str	r4, [sp, #4]
 8008e3a:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8008e3e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8008e42:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008e46:	9705      	str	r7, [sp, #20]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8008e4e:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8008e52:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8008e56:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008e5a:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8008e5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008e62:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008e66:	0e1b      	lsrs	r3, r3, #24
 8008e68:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8008e6c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8008e70:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8008e74:	fa5f f38a 	uxtb.w	r3, sl
 8008e78:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008e7c:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e7e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008e82:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8008e86:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008e8a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8008e8e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008e90:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008e94:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008e98:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008e9c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8008ea0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8008ea4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008ea8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008eac:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008eb0:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8008eb4:	9308      	str	r3, [sp, #32]
 8008eb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008eba:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008ebe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ec4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008ec8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008ecc:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008ed0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008ed4:	9b05      	ldr	r3, [sp, #20]
 8008ed6:	f8cd 9014 	str.w	r9, [sp, #20]
 8008eda:	4691      	mov	r9, r2
 8008edc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ede:	f8cd a004 	str.w	sl, [sp, #4]
 8008ee2:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8008ee6:	9a01      	ldr	r2, [sp, #4]
 8008ee8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008eec:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8008ef0:	9b08      	ldr	r3, [sp, #32]
 8008ef2:	9a05      	ldr	r2, [sp, #20]
 8008ef4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008ef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008efc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008efe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008f02:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8008f06:	9201      	str	r2, [sp, #4]
 8008f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008f0e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008f12:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008f16:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f1a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008f1e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008f22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008f26:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8008f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f2e:	0a92      	lsrs	r2, r2, #10
 8008f30:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8008f34:	9205      	str	r2, [sp, #20]
 8008f36:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008f3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008f3e:	4d4b      	ldr	r5, [pc, #300]	@ (800906c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008f40:	9a02      	ldr	r2, [sp, #8]
 8008f42:	fb29 2505 	smlad	r5, r9, r5, r2
 8008f46:	4a4a      	ldr	r2, [pc, #296]	@ (8009070 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8008f48:	fb2a 5502 	smlad	r5, sl, r2, r5
 8008f4c:	4a49      	ldr	r2, [pc, #292]	@ (8009074 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8008f4e:	fb21 5502 	smlad	r5, r1, r2, r5
 8008f52:	4a49      	ldr	r2, [pc, #292]	@ (8009078 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8008f54:	fb24 5502 	smlad	r5, r4, r2, r5
 8008f58:	4a48      	ldr	r2, [pc, #288]	@ (800907c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8008f5a:	9e01      	ldr	r6, [sp, #4]
 8008f5c:	fb26 5502 	smlad	r5, r6, r2, r5
 8008f60:	4a47      	ldr	r2, [pc, #284]	@ (8009080 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8008f62:	fb20 5502 	smlad	r5, r0, r2, r5
 8008f66:	4a47      	ldr	r2, [pc, #284]	@ (8009084 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8008f68:	fb23 5502 	smlad	r5, r3, r2, r5
 8008f6c:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8008f70:	fb27 520c 	smlad	r2, r7, ip, r5
 8008f74:	4616      	mov	r6, r2
 8008f76:	9d03      	ldr	r5, [sp, #12]
 8008f78:	4a43      	ldr	r2, [pc, #268]	@ (8009088 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8008f7a:	fb29 5c02 	smlad	ip, r9, r2, r5
 8008f7e:	4a43      	ldr	r2, [pc, #268]	@ (800908c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8008f80:	fb2a ce02 	smlad	lr, sl, r2, ip
 8008f84:	f8df c120 	ldr.w	ip, [pc, #288]	@ 80090a8 <D128_1CH_HTONS_VOL_HP+0x304>
 8008f88:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8008f8c:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 80090ac <D128_1CH_HTONS_VOL_HP+0x308>
 8008f90:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8008f94:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80090b0 <D128_1CH_HTONS_VOL_HP+0x30c>
 8008f98:	9d01      	ldr	r5, [sp, #4]
 8008f9a:	fb25 ce0e 	smlad	lr, r5, lr, ip
 8008f9e:	f8df c114 	ldr.w	ip, [pc, #276]	@ 80090b4 <D128_1CH_HTONS_VOL_HP+0x310>
 8008fa2:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8008fa6:	f8df c110 	ldr.w	ip, [pc, #272]	@ 80090b8 <D128_1CH_HTONS_VOL_HP+0x314>
 8008faa:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008fae:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 80090bc <D128_1CH_HTONS_VOL_HP+0x318>
 8008fb2:	fb27 c20e 	smlad	r2, r7, lr, ip
 8008fb6:	f04f 0c01 	mov.w	ip, #1
 8008fba:	9202      	str	r2, [sp, #8]
 8008fbc:	fb29 fc0c 	smuad	ip, r9, ip
 8008fc0:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80090c0 <D128_1CH_HTONS_VOL_HP+0x31c>
 8008fc4:	fb2a ca09 	smlad	sl, sl, r9, ip
 8008fc8:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80090c4 <D128_1CH_HTONS_VOL_HP+0x320>
 8008fcc:	fb21 a909 	smlad	r9, r1, r9, sl
 8008fd0:	492f      	ldr	r1, [pc, #188]	@ (8009090 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8008fd2:	fb24 9901 	smlad	r9, r4, r1, r9
 8008fd6:	492f      	ldr	r1, [pc, #188]	@ (8009094 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8008fd8:	fb25 9901 	smlad	r9, r5, r1, r9
 8008fdc:	492e      	ldr	r1, [pc, #184]	@ (8009098 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8008fde:	fb20 9901 	smlad	r9, r0, r1, r9
 8008fe2:	492e      	ldr	r1, [pc, #184]	@ (800909c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8008fe4:	fb23 9301 	smlad	r3, r3, r1, r9
 8008fe8:	482d      	ldr	r0, [pc, #180]	@ (80090a0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8008fea:	fb27 3300 	smlad	r3, r7, r0, r3
 8008fee:	9303      	str	r3, [sp, #12]
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8008ff4:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8008ff8:	442b      	add	r3, r5
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	9b06      	ldr	r3, [sp, #24]
 8008ffe:	9506      	str	r5, [sp, #24]
 8009000:	1ad2      	subs	r2, r2, r3
 8009002:	17d1      	asrs	r1, r2, #31
 8009004:	fba2 2304 	umull	r2, r3, r2, r4
 8009008:	fb04 3301 	mla	r3, r4, r1, r3
 800900c:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8009010:	f143 0a00 	adc.w	sl, r3, #0
 8009014:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009016:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800901a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800901e:	2100      	movs	r1, #0
 8009020:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009024:	9b07      	ldr	r3, [sp, #28]
 8009026:	108a      	asrs	r2, r1, #2
 8009028:	f302 020f 	ssat	r2, #16, r2
 800902c:	f823 2b02 	strh.w	r2, [r3], #2
 8009030:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8009034:	9204      	str	r2, [sp, #16]
 8009036:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009038:	9307      	str	r3, [sp, #28]
 800903a:	4293      	cmp	r3, r2
 800903c:	f10b 0b10 	add.w	fp, fp, #16
 8009040:	f47f aed1 	bne.w	8008de6 <D128_1CH_HTONS_VOL_HP+0x42>
 8009044:	9e05      	ldr	r6, [sp, #20]
 8009046:	4629      	mov	r1, r5
 8009048:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800904a:	9803      	ldr	r0, [sp, #12]
 800904c:	6098      	str	r0, [r3, #8]
 800904e:	9802      	ldr	r0, [sp, #8]
 8009050:	60d8      	str	r0, [r3, #12]
 8009052:	9804      	ldr	r0, [sp, #16]
 8009054:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009056:	61de      	str	r6, [r3, #28]
 8009058:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800905c:	2000      	movs	r0, #0
 800905e:	619a      	str	r2, [r3, #24]
 8009060:	b013      	add	sp, #76	@ 0x4c
 8009062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009066:	9906      	ldr	r1, [sp, #24]
 8009068:	e7ee      	b.n	8009048 <D128_1CH_HTONS_VOL_HP+0x2a4>
 800906a:	bf00      	nop
 800906c:	00780069 	.word	0x00780069
 8009070:	005b004e 	.word	0x005b004e
 8009074:	00420037 	.word	0x00420037
 8009078:	002d0024 	.word	0x002d0024
 800907c:	001c0015 	.word	0x001c0015
 8009080:	000f000a 	.word	0x000f000a
 8009084:	00060003 	.word	0x00060003
 8009088:	00880096 	.word	0x00880096
 800908c:	00a200ac 	.word	0x00a200ac
 8009090:	0015001c 	.word	0x0015001c
 8009094:	0024002d 	.word	0x0024002d
 8009098:	00370042 	.word	0x00370042
 800909c:	004e005b 	.word	0x004e005b
 80090a0:	00690078 	.word	0x00690078
 80090a4:	20000018 	.word	0x20000018
 80090a8:	00b400ba 	.word	0x00b400ba
 80090ac:	00be00c0 	.word	0x00be00c0
 80090b0:	00c000be 	.word	0x00c000be
 80090b4:	00ba00b4 	.word	0x00ba00b4
 80090b8:	00ac00a2 	.word	0x00ac00a2
 80090bc:	00960088 	.word	0x00960088
 80090c0:	00030006 	.word	0x00030006
 80090c4:	000a000f 	.word	0x000a000f

080090c8 <PDM_Filter_Init>:
 80090c8:	4a59      	ldr	r2, [pc, #356]	@ (8009230 <PDM_Filter_Init+0x168>)
 80090ca:	495a      	ldr	r1, [pc, #360]	@ (8009234 <PDM_Filter_Init+0x16c>)
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	6813      	ldr	r3, [r2, #0]
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80090dc:	4013      	ands	r3, r2
 80090de:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80090e2:	42ab      	cmp	r3, r5
 80090e4:	4604      	mov	r4, r0
 80090e6:	d044      	beq.n	8009172 <PDM_Filter_Init+0xaa>
 80090e8:	680b      	ldr	r3, [r1, #0]
 80090ea:	f24c 2170 	movw	r1, #49776	@ 0xc270
 80090ee:	401a      	ands	r2, r3
 80090f0:	428a      	cmp	r2, r1
 80090f2:	d03e      	beq.n	8009172 <PDM_Filter_Init+0xaa>
 80090f4:	4b50      	ldr	r3, [pc, #320]	@ (8009238 <PDM_Filter_Init+0x170>)
 80090f6:	2201      	movs	r2, #1
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	6819      	ldr	r1, [r3, #0]
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d1fc      	bne.n	80090fa <PDM_Filter_Init+0x32>
 8009100:	4b4e      	ldr	r3, [pc, #312]	@ (800923c <PDM_Filter_Init+0x174>)
 8009102:	4a4f      	ldr	r2, [pc, #316]	@ (8009240 <PDM_Filter_Init+0x178>)
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	4b4e      	ldr	r3, [pc, #312]	@ (8009244 <PDM_Filter_Init+0x17c>)
 800910a:	429a      	cmp	r2, r3
 800910c:	f104 000c 	add.w	r0, r4, #12
 8009110:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8009114:	d047      	beq.n	80091a6 <PDM_Filter_Init+0xde>
 8009116:	f000 f9c7 	bl	80094a8 <memset>
 800911a:	2300      	movs	r3, #0
 800911c:	6463      	str	r3, [r4, #68]	@ 0x44
 800911e:	8820      	ldrh	r0, [r4, #0]
 8009120:	8963      	ldrh	r3, [r4, #10]
 8009122:	8922      	ldrh	r2, [r4, #8]
 8009124:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8009126:	2801      	cmp	r0, #1
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	61a3      	str	r3, [r4, #24]
 800912e:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009132:	60e3      	str	r3, [r4, #12]
 8009134:	6263      	str	r3, [r4, #36]	@ 0x24
 8009136:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800913a:	6423      	str	r3, [r4, #64]	@ 0x40
 800913c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800913e:	d93a      	bls.n	80091b6 <PDM_Filter_Init+0xee>
 8009140:	2003      	movs	r0, #3
 8009142:	2302      	movs	r3, #2
 8009144:	8862      	ldrh	r2, [r4, #2]
 8009146:	2a01      	cmp	r2, #1
 8009148:	d932      	bls.n	80091b0 <PDM_Filter_Init+0xe8>
 800914a:	2140      	movs	r1, #64	@ 0x40
 800914c:	2300      	movs	r3, #0
 800914e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009150:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8009154:	6862      	ldr	r2, [r4, #4]
 8009156:	bf04      	itt	eq
 8009158:	6421      	streq	r1, [r4, #64]	@ 0x40
 800915a:	460b      	moveq	r3, r1
 800915c:	b11a      	cbz	r2, 8009166 <PDM_Filter_Init+0x9e>
 800915e:	f043 0310 	orr.w	r3, r3, #16
 8009162:	6423      	str	r3, [r4, #64]	@ 0x40
 8009164:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8009166:	2200      	movs	r2, #0
 8009168:	8722      	strh	r2, [r4, #56]	@ 0x38
 800916a:	b908      	cbnz	r0, 8009170 <PDM_Filter_Init+0xa8>
 800916c:	3380      	adds	r3, #128	@ 0x80
 800916e:	6423      	str	r3, [r4, #64]	@ 0x40
 8009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009172:	4b35      	ldr	r3, [pc, #212]	@ (8009248 <PDM_Filter_Init+0x180>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1bc      	bne.n	80090f4 <PDM_Filter_Init+0x2c>
 800917a:	4a34      	ldr	r2, [pc, #208]	@ (800924c <PDM_Filter_Init+0x184>)
 800917c:	6813      	ldr	r3, [r2, #0]
 800917e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009182:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8009186:	d006      	beq.n	8009196 <PDM_Filter_Init+0xce>
 8009188:	6813      	ldr	r3, [r2, #0]
 800918a:	f240 4283 	movw	r2, #1155	@ 0x483
 800918e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009192:	4293      	cmp	r3, r2
 8009194:	d1ae      	bne.n	80090f4 <PDM_Filter_Init+0x2c>
 8009196:	4b2e      	ldr	r3, [pc, #184]	@ (8009250 <PDM_Filter_Init+0x188>)
 8009198:	2201      	movs	r2, #1
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	2900      	cmp	r1, #0
 80091a0:	d1fc      	bne.n	800919c <PDM_Filter_Init+0xd4>
 80091a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009254 <PDM_Filter_Init+0x18c>)
 80091a4:	e7ad      	b.n	8009102 <PDM_Filter_Init+0x3a>
 80091a6:	f000 f97f 	bl	80094a8 <memset>
 80091aa:	4b26      	ldr	r3, [pc, #152]	@ (8009244 <PDM_Filter_Init+0x17c>)
 80091ac:	6463      	str	r3, [r4, #68]	@ 0x44
 80091ae:	e7b6      	b.n	800911e <PDM_Filter_Init+0x56>
 80091b0:	d038      	beq.n	8009224 <PDM_Filter_Init+0x15c>
 80091b2:	4618      	mov	r0, r3
 80091b4:	e7c9      	b.n	800914a <PDM_Filter_Init+0x82>
 80091b6:	4d28      	ldr	r5, [pc, #160]	@ (8009258 <PDM_Filter_Init+0x190>)
 80091b8:	782a      	ldrb	r2, [r5, #0]
 80091ba:	d01a      	beq.n	80091f2 <PDM_Filter_Init+0x12a>
 80091bc:	2a01      	cmp	r2, #1
 80091be:	d001      	beq.n	80091c4 <PDM_Filter_Init+0xfc>
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7bf      	b.n	8009144 <PDM_Filter_Init+0x7c>
 80091c4:	4925      	ldr	r1, [pc, #148]	@ (800925c <PDM_Filter_Init+0x194>)
 80091c6:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8009264 <PDM_Filter_Init+0x19c>
 80091ca:	4f25      	ldr	r7, [pc, #148]	@ (8009260 <PDM_Filter_Init+0x198>)
 80091cc:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80091d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80091d4:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80091d8:	ea02 0007 	and.w	r0, r2, r7
 80091dc:	4303      	orrs	r3, r0
 80091de:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80091e2:	4413      	add	r3, r2
 80091e4:	428e      	cmp	r6, r1
 80091e6:	600b      	str	r3, [r1, #0]
 80091e8:	d1f2      	bne.n	80091d0 <PDM_Filter_Init+0x108>
 80091ea:	2300      	movs	r3, #0
 80091ec:	702b      	strb	r3, [r5, #0]
 80091ee:	2001      	movs	r0, #1
 80091f0:	e7a8      	b.n	8009144 <PDM_Filter_Init+0x7c>
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	d1a6      	bne.n	8009144 <PDM_Filter_Init+0x7c>
 80091f6:	4919      	ldr	r1, [pc, #100]	@ (800925c <PDM_Filter_Init+0x194>)
 80091f8:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8009264 <PDM_Filter_Init+0x19c>
 80091fc:	4f18      	ldr	r7, [pc, #96]	@ (8009260 <PDM_Filter_Init+0x198>)
 80091fe:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8009202:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009206:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800920a:	ea02 0007 	and.w	r0, r2, r7
 800920e:	4303      	orrs	r3, r0
 8009210:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009214:	4413      	add	r3, r2
 8009216:	428e      	cmp	r6, r1
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	d1f2      	bne.n	8009202 <PDM_Filter_Init+0x13a>
 800921c:	2001      	movs	r0, #1
 800921e:	7028      	strb	r0, [r5, #0]
 8009220:	2300      	movs	r3, #0
 8009222:	e78f      	b.n	8009144 <PDM_Filter_Init+0x7c>
 8009224:	2220      	movs	r2, #32
 8009226:	4618      	mov	r0, r3
 8009228:	6422      	str	r2, [r4, #64]	@ 0x40
 800922a:	4613      	mov	r3, r2
 800922c:	2160      	movs	r1, #96	@ 0x60
 800922e:	e78e      	b.n	800914e <PDM_Filter_Init+0x86>
 8009230:	e0002000 	.word	0xe0002000
 8009234:	e000ed00 	.word	0xe000ed00
 8009238:	40023008 	.word	0x40023008
 800923c:	40023000 	.word	0x40023000
 8009240:	f407a5c2 	.word	0xf407a5c2
 8009244:	b5e8b5cd 	.word	0xb5e8b5cd
 8009248:	e0042000 	.word	0xe0042000
 800924c:	5c001000 	.word	0x5c001000
 8009250:	58024c08 	.word	0x58024c08
 8009254:	58024c00 	.word	0x58024c00
 8009258:	20003be2 	.word	0x20003be2
 800925c:	20000014 	.word	0x20000014
 8009260:	000ffc00 	.word	0x000ffc00
 8009264:	3ff00000 	.word	0x3ff00000

08009268 <PDM_Filter_setConfig>:
 8009268:	4b6d      	ldr	r3, [pc, #436]	@ (8009420 <PDM_Filter_setConfig+0x1b8>)
 800926a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800926c:	429a      	cmp	r2, r3
 800926e:	d12f      	bne.n	80092d0 <PDM_Filter_setConfig+0x68>
 8009270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009272:	880e      	ldrh	r6, [r1, #0]
 8009274:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009276:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800927a:	ed2d 8b02 	vpush	{d8}
 800927e:	4604      	mov	r4, r0
 8009280:	1e72      	subs	r2, r6, #1
 8009282:	460d      	mov	r5, r1
 8009284:	2a06      	cmp	r2, #6
 8009286:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800928a:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 800928e:	6421      	str	r1, [r4, #64]	@ 0x40
 8009290:	b083      	sub	sp, #12
 8009292:	d904      	bls.n	800929e <PDM_Filter_setConfig+0x36>
 8009294:	42b8      	cmp	r0, r7
 8009296:	f000 80bb 	beq.w	8009410 <PDM_Filter_setConfig+0x1a8>
 800929a:	2008      	movs	r0, #8
 800929c:	e01d      	b.n	80092da <PDM_Filter_setConfig+0x72>
 800929e:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80092a0:	42b2      	cmp	r2, r6
 80092a2:	d070      	beq.n	8009386 <PDM_Filter_setConfig+0x11e>
 80092a4:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	4333      	orrs	r3, r6
 80092ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80092b2:	6423      	str	r3, [r4, #64]	@ 0x40
 80092b4:	2a70      	cmp	r2, #112	@ 0x70
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80092be:	d067      	beq.n	8009390 <PDM_Filter_setConfig+0x128>
 80092c0:	2b06      	cmp	r3, #6
 80092c2:	d809      	bhi.n	80092d8 <PDM_Filter_setConfig+0x70>
 80092c4:	e8df f003 	tbb	[pc, r3]
 80092c8:	89868380 	.word	0x89868380
 80092cc:	8f8c      	.short	0x8f8c
 80092ce:	7d          	.byte	0x7d
 80092cf:	00          	.byte	0x00
 80092d0:	2004      	movs	r0, #4
 80092d2:	4770      	bx	lr
 80092d4:	4b53      	ldr	r3, [pc, #332]	@ (8009424 <PDM_Filter_setConfig+0x1bc>)
 80092d6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80092d8:	2000      	movs	r0, #0
 80092da:	f117 0f0c 	cmn.w	r7, #12
 80092de:	da0a      	bge.n	80092f6 <PDM_Filter_setConfig+0x8e>
 80092e0:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80092e4:	3040      	adds	r0, #64	@ 0x40
 80092e6:	80ab      	strh	r3, [r5, #4]
 80092e8:	886b      	ldrh	r3, [r5, #2]
 80092ea:	8663      	strh	r3, [r4, #50]	@ 0x32
 80092ec:	8626      	strh	r6, [r4, #48]	@ 0x30
 80092ee:	b003      	add	sp, #12
 80092f0:	ecbd 8b02 	vpop	{d8}
 80092f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f6:	2f33      	cmp	r7, #51	@ 0x33
 80092f8:	dc41      	bgt.n	800937e <PDM_Filter_setConfig+0x116>
 80092fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	3b01      	subs	r3, #1
 8009302:	2b06      	cmp	r3, #6
 8009304:	d858      	bhi.n	80093b8 <PDM_Filter_setConfig+0x150>
 8009306:	4948      	ldr	r1, [pc, #288]	@ (8009428 <PDM_Filter_setConfig+0x1c0>)
 8009308:	4a48      	ldr	r2, [pc, #288]	@ (800942c <PDM_Filter_setConfig+0x1c4>)
 800930a:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8009430 <PDM_Filter_setConfig+0x1c8>
 800930e:	9001      	str	r0, [sp, #4]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4419      	add	r1, r3
 8009314:	edd1 7a00 	vldr	s15, [r1]
 8009318:	4413      	add	r3, r2
 800931a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800931e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8009322:	ed93 8a00 	vldr	s16, [r3]
 8009326:	f000 f8f1 	bl	800950c <powf>
 800932a:	9801      	ldr	r0, [sp, #4]
 800932c:	eef0 8a40 	vmov.f32	s17, s0
 8009330:	ee07 7a10 	vmov	s14, r7
 8009334:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009434 <PDM_Filter_setConfig+0x1cc>
 8009338:	9001      	str	r0, [sp, #4]
 800933a:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 800933e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009342:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009346:	f000 f8e1 	bl	800950c <powf>
 800934a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800934e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009352:	f000 f965 	bl	8009620 <roundf>
 8009356:	9801      	ldr	r0, [sp, #4]
 8009358:	886b      	ldrh	r3, [r5, #2]
 800935a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800935c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009360:	8727      	strh	r7, [r4, #56]	@ 0x38
 8009362:	8626      	strh	r6, [r4, #48]	@ 0x30
 8009364:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8009368:	2800      	cmp	r0, #0
 800936a:	d1c0      	bne.n	80092ee <PDM_Filter_setConfig+0x86>
 800936c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800936e:	2000      	movs	r0, #0
 8009370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009374:	6423      	str	r3, [r4, #64]	@ 0x40
 8009376:	b003      	add	sp, #12
 8009378:	ecbd 8b02 	vpop	{d8}
 800937c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800937e:	2333      	movs	r3, #51	@ 0x33
 8009380:	3040      	adds	r0, #64	@ 0x40
 8009382:	80ab      	strh	r3, [r5, #4]
 8009384:	e7b0      	b.n	80092e8 <PDM_Filter_setConfig+0x80>
 8009386:	42b8      	cmp	r0, r7
 8009388:	d1a6      	bne.n	80092d8 <PDM_Filter_setConfig+0x70>
 800938a:	886b      	ldrh	r3, [r5, #2]
 800938c:	8663      	strh	r3, [r4, #50]	@ 0x32
 800938e:	e7ed      	b.n	800936c <PDM_Filter_setConfig+0x104>
 8009390:	2b06      	cmp	r3, #6
 8009392:	d8a1      	bhi.n	80092d8 <PDM_Filter_setConfig+0x70>
 8009394:	a201      	add	r2, pc, #4	@ (adr r2, 800939c <PDM_Filter_setConfig+0x134>)
 8009396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939a:	bf00      	nop
 800939c:	0800940b 	.word	0x0800940b
 80093a0:	08009405 	.word	0x08009405
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	080093f3 	.word	0x080093f3
 80093ac:	080092d5 	.word	0x080092d5
 80093b0:	080093ed 	.word	0x080093ed
 80093b4:	080093ff 	.word	0x080093ff
 80093b8:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8009438 <PDM_Filter_setConfig+0x1d0>
 80093bc:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 800943c <PDM_Filter_setConfig+0x1d4>
 80093c0:	e7b6      	b.n	8009330 <PDM_Filter_setConfig+0xc8>
 80093c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <PDM_Filter_setConfig+0x1d8>)
 80093c4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093c6:	e787      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009444 <PDM_Filter_setConfig+0x1dc>)
 80093ca:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093cc:	e784      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009448 <PDM_Filter_setConfig+0x1e0>)
 80093d0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093d2:	e781      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093d4:	4b1d      	ldr	r3, [pc, #116]	@ (800944c <PDM_Filter_setConfig+0x1e4>)
 80093d6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093d8:	e77e      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093da:	4b1d      	ldr	r3, [pc, #116]	@ (8009450 <PDM_Filter_setConfig+0x1e8>)
 80093dc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093de:	e77b      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009454 <PDM_Filter_setConfig+0x1ec>)
 80093e2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093e4:	e778      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <PDM_Filter_setConfig+0x1f0>)
 80093e8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093ea:	e775      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093ec:	4b1b      	ldr	r3, [pc, #108]	@ (800945c <PDM_Filter_setConfig+0x1f4>)
 80093ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093f0:	e772      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009460 <PDM_Filter_setConfig+0x1f8>)
 80093f4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093f6:	e76f      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009464 <PDM_Filter_setConfig+0x1fc>)
 80093fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093fc:	e76c      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 80093fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009468 <PDM_Filter_setConfig+0x200>)
 8009400:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009402:	e769      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 8009404:	4b19      	ldr	r3, [pc, #100]	@ (800946c <PDM_Filter_setConfig+0x204>)
 8009406:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009408:	e766      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 800940a:	4b19      	ldr	r3, [pc, #100]	@ (8009470 <PDM_Filter_setConfig+0x208>)
 800940c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800940e:	e763      	b.n	80092d8 <PDM_Filter_setConfig+0x70>
 8009410:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009412:	42b3      	cmp	r3, r6
 8009414:	f47f af41 	bne.w	800929a <PDM_Filter_setConfig+0x32>
 8009418:	886b      	ldrh	r3, [r5, #2]
 800941a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800941c:	2008      	movs	r0, #8
 800941e:	e766      	b.n	80092ee <PDM_Filter_setConfig+0x86>
 8009420:	b5e8b5cd 	.word	0xb5e8b5cd
 8009424:	08008549 	.word	0x08008549
 8009428:	08009d18 	.word	0x08009d18
 800942c:	08009d34 	.word	0x08009d34
 8009430:	42000000 	.word	0x42000000
 8009434:	3d4ccccd 	.word	0x3d4ccccd
 8009438:	4f800000 	.word	0x4f800000
 800943c:	00000000 	.word	0x00000000
 8009440:	08007949 	.word	0x08007949
 8009444:	08007ad1 	.word	0x08007ad1
 8009448:	08007cb9 	.word	0x08007cb9
 800944c:	08007ed5 	.word	0x08007ed5
 8009450:	08008169 	.word	0x08008169
 8009454:	080076a9 	.word	0x080076a9
 8009458:	080077c1 	.word	0x080077c1
 800945c:	08008631 	.word	0x08008631
 8009460:	08008da5 	.word	0x08008da5
 8009464:	08008b9d 	.word	0x08008b9d
 8009468:	08008775 	.word	0x08008775
 800946c:	080089fd 	.word	0x080089fd
 8009470:	08008891 	.word	0x08008891

08009474 <PDM_Filter>:
 8009474:	b410      	push	{r4}
 8009476:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <PDM_Filter+0x30>)
 8009478:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800947a:	429c      	cmp	r4, r3
 800947c:	d107      	bne.n	800948e <PDM_Filter+0x1a>
 800947e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009480:	05dc      	lsls	r4, r3, #23
 8009482:	d508      	bpl.n	8009496 <PDM_Filter+0x22>
 8009484:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8009486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800948a:	320c      	adds	r2, #12
 800948c:	4718      	bx	r3
 800948e:	2004      	movs	r0, #4
 8009490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800949a:	bf14      	ite	ne
 800949c:	2020      	movne	r0, #32
 800949e:	2030      	moveq	r0, #48	@ 0x30
 80094a0:	e7f6      	b.n	8009490 <PDM_Filter+0x1c>
 80094a2:	bf00      	nop
 80094a4:	b5e8b5cd 	.word	0xb5e8b5cd

080094a8 <memset>:
 80094a8:	4402      	add	r2, r0
 80094aa:	4603      	mov	r3, r0
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d100      	bne.n	80094b2 <memset+0xa>
 80094b0:	4770      	bx	lr
 80094b2:	f803 1b01 	strb.w	r1, [r3], #1
 80094b6:	e7f9      	b.n	80094ac <memset+0x4>

080094b8 <__errno>:
 80094b8:	4b01      	ldr	r3, [pc, #4]	@ (80094c0 <__errno+0x8>)
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000418 	.word	0x20000418

080094c4 <__libc_init_array>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4d0d      	ldr	r5, [pc, #52]	@ (80094fc <__libc_init_array+0x38>)
 80094c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009500 <__libc_init_array+0x3c>)
 80094ca:	1b64      	subs	r4, r4, r5
 80094cc:	10a4      	asrs	r4, r4, #2
 80094ce:	2600      	movs	r6, #0
 80094d0:	42a6      	cmp	r6, r4
 80094d2:	d109      	bne.n	80094e8 <__libc_init_array+0x24>
 80094d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009504 <__libc_init_array+0x40>)
 80094d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009508 <__libc_init_array+0x44>)
 80094d8:	f000 fc02 	bl	8009ce0 <_init>
 80094dc:	1b64      	subs	r4, r4, r5
 80094de:	10a4      	asrs	r4, r4, #2
 80094e0:	2600      	movs	r6, #0
 80094e2:	42a6      	cmp	r6, r4
 80094e4:	d105      	bne.n	80094f2 <__libc_init_array+0x2e>
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ec:	4798      	blx	r3
 80094ee:	3601      	adds	r6, #1
 80094f0:	e7ee      	b.n	80094d0 <__libc_init_array+0xc>
 80094f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f6:	4798      	blx	r3
 80094f8:	3601      	adds	r6, #1
 80094fa:	e7f2      	b.n	80094e2 <__libc_init_array+0x1e>
 80094fc:	08009d70 	.word	0x08009d70
 8009500:	08009d70 	.word	0x08009d70
 8009504:	08009d70 	.word	0x08009d70
 8009508:	08009d74 	.word	0x08009d74

0800950c <powf>:
 800950c:	b508      	push	{r3, lr}
 800950e:	ed2d 8b04 	vpush	{d8-d9}
 8009512:	eeb0 8a60 	vmov.f32	s16, s1
 8009516:	eeb0 9a40 	vmov.f32	s18, s0
 800951a:	f000 f8a5 	bl	8009668 <__ieee754_powf>
 800951e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009526:	eef0 8a40 	vmov.f32	s17, s0
 800952a:	d63e      	bvs.n	80095aa <powf+0x9e>
 800952c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009534:	d112      	bne.n	800955c <powf+0x50>
 8009536:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	d039      	beq.n	80095b4 <powf+0xa8>
 8009540:	eeb0 0a48 	vmov.f32	s0, s16
 8009544:	f000 f839 	bl	80095ba <finitef>
 8009548:	b378      	cbz	r0, 80095aa <powf+0x9e>
 800954a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009552:	d52a      	bpl.n	80095aa <powf+0x9e>
 8009554:	f7ff ffb0 	bl	80094b8 <__errno>
 8009558:	2322      	movs	r3, #34	@ 0x22
 800955a:	e014      	b.n	8009586 <powf+0x7a>
 800955c:	f000 f82d 	bl	80095ba <finitef>
 8009560:	b998      	cbnz	r0, 800958a <powf+0x7e>
 8009562:	eeb0 0a49 	vmov.f32	s0, s18
 8009566:	f000 f828 	bl	80095ba <finitef>
 800956a:	b170      	cbz	r0, 800958a <powf+0x7e>
 800956c:	eeb0 0a48 	vmov.f32	s0, s16
 8009570:	f000 f823 	bl	80095ba <finitef>
 8009574:	b148      	cbz	r0, 800958a <powf+0x7e>
 8009576:	eef4 8a68 	vcmp.f32	s17, s17
 800957a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957e:	d7e9      	bvc.n	8009554 <powf+0x48>
 8009580:	f7ff ff9a 	bl	80094b8 <__errno>
 8009584:	2321      	movs	r3, #33	@ 0x21
 8009586:	6003      	str	r3, [r0, #0]
 8009588:	e00f      	b.n	80095aa <powf+0x9e>
 800958a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800958e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009592:	d10a      	bne.n	80095aa <powf+0x9e>
 8009594:	eeb0 0a49 	vmov.f32	s0, s18
 8009598:	f000 f80f 	bl	80095ba <finitef>
 800959c:	b128      	cbz	r0, 80095aa <powf+0x9e>
 800959e:	eeb0 0a48 	vmov.f32	s0, s16
 80095a2:	f000 f80a 	bl	80095ba <finitef>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d1d4      	bne.n	8009554 <powf+0x48>
 80095aa:	eeb0 0a68 	vmov.f32	s0, s17
 80095ae:	ecbd 8b04 	vpop	{d8-d9}
 80095b2:	bd08      	pop	{r3, pc}
 80095b4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80095b8:	e7f7      	b.n	80095aa <powf+0x9e>

080095ba <finitef>:
 80095ba:	ee10 3a10 	vmov	r3, s0
 80095be:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80095c2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80095c6:	bfac      	ite	ge
 80095c8:	2000      	movge	r0, #0
 80095ca:	2001      	movlt	r0, #1
 80095cc:	4770      	bx	lr

080095ce <with_errnof>:
 80095ce:	b510      	push	{r4, lr}
 80095d0:	ed2d 8b02 	vpush	{d8}
 80095d4:	eeb0 8a40 	vmov.f32	s16, s0
 80095d8:	4604      	mov	r4, r0
 80095da:	f7ff ff6d 	bl	80094b8 <__errno>
 80095de:	eeb0 0a48 	vmov.f32	s0, s16
 80095e2:	ecbd 8b02 	vpop	{d8}
 80095e6:	6004      	str	r4, [r0, #0]
 80095e8:	bd10      	pop	{r4, pc}

080095ea <xflowf>:
 80095ea:	b130      	cbz	r0, 80095fa <xflowf+0x10>
 80095ec:	eef1 7a40 	vneg.f32	s15, s0
 80095f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80095f4:	2022      	movs	r0, #34	@ 0x22
 80095f6:	f7ff bfea 	b.w	80095ce <with_errnof>
 80095fa:	eef0 7a40 	vmov.f32	s15, s0
 80095fe:	e7f7      	b.n	80095f0 <xflowf+0x6>

08009600 <__math_uflowf>:
 8009600:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009608 <__math_uflowf+0x8>
 8009604:	f7ff bff1 	b.w	80095ea <xflowf>
 8009608:	10000000 	.word	0x10000000

0800960c <__math_oflowf>:
 800960c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009614 <__math_oflowf+0x8>
 8009610:	f7ff bfeb 	b.w	80095ea <xflowf>
 8009614:	70000000 	.word	0x70000000

08009618 <__ieee754_sqrtf>:
 8009618:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800961c:	4770      	bx	lr
	...

08009620 <roundf>:
 8009620:	ee10 0a10 	vmov	r0, s0
 8009624:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009628:	3a7f      	subs	r2, #127	@ 0x7f
 800962a:	2a16      	cmp	r2, #22
 800962c:	dc15      	bgt.n	800965a <roundf+0x3a>
 800962e:	2a00      	cmp	r2, #0
 8009630:	da08      	bge.n	8009644 <roundf+0x24>
 8009632:	3201      	adds	r2, #1
 8009634:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8009638:	d101      	bne.n	800963e <roundf+0x1e>
 800963a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800963e:	ee00 3a10 	vmov	s0, r3
 8009642:	4770      	bx	lr
 8009644:	4907      	ldr	r1, [pc, #28]	@ (8009664 <roundf+0x44>)
 8009646:	4111      	asrs	r1, r2
 8009648:	4201      	tst	r1, r0
 800964a:	d0fa      	beq.n	8009642 <roundf+0x22>
 800964c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009650:	4113      	asrs	r3, r2
 8009652:	4403      	add	r3, r0
 8009654:	ea23 0301 	bic.w	r3, r3, r1
 8009658:	e7f1      	b.n	800963e <roundf+0x1e>
 800965a:	2a80      	cmp	r2, #128	@ 0x80
 800965c:	d1f1      	bne.n	8009642 <roundf+0x22>
 800965e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009662:	4770      	bx	lr
 8009664:	007fffff 	.word	0x007fffff

08009668 <__ieee754_powf>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	ee10 4a90 	vmov	r4, s1
 8009670:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8009674:	ed2d 8b02 	vpush	{d8}
 8009678:	ee10 6a10 	vmov	r6, s0
 800967c:	eeb0 8a40 	vmov.f32	s16, s0
 8009680:	eef0 8a60 	vmov.f32	s17, s1
 8009684:	d10c      	bne.n	80096a0 <__ieee754_powf+0x38>
 8009686:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800968a:	0076      	lsls	r6, r6, #1
 800968c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009690:	f240 8274 	bls.w	8009b7c <__ieee754_powf+0x514>
 8009694:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009698:	ecbd 8b02 	vpop	{d8}
 800969c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80096a4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80096a8:	d802      	bhi.n	80096b0 <__ieee754_powf+0x48>
 80096aa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80096ae:	d908      	bls.n	80096c2 <__ieee754_powf+0x5a>
 80096b0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80096b4:	d1ee      	bne.n	8009694 <__ieee754_powf+0x2c>
 80096b6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80096ba:	0064      	lsls	r4, r4, #1
 80096bc:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80096c0:	e7e6      	b.n	8009690 <__ieee754_powf+0x28>
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	da1f      	bge.n	8009706 <__ieee754_powf+0x9e>
 80096c6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80096ca:	f080 8260 	bcs.w	8009b8e <__ieee754_powf+0x526>
 80096ce:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80096d2:	d32f      	bcc.n	8009734 <__ieee754_powf+0xcc>
 80096d4:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80096d8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80096dc:	fa49 f503 	asr.w	r5, r9, r3
 80096e0:	fa05 f303 	lsl.w	r3, r5, r3
 80096e4:	454b      	cmp	r3, r9
 80096e6:	d123      	bne.n	8009730 <__ieee754_powf+0xc8>
 80096e8:	f005 0501 	and.w	r5, r5, #1
 80096ec:	f1c5 0502 	rsb	r5, r5, #2
 80096f0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80096f4:	d11f      	bne.n	8009736 <__ieee754_powf+0xce>
 80096f6:	2c00      	cmp	r4, #0
 80096f8:	f280 8246 	bge.w	8009b88 <__ieee754_powf+0x520>
 80096fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009700:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009704:	e7c8      	b.n	8009698 <__ieee754_powf+0x30>
 8009706:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800970a:	d111      	bne.n	8009730 <__ieee754_powf+0xc8>
 800970c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009710:	f000 8234 	beq.w	8009b7c <__ieee754_powf+0x514>
 8009714:	d906      	bls.n	8009724 <__ieee754_powf+0xbc>
 8009716:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009a2c <__ieee754_powf+0x3c4>
 800971a:	2c00      	cmp	r4, #0
 800971c:	bfa8      	it	ge
 800971e:	eeb0 0a68 	vmovge.f32	s0, s17
 8009722:	e7b9      	b.n	8009698 <__ieee754_powf+0x30>
 8009724:	2c00      	cmp	r4, #0
 8009726:	f280 822c 	bge.w	8009b82 <__ieee754_powf+0x51a>
 800972a:	eeb1 0a68 	vneg.f32	s0, s17
 800972e:	e7b3      	b.n	8009698 <__ieee754_powf+0x30>
 8009730:	2500      	movs	r5, #0
 8009732:	e7dd      	b.n	80096f0 <__ieee754_powf+0x88>
 8009734:	2500      	movs	r5, #0
 8009736:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800973a:	d102      	bne.n	8009742 <__ieee754_powf+0xda>
 800973c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009740:	e7aa      	b.n	8009698 <__ieee754_powf+0x30>
 8009742:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009746:	f040 8227 	bne.w	8009b98 <__ieee754_powf+0x530>
 800974a:	2e00      	cmp	r6, #0
 800974c:	f2c0 8224 	blt.w	8009b98 <__ieee754_powf+0x530>
 8009750:	eeb0 0a48 	vmov.f32	s0, s16
 8009754:	ecbd 8b02 	vpop	{d8}
 8009758:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	f7ff bf5c 	b.w	8009618 <__ieee754_sqrtf>
 8009760:	2d01      	cmp	r5, #1
 8009762:	d199      	bne.n	8009698 <__ieee754_powf+0x30>
 8009764:	eeb1 0a40 	vneg.f32	s0, s0
 8009768:	e796      	b.n	8009698 <__ieee754_powf+0x30>
 800976a:	0ff0      	lsrs	r0, r6, #31
 800976c:	3801      	subs	r0, #1
 800976e:	ea55 0300 	orrs.w	r3, r5, r0
 8009772:	d104      	bne.n	800977e <__ieee754_powf+0x116>
 8009774:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009778:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800977c:	e78c      	b.n	8009698 <__ieee754_powf+0x30>
 800977e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009782:	d96d      	bls.n	8009860 <__ieee754_powf+0x1f8>
 8009784:	4baa      	ldr	r3, [pc, #680]	@ (8009a30 <__ieee754_powf+0x3c8>)
 8009786:	4598      	cmp	r8, r3
 8009788:	d808      	bhi.n	800979c <__ieee754_powf+0x134>
 800978a:	2c00      	cmp	r4, #0
 800978c:	da0b      	bge.n	80097a6 <__ieee754_powf+0x13e>
 800978e:	2000      	movs	r0, #0
 8009790:	ecbd 8b02 	vpop	{d8}
 8009794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009798:	f7ff bf38 	b.w	800960c <__math_oflowf>
 800979c:	4ba5      	ldr	r3, [pc, #660]	@ (8009a34 <__ieee754_powf+0x3cc>)
 800979e:	4598      	cmp	r8, r3
 80097a0:	d908      	bls.n	80097b4 <__ieee754_powf+0x14c>
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	dcf3      	bgt.n	800978e <__ieee754_powf+0x126>
 80097a6:	2000      	movs	r0, #0
 80097a8:	ecbd 8b02 	vpop	{d8}
 80097ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	f7ff bf26 	b.w	8009600 <__math_uflowf>
 80097b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80097b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097bc:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009a38 <__ieee754_powf+0x3d0>
 80097c0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80097c4:	eee0 6a67 	vfms.f32	s13, s0, s15
 80097c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80097cc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80097d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80097d4:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009a3c <__ieee754_powf+0x3d4>
 80097d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097dc:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009a40 <__ieee754_powf+0x3d8>
 80097e0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80097e4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009a44 <__ieee754_powf+0x3dc>
 80097e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80097ec:	eeb0 7a67 	vmov.f32	s14, s15
 80097f0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80097f4:	ee17 3a10 	vmov	r3, s14
 80097f8:	f36f 030b 	bfc	r3, #0, #12
 80097fc:	ee07 3a10 	vmov	s14, r3
 8009800:	eeb0 6a47 	vmov.f32	s12, s14
 8009804:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009808:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800980c:	3d01      	subs	r5, #1
 800980e:	4305      	orrs	r5, r0
 8009810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009814:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009818:	f36f 040b 	bfc	r4, #0, #12
 800981c:	bf18      	it	ne
 800981e:	eeb0 8a66 	vmovne.f32	s16, s13
 8009822:	ee06 4a90 	vmov	s13, r4
 8009826:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800982a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800982e:	ee67 7a26 	vmul.f32	s15, s14, s13
 8009832:	eee6 0a07 	vfma.f32	s1, s12, s14
 8009836:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800983a:	ee17 1a10 	vmov	r1, s14
 800983e:	2900      	cmp	r1, #0
 8009840:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009844:	f340 80dd 	ble.w	8009a02 <__ieee754_powf+0x39a>
 8009848:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800984c:	f240 80ca 	bls.w	80099e4 <__ieee754_powf+0x37c>
 8009850:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	bf4c      	ite	mi
 800985a:	2001      	movmi	r0, #1
 800985c:	2000      	movpl	r0, #0
 800985e:	e797      	b.n	8009790 <__ieee754_powf+0x128>
 8009860:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009864:	bf01      	itttt	eq
 8009866:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009a48 <__ieee754_powf+0x3e0>
 800986a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800986e:	f06f 0317 	mvneq.w	r3, #23
 8009872:	ee17 7a90 	vmoveq	r7, s15
 8009876:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800987a:	bf18      	it	ne
 800987c:	2300      	movne	r3, #0
 800987e:	3a7f      	subs	r2, #127	@ 0x7f
 8009880:	441a      	add	r2, r3
 8009882:	4b72      	ldr	r3, [pc, #456]	@ (8009a4c <__ieee754_powf+0x3e4>)
 8009884:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009888:	429f      	cmp	r7, r3
 800988a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800988e:	dd06      	ble.n	800989e <__ieee754_powf+0x236>
 8009890:	4b6f      	ldr	r3, [pc, #444]	@ (8009a50 <__ieee754_powf+0x3e8>)
 8009892:	429f      	cmp	r7, r3
 8009894:	f340 80a4 	ble.w	80099e0 <__ieee754_powf+0x378>
 8009898:	3201      	adds	r2, #1
 800989a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800989e:	2600      	movs	r6, #0
 80098a0:	4b6c      	ldr	r3, [pc, #432]	@ (8009a54 <__ieee754_powf+0x3ec>)
 80098a2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80098a6:	ee07 1a10 	vmov	s14, r1
 80098aa:	edd3 5a00 	vldr	s11, [r3]
 80098ae:	4b6a      	ldr	r3, [pc, #424]	@ (8009a58 <__ieee754_powf+0x3f0>)
 80098b0:	ee75 7a87 	vadd.f32	s15, s11, s14
 80098b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098b8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80098bc:	1049      	asrs	r1, r1, #1
 80098be:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80098c2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80098c6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80098ca:	ee37 6a65 	vsub.f32	s12, s14, s11
 80098ce:	ee07 1a90 	vmov	s15, r1
 80098d2:	ee26 5a24 	vmul.f32	s10, s12, s9
 80098d6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80098da:	ee15 7a10 	vmov	r7, s10
 80098de:	401f      	ands	r7, r3
 80098e0:	ee06 7a90 	vmov	s13, r7
 80098e4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80098e8:	ee37 7a65 	vsub.f32	s14, s14, s11
 80098ec:	ee65 7a05 	vmul.f32	s15, s10, s10
 80098f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80098f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009a5c <__ieee754_powf+0x3f4>
 80098f8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009a60 <__ieee754_powf+0x3f8>
 80098fc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009900:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009a64 <__ieee754_powf+0x3fc>
 8009904:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009908:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009a38 <__ieee754_powf+0x3d0>
 800990c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009910:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009a68 <__ieee754_powf+0x400>
 8009914:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009918:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009a6c <__ieee754_powf+0x404>
 800991c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009920:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009924:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009928:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800992c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009930:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009934:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009938:	eef0 5a67 	vmov.f32	s11, s15
 800993c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009940:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009944:	ee15 1a90 	vmov	r1, s11
 8009948:	4019      	ands	r1, r3
 800994a:	ee05 1a90 	vmov	s11, r1
 800994e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009952:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800995e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009962:	eeb0 6a67 	vmov.f32	s12, s15
 8009966:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800996a:	ee16 1a10 	vmov	r1, s12
 800996e:	4019      	ands	r1, r3
 8009970:	ee06 1a10 	vmov	s12, r1
 8009974:	eeb0 7a46 	vmov.f32	s14, s12
 8009978:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800997c:	493c      	ldr	r1, [pc, #240]	@ (8009a70 <__ieee754_powf+0x408>)
 800997e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009986:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009a74 <__ieee754_powf+0x40c>
 800998a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009a78 <__ieee754_powf+0x410>
 800998e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009992:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009a7c <__ieee754_powf+0x414>
 8009996:	eee6 7a07 	vfma.f32	s15, s12, s14
 800999a:	ed91 7a00 	vldr	s14, [r1]
 800999e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099a2:	ee07 2a10 	vmov	s14, r2
 80099a6:	4a36      	ldr	r2, [pc, #216]	@ (8009a80 <__ieee754_powf+0x418>)
 80099a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80099ac:	eeb0 7a67 	vmov.f32	s14, s15
 80099b0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80099b4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80099b8:	ed92 5a00 	vldr	s10, [r2]
 80099bc:	ee37 7a05 	vadd.f32	s14, s14, s10
 80099c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80099c4:	ee17 2a10 	vmov	r2, s14
 80099c8:	401a      	ands	r2, r3
 80099ca:	ee07 2a10 	vmov	s14, r2
 80099ce:	ee77 6a66 	vsub.f32	s13, s14, s13
 80099d2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80099d6:	eee6 6a65 	vfms.f32	s13, s12, s11
 80099da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099de:	e715      	b.n	800980c <__ieee754_powf+0x1a4>
 80099e0:	2601      	movs	r6, #1
 80099e2:	e75d      	b.n	80098a0 <__ieee754_powf+0x238>
 80099e4:	d152      	bne.n	8009a8c <__ieee754_powf+0x424>
 80099e6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009a84 <__ieee754_powf+0x41c>
 80099ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ee:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80099f2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80099f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fa:	f73f af29 	bgt.w	8009850 <__ieee754_powf+0x1e8>
 80099fe:	2386      	movs	r3, #134	@ 0x86
 8009a00:	e048      	b.n	8009a94 <__ieee754_powf+0x42c>
 8009a02:	4a21      	ldr	r2, [pc, #132]	@ (8009a88 <__ieee754_powf+0x420>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d907      	bls.n	8009a18 <__ieee754_powf+0x3b0>
 8009a08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a10:	bf4c      	ite	mi
 8009a12:	2001      	movmi	r0, #1
 8009a14:	2000      	movpl	r0, #0
 8009a16:	e6c7      	b.n	80097a8 <__ieee754_powf+0x140>
 8009a18:	d138      	bne.n	8009a8c <__ieee754_powf+0x424>
 8009a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a1e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a26:	dbea      	blt.n	80099fe <__ieee754_powf+0x396>
 8009a28:	e7ee      	b.n	8009a08 <__ieee754_powf+0x3a0>
 8009a2a:	bf00      	nop
 8009a2c:	00000000 	.word	0x00000000
 8009a30:	3f7ffff3 	.word	0x3f7ffff3
 8009a34:	3f800007 	.word	0x3f800007
 8009a38:	3eaaaaab 	.word	0x3eaaaaab
 8009a3c:	3fb8aa00 	.word	0x3fb8aa00
 8009a40:	3fb8aa3b 	.word	0x3fb8aa3b
 8009a44:	36eca570 	.word	0x36eca570
 8009a48:	4b800000 	.word	0x4b800000
 8009a4c:	001cc471 	.word	0x001cc471
 8009a50:	005db3d6 	.word	0x005db3d6
 8009a54:	08009d60 	.word	0x08009d60
 8009a58:	fffff000 	.word	0xfffff000
 8009a5c:	3e6c3255 	.word	0x3e6c3255
 8009a60:	3e53f142 	.word	0x3e53f142
 8009a64:	3e8ba305 	.word	0x3e8ba305
 8009a68:	3edb6db7 	.word	0x3edb6db7
 8009a6c:	3f19999a 	.word	0x3f19999a
 8009a70:	08009d50 	.word	0x08009d50
 8009a74:	3f76384f 	.word	0x3f76384f
 8009a78:	3f763800 	.word	0x3f763800
 8009a7c:	369dc3a0 	.word	0x369dc3a0
 8009a80:	08009d58 	.word	0x08009d58
 8009a84:	3338aa3c 	.word	0x3338aa3c
 8009a88:	43160000 	.word	0x43160000
 8009a8c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009a90:	d96f      	bls.n	8009b72 <__ieee754_powf+0x50a>
 8009a92:	15db      	asrs	r3, r3, #23
 8009a94:	3b7e      	subs	r3, #126	@ 0x7e
 8009a96:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009a9a:	4118      	asrs	r0, r3
 8009a9c:	4408      	add	r0, r1
 8009a9e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009aa2:	4a4e      	ldr	r2, [pc, #312]	@ (8009bdc <__ieee754_powf+0x574>)
 8009aa4:	3b7f      	subs	r3, #127	@ 0x7f
 8009aa6:	411a      	asrs	r2, r3
 8009aa8:	4002      	ands	r2, r0
 8009aaa:	ee07 2a10 	vmov	s14, r2
 8009aae:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009ab2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009ab6:	f1c3 0317 	rsb	r3, r3, #23
 8009aba:	4118      	asrs	r0, r3
 8009abc:	2900      	cmp	r1, #0
 8009abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ac2:	bfb8      	it	lt
 8009ac4:	4240      	neglt	r0, r0
 8009ac6:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009aca:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009be0 <__ieee754_powf+0x578>
 8009ace:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009be4 <__ieee754_powf+0x57c>
 8009ad2:	ee16 3a90 	vmov	r3, s13
 8009ad6:	f36f 030b 	bfc	r3, #0, #12
 8009ada:	ee06 3a90 	vmov	s13, r3
 8009ade:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009ae2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009ae6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009aea:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009be8 <__ieee754_powf+0x580>
 8009aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009af2:	eee0 7a87 	vfma.f32	s15, s1, s14
 8009af6:	eeb0 7a67 	vmov.f32	s14, s15
 8009afa:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009afe:	eef0 5a47 	vmov.f32	s11, s14
 8009b02:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8009b06:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009b0a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009b0e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009bec <__ieee754_powf+0x584>
 8009b12:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009bf0 <__ieee754_powf+0x588>
 8009b16:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009b1a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009bf4 <__ieee754_powf+0x58c>
 8009b1e:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009b22:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009bf8 <__ieee754_powf+0x590>
 8009b26:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009b2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009bfc <__ieee754_powf+0x594>
 8009b2e:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009b32:	eeb0 6a47 	vmov.f32	s12, s14
 8009b36:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009b3a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009b3e:	ee67 5a06 	vmul.f32	s11, s14, s12
 8009b42:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009b46:	eee7 7a27 	vfma.f32	s15, s14, s15
 8009b4a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009b4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b5a:	ee10 3a10 	vmov	r3, s0
 8009b5e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009b62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b66:	da06      	bge.n	8009b76 <__ieee754_powf+0x50e>
 8009b68:	f000 f854 	bl	8009c14 <scalbnf>
 8009b6c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009b70:	e592      	b.n	8009698 <__ieee754_powf+0x30>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e7a7      	b.n	8009ac6 <__ieee754_powf+0x45e>
 8009b76:	ee00 3a10 	vmov	s0, r3
 8009b7a:	e7f7      	b.n	8009b6c <__ieee754_powf+0x504>
 8009b7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009b80:	e58a      	b.n	8009698 <__ieee754_powf+0x30>
 8009b82:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009c00 <__ieee754_powf+0x598>
 8009b86:	e587      	b.n	8009698 <__ieee754_powf+0x30>
 8009b88:	eeb0 0a48 	vmov.f32	s0, s16
 8009b8c:	e584      	b.n	8009698 <__ieee754_powf+0x30>
 8009b8e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009b92:	f43f adbb 	beq.w	800970c <__ieee754_powf+0xa4>
 8009b96:	2502      	movs	r5, #2
 8009b98:	eeb0 0a48 	vmov.f32	s0, s16
 8009b9c:	f000 f832 	bl	8009c04 <fabsf>
 8009ba0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009ba4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009ba8:	4647      	mov	r7, r8
 8009baa:	d003      	beq.n	8009bb4 <__ieee754_powf+0x54c>
 8009bac:	f1b8 0f00 	cmp.w	r8, #0
 8009bb0:	f47f addb 	bne.w	800976a <__ieee754_powf+0x102>
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	bfbc      	itt	lt
 8009bb8:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009bbc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009bc0:	2e00      	cmp	r6, #0
 8009bc2:	f6bf ad69 	bge.w	8009698 <__ieee754_powf+0x30>
 8009bc6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009bca:	ea58 0805 	orrs.w	r8, r8, r5
 8009bce:	f47f adc7 	bne.w	8009760 <__ieee754_powf+0xf8>
 8009bd2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009bd6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009bda:	e55d      	b.n	8009698 <__ieee754_powf+0x30>
 8009bdc:	ff800000 	.word	0xff800000
 8009be0:	3f317218 	.word	0x3f317218
 8009be4:	3f317200 	.word	0x3f317200
 8009be8:	35bfbe8c 	.word	0x35bfbe8c
 8009bec:	b5ddea0e 	.word	0xb5ddea0e
 8009bf0:	3331bb4c 	.word	0x3331bb4c
 8009bf4:	388ab355 	.word	0x388ab355
 8009bf8:	bb360b61 	.word	0xbb360b61
 8009bfc:	3e2aaaab 	.word	0x3e2aaaab
 8009c00:	00000000 	.word	0x00000000

08009c04 <fabsf>:
 8009c04:	ee10 3a10 	vmov	r3, s0
 8009c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c0c:	ee00 3a10 	vmov	s0, r3
 8009c10:	4770      	bx	lr
	...

08009c14 <scalbnf>:
 8009c14:	ee10 3a10 	vmov	r3, s0
 8009c18:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009c1c:	d02b      	beq.n	8009c76 <scalbnf+0x62>
 8009c1e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009c22:	d302      	bcc.n	8009c2a <scalbnf+0x16>
 8009c24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c28:	4770      	bx	lr
 8009c2a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009c2e:	d123      	bne.n	8009c78 <scalbnf+0x64>
 8009c30:	4b24      	ldr	r3, [pc, #144]	@ (8009cc4 <scalbnf+0xb0>)
 8009c32:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009cc8 <scalbnf+0xb4>
 8009c36:	4298      	cmp	r0, r3
 8009c38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c3c:	db17      	blt.n	8009c6e <scalbnf+0x5a>
 8009c3e:	ee10 3a10 	vmov	r3, s0
 8009c42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c46:	3a19      	subs	r2, #25
 8009c48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009c4c:	4288      	cmp	r0, r1
 8009c4e:	dd15      	ble.n	8009c7c <scalbnf+0x68>
 8009c50:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009ccc <scalbnf+0xb8>
 8009c54:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009cd0 <scalbnf+0xbc>
 8009c58:	ee10 3a10 	vmov	r3, s0
 8009c5c:	eeb0 7a67 	vmov.f32	s14, s15
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfb8      	it	lt
 8009c64:	eef0 7a66 	vmovlt.f32	s15, s13
 8009c68:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009c6c:	4770      	bx	lr
 8009c6e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009cd4 <scalbnf+0xc0>
 8009c72:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009c76:	4770      	bx	lr
 8009c78:	0dd2      	lsrs	r2, r2, #23
 8009c7a:	e7e5      	b.n	8009c48 <scalbnf+0x34>
 8009c7c:	4410      	add	r0, r2
 8009c7e:	28fe      	cmp	r0, #254	@ 0xfe
 8009c80:	dce6      	bgt.n	8009c50 <scalbnf+0x3c>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	dd06      	ble.n	8009c94 <scalbnf+0x80>
 8009c86:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c8a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009c8e:	ee00 3a10 	vmov	s0, r3
 8009c92:	4770      	bx	lr
 8009c94:	f110 0f16 	cmn.w	r0, #22
 8009c98:	da09      	bge.n	8009cae <scalbnf+0x9a>
 8009c9a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009cd4 <scalbnf+0xc0>
 8009c9e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009cd8 <scalbnf+0xc4>
 8009ca2:	ee10 3a10 	vmov	r3, s0
 8009ca6:	eeb0 7a67 	vmov.f32	s14, s15
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	e7d9      	b.n	8009c62 <scalbnf+0x4e>
 8009cae:	3019      	adds	r0, #25
 8009cb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009cb4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009cb8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009cdc <scalbnf+0xc8>
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	e7d7      	b.n	8009c72 <scalbnf+0x5e>
 8009cc2:	bf00      	nop
 8009cc4:	ffff3cb0 	.word	0xffff3cb0
 8009cc8:	4c000000 	.word	0x4c000000
 8009ccc:	7149f2ca 	.word	0x7149f2ca
 8009cd0:	f149f2ca 	.word	0xf149f2ca
 8009cd4:	0da24260 	.word	0x0da24260
 8009cd8:	8da24260 	.word	0x8da24260
 8009cdc:	33000000 	.word	0x33000000

08009ce0 <_init>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr

08009cec <_fini>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr
