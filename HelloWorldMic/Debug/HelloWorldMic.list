
HelloWorldMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b88  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009d10  08009d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d80  08009d80  0000b468  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d88  08009d88  0000b468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d88  08009d88  0000ad88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d8c  08009d8c  0000ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  08009d90  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b468  2**0
                  CONTENTS
 10 .bss          000038b4  20000468  20000468  0000b468  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003d1c  20003d1c  0000b468  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b468  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013307  00000000  00000000  0000b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357b  00000000  00000000  0001e79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00021d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c90  00000000  00000000  00022d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dfe  00000000  00000000  00023a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177b2  00000000  00000000  0004680e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca9eb  00000000  00000000  0005dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  001289ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044e8  00000000  00000000  00128a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0012cf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000468 	.word	0x20000468
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cf8 	.word	0x08009cf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000046c 	.word	0x2000046c
 80001c4:	08009cf8 	.word	0x08009cf8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_CRC_Init+0x20>)
 80004fa:	4a07      	ldr	r2, [pc, #28]	@ (8000518 <MX_CRC_Init+0x24>)
 80004fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_CRC_Init+0x20>)
 8000500:	f001 fbd9 	bl	8001cb6 <HAL_CRC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050a:	f000 fcf1 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000484 	.word	0x20000484
 8000518:	40023000 	.word	0x40023000

0800051c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <HAL_CRC_MspInit+0x3c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023000 	.word	0x40023000
 800055c:	40023800 	.word	0x40023800

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_DMA_Init+0x5c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <MX_DMA_Init+0x5c>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_DMA_Init+0x5c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200e      	movs	r0, #14
 8000588:	f001 fb51 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800058c:	200e      	movs	r0, #14
 800058e:	f001 fb6a 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f001 fb49 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f001 fb62 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2011      	movs	r0, #17
 80005a8:	f001 fb41 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f001 fb5a 	bl	8001c66 <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a25      	ldr	r2, [pc, #148]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2110      	movs	r1, #16
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000668:	f002 f9ea 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RESET_Pin */
  GPIO_InitStruct.Pin = AUDIO_RESET_Pin;
 800066c:	2310      	movs	r3, #16
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RESET_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000684:	f001 ff44 	bl	8002510 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020c00 	.word	0x40020c00

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f002 f9cd 	bl	8002a74 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 fc06 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000048c 	.word	0x2000048c
 80006ec:	40005400 	.word	0x40005400
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <HAL_I2C_MspInit+0xa4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13c      	bne.n	8000790 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000732:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000744:	2304      	movs	r3, #4
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <HAL_I2C_MspInit+0xac>)
 8000750:	f001 fede 	bl	8002510 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800075e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	201f      	movs	r0, #31
 8000776:	f001 fa5a 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800077a:	201f      	movs	r0, #31
 800077c:	f001 fa73 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2020      	movs	r0, #32
 8000786:	f001 fa52 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800078a:	2020      	movs	r0, #32
 800078c:	f001 fa6b 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40005400 	.word	0x40005400
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400

080007a4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <HAL_I2C_MspDeInit+0x44>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d114      	bne.n	80007e0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_I2C_MspDeInit+0x48>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <HAL_I2C_MspDeInit+0x48>)
 80007bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80007c2:	2140      	movs	r1, #64	@ 0x40
 80007c4:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <HAL_I2C_MspDeInit+0x4c>)
 80007c6:	f002 f83f 	bl	8002848 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80007ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ce:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <HAL_I2C_MspDeInit+0x4c>)
 80007d0:	f002 f83a 	bl	8002848 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80007d4:	201f      	movs	r0, #31
 80007d6:	f001 fa54 	bl	8001c82 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80007da:	2020      	movs	r0, #32
 80007dc:	f001 fa51 	bl	8001c82 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40005400 	.word	0x40005400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_I2S2_Init+0x54>)
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <MX_I2S2_Init+0x58>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000800:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000804:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2S2_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = 64000;
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_I2S2_Init+0x54>)
 800081a:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800081e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2S2_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000834:	f004 fb18 	bl	8004e68 <HAL_I2S_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800083e:	f000 fb57 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200004e0 	.word	0x200004e0
 800084c:	40003800 	.word	0x40003800

08000850 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800087c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000892:	f004 fae9 	bl	8004e68 <HAL_I2S_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800089c:	f000 fb28 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000528 	.word	0x20000528
 80008a8:	40003c00 	.word	0x40003c00

080008ac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a8a      	ldr	r2, [pc, #552]	@ (8000af4 <HAL_I2S_MspInit+0x248>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f040 8084 	bne.w	80009d8 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
 80008d4:	4b88      	ldr	r3, [pc, #544]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a87      	ldr	r2, [pc, #540]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	4b85      	ldr	r3, [pc, #532]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	4b81      	ldr	r3, [pc, #516]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a80      	ldr	r2, [pc, #512]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fc:	4b7e      	ldr	r3, [pc, #504]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	4b7a      	ldr	r3, [pc, #488]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000910:	4a79      	ldr	r2, [pc, #484]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	6313      	str	r3, [r2, #48]	@ 0x30
 8000918:	4b77      	ldr	r3, [pc, #476]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000924:	2308      	movs	r3, #8
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000934:	2305      	movs	r3, #5
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	486f      	ldr	r0, [pc, #444]	@ (8000afc <HAL_I2S_MspInit+0x250>)
 8000940:	f001 fde6 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4867      	ldr	r0, [pc, #412]	@ (8000b00 <HAL_I2S_MspInit+0x254>)
 8000962:	f001 fdd5 	bl	8002510 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000966:	4b67      	ldr	r3, [pc, #412]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000968:	4a67      	ldr	r2, [pc, #412]	@ (8000b08 <HAL_I2S_MspInit+0x25c>)
 800096a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800096c:	4b65      	ldr	r3, [pc, #404]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000972:	4b64      	ldr	r3, [pc, #400]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b62      	ldr	r3, [pc, #392]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b61      	ldr	r3, [pc, #388]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000984:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000986:	4b5f      	ldr	r3, [pc, #380]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800098c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800098e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000994:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000996:	4b5b      	ldr	r3, [pc, #364]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800099c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a4:	4b57      	ldr	r3, [pc, #348]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80009aa:	4856      	ldr	r0, [pc, #344]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009ac:	f001 f9a0 	bl	8001cf0 <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 80009b6:	f000 fa9b 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a51      	ldr	r2, [pc, #324]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009c0:	4a50      	ldr	r2, [pc, #320]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2024      	movs	r0, #36	@ 0x24
 80009cc:	f001 f92f 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009d0:	2024      	movs	r0, #36	@ 0x24
 80009d2:	f001 f948 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009d6:	e088      	b.n	8000aea <HAL_I2S_MspInit+0x23e>
  else if(i2sHandle->Instance==SPI3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a4b      	ldr	r2, [pc, #300]	@ (8000b0c <HAL_I2S_MspInit+0x260>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	f040 8083 	bne.w	8000aea <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a42      	ldr	r2, [pc, #264]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a3b      	ldr	r2, [pc, #236]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a10:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	4a34      	ldr	r2, [pc, #208]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	482f      	ldr	r0, [pc, #188]	@ (8000b10 <HAL_I2S_MspInit+0x264>)
 8000a54:	f001 fd5c 	bl	8002510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000a58:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <HAL_I2S_MspInit+0x250>)
 8000a76:	f001 fd4b 	bl	8002510 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a7c:	4a26      	ldr	r2, [pc, #152]	@ (8000b18 <HAL_I2S_MspInit+0x26c>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a88:	2240      	movs	r2, #64	@ 0x40
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000abe:	4815      	ldr	r0, [pc, #84]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ac0:	f001 f916 	bl	8001cf0 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_I2S_MspInit+0x222>
      Error_Handler();
 8000aca:	f000 fa11 	bl	8000ef0 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2033      	movs	r0, #51	@ 0x33
 8000ae0:	f001 f8a5 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ae4:	2033      	movs	r0, #51	@ 0x33
 8000ae6:	f001 f8be 	bl	8001c66 <HAL_NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3738      	adds	r7, #56	@ 0x38
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40003800 	.word	0x40003800
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	20000570 	.word	0x20000570
 8000b08:	40026058 	.word	0x40026058
 8000b0c:	40003c00 	.word	0x40003c00
 8000b10:	40020000 	.word	0x40020000
 8000b14:	200005d0 	.word	0x200005d0
 8000b18:	40026088 	.word	0x40026088

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t initial_codec_volume = 120;
 8000b22:	2378      	movs	r3, #120	@ 0x78
 8000b24:	717b      	strb	r3, [r7, #5]
	uint16_t pdm_buffer_offset_uint16 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	82fb      	strh	r3, [r7, #22]
	uint16_t pcm_mono_buffer_offset = 0; // Offset para pcm_mono_processed_half_buffer
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fee9 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f8cf 	bl	8000cd4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b36:	f000 f937 	bl	8000da8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f7ff fd41 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3e:	f7ff fd0f 	bl	8000560 <MX_DMA_Init>
  MX_CRC_Init();
 8000b42:	f7ff fcd7 	bl	80004f4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000b46:	f006 fd7f 	bl	8007648 <MX_PDM2PCM_Init>
  MX_I2S2_Init();
 8000b4a:	f7ff fe53 	bl	80007f4 <MX_I2S2_Init>
  MX_I2C1_Init();
 8000b4e:	f7ff fda3 	bl	8000698 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b52:	f7ff fe7d 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b56:	f000 f9d1 	bl	8000efc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b5a:	f000 fb09 	bl	8001170 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if (cs43l22_Init(CS43L22_ADDRESS, OUTPUT_DEVICE_HEADPHONE, initial_codec_volume, PCM_SAMPLING_FREQ) != 0) {
 8000b5e:	797a      	ldrb	r2, [r7, #5]
 8000b60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000b64:	2102      	movs	r1, #2
 8000b66:	2094      	movs	r0, #148	@ 0x94
 8000b68:	f000 fbd8 	bl	800131c <cs43l22_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d004      	beq.n	8000b7c <main+0x60>
      e = CODEC;
 8000b72:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca8 <main+0x18c>)
 8000b74:	22ea      	movs	r2, #234	@ 0xea
 8000b76:	701a      	strb	r2, [r3, #0]
      Error_Handler();
 8000b78:	f000 f9ba 	bl	8000ef0 <Error_Handler>
  }

  if (cs43l22_Play(CS43L22_ADDRESS, NULL, 0) != 0) {
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2094      	movs	r0, #148	@ 0x94
 8000b82:	f000 fcaf 	bl	80014e4 <cs43l22_Play>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <main+0x7a>
	  e = CODEC;
 8000b8c:	4b46      	ldr	r3, [pc, #280]	@ (8000ca8 <main+0x18c>)
 8000b8e:	22ea      	movs	r2, #234	@ 0xea
 8000b90:	701a      	strb	r2, [r3, #0]
      Error_Handler();
 8000b92:	f000 f9ad 	bl	8000ef0 <Error_Handler>
  }

  memset(pcm_stereo_output_buffer, 0, sizeof(pcm_stereo_output_buffer));
 8000b96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4843      	ldr	r0, [pc, #268]	@ (8000cac <main+0x190>)
 8000b9e:	f008 fc8f 	bl	80094c0 <memset>

  if (HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)pcm_stereo_output_buffer, PCM_STEREO_OUTPUT_HALF_BUFFER_SIZE_UINT16 * 2) != HAL_OK) {
 8000ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba6:	4941      	ldr	r1, [pc, #260]	@ (8000cac <main+0x190>)
 8000ba8:	4841      	ldr	r0, [pc, #260]	@ (8000cb0 <main+0x194>)
 8000baa:	f004 fa9d 	bl	80050e8 <HAL_I2S_Transmit_DMA>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <main+0x9c>
    Error_Handler();
 8000bb4:	f000 f99c 	bl	8000ef0 <Error_Handler>
  }

  if (HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)pdm_raw_buffer, PDM_RAW_INPUT_HALF_BUFFER_SIZE_UINT16 * 2) != HAL_OK) {
 8000bb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bbc:	493d      	ldr	r1, [pc, #244]	@ (8000cb4 <main+0x198>)
 8000bbe:	483e      	ldr	r0, [pc, #248]	@ (8000cb8 <main+0x19c>)
 8000bc0:	f004 fb36 	bl	8005230 <HAL_I2S_Receive_DMA>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <main+0xb2>
    Error_Handler();
 8000bca:	f000 f991 	bl	8000ef0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (pdm_input_buffer_idx != 2) { // Un buffer PDM está listo (0 o 1)
 8000bce:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <main+0x1a0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d0fa      	beq.n	8000bce <main+0xb2>
	        uint16_t* pdm_half_buffer_start_ptr;
	        uint16_t* pcm_stereo_half_buffer_start_ptr;

	        if (pdm_input_buffer_idx == 0) {
 8000bd8:	4b38      	ldr	r3, [pc, #224]	@ (8000cbc <main+0x1a0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <main+0xcc>
	          pdm_half_buffer_start_ptr = pdm_raw_buffer[0];
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <main+0x198>)
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e001      	b.n	8000bec <main+0xd0>
	        } else {
	          pdm_half_buffer_start_ptr = pdm_raw_buffer[1];
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <main+0x1a4>)
 8000bea:	613b      	str	r3, [r7, #16]
	        }

	        // Procesar el PDM_RAW_INPUT_HALF_BUFFER en trozos, llenando pcm_mono_processed_half_buffer
	        pdm_buffer_offset_uint16 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	82fb      	strh	r3, [r7, #22]
	        pcm_mono_buffer_offset = 0; // Offset para pcm_mono_processed_half_buffer
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	82bb      	strh	r3, [r7, #20]

	        for (int i = 0; i < NUM_PDM_PROCESS_CALLS_PER_HALF_BUFFER; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	e01c      	b.n	8000c34 <main+0x118>
	          // MX_PDM2PCM_Process ahora toma (uint16_t *PDMBuf, uint16_t *PCMBuf)
	          // y PDM1_filter_config.output_samples_number = 16 (mono)
	          if (MX_PDM2PCM_Process(
	                  pdm_half_buffer_start_ptr + pdm_buffer_offset_uint16,
 8000bfa:	8afb      	ldrh	r3, [r7, #22]
 8000bfc:	005b      	lsls	r3, r3, #1
	          if (MX_PDM2PCM_Process(
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	441a      	add	r2, r3
	                  (uint16_t*)(pcm_mono_processed_half_buffer + pcm_mono_buffer_offset) // Escribe 16 muestras mono aquí
 8000c02:	8abb      	ldrh	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
	          if (MX_PDM2PCM_Process(
 8000c06:	492f      	ldr	r1, [pc, #188]	@ (8000cc4 <main+0x1a8>)
 8000c08:	440b      	add	r3, r1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	f006 fd45 	bl	800769c <MX_PDM2PCM_Process>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <main+0x102>
	               ) != 0) { // Retorna 0 para éxito
	              e = PDM2PCM;
 8000c18:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <main+0x18c>)
 8000c1a:	22eb      	movs	r2, #235	@ 0xeb
 8000c1c:	701a      	strb	r2, [r3, #0]
	          }
	          pdm_buffer_offset_uint16 += (PDM_BYTES_PER_PROCESS_CALL / 2U);
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	3340      	adds	r3, #64	@ 0x40
 8000c22:	82fb      	strh	r3, [r7, #22]
	          pcm_mono_buffer_offset += PDM1_filter_config.output_samples_number; // Avanza por 16 muestras mono
 8000c24:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <main+0x1ac>)
 8000c26:	885a      	ldrh	r2, [r3, #2]
 8000c28:	8abb      	ldrh	r3, [r7, #20]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	82bb      	strh	r3, [r7, #20]
	        for (int i = 0; i < NUM_PDM_PROCESS_CALLS_PER_HALF_BUFFER; i++) {
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b1f      	cmp	r3, #31
 8000c38:	dddf      	ble.n	8000bfa <main+0xde>
	        }

	        // Ahora que pcm_mono_processed_half_buffer está lleno, espera a que un buffer de salida estéreo esté libre
	        while (pcm_output_buffer_ready_for_filling_idx == 2) { /* Espera ocupada */ }
 8000c3a:	bf00      	nop
 8000c3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <main+0x1b0>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d0fa      	beq.n	8000c3c <main+0x120>

	        if (pcm_output_buffer_ready_for_filling_idx == 0) {
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <main+0x1b0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <main+0x13a>
	          pcm_stereo_half_buffer_start_ptr = pcm_stereo_output_buffer[0];
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <main+0x190>)
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e001      	b.n	8000c5a <main+0x13e>
	        } else { // pcm_output_buffer_ready_for_filling_idx == 1
	          pcm_stereo_half_buffer_start_ptr = pcm_stereo_output_buffer[1];
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <main+0x1b4>)
 8000c58:	60fb      	str	r3, [r7, #12]
	        }

	        // Convertir el pcm_mono_processed_half_buffer a pcm_stereo_half_buffer_start_ptr
	        for (uint16_t i = 0; i < PCM_MONO_SAMPLES_PER_HALF_BUFFER; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	e017      	b.n	8000c90 <main+0x174>
	          pcm_stereo_half_buffer_start_ptr[i * 2]     = (uint16_t)pcm_mono_processed_half_buffer[i];
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <main+0x1a8>)
 8000c64:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b28a      	uxth	r2, r1
 8000c72:	801a      	strh	r2, [r3, #0]
	          pcm_stereo_half_buffer_start_ptr[i * 2 + 1] = (uint16_t)pcm_mono_processed_half_buffer[i];
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <main+0x1a8>)
 8000c78:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	b28a      	uxth	r2, r1
 8000c88:	801a      	strh	r2, [r3, #0]
	        for (uint16_t i = 0; i < PCM_MONO_SAMPLES_PER_HALF_BUFFER; i++) {
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	80fb      	strh	r3, [r7, #6]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c96:	d3e3      	bcc.n	8000c60 <main+0x144>
	        }

	        pdm_input_buffer_idx = 2;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <main+0x1a0>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	701a      	strb	r2, [r3, #0]
	        pcm_output_buffer_ready_for_filling_idx = 2;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <main+0x1b0>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	701a      	strb	r2, [r3, #0]
	  if (pdm_input_buffer_idx != 2) { // Un buffer PDM está listo (0 o 1)
 8000ca4:	e793      	b.n	8000bce <main+0xb2>
 8000ca6:	bf00      	nop
 8000ca8:	20000001 	.word	0x20000001
 8000cac:	20002a30 	.word	0x20002a30
 8000cb0:	20000528 	.word	0x20000528
 8000cb4:	20000630 	.word	0x20000630
 8000cb8:	200004e0 	.word	0x200004e0
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20001630 	.word	0x20001630
 8000cc4:	20002630 	.word	0x20002630
 8000cc8:	20003bdc 	.word	0x20003bdc
 8000ccc:	20003a30 	.word	0x20003a30
 8000cd0:	20003230 	.word	0x20003230

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	@ 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2230      	movs	r2, #48	@ 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 fbec 	bl	80094c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d44:	2308      	movs	r3, #8
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d52:	2307      	movs	r3, #7
 8000d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fef2 	bl	8005b44 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d66:	f000 f8c3 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2105      	movs	r1, #5
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 f953 	bl	8006034 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d94:	f000 f8ac 	bl	8000ef0 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	@ 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000dbe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dc2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fb52 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000dd6:	f000 f88b 	bl	8000ef0 <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d102      	bne.n	8000dfc <HAL_I2S_RxHalfCpltCallback+0x18>
    pdm_input_buffer_idx = 0;
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40003800 	.word	0x40003800
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <HAL_I2S_RxCpltCallback+0x24>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d102      	bne.n	8000e28 <HAL_I2S_RxCpltCallback+0x18>
    pdm_input_buffer_idx = 1;
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_I2S_RxCpltCallback+0x28>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
  }
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40003800 	.word	0x40003800
 8000e38:	20000000 	.word	0x20000000

08000e3c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d102      	bne.n	8000e54 <HAL_I2S_TxHalfCpltCallback+0x18>
    pcm_output_buffer_ready_for_filling_idx = 0;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
  }
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40003c00 	.word	0x40003c00
 8000e64:	20003a30 	.word	0x20003a30

08000e68 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <HAL_I2S_TxCpltCallback+0x24>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d102      	bne.n	8000e80 <HAL_I2S_TxCpltCallback+0x18>
     pcm_output_buffer_ready_for_filling_idx = 1;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_I2S_TxCpltCallback+0x28>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
  }
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40003c00 	.word	0x40003c00
 8000e90:	20003a30 	.word	0x20003a30

08000e94 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI2) { // I2S2 para PDM Mic
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_I2S_ErrorCallback+0x50>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d109      	bne.n	8000eba <HAL_I2S_ErrorCallback+0x26>
	if (hi2s->ErrorCode & HAL_I2S_ERROR_OVR) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d011      	beq.n	8000ed6 <HAL_I2S_ErrorCallback+0x42>
	  e = OVR;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_I2S_ErrorCallback+0x54>)
 8000eb4:	22e6      	movs	r2, #230	@ 0xe6
 8000eb6:	701a      	strb	r2, [r3, #0]
  } else if (hi2s->Instance == SPI3) { // I2S3 para CODEC
	if (hi2s->ErrorCode & HAL_I2S_ERROR_UDR) {
	  e = UDR;
	}
  }
}
 8000eb8:	e00d      	b.n	8000ed6 <HAL_I2S_ErrorCallback+0x42>
  } else if (hi2s->Instance == SPI3) { // I2S3 para CODEC
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8000eec <HAL_I2S_ErrorCallback+0x58>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d108      	bne.n	8000ed6 <HAL_I2S_ErrorCallback+0x42>
	if (hi2s->ErrorCode & HAL_I2S_ERROR_UDR) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_I2S_ErrorCallback+0x42>
	  e = UDR;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_I2S_ErrorCallback+0x54>)
 8000ed2:	22e5      	movs	r2, #229	@ 0xe5
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40003800 	.word	0x40003800
 8000ee8:	20000001 	.word	0x20000001
 8000eec:	40003c00 	.word	0x40003c00

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f02:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <MX_SPI1_Init+0x6c>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f14:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f4a:	220a      	movs	r2, #10
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_SPI1_Init+0x68>)
 8000f50:	f005 fbd2 	bl	80066f8 <HAL_SPI_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000f5a:	f7ff ffc9 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20003a34 	.word	0x20003a34
 8000f68:	40013000 	.word	0x40013000

08000f6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_SPI_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000f98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_SPI_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fc6:	2360      	movs	r3, #96	@ 0x60
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_SPI_MspInit+0x8c>)
 8000fe2:	f001 fa95 	bl	8002510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013000 	.word	0x40013000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800103a:	2007      	movs	r0, #7
 800103c:	f000 fdec 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 fc81 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <DMA1_Stream3_IRQHandler+0x10>)
 80010b2:	f000 ffb5 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000570 	.word	0x20000570

080010c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <DMA1_Stream5_IRQHandler+0x10>)
 80010c6:	f000 ffab 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200005d0 	.word	0x200005d0

080010d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <DMA1_Stream6_IRQHandler+0x10>)
 80010da:	f000 ffa1 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20003ad4 	.word	0x20003ad4

080010e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <I2C1_EV_IRQHandler+0x10>)
 80010ee:	f001 ff43 	bl	8002f78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000048c 	.word	0x2000048c

080010fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <I2C1_ER_IRQHandler+0x10>)
 8001102:	f002 f8aa 	bl	800325a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000048c 	.word	0x2000048c

08001110 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <SPI2_IRQHandler+0x10>)
 8001116:	f004 f943 	bl	80053a0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200004e0 	.word	0x200004e0

08001124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <USART2_IRQHandler+0x10>)
 800112a:	f005 fbbf 	bl	80068ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20003a8c 	.word	0x20003a8c

08001138 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <SPI3_IRQHandler+0x10>)
 800113e:	f004 f92f 	bl	80053a0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000528 	.word	0x20000528

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f005 fb2f 	bl	800680a <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f7ff fe9d 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20003a8c 	.word	0x20003a8c
 80011c0:	40004400 	.word	0x40004400

080011c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <HAL_UART_MspInit+0xf0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d161      	bne.n	80012aa <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <HAL_UART_MspInit+0xf4>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	4a32      	ldr	r2, [pc, #200]	@ (80012b8 <HAL_UART_MspInit+0xf4>)
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f6:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <HAL_UART_MspInit+0xf4>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <HAL_UART_MspInit+0xf4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a2b      	ldr	r2, [pc, #172]	@ (80012b8 <HAL_UART_MspInit+0xf4>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <HAL_UART_MspInit+0xf4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800121e:	230c      	movs	r3, #12
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122e:	2307      	movs	r3, #7
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4820      	ldr	r0, [pc, #128]	@ (80012bc <HAL_UART_MspInit+0xf8>)
 800123a:	f001 f969 	bl	8002510 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001240:	4a20      	ldr	r2, [pc, #128]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001246:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800124a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124c:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 800124e:	2240      	movs	r2, #64	@ 0x40
 8001250:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 800125a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800127e:	4810      	ldr	r0, [pc, #64]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001280:	f000 fd36 	bl	8001cf0 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800128a:	f7ff fe31 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001292:	639a      	str	r2, [r3, #56]	@ 0x38
 8001294:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2026      	movs	r0, #38	@ 0x26
 80012a0:	f000 fcc5 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012a4:	2026      	movs	r0, #38	@ 0x26
 80012a6:	f000 fcde 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	20003ad4 	.word	0x20003ad4
 80012c4:	400260a0 	.word	0x400260a0

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001300 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012cc:	f7ff ff3e 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f008 f8f1 	bl	80094dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff fc0f 	bl	8000b1c <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 800130c:	08009d90 	.word	0x08009d90
  ldr r2, =_sbss
 8001310:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8001314:	20003d1c 	.word	0x20003d1c

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4603      	mov	r3, r0
 8001326:	81fb      	strh	r3, [r7, #14]
 8001328:	460b      	mov	r3, r1
 800132a:	81bb      	strh	r3, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8001334:	f000 fa9a 	bl	800186c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2201      	movs	r2, #1
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f9c5 	bl	80016d0 <CODEC_IO_Write>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001350:	89bb      	ldrh	r3, [r7, #12]
 8001352:	3b01      	subs	r3, #1
 8001354:	2b03      	cmp	r3, #3
 8001356:	d81b      	bhi.n	8001390 <cs43l22_Init+0x74>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <cs43l22_Init+0x44>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001379 	.word	0x08001379
 8001368:	08001381 	.word	0x08001381
 800136c:	08001389 	.word	0x08001389
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001370:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <cs43l22_Init+0x1c4>)
 8001372:	22fa      	movs	r2, #250	@ 0xfa
 8001374:	701a      	strb	r2, [r3, #0]
    break;
 8001376:	e00f      	b.n	8001398 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001378:	4b59      	ldr	r3, [pc, #356]	@ (80014e0 <cs43l22_Init+0x1c4>)
 800137a:	22af      	movs	r2, #175	@ 0xaf
 800137c:	701a      	strb	r2, [r3, #0]
    break;
 800137e:	e00b      	b.n	8001398 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001380:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <cs43l22_Init+0x1c4>)
 8001382:	22aa      	movs	r2, #170	@ 0xaa
 8001384:	701a      	strb	r2, [r3, #0]
    break;
 8001386:	e007      	b.n	8001398 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001388:	4b55      	ldr	r3, [pc, #340]	@ (80014e0 <cs43l22_Init+0x1c4>)
 800138a:	2205      	movs	r2, #5
 800138c:	701a      	strb	r2, [r3, #0]
    break;    
 800138e:	e003      	b.n	8001398 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001390:	4b53      	ldr	r3, [pc, #332]	@ (80014e0 <cs43l22_Init+0x1c4>)
 8001392:	2205      	movs	r2, #5
 8001394:	701a      	strb	r2, [r3, #0]
    break;    
 8001396:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <cs43l22_Init+0x1c4>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	2104      	movs	r1, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f993 	bl	80016d0 <CODEC_IO_Write>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4413      	add	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2281      	movs	r2, #129	@ 0x81
 80013ba:	2105      	movs	r1, #5
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f987 	bl	80016d0 <CODEC_IO_Write>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2204      	movs	r2, #4
 80013d2:	2106      	movs	r1, #6
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f97b 	bl	80016d0 <CODEC_IO_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80013e4:	7afa      	ldrb	r2, [r7, #11]
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8b4 	bl	8001558 <cs43l22_SetVolume>
 80013f0:	4602      	mov	r2, r0
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80013f8:	89bb      	ldrh	r3, [r7, #12]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d023      	beq.n	8001446 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2206      	movs	r2, #6
 8001404:	210f      	movs	r1, #15
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f962 	bl	80016d0 <CODEC_IO_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2200      	movs	r2, #0
 800141c:	2124      	movs	r1, #36	@ 0x24
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f956 	bl	80016d0 <CODEC_IO_Write>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2200      	movs	r2, #0
 8001434:	2125      	movs	r1, #37	@ 0x25
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f94a 	bl	80016d0 <CODEC_IO_Write>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4413      	add	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2200      	movs	r2, #0
 800144c:	210a      	movs	r1, #10
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f93e 	bl	80016d0 <CODEC_IO_Write>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2204      	movs	r2, #4
 8001464:	210e      	movs	r1, #14
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f932 	bl	80016d0 <CODEC_IO_Write>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2127      	movs	r1, #39	@ 0x27
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f926 	bl	80016d0 <CODEC_IO_Write>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	220f      	movs	r2, #15
 8001494:	211f      	movs	r1, #31
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f91a 	bl	80016d0 <CODEC_IO_Write>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	220a      	movs	r2, #10
 80014ac:	211a      	movs	r1, #26
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f90e 	bl	80016d0 <CODEC_IO_Write>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	4413      	add	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	220a      	movs	r2, #10
 80014c4:	211b      	movs	r1, #27
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f902 	bl	80016d0 <CODEC_IO_Write>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80014d6:	697b      	ldr	r3, [r7, #20]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20003b34 	.word	0x20003b34

080014e4 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	4613      	mov	r3, r2
 80014f2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <cs43l22_Play+0x70>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d123      	bne.n	8001548 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2206      	movs	r2, #6
 8001506:	210e      	movs	r1, #14
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f8e1 	bl	80016d0 <CODEC_IO_Write>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f879 	bl	8001614 <cs43l22_SetMute>
 8001522:	4602      	mov	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	229e      	movs	r2, #158	@ 0x9e
 8001530:	2102      	movs	r1, #2
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f8cc 	bl	80016d0 <CODEC_IO_Write>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001542:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <cs43l22_Play+0x70>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800156c:	797b      	ldrb	r3, [r7, #5]
 800156e:	2b64      	cmp	r3, #100	@ 0x64
 8001570:	d80b      	bhi.n	800158a <cs43l22_SetVolume+0x32>
 8001572:	797a      	ldrb	r2, [r7, #5]
 8001574:	4613      	mov	r3, r2
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	4a25      	ldr	r2, [pc, #148]	@ (8001610 <cs43l22_SetVolume+0xb8>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1152      	asrs	r2, r2, #5
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	e000      	b.n	800158c <cs43l22_SetVolume+0x34>
 800158a:	23ff      	movs	r3, #255	@ 0xff
 800158c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800158e:	7afb      	ldrb	r3, [r7, #11]
 8001590:	2be6      	cmp	r3, #230	@ 0xe6
 8001592:	d91c      	bls.n	80015ce <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	b2d8      	uxtb	r0, r3
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	3319      	adds	r3, #25
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	2120      	movs	r1, #32
 80015a2:	f000 f895 	bl	80016d0 <CODEC_IO_Write>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2d8      	uxtb	r0, r3
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	3319      	adds	r3, #25
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	2121      	movs	r1, #33	@ 0x21
 80015be:	f000 f887 	bl	80016d0 <CODEC_IO_Write>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e01b      	b.n	8001606 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	3319      	adds	r3, #25
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	2120      	movs	r1, #32
 80015dc:	f000 f878 	bl	80016d0 <CODEC_IO_Write>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	b2d8      	uxtb	r0, r3
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	3319      	adds	r3, #25
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	2121      	movs	r1, #33	@ 0x21
 80015f8:	f000 f86a 	bl	80016d0 <CODEC_IO_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	51eb851f 	.word	0x51eb851f

08001614 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d124      	bne.n	8001674 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	22ff      	movs	r2, #255	@ 0xff
 8001630:	2104      	movs	r1, #4
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f84c 	bl	80016d0 <CODEC_IO_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2201      	movs	r2, #1
 8001648:	2122      	movs	r1, #34	@ 0x22
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f840 	bl	80016d0 <CODEC_IO_Write>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2201      	movs	r2, #1
 8001660:	2123      	movs	r1, #35	@ 0x23
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f834 	bl	80016d0 <CODEC_IO_Write>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e025      	b.n	80016c0 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2200      	movs	r2, #0
 800167a:	2122      	movs	r1, #34	@ 0x22
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f827 	bl	80016d0 <CODEC_IO_Write>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2200      	movs	r2, #0
 8001692:	2123      	movs	r1, #35	@ 0x23
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f81b 	bl	80016d0 <CODEC_IO_Write>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <cs43l22_SetMute+0xb8>)
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	2104      	movs	r1, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f80d 	bl	80016d0 <CODEC_IO_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20003b34 	.word	0x20003b34

080016d0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	460b      	mov	r3, r1
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	4613      	mov	r3, r2
 80016e0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80016e6:	797a      	ldrb	r2, [r7, #5]
 80016e8:	79b9      	ldrb	r1, [r7, #6]
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f8f5 	bl	80018dc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001704:	480e      	ldr	r0, [pc, #56]	@ (8001740 <I2Cx_Init+0x40>)
 8001706:	f001 feb7 	bl	8003478 <HAL_I2C_GetState>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d114      	bne.n	800173a <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <I2Cx_Init+0x40>)
 8001712:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <I2Cx_Init+0x44>)
 8001714:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <I2Cx_Init+0x40>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <I2Cx_Init+0x40>)
 800171e:	2233      	movs	r2, #51	@ 0x33
 8001720:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <I2Cx_Init+0x40>)
 8001724:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001728:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <I2Cx_Init+0x40>)
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <I2Cx_Init+0x48>)
 800172e:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001730:	f000 f848 	bl	80017c4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <I2Cx_Init+0x40>)
 8001736:	f001 f99d 	bl	8002a74 <HAL_I2C_Init>
  }
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20003b38 	.word	0x20003b38
 8001744:	000186a0 	.word	0x000186a0
 8001748:	40005400 	.word	0x40005400

0800174c <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af04      	add	r7, sp, #16
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	460b      	mov	r3, r1
 8001758:	71bb      	strb	r3, [r7, #6]
 800175a:	4613      	mov	r3, r2
 800175c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	b299      	uxth	r1, r3
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <I2Cx_WriteData+0x50>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	2301      	movs	r3, #1
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	1d7b      	adds	r3, r7, #5
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	4809      	ldr	r0, [pc, #36]	@ (80017a0 <I2Cx_WriteData+0x54>)
 800177c:	f001 fb02 	bl	8002d84 <HAL_I2C_Mem_Write>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f809 	bl	80017a4 <I2Cx_Error>
  }
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20003b38 	.word	0x20003b38

080017a4 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 80017ae:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <I2Cx_Error+0x1c>)
 80017b0:	f001 faa4 	bl	8002cfc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 80017b4:	f7ff ffa4 	bl	8001700 <I2Cx_Init>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20003b38 	.word	0x20003b38

080017c4 <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <I2Cx_MspInit+0xa0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <I2Cx_MspInit+0xa0>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <I2Cx_MspInit+0xa0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 80017e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80017ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ec:	2312      	movs	r3, #18
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 80017f8:	2304      	movs	r3, #4
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4619      	mov	r1, r3
 8001802:	4819      	ldr	r0, [pc, #100]	@ (8001868 <I2Cx_MspInit+0xa4>)
 8001804:	f000 fe84 	bl	8002510 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <I2Cx_MspInit+0xa0>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <I2Cx_MspInit+0xa0>)
 8001812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001816:	6413      	str	r3, [r2, #64]	@ 0x40
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <I2Cx_MspInit+0xa0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <I2Cx_MspInit+0xa0>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a0e      	ldr	r2, [pc, #56]	@ (8001864 <I2Cx_MspInit+0xa0>)
 800182a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800182e:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <I2Cx_MspInit+0xa0>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <I2Cx_MspInit+0xa0>)
 8001836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800183a:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	201f      	movs	r0, #31
 8001842:	f000 f9f4 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001846:	201f      	movs	r0, #31
 8001848:	f000 fa0d 	bl	8001c66 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2020      	movs	r0, #32
 8001852:	f000 f9ec 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001856:	2020      	movs	r0, #32
 8001858:	f000 fa05 	bl	8001c66 <HAL_NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <AUDIO_IO_Init+0x68>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <AUDIO_IO_Init+0x68>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <AUDIO_IO_Init+0x68>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 800188e:	2310      	movs	r3, #16
 8001890:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001896:	2302      	movs	r3, #2
 8001898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <AUDIO_IO_Init+0x6c>)
 80018a4:	f000 fe34 	bl	8002510 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80018a8:	f7ff ff2a 	bl	8001700 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2110      	movs	r1, #16
 80018b0:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <AUDIO_IO_Init+0x6c>)
 80018b2:	f001 f8c5 	bl	8002a40 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80018b6:	2005      	movs	r0, #5
 80018b8:	f000 f896 	bl	80019e8 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2110      	movs	r1, #16
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <AUDIO_IO_Init+0x6c>)
 80018c2:	f001 f8bd 	bl	8002a40 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80018c6:	2005      	movs	r0, #5
 80018c8:	f000 f88e 	bl	80019e8 <HAL_Delay>
}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020c00 	.word	0x40020c00

080018dc <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	460b      	mov	r3, r1
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	4613      	mov	r3, r2
 80018ec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80018ee:	797a      	ldrb	r2, [r7, #5]
 80018f0:	79b9      	ldrb	r1, [r7, #6]
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff29 	bl	800174c <I2Cx_WriteData>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f973 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fb60 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f999 	bl	8001c9e <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f953 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000004 	.word	0x20000004
 80019a0:	20000014 	.word	0x20000014
 80019a4:	20000010 	.word	0x20000010

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000014 	.word	0x20000014
 80019cc:	20003b8c 	.word	0x20003b8c

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20003b8c 	.word	0x20003b8c

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000014 	.word	0x20000014

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db12      	blt.n	8001b08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	490a      	ldr	r1, [pc, #40]	@ (8001b14 <__NVIC_DisableIRQ+0x44>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	3320      	adds	r3, #32
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001afc:	f3bf 8f4f 	dsb	sy
}
 8001b00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b02:	f3bf 8f6f 	isb	sy
}
 8001b06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	@ (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff05 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff1a 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff0d 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff1d 	bl	8001ad0 <__NVIC_DisableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff94 	bl	8001bd4 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e00e      	b.n	8001ce6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	795b      	ldrb	r3, [r3, #5]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7fe fc1f 	bl	800051c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fe68 	bl	80019d0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e099      	b.n	8001e40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	e00f      	b.n	8001d4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2e:	f7ff fe4f 	bl	80019d0 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d908      	bls.n	8001d4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e078      	b.n	8001e40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e8      	bne.n	8001d2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_DMA_Init+0x158>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	4313      	orrs	r3, r2
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d117      	bne.n	8001e12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fb0f 	bl	8002418 <DMA_CheckFifoParam>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e016      	b.n	8001e40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fac6 	bl	80023ac <DMA_CalcBaseAndBitshift>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	223f      	movs	r2, #63	@ 0x3f
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	f010803f 	.word	0xf010803f

08001e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_DMA_Start_IT+0x26>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e040      	b.n	8001ef4 <HAL_DMA_Start_IT+0xa8>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d12f      	bne.n	8001ee6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fa58 	bl	8002350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	223f      	movs	r2, #63	@ 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0216 	orr.w	r2, r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e005      	b.n	8001ef2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f0a:	f7ff fd61 	bl	80019d0 <HAL_GetTick>
 8001f0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e052      	b.n	8001fd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0216 	bic.w	r2, r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_DMA_Abort+0x62>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7e:	e013      	b.n	8001fa8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f80:	f7ff fd26 	bl	80019d0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d90c      	bls.n	8001fa8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2203      	movs	r2, #3
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e015      	b.n	8001fd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e4      	bne.n	8001f80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	223f      	movs	r2, #63	@ 0x3f
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00c      	b.n	8002014 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800202c:	4b8e      	ldr	r3, [pc, #568]	@ (8002268 <HAL_DMA_IRQHandler+0x248>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8e      	ldr	r2, [pc, #568]	@ (800226c <HAL_DMA_IRQHandler+0x24c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2208      	movs	r2, #8
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01a      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2208      	movs	r2, #8
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2201      	movs	r2, #1
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2201      	movs	r2, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2204      	movs	r2, #4
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2204      	movs	r2, #4
 80020e6:	409a      	lsls	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2210      	movs	r2, #16
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d043      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03c      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211a:	2210      	movs	r2, #16
 800211c:	409a      	lsls	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d018      	beq.n	8002162 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d024      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e01f      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e016      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0208 	bic.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2220      	movs	r2, #32
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 808f 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8087 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2220      	movs	r2, #32
 80021b8:	409a      	lsls	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d136      	bne.n	8002238 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_IRQHandler+0x1da>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	223f      	movs	r2, #63	@ 0x3f
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d07e      	beq.n	800232c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
        }
        return;
 8002236:	e079      	b.n	800232c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	2b00      	cmp	r3, #0
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e02c      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
 8002266:	bf00      	nop
 8002268:	20000004 	.word	0x20000004
 800226c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d023      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e01e      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0210 	bic.w	r2, r2, #16
 800229e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d032      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2205      	movs	r2, #5
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d307      	bcc.n	8002308 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f2      	bne.n	80022ec <HAL_DMA_IRQHandler+0x2cc>
 8002306:	e000      	b.n	800230a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002308:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x30e>
        return;
 800232c:	bf00      	nop
    }
  }
}
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002342:	b2db      	uxtb	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800236c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	d108      	bne.n	8002390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800238e:	e007      	b.n	80023a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3b10      	subs	r3, #16
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <DMA_CalcBaseAndBitshift+0x64>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <DMA_CalcBaseAndBitshift+0x68>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d909      	bls.n	80023ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80023ec:	e007      	b.n	80023fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	aaaaaaab 	.word	0xaaaaaaab
 8002414:	08009d28 	.word	0x08009d28

08002418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11f      	bne.n	8002472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d856      	bhi.n	80024e6 <DMA_CheckFifoParam+0xce>
 8002438:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <DMA_CheckFifoParam+0x28>)
 800243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002451 	.word	0x08002451
 8002444:	08002463 	.word	0x08002463
 8002448:	08002451 	.word	0x08002451
 800244c:	080024e7 	.word	0x080024e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d046      	beq.n	80024ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e043      	b.n	80024ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800246a:	d140      	bne.n	80024ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002470:	e03d      	b.n	80024ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800247a:	d121      	bne.n	80024c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d837      	bhi.n	80024f2 <DMA_CheckFifoParam+0xda>
 8002482:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <DMA_CheckFifoParam+0x70>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002499 	.word	0x08002499
 800248c:	0800249f 	.word	0x0800249f
 8002490:	08002499 	.word	0x08002499
 8002494:	080024b1 	.word	0x080024b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e030      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d025      	beq.n	80024f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e022      	b.n	80024f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024b8:	d11f      	bne.n	80024fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024be:	e01c      	b.n	80024fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d903      	bls.n	80024ce <DMA_CheckFifoParam+0xb6>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d003      	beq.n	80024d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024cc:	e018      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      break;
 80024d2:	e015      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e00b      	b.n	80024fe <DMA_CheckFifoParam+0xe6>
      break;
 80024e6:	bf00      	nop
 80024e8:	e00a      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e008      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e006      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e004      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e002      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;   
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e16b      	b.n	8002804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 815a 	bne.w	80027fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80b4 	beq.w	80027fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b60      	ldr	r3, [pc, #384]	@ (800281c <HAL_GPIO_Init+0x30c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a5f      	ldr	r2, [pc, #380]	@ (800281c <HAL_GPIO_Init+0x30c>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b5d      	ldr	r3, [pc, #372]	@ (800281c <HAL_GPIO_Init+0x30c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002820 <HAL_GPIO_Init+0x310>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a52      	ldr	r2, [pc, #328]	@ (8002824 <HAL_GPIO_Init+0x314>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_Init+0x226>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a51      	ldr	r2, [pc, #324]	@ (8002828 <HAL_GPIO_Init+0x318>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x222>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a50      	ldr	r2, [pc, #320]	@ (800282c <HAL_GPIO_Init+0x31c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x21e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002830 <HAL_GPIO_Init+0x320>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x21a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002834 <HAL_GPIO_Init+0x324>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x216>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4d      	ldr	r2, [pc, #308]	@ (8002838 <HAL_GPIO_Init+0x328>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x212>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4c      	ldr	r2, [pc, #304]	@ (800283c <HAL_GPIO_Init+0x32c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4b      	ldr	r2, [pc, #300]	@ (8002840 <HAL_GPIO_Init+0x330>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x20a>
 8002716:	2307      	movs	r3, #7
 8002718:	e00e      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800271a:	2308      	movs	r3, #8
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800271e:	2306      	movs	r3, #6
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	@ (8002820 <HAL_GPIO_Init+0x310>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002756:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <HAL_GPIO_Init+0x334>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277a:	4a32      	ldr	r2, [pc, #200]	@ (8002844 <HAL_GPIO_Init+0x334>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002780:	4b30      	ldr	r3, [pc, #192]	@ (8002844 <HAL_GPIO_Init+0x334>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a4:	4a27      	ldr	r2, [pc, #156]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027aa:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f8:	4a12      	ldr	r2, [pc, #72]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f ae90 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40021400 	.word	0x40021400
 800283c:	40021800 	.word	0x40021800
 8002840:	40021c00 	.word	0x40021c00
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e0cd      	b.n	8002a00 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	f040 80bd 	bne.w	80029fa <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002880:	4a65      	ldr	r2, [pc, #404]	@ (8002a18 <HAL_GPIO_DeInit+0x1d0>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a1c <HAL_GPIO_DeInit+0x1d4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d02b      	beq.n	8002902 <HAL_GPIO_DeInit+0xba>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002a20 <HAL_GPIO_DeInit+0x1d8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d025      	beq.n	80028fe <HAL_GPIO_DeInit+0xb6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a5b      	ldr	r2, [pc, #364]	@ (8002a24 <HAL_GPIO_DeInit+0x1dc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01f      	beq.n	80028fa <HAL_GPIO_DeInit+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002a28 <HAL_GPIO_DeInit+0x1e0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d019      	beq.n	80028f6 <HAL_GPIO_DeInit+0xae>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a59      	ldr	r2, [pc, #356]	@ (8002a2c <HAL_GPIO_DeInit+0x1e4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_GPIO_DeInit+0xaa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <HAL_GPIO_DeInit+0x1e8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00d      	beq.n	80028ee <HAL_GPIO_DeInit+0xa6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a57      	ldr	r2, [pc, #348]	@ (8002a34 <HAL_GPIO_DeInit+0x1ec>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d007      	beq.n	80028ea <HAL_GPIO_DeInit+0xa2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a56      	ldr	r2, [pc, #344]	@ (8002a38 <HAL_GPIO_DeInit+0x1f0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_GPIO_DeInit+0x9e>
 80028e2:	2307      	movs	r3, #7
 80028e4:	e00e      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028e6:	2308      	movs	r3, #8
 80028e8:	e00c      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028ea:	2306      	movs	r3, #6
 80028ec:	e00a      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_DeInit+0xbc>
 8002902:	2300      	movs	r3, #0
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	f002 0203 	and.w	r2, r2, #3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d132      	bne.n	800297a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002914:	4b49      	ldr	r3, [pc, #292]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	4947      	ldr	r1, [pc, #284]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002922:	4b46      	ldr	r3, [pc, #280]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	4944      	ldr	r1, [pc, #272]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 800292c:	4013      	ands	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002930:	4b42      	ldr	r3, [pc, #264]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	43db      	mvns	r3, r3
 8002938:	4940      	ldr	r1, [pc, #256]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 800293a:	4013      	ands	r3, r2
 800293c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800293e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	493d      	ldr	r1, [pc, #244]	@ (8002a3c <HAL_GPIO_DeInit+0x1f4>)
 8002948:	4013      	ands	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800295c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <HAL_GPIO_DeInit+0x1d0>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	43da      	mvns	r2, r3
 800296c:	482a      	ldr	r0, [pc, #168]	@ (8002a18 <HAL_GPIO_DeInit+0x1d0>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	400a      	ands	r2, r1
 8002974:	3302      	adds	r3, #2
 8002976:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2103      	movs	r1, #3
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	08d2      	lsrs	r2, r2, #3
 80029b0:	4019      	ands	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2103      	movs	r1, #3
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2101      	movs	r1, #1
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2103      	movs	r1, #3
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b0f      	cmp	r3, #15
 8002a04:	f67f af2e 	bls.w	8002864 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40021c00 	.word	0x40021c00
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e12b      	b.n	8002cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fd fe2a 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	@ 0x24
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f003 fca4 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 8002adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4a81      	ldr	r2, [pc, #516]	@ (8002ce8 <HAL_I2C_Init+0x274>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d807      	bhi.n	8002af8 <HAL_I2C_Init+0x84>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a80      	ldr	r2, [pc, #512]	@ (8002cec <HAL_I2C_Init+0x278>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bf94      	ite	ls
 8002af0:	2301      	movls	r3, #1
 8002af2:	2300      	movhi	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e006      	b.n	8002b06 <HAL_I2C_Init+0x92>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a7d      	ldr	r2, [pc, #500]	@ (8002cf0 <HAL_I2C_Init+0x27c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bf94      	ite	ls
 8002b00:	2301      	movls	r3, #1
 8002b02:	2300      	movhi	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0e7      	b.n	8002cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a78      	ldr	r2, [pc, #480]	@ (8002cf4 <HAL_I2C_Init+0x280>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0c9b      	lsrs	r3, r3, #18
 8002b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce8 <HAL_I2C_Init+0x274>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d802      	bhi.n	8002b48 <HAL_I2C_Init+0xd4>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3301      	adds	r3, #1
 8002b46:	e009      	b.n	8002b5c <HAL_I2C_Init+0xe8>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	4a69      	ldr	r2, [pc, #420]	@ (8002cf8 <HAL_I2C_Init+0x284>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	495c      	ldr	r1, [pc, #368]	@ (8002ce8 <HAL_I2C_Init+0x274>)
 8002b78:	428b      	cmp	r3, r1
 8002b7a:	d819      	bhi.n	8002bb0 <HAL_I2C_Init+0x13c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e59      	subs	r1, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8a:	1c59      	adds	r1, r3, #1
 8002b8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b90:	400b      	ands	r3, r1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_I2C_Init+0x138>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e59      	subs	r1, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	e051      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e04f      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d111      	bne.n	8002bdc <HAL_I2C_Init+0x168>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e012      	b.n	8002c02 <HAL_I2C_Init+0x18e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	0099      	lsls	r1, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Init+0x196>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10e      	bne.n	8002c30 <HAL_I2C_Init+0x1bc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e58      	subs	r0, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	440b      	add	r3, r1
 8002c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6911      	ldr	r1, [r2, #16]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	000186a0 	.word	0x000186a0
 8002cec:	001e847f 	.word	0x001e847f
 8002cf0:	003d08ff 	.word	0x003d08ff
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e021      	b.n	8002d52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2224      	movs	r2, #36	@ 0x24
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fd3c 	bl	80007a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6c:	2b80      	cmp	r3, #128	@ 0x80
 8002d6e:	d103      	bne.n	8002d78 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
  }
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d9e:	f7fe fe17 	bl	80019d0 <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	f040 80d9 	bne.w	8002f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2319      	movs	r3, #25
 8002db8:	2201      	movs	r2, #1
 8002dba:	496d      	ldr	r1, [pc, #436]	@ (8002f70 <HAL_I2C_Mem_Write+0x1ec>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f001 fe2d 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0cc      	b.n	8002f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Mem_Write+0x56>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0c5      	b.n	8002f66 <HAL_I2C_Mem_Write+0x1e2>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2221      	movs	r2, #33	@ 0x21
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2240      	movs	r2, #64	@ 0x40
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_I2C_Mem_Write+0x1f0>)
 8002e40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e42:	88f8      	ldrh	r0, [r7, #6]
 8002e44:	893a      	ldrh	r2, [r7, #8]
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4603      	mov	r3, r0
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f001 fca4 	bl	80047a0 <I2C_RequestMemoryWrite>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d052      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e081      	b.n	8002f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f001 fef2 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d107      	bne.n	8002e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06b      	b.n	8002f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_I2C_Mem_Write+0x180>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d017      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1aa      	bne.n	8002e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f001 fee5 	bl	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d107      	bne.n	8002f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e016      	b.n	8002f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	00100002 	.word	0x00100002
 8002f74:	ffff0000 	.word	0xffff0000

08002f78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d003      	beq.n	8002fb0 <HAL_I2C_EV_IRQHandler+0x38>
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	f040 80c1 	bne.w	8003132 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002fd0:	d003      	beq.n	8002fda <HAL_I2C_EV_IRQHandler+0x62>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_EV_IRQHandler+0x66>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x68>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f000 8132 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00c      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x92>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	0a5b      	lsrs	r3, r3, #9
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 ff18 	bl	8004e32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fdad 	bl	8003b62 <I2C_Master_SB>
 8003008:	e092      	b.n	8003130 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0xb2>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	0a5b      	lsrs	r3, r3, #9
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fe23 	bl	8003c6e <I2C_Master_ADD10>
 8003028:	e082      	b.n	8003130 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0xd2>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fe3d 	bl	8003cc2 <I2C_Master_ADDR>
 8003048:	e072      	b.n	8003130 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03b      	beq.n	80030ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003064:	f000 80f3 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	09db      	lsrs	r3, r3, #7
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00f      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x11c>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x11c>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa01 	bl	8003494 <I2C_MasterTransmit_TXE>
 8003092:	e04d      	b.n	8003130 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80d6 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	0a5b      	lsrs	r3, r3, #9
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80cf 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030b0:	7bbb      	ldrb	r3, [r7, #14]
 80030b2:	2b21      	cmp	r3, #33	@ 0x21
 80030b4:	d103      	bne.n	80030be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa88 	bl	80035cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030bc:	e0c7      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	f040 80c4 	bne.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 faf6 	bl	80036b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030cc:	e0bf      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030dc:	f000 80b7 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00f      	beq.n	800310c <HAL_I2C_EV_IRQHandler+0x194>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <HAL_I2C_EV_IRQHandler+0x194>
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb6f 	bl	80037e8 <I2C_MasterReceive_RXNE>
 800310a:	e011      	b.n	8003130 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 809a 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8093 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fc25 	bl	8003978 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312e:	e08e      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003130:	e08d      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e007      	b.n	8003154 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x20e>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00c      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 ffee 	bl	8004160 <I2C_Slave_ADDR>
 8003184:	e066      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	0a5b      	lsrs	r3, r3, #9
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f001 f828 	bl	80041f4 <I2C_Slave_STOPF>
 80031a4:	e056      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	2b21      	cmp	r3, #33	@ 0x21
 80031aa:	d002      	beq.n	80031b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	2b29      	cmp	r3, #41	@ 0x29
 80031b0:	d125      	bne.n	80031fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	09db      	lsrs	r3, r3, #7
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00f      	beq.n	80031de <HAL_I2C_EV_IRQHandler+0x266>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	0a9b      	lsrs	r3, r3, #10
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_I2C_EV_IRQHandler+0x266>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 ff04 	bl	8003fe4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031dc:	e039      	b.n	8003252 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d033      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x2da>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	0a5b      	lsrs	r3, r3, #9
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02d      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 ff31 	bl	800405e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031fc:	e029      	b.n	8003252 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0x2b2>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	0a9b      	lsrs	r3, r3, #10
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 ff3c 	bl	80040a0 <I2C_SlaveReceive_RXNE>
 8003228:	e014      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	0a5b      	lsrs	r3, r3, #9
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 ff6a 	bl	800411c <I2C_SlaveReceive_BTF>
 8003248:	e004      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003252:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08a      	sub	sp, #40	@ 0x28
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800327c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00e      	beq.n	80032a8 <HAL_I2C_ER_IRQHandler+0x4e>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	0a5b      	lsrs	r3, r3, #9
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <HAL_I2C_ER_IRQHandler+0x78>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80032d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	0a9b      	lsrs	r3, r3, #10
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03f      	beq.n	800335e <HAL_I2C_ER_IRQHandler+0x104>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d039      	beq.n	800335e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80032ea:	7efb      	ldrb	r3, [r7, #27]
 80032ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003304:	7ebb      	ldrb	r3, [r7, #26]
 8003306:	2b20      	cmp	r3, #32
 8003308:	d112      	bne.n	8003330 <HAL_I2C_ER_IRQHandler+0xd6>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <HAL_I2C_ER_IRQHandler+0xd6>
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b21      	cmp	r3, #33	@ 0x21
 8003314:	d008      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b29      	cmp	r3, #41	@ 0x29
 800331a:	d005      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0xce>
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b28      	cmp	r3, #40	@ 0x28
 8003320:	d106      	bne.n	8003330 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b21      	cmp	r3, #33	@ 0x21
 8003326:	d103      	bne.n	8003330 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f001 f893 	bl	8004454 <I2C_Slave_AF>
 800332e:	e016      	b.n	800335e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003338:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003342:	7efb      	ldrb	r3, [r7, #27]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d002      	beq.n	800334e <HAL_I2C_ER_IRQHandler+0xf4>
 8003348:	7efb      	ldrb	r3, [r7, #27]
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d107      	bne.n	800335e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	0adb      	lsrs	r3, r3, #11
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00e      	beq.n	8003388 <HAL_I2C_ER_IRQHandler+0x12e>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003386:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f001 f8ce 	bl	800453c <I2C_ITError>
  }
}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	@ 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
 8003404:	4613      	mov	r3, r2
 8003406:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003486:	b2db      	uxtb	r3, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d150      	bne.n	800355c <I2C_MasterTransmit_TXE+0xc8>
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b21      	cmp	r3, #33	@ 0x21
 80034be:	d14d      	bne.n	800355c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d01d      	beq.n	8003502 <I2C_MasterTransmit_TXE+0x6e>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d01a      	beq.n	8003502 <I2C_MasterTransmit_TXE+0x6e>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034d2:	d016      	beq.n	8003502 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2211      	movs	r2, #17
 80034e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff54 	bl	80033a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003500:	e060      	b.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003510:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003520:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d107      	bne.n	800354c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff6f 	bl	8003428 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800354a:	e03b      	b.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff27 	bl	80033a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800355a:	e033      	b.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b21      	cmp	r3, #33	@ 0x21
 8003560:	d005      	beq.n	800356e <I2C_MasterTransmit_TXE+0xda>
 8003562:	7bbb      	ldrb	r3, [r7, #14]
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d12d      	bne.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b22      	cmp	r3, #34	@ 0x22
 800356c:	d12a      	bne.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003586:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003588:	e01c      	b.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d103      	bne.n	800359e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f88e 	bl	80036b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800359c:	e012      	b.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035c2:	e7ff      	b.n	80035c4 <I2C_MasterTransmit_TXE+0x130>
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b21      	cmp	r3, #33	@ 0x21
 80035e4:	d164      	bne.n	80036b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003614:	e04c      	b.n	80036b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d01d      	beq.n	8003658 <I2C_MasterTransmit_BTF+0x8c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b20      	cmp	r3, #32
 8003620:	d01a      	beq.n	8003658 <I2C_MasterTransmit_BTF+0x8c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003628:	d016      	beq.n	8003658 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003638:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2211      	movs	r2, #17
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fea9 	bl	80033a8 <HAL_I2C_MasterTxCpltCallback>
}
 8003656:	e02b      	b.n	80036b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003666:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	d107      	bne.n	80036a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fec4 	bl	8003428 <HAL_I2C_MemTxCpltCallback>
}
 80036a0:	e006      	b.n	80036b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe7c 	bl	80033a8 <HAL_I2C_MasterTxCpltCallback>
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10b      	bne.n	80036f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80036ee:	e077      	b.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	121b      	asrs	r3, r3, #8
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800370a:	e069      	b.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10b      	bne.n	800372c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	b2da      	uxtb	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800372a:	e059      	b.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	2b02      	cmp	r3, #2
 8003732:	d152      	bne.n	80037da <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b22      	cmp	r3, #34	@ 0x22
 8003738:	d10d      	bne.n	8003756 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003748:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003754:	e044      	b.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b21      	cmp	r3, #33	@ 0x21
 8003764:	d112      	bne.n	800378c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800378a:	e029      	b.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d124      	bne.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b21      	cmp	r3, #33	@ 0x21
 800379a:	d121      	bne.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fe28 	bl	8003428 <HAL_I2C_MemTxCpltCallback>
}
 80037d8:	e002      	b.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fabd 	bl	8002d5a <I2C_Flush_DR>
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b22      	cmp	r3, #34	@ 0x22
 80037fa:	f040 80b9 	bne.w	8003970 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d921      	bls.n	8003856 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b03      	cmp	r3, #3
 8003840:	f040 8096 	bne.w	8003970 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003852:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003854:	e08c      	b.n	8003970 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	2b02      	cmp	r3, #2
 800385c:	d07f      	beq.n	800395e <I2C_MasterReceive_RXNE+0x176>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d002      	beq.n	800386a <I2C_MasterReceive_RXNE+0x82>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d179      	bne.n	800395e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f001 fa80 	bl	8004d70 <I2C_WaitOnSTOPRequestThroughIT>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d14c      	bne.n	8003910 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003894:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d10a      	bne.n	80038e6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fdac 	bl	800343c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038e4:	e044      	b.n	8003970 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d002      	beq.n	80038fa <I2C_MasterReceive_RXNE+0x112>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d103      	bne.n	8003902 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003900:	e002      	b.n	8003908 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2212      	movs	r2, #18
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fd57 	bl	80033bc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800390e:	e02f      	b.n	8003970 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800391e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fd7a 	bl	8003450 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800395c:	e008      	b.n	8003970 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396c:	605a      	str	r2, [r3, #4]
}
 800396e:	e7ff      	b.n	8003970 <I2C_MasterReceive_RXNE+0x188>
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b04      	cmp	r3, #4
 800398e:	d11b      	bne.n	80039c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039c6:	e0c8      	b.n	8003b5a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d129      	bne.n	8003a26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00a      	beq.n	80039fe <I2C_MasterReceive_BTF+0x86>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d007      	beq.n	80039fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a24:	e099      	b.n	8003b5a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	f040 8081 	bne.w	8003b34 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d002      	beq.n	8003a3e <I2C_MasterReceive_BTF+0xc6>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d108      	bne.n	8003a50 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e019      	b.n	8003a84 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d002      	beq.n	8003a5c <I2C_MasterReceive_BTF+0xe4>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d108      	bne.n	8003a6e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e00a      	b.n	8003a84 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d007      	beq.n	8003a84 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ade:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d10a      	bne.n	8003b0a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fc9a 	bl	800343c <HAL_I2C_MemRxCpltCallback>
}
 8003b08:	e027      	b.n	8003b5a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d002      	beq.n	8003b1e <I2C_MasterReceive_BTF+0x1a6>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d103      	bne.n	8003b26 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b24:	e002      	b.n	8003b2c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2212      	movs	r2, #18
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fc45 	bl	80033bc <HAL_I2C_MasterRxCpltCallback>
}
 8003b32:	e012      	b.n	8003b5a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d117      	bne.n	8003ba6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b8e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b90:	e067      	b.n	8003c62 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]
}
 8003ba4:	e05d      	b.n	8003c62 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bae:	d133      	bne.n	8003c18 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b21      	cmp	r3, #33	@ 0x21
 8003bba:	d109      	bne.n	8003bd0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bcc:	611a      	str	r2, [r3, #16]
 8003bce:	e008      	b.n	8003be2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <I2C_Master_SB+0x92>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d108      	bne.n	8003c06 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d032      	beq.n	8003c62 <I2C_Master_SB+0x100>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d02d      	beq.n	8003c62 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c14:	605a      	str	r2, [r3, #4]
}
 8003c16:	e024      	b.n	8003c62 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10e      	bne.n	8003c3e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	11db      	asrs	r3, r3, #7
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 0306 	and.w	r3, r3, #6
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f063 030f 	orn	r3, r3, #15
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]
}
 8003c3c:	e011      	b.n	8003c62 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10d      	bne.n	8003c62 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	11db      	asrs	r3, r3, #7
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 0306 	and.w	r3, r3, #6
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f063 030e 	orn	r3, r3, #14
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <I2C_Master_ADD10+0x26>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <I2C_Master_ADD10+0x48>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb4:	605a      	str	r2, [r3, #4]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b091      	sub	sp, #68	@ 0x44
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b22      	cmp	r3, #34	@ 0x22
 8003cea:	f040 8169 	bne.w	8003fc0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <I2C_Master_ADDR+0x54>
 8003cf6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003cfa:	2b40      	cmp	r3, #64	@ 0x40
 8003cfc:	d10b      	bne.n	8003d16 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	e160      	b.n	8003fd8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11d      	bne.n	8003d5a <I2C_Master_ADDR+0x98>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d26:	d118      	bne.n	8003d5a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d4c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d58:	e13e      	b.n	8003fd8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d113      	bne.n	8003d8c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e115      	b.n	8003fb8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	f040 808a 	bne.w	8003eac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d9e:	d137      	bne.n	8003e10 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dbe:	d113      	bne.n	8003de8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	e0e7      	b.n	8003fb8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	623b      	str	r3, [r7, #32]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e0d3      	b.n	8003fb8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d02e      	beq.n	8003e74 <I2C_Master_ADDR+0x1b2>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d02b      	beq.n	8003e74 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1e:	2b12      	cmp	r3, #18
 8003e20:	d102      	bne.n	8003e28 <I2C_Master_ADDR+0x166>
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d125      	bne.n	8003e74 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00e      	beq.n	8003e4c <I2C_Master_ADDR+0x18a>
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d00b      	beq.n	8003e4c <I2C_Master_ADDR+0x18a>
 8003e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d008      	beq.n	8003e4c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e007      	b.n	8003e5c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e5a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	e0a1      	b.n	8003fb8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e085      	b.n	8003fb8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d14d      	bne.n	8003f52 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d016      	beq.n	8003eea <I2C_Master_ADDR+0x228>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d013      	beq.n	8003eea <I2C_Master_ADDR+0x228>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d010      	beq.n	8003eea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e007      	b.n	8003efa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ef8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f08:	d117      	bne.n	8003f3a <I2C_Master_ADDR+0x278>
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f10:	d00b      	beq.n	8003f2a <I2C_Master_ADDR+0x268>
 8003f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d008      	beq.n	8003f2a <I2C_Master_ADDR+0x268>
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d005      	beq.n	8003f2a <I2C_Master_ADDR+0x268>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d002      	beq.n	8003f2a <I2C_Master_ADDR+0x268>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d107      	bne.n	8003f3a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	e032      	b.n	8003fb8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f60:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f70:	d117      	bne.n	8003fa2 <I2C_Master_ADDR+0x2e0>
 8003f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f78:	d00b      	beq.n	8003f92 <I2C_Master_ADDR+0x2d0>
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d008      	beq.n	8003f92 <I2C_Master_ADDR+0x2d0>
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d005      	beq.n	8003f92 <I2C_Master_ADDR+0x2d0>
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d002      	beq.n	8003f92 <I2C_Master_ADDR+0x2d0>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d107      	bne.n	8003fa2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fa0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fbe:	e00b      	b.n	8003fd8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	e7ff      	b.n	8003fd8 <I2C_Master_ADDR+0x316>
 8003fd8:	bf00      	nop
 8003fda:	3744      	adds	r7, #68	@ 0x44
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02b      	beq.n	8004056 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d114      	bne.n	8004056 <I2C_SlaveTransmit_TXE+0x72>
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b29      	cmp	r3, #41	@ 0x29
 8004030:	d111      	bne.n	8004056 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004040:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2221      	movs	r2, #33	@ 0x21
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2228      	movs	r2, #40	@ 0x28
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff f9bd 	bl	80033d0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d011      	beq.n	8004094 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d02c      	beq.n	8004114 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d114      	bne.n	8004114 <I2C_SlaveReceive_RXNE+0x74>
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ee:	d111      	bne.n	8004114 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2222      	movs	r2, #34	@ 0x22
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2228      	movs	r2, #40	@ 0x28
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff f968 	bl	80033e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800417a:	2b28      	cmp	r3, #40	@ 0x28
 800417c:	d127      	bne.n	80041ce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	09db      	lsrs	r3, r3, #7
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	81bb      	strh	r3, [r7, #12]
 80041b0:	e002      	b.n	80041b8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041c0:	89ba      	ldrh	r2, [r7, #12]
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff f916 	bl	80033f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041cc:	e00e      	b.n	80041ec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004202:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004212:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004214:	2300      	movs	r3, #0
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004240:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004250:	d172      	bne.n	8004338 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b22      	cmp	r3, #34	@ 0x22
 8004256:	d002      	beq.n	800425e <I2C_Slave_STOPF+0x6a>
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b2a      	cmp	r3, #42	@ 0x2a
 800425c:	d135      	bne.n	80042ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004290:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe f84c 	bl	8002334 <HAL_DMA_GetState>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d049      	beq.n	8004336 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	4a69      	ldr	r2, [pc, #420]	@ (800444c <I2C_Slave_STOPF+0x258>)
 80042a8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd fe94 	bl	8001fdc <HAL_DMA_Abort_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d03d      	beq.n	8004336 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042c8:	e035      	b.n	8004336 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f043 0204 	orr.w	r2, r3, #4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe f816 	bl	8002334 <HAL_DMA_GetState>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d014      	beq.n	8004338 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	4a4e      	ldr	r2, [pc, #312]	@ (800444c <I2C_Slave_STOPF+0x258>)
 8004314:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fe5e 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004330:	4610      	mov	r0, r2
 8004332:	4798      	blx	r3
 8004334:	e000      	b.n	8004338 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004336:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d03e      	beq.n	80043c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d112      	bne.n	8004376 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b40      	cmp	r3, #64	@ 0x40
 8004382:	d112      	bne.n	80043aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	f043 0204 	orr.w	r2, r3, #4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f8b7 	bl	800453c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043ce:	e039      	b.n	8004444 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d4:	d109      	bne.n	80043ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2228      	movs	r2, #40	@ 0x28
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fe fffd 	bl	80033e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b28      	cmp	r3, #40	@ 0x28
 80043f4:	d111      	bne.n	800441a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a15      	ldr	r2, [pc, #84]	@ (8004450 <I2C_Slave_STOPF+0x25c>)
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fe fffe 	bl	8003414 <HAL_I2C_ListenCpltCallback>
}
 8004418:	e014      	b.n	8004444 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	2b22      	cmp	r3, #34	@ 0x22
 8004420:	d002      	beq.n	8004428 <I2C_Slave_STOPF+0x234>
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b22      	cmp	r3, #34	@ 0x22
 8004426:	d10d      	bne.n	8004444 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fe ffd0 	bl	80033e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	080048cd 	.word	0x080048cd
 8004450:	ffff0000 	.word	0xffff0000

08004454 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004462:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d002      	beq.n	8004476 <I2C_Slave_AF+0x22>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b20      	cmp	r3, #32
 8004474:	d129      	bne.n	80044ca <I2C_Slave_AF+0x76>
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b28      	cmp	r3, #40	@ 0x28
 800447a:	d126      	bne.n	80044ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a2e      	ldr	r2, [pc, #184]	@ (8004538 <I2C_Slave_AF+0xe4>)
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004490:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800449a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fe ffa6 	bl	8003414 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044c8:	e031      	b.n	800452e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b21      	cmp	r3, #33	@ 0x21
 80044ce:	d129      	bne.n	8004524 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <I2C_Slave_AF+0xe4>)
 80044d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2221      	movs	r2, #33	@ 0x21
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004504:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004514:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe fc1f 	bl	8002d5a <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fe ff57 	bl	80033d0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004522:	e004      	b.n	800452e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800452c:	615a      	str	r2, [r3, #20]
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	ffff0000 	.word	0xffff0000

0800453c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004552:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	2b10      	cmp	r3, #16
 8004558:	d002      	beq.n	8004560 <I2C_ITError+0x24>
 800455a:	7bbb      	ldrb	r3, [r7, #14]
 800455c:	2b40      	cmp	r3, #64	@ 0x40
 800455e:	d10a      	bne.n	8004576 <I2C_ITError+0x3a>
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b22      	cmp	r3, #34	@ 0x22
 8004564:	d107      	bne.n	8004576 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004574:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800457c:	2b28      	cmp	r3, #40	@ 0x28
 800457e:	d107      	bne.n	8004590 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2228      	movs	r2, #40	@ 0x28
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800458e:	e015      	b.n	80045bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459e:	d00a      	beq.n	80045b6 <I2C_ITError+0x7a>
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b60      	cmp	r3, #96	@ 0x60
 80045a4:	d007      	beq.n	80045b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ca:	d162      	bne.n	8004692 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d020      	beq.n	800462c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004798 <I2C_ITError+0x25c>)
 80045f0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd fcf0 	bl	8001fdc <HAL_DMA_Abort_IT>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8089 	beq.w	8004716 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004626:	4610      	mov	r0, r2
 8004628:	4798      	blx	r3
 800462a:	e074      	b.n	8004716 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	4a59      	ldr	r2, [pc, #356]	@ (8004798 <I2C_ITError+0x25c>)
 8004632:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	4618      	mov	r0, r3
 800463a:	f7fd fccf 	bl	8001fdc <HAL_DMA_Abort_IT>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d068      	beq.n	8004716 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464e:	2b40      	cmp	r3, #64	@ 0x40
 8004650:	d10b      	bne.n	800466a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800468c:	4610      	mov	r0, r2
 800468e:	4798      	blx	r3
 8004690:	e041      	b.n	8004716 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b60      	cmp	r3, #96	@ 0x60
 800469c:	d125      	bne.n	80046ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b40      	cmp	r3, #64	@ 0x40
 80046b8:	d10b      	bne.n	80046d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fe febe 	bl	8003464 <HAL_I2C_AbortCpltCallback>
 80046e8:	e015      	b.n	8004716 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b40      	cmp	r3, #64	@ 0x40
 80046f6:	d10b      	bne.n	8004710 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fe fe9d 	bl	8003450 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10e      	bne.n	8004744 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d113      	bne.n	8004790 <I2C_ITError+0x254>
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b28      	cmp	r3, #40	@ 0x28
 800476c:	d110      	bne.n	8004790 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <I2C_ITError+0x260>)
 8004772:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe fe42 	bl	8003414 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	080048cd 	.word	0x080048cd
 800479c:	ffff0000 	.word	0xffff0000

080047a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	817b      	strh	r3, [r7, #10]
 80047b2:	460b      	mov	r3, r1
 80047b4:	813b      	strh	r3, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f920 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f0:	d103      	bne.n	80047fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e05f      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047fe:	897b      	ldrh	r3, [r7, #10]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800480c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	6a3a      	ldr	r2, [r7, #32]
 8004812:	492d      	ldr	r1, [pc, #180]	@ (80048c8 <I2C_RequestMemoryWrite+0x128>)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f97b 	bl	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e04c      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483c:	6a39      	ldr	r1, [r7, #32]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa06 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	2b04      	cmp	r3, #4
 8004850:	d107      	bne.n	8004862 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e02b      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800486c:	893b      	ldrh	r3, [r7, #8]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	611a      	str	r2, [r3, #16]
 8004876:	e021      	b.n	80048bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004878:	893b      	ldrh	r3, [r7, #8]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	b29b      	uxth	r3, r3
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f9e0 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e005      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b2:	893b      	ldrh	r3, [r7, #8]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	00010002 	.word	0x00010002

080048cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004a14 <I2C_DMAAbort+0x148>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	08db      	lsrs	r3, r3, #3
 80048ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004a18 <I2C_DMAAbort+0x14c>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	0a1a      	lsrs	r2, r3, #8
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00da      	lsls	r2, r3, #3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004912:	e00a      	b.n	800492a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b01      	subs	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004928:	d0ea      	beq.n	8004900 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004936:	2200      	movs	r2, #0
 8004938:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	2200      	movs	r2, #0
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004958:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496c:	2200      	movs	r2, #0
 800496e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	2200      	movs	r2, #0
 800497e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b60      	cmp	r3, #96	@ 0x60
 800499a:	d10e      	bne.n	80049ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7fe fd56 	bl	8003464 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049b8:	e027      	b.n	8004a0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049c0:	2b28      	cmp	r3, #40	@ 0x28
 80049c2:	d117      	bne.n	80049f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2228      	movs	r2, #40	@ 0x28
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049f2:	e007      	b.n	8004a04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f7fe fd23 	bl	8003450 <HAL_I2C_ErrorCallback>
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000004 	.word	0x20000004
 8004a18:	14f8b589 	.word	0x14f8b589

08004a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a2c:	e048      	b.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d044      	beq.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fc ffcb 	bl	80019d0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d139      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	0c1b      	lsrs	r3, r3, #16
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10d      	bne.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	e00c      	b.n	8004a8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d116      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e023      	b.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10d      	bne.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	e00c      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	43da      	mvns	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d093      	beq.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b1e:	e071      	b.n	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2e:	d123      	bne.n	8004b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e067      	b.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d041      	beq.n	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b80:	f7fc ff26 	bl	80019d0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d136      	bne.n	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10c      	bne.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e00b      	b.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e021      	b.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d10c      	bne.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	43da      	mvns	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e00b      	b.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f af6d 	bne.w	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c5c:	e034      	b.n	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f8b8 	bl	8004dd4 <I2C_IsAcknowledgeFailed>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e034      	b.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d028      	beq.n	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fc feab 	bl	80019d0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11d      	bne.n	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b80      	cmp	r3, #128	@ 0x80
 8004c98:	d016      	beq.n	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd2:	2b80      	cmp	r3, #128	@ 0x80
 8004cd4:	d1c3      	bne.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cec:	e034      	b.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f870 	bl	8004dd4 <I2C_IsAcknowledgeFailed>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e034      	b.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d028      	beq.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fc fe63 	bl	80019d0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d11d      	bne.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d016      	beq.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e007      	b.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d1c3      	bne.n	8004cee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d7c:	4b13      	ldr	r3, [pc, #76]	@ (8004dcc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	4a13      	ldr	r2, [pc, #76]	@ (8004dd0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0a1a      	lsrs	r2, r3, #8
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d107      	bne.n	8004dae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e008      	b.n	8004dc0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dbc:	d0e9      	beq.n	8004d92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000004 	.word	0x20000004
 8004dd0:	14f8b589 	.word	0x14f8b589

08004dd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dea:	d11b      	bne.n	8004e24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	f043 0204 	orr.w	r2, r3, #4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e42:	d103      	bne.n	8004e4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e4a:	e007      	b.n	8004e5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e54:	d102      	bne.n	8004e5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e128      	b.n	80050cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a90      	ldr	r2, [pc, #576]	@ (80050d4 <HAL_I2S_Init+0x26c>)
 8004e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fb fd09 	bl	80008ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004eb0:	f023 030f 	bic.w	r3, r3, #15
 8004eb4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d060      	beq.n	8004f88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ece:	2310      	movs	r3, #16
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e001      	b.n	8004ed8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d802      	bhi.n	8004ee6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f001 fba6 	bl	8006638 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef6:	d125      	bne.n	8004f44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	3305      	adds	r3, #5
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e01f      	b.n	8004f62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	461a      	mov	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	3305      	adds	r3, #5
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	e00e      	b.n	8004f62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	461a      	mov	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	3305      	adds	r3, #5
 8004f60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4a5c      	ldr	r2, [pc, #368]	@ (80050d8 <HAL_I2S_Init+0x270>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	e003      	b.n	8004f90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d902      	bls.n	8004f9c <HAL_I2S_Init+0x134>
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2bff      	cmp	r3, #255	@ 0xff
 8004f9a:	d907      	bls.n	8004fac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa0:	f043 0210 	orr.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e08f      	b.n	80050cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004fca:	f023 030f 	bic.w	r3, r3, #15
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6851      	ldr	r1, [r2, #4]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68d2      	ldr	r2, [r2, #12]
 8004fdc:	4311      	orrs	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6992      	ldr	r2, [r2, #24]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d161      	bne.n	80050bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a38      	ldr	r2, [pc, #224]	@ (80050dc <HAL_I2S_Init+0x274>)
 8004ffc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a37      	ldr	r2, [pc, #220]	@ (80050e0 <HAL_I2S_Init+0x278>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_I2S_Init+0x1a4>
 8005008:	4b36      	ldr	r3, [pc, #216]	@ (80050e4 <HAL_I2S_Init+0x27c>)
 800500a:	e001      	b.n	8005010 <HAL_I2S_Init+0x1a8>
 800500c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	4932      	ldr	r1, [pc, #200]	@ (80050e0 <HAL_I2S_Init+0x278>)
 8005018:	428a      	cmp	r2, r1
 800501a:	d101      	bne.n	8005020 <HAL_I2S_Init+0x1b8>
 800501c:	4a31      	ldr	r2, [pc, #196]	@ (80050e4 <HAL_I2S_Init+0x27c>)
 800501e:	e001      	b.n	8005024 <HAL_I2S_Init+0x1bc>
 8005020:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005024:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005028:	f023 030f 	bic.w	r3, r3, #15
 800502c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <HAL_I2S_Init+0x278>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_I2S_Init+0x1d4>
 8005038:	4b2a      	ldr	r3, [pc, #168]	@ (80050e4 <HAL_I2S_Init+0x27c>)
 800503a:	e001      	b.n	8005040 <HAL_I2S_Init+0x1d8>
 800503c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005040:	2202      	movs	r2, #2
 8005042:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <HAL_I2S_Init+0x278>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_I2S_Init+0x1ea>
 800504e:	4b25      	ldr	r3, [pc, #148]	@ (80050e4 <HAL_I2S_Init+0x27c>)
 8005050:	e001      	b.n	8005056 <HAL_I2S_Init+0x1ee>
 8005052:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005062:	d003      	beq.n	800506c <HAL_I2S_Init+0x204>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800506c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e001      	b.n	8005078 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005082:	4313      	orrs	r3, r2
 8005084:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800508c:	4313      	orrs	r3, r2
 800508e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005096:	4313      	orrs	r3, r2
 8005098:	b29a      	uxth	r2, r3
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	4313      	orrs	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80050a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a0d      	ldr	r2, [pc, #52]	@ (80050e0 <HAL_I2S_Init+0x278>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d101      	bne.n	80050b4 <HAL_I2S_Init+0x24c>
 80050b0:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <HAL_I2S_Init+0x27c>)
 80050b2:	e001      	b.n	80050b8 <HAL_I2S_Init+0x250>
 80050b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050b8:	897a      	ldrh	r2, [r7, #10]
 80050ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	0800557b 	.word	0x0800557b
 80050d8:	cccccccd 	.word	0xcccccccd
 80050dc:	08005691 	.word	0x08005691
 80050e0:	40003800 	.word	0x40003800
 80050e4:	40003400 	.word	0x40003400

080050e8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_I2S_Transmit_DMA+0x1a>
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e08a      	b.n	800521c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
 8005114:	e082      	b.n	800521c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_I2S_Transmit_DMA+0x3e>
 8005122:	2302      	movs	r3, #2
 8005124:	e07a      	b.n	800521c <HAL_I2S_Transmit_DMA+0x134>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2203      	movs	r2, #3
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d002      	beq.n	800515a <HAL_I2S_Transmit_DMA+0x72>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b05      	cmp	r3, #5
 8005158:	d10a      	bne.n	8005170 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800516e:	e005      	b.n	800517c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	4a28      	ldr	r2, [pc, #160]	@ (8005224 <HAL_I2S_Transmit_DMA+0x13c>)
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	4a27      	ldr	r2, [pc, #156]	@ (8005228 <HAL_I2S_Transmit_DMA+0x140>)
 800518a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	4a26      	ldr	r2, [pc, #152]	@ (800522c <HAL_I2S_Transmit_DMA+0x144>)
 8005192:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800519c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051a4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051ac:	f7fc fe4e 	bl	8001e4c <HAL_DMA_Start_IT>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00f      	beq.n	80051d6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	f043 0208 	orr.w	r2, r3, #8
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e022      	b.n	800521c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0202 	orr.w	r2, r2, #2
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005218:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	080053fb 	.word	0x080053fb
 8005228:	080053b9 	.word	0x080053b9
 800522c:	08005475 	.word	0x08005475

08005230 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_I2S_Receive_DMA+0x1a>
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e09d      	b.n	800538a <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d001      	beq.n	800525e <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800525a:	2302      	movs	r3, #2
 800525c:	e095      	b.n	800538a <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_I2S_Receive_DMA+0x3e>
 800526a:	2302      	movs	r3, #2
 800526c:	e08d      	b.n	800538a <HAL_I2S_Receive_DMA+0x15a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2204      	movs	r2, #4
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d002      	beq.n	80052a2 <HAL_I2S_Receive_DMA+0x72>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d10a      	bne.n	80052b8 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	865a      	strh	r2, [r3, #50]	@ 0x32
 80052b6:	e005      	b.n	80052c4 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c8:	4a32      	ldr	r2, [pc, #200]	@ (8005394 <HAL_I2S_Receive_DMA+0x164>)
 80052ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	4a31      	ldr	r2, [pc, #196]	@ (8005398 <HAL_I2S_Receive_DMA+0x168>)
 80052d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	4a30      	ldr	r2, [pc, #192]	@ (800539c <HAL_I2S_Receive_DMA+0x16c>)
 80052da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ea:	d10a      	bne.n	8005302 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	4619      	mov	r1, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005318:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800531a:	f7fc fd97 	bl	8001e4c <HAL_DMA_Start_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00f      	beq.n	8005344 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	f043 0208 	orr.w	r2, r3, #8
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e022      	b.n	800538a <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005386:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	08005459 	.word	0x08005459
 8005398:	08005417 	.word	0x08005417
 800539c:	08005475 	.word	0x08005475

080053a0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0202 	bic.w	r2, r2, #2
 80053dc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7fb fd3b 	bl	8000e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005406:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7fb fd17 	bl	8000e3c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10e      	bne.n	800544a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7fb fce0 	bl	8000e10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7fb fcbc 	bl	8000de4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0203 	bic.w	r2, r2, #3
 8005490:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f043 0208 	orr.w	r2, r3, #8
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7fb fcee 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10e      	bne.n	8005514 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005504:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fb fcaa 	bl	8000e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	b292      	uxth	r2, r2
 8005530:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10e      	bne.n	8005572 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005562:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fb fc4f 	bl	8000e10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b04      	cmp	r3, #4
 8005594:	d13a      	bne.n	800560c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d109      	bne.n	80055b4 <I2S_IRQHandler+0x3a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d102      	bne.n	80055b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ffb4 	bl	800551c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b40      	cmp	r3, #64	@ 0x40
 80055bc:	d126      	bne.n	800560c <I2S_IRQHandler+0x92>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d11f      	bne.n	800560c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb fc44 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b03      	cmp	r3, #3
 8005616:	d136      	bne.n	8005686 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d109      	bne.n	8005636 <I2S_IRQHandler+0xbc>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562c:	2b80      	cmp	r3, #128	@ 0x80
 800562e:	d102      	bne.n	8005636 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff45 	bl	80054c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d122      	bne.n	8005686 <I2S_IRQHandler+0x10c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b20      	cmp	r3, #32
 800564c:	d11b      	bne.n	8005686 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800565c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005678:	f043 0204 	orr.w	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fb fc07 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a92      	ldr	r2, [pc, #584]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80056aa:	4b92      	ldr	r3, [pc, #584]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ac:	e001      	b.n	80056b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80056ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a8b      	ldr	r2, [pc, #556]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80056c8:	4b8a      	ldr	r3, [pc, #552]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ca:	e001      	b.n	80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80056cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056dc:	d004      	beq.n	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 8099 	bne.w	800581a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d107      	bne.n	8005702 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f925 	bl	800594c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d107      	bne.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9c8 	bl	8005aac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b40      	cmp	r3, #64	@ 0x40
 8005724:	d13a      	bne.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d035      	beq.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a6e      	ldr	r2, [pc, #440]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d101      	bne.n	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800573a:	4b6e      	ldr	r3, [pc, #440]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800573c:	e001      	b.n	8005742 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800573e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4969      	ldr	r1, [pc, #420]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800574a:	428b      	cmp	r3, r1
 800574c:	d101      	bne.n	8005752 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800574e:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005750:	e001      	b.n	8005756 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005752:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005756:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800575a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800576a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	f043 0202 	orr.w	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fb7c 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	f040 80c3 	bne.w	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80bd 	beq.w	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a49      	ldr	r2, [pc, #292]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80057ce:	4b49      	ldr	r3, [pc, #292]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057d0:	e001      	b.n	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80057d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4944      	ldr	r1, [pc, #272]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057de:	428b      	cmp	r3, r1
 80057e0:	d101      	bne.n	80057e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80057e2:	4b44      	ldr	r3, [pc, #272]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057e4:	e001      	b.n	80057ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fb fb3e 	bl	8000e94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005818:	e089      	b.n	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	d107      	bne.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8be 	bl	80059b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f8fd 	bl	8005a48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d12f      	bne.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d02a      	beq.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005870:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800587e:	e001      	b.n	8005884 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005880:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4919      	ldr	r1, [pc, #100]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800588c:	428b      	cmp	r3, r1
 800588e:	d101      	bne.n	8005894 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005890:	4b18      	ldr	r3, [pc, #96]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005892:	e001      	b.n	8005898 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005894:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005898:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800589c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fb faee 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d136      	bne.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d031      	beq.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a07      	ldr	r2, [pc, #28]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058d8:	e001      	b.n	80058de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80058da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4902      	ldr	r1, [pc, #8]	@ (80058f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058e6:	428b      	cmp	r3, r1
 80058e8:	d106      	bne.n	80058f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058ea:	4b02      	ldr	r3, [pc, #8]	@ (80058f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058ec:	e006      	b.n	80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058ee:	bf00      	nop
 80058f0:	40003800 	.word	0x40003800
 80058f4:	40003400 	.word	0x40003400
 80058f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005900:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005910:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fb fab4 	bl	8000e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800592c:	e000      	b.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800592e:	bf00      	nop
}
 8005930:	bf00      	nop
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	1c99      	adds	r1, r3, #2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6251      	str	r1, [r2, #36]	@ 0x24
 800595e:	881a      	ldrh	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d113      	bne.n	80059a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800598c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffc9 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	1c99      	adds	r1, r3, #2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80059c2:	8819      	ldrh	r1, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a40 <I2SEx_TxISR_I2SExt+0x90>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <I2SEx_TxISR_I2SExt+0x22>
 80059ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <I2SEx_TxISR_I2SExt+0x94>)
 80059d0:	e001      	b.n	80059d6 <I2SEx_TxISR_I2SExt+0x26>
 80059d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059d6:	460a      	mov	r2, r1
 80059d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d121      	bne.n	8005a36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <I2SEx_TxISR_I2SExt+0x90>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <I2SEx_TxISR_I2SExt+0x50>
 80059fc:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <I2SEx_TxISR_I2SExt+0x94>)
 80059fe:	e001      	b.n	8005a04 <I2SEx_TxISR_I2SExt+0x54>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	490d      	ldr	r1, [pc, #52]	@ (8005a40 <I2SEx_TxISR_I2SExt+0x90>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d101      	bne.n	8005a14 <I2SEx_TxISR_I2SExt+0x64>
 8005a10:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <I2SEx_TxISR_I2SExt+0x94>)
 8005a12:	e001      	b.n	8005a18 <I2SEx_TxISR_I2SExt+0x68>
 8005a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ff81 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40003800 	.word	0x40003800
 8005a44:	40003400 	.word	0x40003400

08005a48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68d8      	ldr	r0, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	1c99      	adds	r1, r3, #2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a60:	b282      	uxth	r2, r0
 8005a62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d113      	bne.n	8005aa4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ff4a 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a20      	ldr	r2, [pc, #128]	@ (8005b3c <I2SEx_RxISR_I2SExt+0x90>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <I2SEx_RxISR_I2SExt+0x16>
 8005abe:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <I2SEx_RxISR_I2SExt+0x94>)
 8005ac0:	e001      	b.n	8005ac6 <I2SEx_RxISR_I2SExt+0x1a>
 8005ac2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ac6:	68d8      	ldr	r0, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	1c99      	adds	r1, r3, #2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ad2:	b282      	uxth	r2, r0
 8005ad4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d121      	bne.n	8005b32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a12      	ldr	r2, [pc, #72]	@ (8005b3c <I2SEx_RxISR_I2SExt+0x90>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <I2SEx_RxISR_I2SExt+0x50>
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <I2SEx_RxISR_I2SExt+0x94>)
 8005afa:	e001      	b.n	8005b00 <I2SEx_RxISR_I2SExt+0x54>
 8005afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	490d      	ldr	r1, [pc, #52]	@ (8005b3c <I2SEx_RxISR_I2SExt+0x90>)
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	d101      	bne.n	8005b10 <I2SEx_RxISR_I2SExt+0x64>
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <I2SEx_RxISR_I2SExt+0x94>)
 8005b0e:	e001      	b.n	8005b14 <I2SEx_RxISR_I2SExt+0x68>
 8005b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff03 	bl	8005938 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40003800 	.word	0x40003800
 8005b40:	40003400 	.word	0x40003400

08005b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e267      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d075      	beq.n	8005c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b62:	4b88      	ldr	r3, [pc, #544]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d00c      	beq.n	8005b88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b6e:	4b85      	ldr	r3, [pc, #532]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d112      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b7a:	4b82      	ldr	r3, [pc, #520]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b86:	d10b      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	4b7e      	ldr	r3, [pc, #504]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d05b      	beq.n	8005c4c <HAL_RCC_OscConfig+0x108>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d157      	bne.n	8005c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e242      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x74>
 8005baa:	4b76      	ldr	r3, [pc, #472]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a75      	ldr	r2, [pc, #468]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e01d      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x98>
 8005bc2:	4b70      	ldr	r3, [pc, #448]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4b6d      	ldr	r3, [pc, #436]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
 8005bdc:	4b69      	ldr	r3, [pc, #420]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a68      	ldr	r2, [pc, #416]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b66      	ldr	r3, [pc, #408]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a65      	ldr	r2, [pc, #404]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fb fee8 	bl	80019d0 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fb fee4 	bl	80019d0 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	@ 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e207      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c16:	4b5b      	ldr	r3, [pc, #364]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xc0>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fb fed4 	bl	80019d0 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fb fed0 	bl	80019d0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	@ 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e1f3      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3e:	4b51      	ldr	r3, [pc, #324]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0xe8>
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d063      	beq.n	8005d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c66:	4b47      	ldr	r3, [pc, #284]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d11c      	bne.n	8005cac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c72:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d116      	bne.n	8005cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7e:	4b41      	ldr	r3, [pc, #260]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_RCC_OscConfig+0x152>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e1c7      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c96:	4b3b      	ldr	r3, [pc, #236]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4937      	ldr	r1, [pc, #220]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005caa:	e03a      	b.n	8005d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cb4:	4b34      	ldr	r3, [pc, #208]	@ (8005d88 <HAL_RCC_OscConfig+0x244>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fb fe89 	bl	80019d0 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc2:	f7fb fe85 	bl	80019d0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e1a8      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce0:	4b28      	ldr	r3, [pc, #160]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4925      	ldr	r1, [pc, #148]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
 8005cf4:	e015      	b.n	8005d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cf6:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_RCC_OscConfig+0x244>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fb fe68 	bl	80019d0 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d04:	f7fb fe64 	bl	80019d0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e187      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d16:	4b1b      	ldr	r3, [pc, #108]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d036      	beq.n	8005d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d016      	beq.n	8005d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d36:	4b15      	ldr	r3, [pc, #84]	@ (8005d8c <HAL_RCC_OscConfig+0x248>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fb fe48 	bl	80019d0 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fb fe44 	bl	80019d0 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e167      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <HAL_RCC_OscConfig+0x240>)
 8005d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x200>
 8005d62:	e01b      	b.n	8005d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d64:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <HAL_RCC_OscConfig+0x248>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d6a:	f7fb fe31 	bl	80019d0 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d70:	e00e      	b.n	8005d90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d72:	f7fb fe2d 	bl	80019d0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d907      	bls.n	8005d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e150      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
 8005d84:	40023800 	.word	0x40023800
 8005d88:	42470000 	.word	0x42470000
 8005d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d90:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1ea      	bne.n	8005d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8097 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dae:	4b81      	ldr	r3, [pc, #516]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10f      	bne.n	8005dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dca:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dda:	4b77      	ldr	r3, [pc, #476]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d118      	bne.n	8005e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005de6:	4b74      	ldr	r3, [pc, #464]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a73      	ldr	r2, [pc, #460]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df2:	f7fb fded 	bl	80019d0 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fb fde9 	bl	80019d0 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e10c      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fb8 <HAL_RCC_OscConfig+0x474>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f0      	beq.n	8005dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x2ea>
 8005e20:	4b64      	ldr	r3, [pc, #400]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e24:	4a63      	ldr	r2, [pc, #396]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2c:	e01c      	b.n	8005e68 <HAL_RCC_OscConfig+0x324>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x30c>
 8005e36:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	f043 0304 	orr.w	r3, r3, #4
 8005e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e42:	4b5c      	ldr	r3, [pc, #368]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	4a5b      	ldr	r2, [pc, #364]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCC_OscConfig+0x324>
 8005e50:	4b58      	ldr	r3, [pc, #352]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e54:	4a57      	ldr	r2, [pc, #348]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5c:	4b55      	ldr	r3, [pc, #340]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e60:	4a54      	ldr	r2, [pc, #336]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e62:	f023 0304 	bic.w	r3, r3, #4
 8005e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7fb fdae 	bl	80019d0 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	e00a      	b.n	8005e8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fb fdaa 	bl	80019d0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0cb      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8e:	4b49      	ldr	r3, [pc, #292]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ee      	beq.n	8005e78 <HAL_RCC_OscConfig+0x334>
 8005e9a:	e014      	b.n	8005ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9c:	f7fb fd98 	bl	80019d0 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fb fd94 	bl	80019d0 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e0b5      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eba:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1ee      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ecc:	4b39      	ldr	r3, [pc, #228]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed0:	4a38      	ldr	r2, [pc, #224]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a1 	beq.w	8006024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ee2:	4b34      	ldr	r3, [pc, #208]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d05c      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d141      	bne.n	8005f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef6:	4b31      	ldr	r3, [pc, #196]	@ (8005fbc <HAL_RCC_OscConfig+0x478>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fb fd68 	bl	80019d0 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fb fd64 	bl	80019d0 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e087      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	019b      	lsls	r3, r3, #6
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	491b      	ldr	r1, [pc, #108]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <HAL_RCC_OscConfig+0x478>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f52:	f7fb fd3d 	bl	80019d0 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5a:	f7fb fd39 	bl	80019d0 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e05c      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6c:	4b11      	ldr	r3, [pc, #68]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x416>
 8005f78:	e054      	b.n	8006024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7a:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <HAL_RCC_OscConfig+0x478>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fb fd26 	bl	80019d0 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f88:	f7fb fd22 	bl	80019d0 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e045      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x444>
 8005fa6:	e03d      	b.n	8006024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e038      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	40007000 	.word	0x40007000
 8005fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_RCC_OscConfig+0x4ec>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d028      	beq.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d121      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d11a      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d111      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	3b01      	subs	r3, #1
 800600a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d107      	bne.n	8006020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800

08006034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0cc      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006048:	4b68      	ldr	r3, [pc, #416]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d90c      	bls.n	8006070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006056:	4b65      	ldr	r3, [pc, #404]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b63      	ldr	r3, [pc, #396]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0b8      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006088:	4b59      	ldr	r3, [pc, #356]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a58      	ldr	r2, [pc, #352]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060a0:	4b53      	ldr	r3, [pc, #332]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a52      	ldr	r2, [pc, #328]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ac:	4b50      	ldr	r3, [pc, #320]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	494d      	ldr	r1, [pc, #308]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d044      	beq.n	8006154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d107      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	4b47      	ldr	r3, [pc, #284]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d119      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d003      	beq.n	80060f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d107      	bne.n	8006102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f2:	4b3f      	ldr	r3, [pc, #252]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006102:	4b3b      	ldr	r3, [pc, #236]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e067      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006112:	4b37      	ldr	r3, [pc, #220]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4934      	ldr	r1, [pc, #208]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	4313      	orrs	r3, r2
 8006122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006124:	f7fb fc54 	bl	80019d0 <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612a:	e00a      	b.n	8006142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800612c:	f7fb fc50 	bl	80019d0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e04f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006142:	4b2b      	ldr	r3, [pc, #172]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 020c 	and.w	r2, r3, #12
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	429a      	cmp	r2, r3
 8006152:	d1eb      	bne.n	800612c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006154:	4b25      	ldr	r3, [pc, #148]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d20c      	bcs.n	800617c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006162:	4b22      	ldr	r3, [pc, #136]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b20      	ldr	r3, [pc, #128]	@ (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e032      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	4b19      	ldr	r3, [pc, #100]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4916      	ldr	r1, [pc, #88]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061a6:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	490e      	ldr	r1, [pc, #56]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ba:	f000 f821 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	490a      	ldr	r1, [pc, #40]	@ (80061f4 <HAL_RCC_ClockConfig+0x1c0>)
 80061cc:	5ccb      	ldrb	r3, [r1, r3]
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fb fbb4 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023c00 	.word	0x40023c00
 80061f0:	40023800 	.word	0x40023800
 80061f4:	08009d10 	.word	0x08009d10
 80061f8:	20000004 	.word	0x20000004
 80061fc:	20000010 	.word	0x20000010

08006200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b094      	sub	sp, #80	@ 0x50
 8006206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006218:	4b79      	ldr	r3, [pc, #484]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d00d      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x40>
 8006224:	2b08      	cmp	r3, #8
 8006226:	f200 80e1 	bhi.w	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x34>
 800622e:	2b04      	cmp	r3, #4
 8006230:	d003      	beq.n	800623a <HAL_RCC_GetSysClockFreq+0x3a>
 8006232:	e0db      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006234:	4b73      	ldr	r3, [pc, #460]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 8006236:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006238:	e0db      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800623a:	4b73      	ldr	r3, [pc, #460]	@ (8006408 <HAL_RCC_GetSysClockFreq+0x208>)
 800623c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800623e:	e0d8      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006240:	4b6f      	ldr	r3, [pc, #444]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d063      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006256:	4b6a      	ldr	r3, [pc, #424]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	099b      	lsrs	r3, r3, #6
 800625c:	2200      	movs	r2, #0
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006260:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006268:	633b      	str	r3, [r7, #48]	@ 0x30
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	f04f 0000 	mov.w	r0, #0
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	0159      	lsls	r1, r3, #5
 8006280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006284:	0150      	lsls	r0, r2, #5
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4621      	mov	r1, r4
 800628c:	1a51      	subs	r1, r2, r1
 800628e:	6139      	str	r1, [r7, #16]
 8006290:	4629      	mov	r1, r5
 8006292:	eb63 0301 	sbc.w	r3, r3, r1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a4:	4659      	mov	r1, fp
 80062a6:	018b      	lsls	r3, r1, #6
 80062a8:	4651      	mov	r1, sl
 80062aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ae:	4651      	mov	r1, sl
 80062b0:	018a      	lsls	r2, r1, #6
 80062b2:	4651      	mov	r1, sl
 80062b4:	ebb2 0801 	subs.w	r8, r2, r1
 80062b8:	4659      	mov	r1, fp
 80062ba:	eb63 0901 	sbc.w	r9, r3, r1
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062d2:	4690      	mov	r8, r2
 80062d4:	4699      	mov	r9, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	eb18 0303 	adds.w	r3, r8, r3
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	462b      	mov	r3, r5
 80062e0:	eb49 0303 	adc.w	r3, r9, r3
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062f2:	4629      	mov	r1, r5
 80062f4:	024b      	lsls	r3, r1, #9
 80062f6:	4621      	mov	r1, r4
 80062f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062fc:	4621      	mov	r1, r4
 80062fe:	024a      	lsls	r2, r1, #9
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006306:	2200      	movs	r2, #0
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800630a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800630c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006310:	f7f9 ff5a 	bl	80001c8 <__aeabi_uldivmod>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4613      	mov	r3, r2
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	e058      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631e:	4b38      	ldr	r3, [pc, #224]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	2200      	movs	r2, #0
 8006326:	4618      	mov	r0, r3
 8006328:	4611      	mov	r1, r2
 800632a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	f04f 0000 	mov.w	r0, #0
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	0159      	lsls	r1, r3, #5
 8006346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800634a:	0150      	lsls	r0, r2, #5
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4641      	mov	r1, r8
 8006352:	ebb2 0a01 	subs.w	sl, r2, r1
 8006356:	4649      	mov	r1, r9
 8006358:	eb63 0b01 	sbc.w	fp, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800636c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006370:	ebb2 040a 	subs.w	r4, r2, sl
 8006374:	eb63 050b 	sbc.w	r5, r3, fp
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	00eb      	lsls	r3, r5, #3
 8006382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006386:	00e2      	lsls	r2, r4, #3
 8006388:	4614      	mov	r4, r2
 800638a:	461d      	mov	r5, r3
 800638c:	4643      	mov	r3, r8
 800638e:	18e3      	adds	r3, r4, r3
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	464b      	mov	r3, r9
 8006394:	eb45 0303 	adc.w	r3, r5, r3
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063a6:	4629      	mov	r1, r5
 80063a8:	028b      	lsls	r3, r1, #10
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b0:	4621      	mov	r1, r4
 80063b2:	028a      	lsls	r2, r1, #10
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ba:	2200      	movs	r2, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	61fa      	str	r2, [r7, #28]
 80063c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c4:	f7f9 ff00 	bl	80001c8 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 80063ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3750      	adds	r7, #80	@ 0x50
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fe:	bf00      	nop
 8006400:	40023800 	.word	0x40023800
 8006404:	00f42400 	.word	0x00f42400
 8006408:	007a1200 	.word	0x007a1200

0800640c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000004 	.word	0x20000004

08006424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006428:	f7ff fff0 	bl	800640c <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b05      	ldr	r3, [pc, #20]	@ (8006444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	0a9b      	lsrs	r3, r3, #10
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4903      	ldr	r1, [pc, #12]	@ (8006448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40023800 	.word	0x40023800
 8006448:	08009d20 	.word	0x08009d20

0800644c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006450:	f7ff ffdc 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8006454:	4602      	mov	r2, r0
 8006456:	4b05      	ldr	r3, [pc, #20]	@ (800646c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	0b5b      	lsrs	r3, r3, #13
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	4903      	ldr	r1, [pc, #12]	@ (8006470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006462:	5ccb      	ldrb	r3, [r1, r3]
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40023800 	.word	0x40023800
 8006470:	08009d20 	.word	0x08009d20

08006474 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006498:	2b00      	cmp	r3, #0
 800649a:	d035      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800649c:	4b62      	ldr	r3, [pc, #392]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064a2:	f7fb fa95 	bl	80019d0 <HAL_GetTick>
 80064a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a8:	e008      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064aa:	f7fb fa91 	bl	80019d0 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e0b0      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064bc:	4b5b      	ldr	r3, [pc, #364]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	019a      	lsls	r2, r3, #6
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	071b      	lsls	r3, r3, #28
 80064d4:	4955      	ldr	r1, [pc, #340]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064dc:	4b52      	ldr	r3, [pc, #328]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064e2:	f7fb fa75 	bl	80019d0 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064e8:	e008      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064ea:	f7fb fa71 	bl	80019d0 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e090      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064fc:	4b4b      	ldr	r3, [pc, #300]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8083 	beq.w	800661c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	4b44      	ldr	r3, [pc, #272]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	4a43      	ldr	r2, [pc, #268]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006524:	6413      	str	r3, [r2, #64]	@ 0x40
 8006526:	4b41      	ldr	r3, [pc, #260]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006532:	4b3f      	ldr	r3, [pc, #252]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a3e      	ldr	r2, [pc, #248]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800653c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800653e:	f7fb fa47 	bl	80019d0 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006544:	e008      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006546:	f7fb fa43 	bl	80019d0 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e062      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0f0      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006564:	4b31      	ldr	r3, [pc, #196]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800656c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d02f      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d028      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006582:	4b2a      	ldr	r3, [pc, #168]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800658c:	4b29      	ldr	r3, [pc, #164]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006592:	4b28      	ldr	r3, [pc, #160]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006598:	4a24      	ldr	r2, [pc, #144]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800659e:	4b23      	ldr	r3, [pc, #140]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d114      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065aa:	f7fb fa11 	bl	80019d0 <HAL_GetTick>
 80065ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b0:	e00a      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b2:	f7fb fa0d 	bl	80019d0 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e02a      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c8:	4b18      	ldr	r3, [pc, #96]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ee      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e0:	d10d      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80065e2:	4b12      	ldr	r3, [pc, #72]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f6:	490d      	ldr	r1, [pc, #52]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]
 80065fc:	e005      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065fe:	4b0b      	ldr	r3, [pc, #44]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006604:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006608:	6093      	str	r3, [r2, #8]
 800660a:	4b08      	ldr	r3, [pc, #32]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800660c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	4905      	ldr	r1, [pc, #20]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	42470068 	.word	0x42470068
 800662c:	40023800 	.word	0x40023800
 8006630:	40007000 	.word	0x40007000
 8006634:	42470e40 	.word	0x42470e40

08006638 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d13f      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006656:	4b24      	ldr	r3, [pc, #144]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800665e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800666c:	d12f      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800666e:	4b1f      	ldr	r3, [pc, #124]	@ (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006670:	617b      	str	r3, [r7, #20]
          break;
 8006672:	e02f      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006674:	4b1c      	ldr	r3, [pc, #112]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800667c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006680:	d108      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006682:	4b19      	ldr	r3, [pc, #100]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800668a:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e007      	b.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006694:	4b14      	ldr	r3, [pc, #80]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800669c:	4a15      	ldr	r2, [pc, #84]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80066a4:	4b10      	ldr	r3, [pc, #64]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066aa:	099b      	lsrs	r3, r3, #6
 80066ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066be:	0f1b      	lsrs	r3, r3, #28
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	617b      	str	r3, [r7, #20]
          break;
 80066cc:	e002      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
          break;
 80066d2:	bf00      	nop
        }
      }
      break;
 80066d4:	e000      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80066d6:	bf00      	nop
    }
  }
  return frequency;
 80066d8:	697b      	ldr	r3, [r7, #20]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40023800 	.word	0x40023800
 80066ec:	00bb8000 	.word	0x00bb8000
 80066f0:	007a1200 	.word	0x007a1200
 80066f4:	00f42400 	.word	0x00f42400

080066f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e07b      	b.n	8006802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	d108      	bne.n	8006724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671a:	d009      	beq.n	8006730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	61da      	str	r2, [r3, #28]
 8006722:	e005      	b.n	8006730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fa fc0e 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b4:	ea42 0103 	orr.w	r1, r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	f003 0104 	and.w	r1, r3, #4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	f003 0210 	and.w	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e042      	b.n	80068a2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fa fcc7 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2224      	movs	r2, #36	@ 0x24
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800684c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fc86 	bl	8007160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006862:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006872:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006882:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b0ba      	sub	sp, #232	@ 0xe8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10f      	bne.n	8006912 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <HAL_UART_IRQHandler+0x66>
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fb69 	bl	8006fe2 <UART_Receive_IT>
      return;
 8006910:	e25b      	b.n	8006dca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80de 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x22c>
 800691c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80d1 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <HAL_UART_IRQHandler+0xae>
 8006942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006952:	f043 0201 	orr.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <HAL_UART_IRQHandler+0xd2>
 8006966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006976:	f043 0202 	orr.w	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_UART_IRQHandler+0xf6>
 800698a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800699a:	f043 0204 	orr.w	r2, r3, #4
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d011      	beq.n	80069d2 <HAL_UART_IRQHandler+0x126>
 80069ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ca:	f043 0208 	orr.w	r2, r3, #8
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 81f2 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_UART_IRQHandler+0x14e>
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 faf4 	bl	8006fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <HAL_UART_IRQHandler+0x17a>
 8006a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d04f      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9fc 	bl	8006e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a36:	2b40      	cmp	r3, #64	@ 0x40
 8006a38:	d141      	bne.n	8006abe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1d9      	bne.n	8006a3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d013      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a92:	4a7e      	ldr	r2, [pc, #504]	@ (8006c8c <HAL_UART_IRQHandler+0x3e0>)
 8006a94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fb fa9e 	bl	8001fdc <HAL_DMA_Abort_IT>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d016      	beq.n	8006ad4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	e00e      	b.n	8006ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f99e 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abc:	e00a      	b.n	8006ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f99a 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	e006      	b.n	8006ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f996 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ad2:	e175      	b.n	8006dc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad4:	bf00      	nop
    return;
 8006ad6:	e173      	b.n	8006dc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	f040 814f 	bne.w	8006d80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f003 0310 	and.w	r3, r3, #16
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8148 	beq.w	8006d80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8141 	beq.w	8006d80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	f040 80b6 	bne.w	8006c90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8145 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b42:	429a      	cmp	r2, r3
 8006b44:	f080 813e 	bcs.w	8006dc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b5a:	f000 8088 	beq.w	8006c6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1d9      	bne.n	8006b5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3314      	adds	r3, #20
 8006bb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e1      	bne.n	8006baa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3314      	adds	r3, #20
 8006bec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3314      	adds	r3, #20
 8006c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e3      	bne.n	8006be6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	330c      	adds	r3, #12
 8006c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3e:	f023 0310 	bic.w	r3, r3, #16
 8006c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e3      	bne.n	8006c2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fb f947 	bl	8001efc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f8c1 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c8a:	e09b      	b.n	8006dc4 <HAL_UART_IRQHandler+0x518>
 8006c8c:	08006eeb 	.word	0x08006eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 808e 	beq.w	8006dc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8089 	beq.w	8006dc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cda:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e3      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d12:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e3      	bne.n	8006cee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0310 	bic.w	r3, r3, #16
 8006d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d58:	61fa      	str	r2, [r7, #28]
 8006d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	617b      	str	r3, [r7, #20]
   return(result);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e3      	bne.n	8006d34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f847 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d7e:	e023      	b.n	8006dc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <HAL_UART_IRQHandler+0x4f4>
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f8ba 	bl	8006f12 <UART_Transmit_IT>
    return;
 8006d9e:	e014      	b.n	8006dca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00e      	beq.n	8006dca <HAL_UART_IRQHandler+0x51e>
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d008      	beq.n	8006dca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8fa 	bl	8006fb2 <UART_EndTransmit_IT>
    return;
 8006dbe:	e004      	b.n	8006dca <HAL_UART_IRQHandler+0x51e>
    return;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <HAL_UART_IRQHandler+0x51e>
      return;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HAL_UART_IRQHandler+0x51e>
      return;
 8006dc8:	bf00      	nop
  }
}
 8006dca:	37e8      	adds	r7, #232	@ 0xe8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b095      	sub	sp, #84	@ 0x54
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d119      	bne.n	8006ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ebc:	61ba      	str	r2, [r7, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ede:	bf00      	nop
 8006ee0:	3754      	adds	r7, #84	@ 0x54
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff ff77 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b21      	cmp	r3, #33	@ 0x21
 8006f24:	d13e      	bne.n	8006fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f2e:	d114      	bne.n	8006f5a <UART_Transmit_IT+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]
 8006f58:	e008      	b.n	8006f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6211      	str	r1, [r2, #32]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fefc 	bl	8006dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	@ 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b22      	cmp	r3, #34	@ 0x22
 8006ff4:	f040 80ae 	bne.w	8007154 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007000:	d117      	bne.n	8007032 <UART_Receive_IT+0x50>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d113      	bne.n	8007032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	b29a      	uxth	r2, r3
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007030:	e026      	b.n	8007080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007044:	d007      	beq.n	8007056 <UART_Receive_IT+0x74>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <UART_Receive_IT+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e008      	b.n	8007076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007090:	2b00      	cmp	r3, #0
 8007092:	d15d      	bne.n	8007150 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0220 	bic.w	r2, r2, #32
 80070a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d135      	bne.n	8007146 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	613b      	str	r3, [r7, #16]
   return(result);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 0310 	bic.w	r3, r3, #16
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007100:	623a      	str	r2, [r7, #32]
 8007102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	61bb      	str	r3, [r7, #24]
   return(result);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d10a      	bne.n	8007138 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fe64 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
 8007144:	e002      	b.n	800714c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fe4c 	bl	8006de4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e002      	b.n	8007156 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3730      	adds	r7, #48	@ 0x30
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007164:	b0c0      	sub	sp, #256	@ 0x100
 8007166:	af00      	add	r7, sp, #0
 8007168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	68d9      	ldr	r1, [r3, #12]
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	ea40 0301 	orr.w	r3, r0, r1
 8007188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	431a      	orrs	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	431a      	orrs	r2, r3
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071b8:	f021 010c 	bic.w	r1, r1, #12
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071c6:	430b      	orrs	r3, r1
 80071c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071da:	6999      	ldr	r1, [r3, #24]
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	ea40 0301 	orr.w	r3, r0, r1
 80071e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b8f      	ldr	r3, [pc, #572]	@ (800742c <UART_SetConfig+0x2cc>)
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d005      	beq.n	8007200 <UART_SetConfig+0xa0>
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007430 <UART_SetConfig+0x2d0>)
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d104      	bne.n	800720a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7ff f924 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 8007204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007208:	e003      	b.n	8007212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800720a:	f7ff f90b 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 800720e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800721c:	f040 810c 	bne.w	8007438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800722a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800722e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007232:	4622      	mov	r2, r4
 8007234:	462b      	mov	r3, r5
 8007236:	1891      	adds	r1, r2, r2
 8007238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800723a:	415b      	adcs	r3, r3
 800723c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800723e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007242:	4621      	mov	r1, r4
 8007244:	eb12 0801 	adds.w	r8, r2, r1
 8007248:	4629      	mov	r1, r5
 800724a:	eb43 0901 	adc.w	r9, r3, r1
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800725a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800725e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007262:	4690      	mov	r8, r2
 8007264:	4699      	mov	r9, r3
 8007266:	4623      	mov	r3, r4
 8007268:	eb18 0303 	adds.w	r3, r8, r3
 800726c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007270:	462b      	mov	r3, r5
 8007272:	eb49 0303 	adc.w	r3, r9, r3
 8007276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800728a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800728e:	460b      	mov	r3, r1
 8007290:	18db      	adds	r3, r3, r3
 8007292:	653b      	str	r3, [r7, #80]	@ 0x50
 8007294:	4613      	mov	r3, r2
 8007296:	eb42 0303 	adc.w	r3, r2, r3
 800729a:	657b      	str	r3, [r7, #84]	@ 0x54
 800729c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072a4:	f7f8 ff90 	bl	80001c8 <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b61      	ldr	r3, [pc, #388]	@ (8007434 <UART_SetConfig+0x2d4>)
 80072ae:	fba3 2302 	umull	r2, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	011c      	lsls	r4, r3, #4
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072d0:	415b      	adcs	r3, r3
 80072d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072d8:	4641      	mov	r1, r8
 80072da:	eb12 0a01 	adds.w	sl, r2, r1
 80072de:	4649      	mov	r1, r9
 80072e0:	eb43 0b01 	adc.w	fp, r3, r1
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f8:	4692      	mov	sl, r2
 80072fa:	469b      	mov	fp, r3
 80072fc:	4643      	mov	r3, r8
 80072fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007306:	464b      	mov	r3, r9
 8007308:	eb4b 0303 	adc.w	r3, fp, r3
 800730c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800731c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007324:	460b      	mov	r3, r1
 8007326:	18db      	adds	r3, r3, r3
 8007328:	643b      	str	r3, [r7, #64]	@ 0x40
 800732a:	4613      	mov	r3, r2
 800732c:	eb42 0303 	adc.w	r3, r2, r3
 8007330:	647b      	str	r3, [r7, #68]	@ 0x44
 8007332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800733a:	f7f8 ff45 	bl	80001c8 <__aeabi_uldivmod>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4611      	mov	r1, r2
 8007344:	4b3b      	ldr	r3, [pc, #236]	@ (8007434 <UART_SetConfig+0x2d4>)
 8007346:	fba3 2301 	umull	r2, r3, r3, r1
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	2264      	movs	r2, #100	@ 0x64
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	1acb      	subs	r3, r1, r3
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800735a:	4b36      	ldr	r3, [pc, #216]	@ (8007434 <UART_SetConfig+0x2d4>)
 800735c:	fba3 2302 	umull	r2, r3, r3, r2
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007368:	441c      	add	r4, r3
 800736a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007384:	415b      	adcs	r3, r3
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800738c:	4641      	mov	r1, r8
 800738e:	1851      	adds	r1, r2, r1
 8007390:	6339      	str	r1, [r7, #48]	@ 0x30
 8007392:	4649      	mov	r1, r9
 8007394:	414b      	adcs	r3, r1
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073a4:	4659      	mov	r1, fp
 80073a6:	00cb      	lsls	r3, r1, #3
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ae:	4651      	mov	r1, sl
 80073b0:	00ca      	lsls	r2, r1, #3
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	4642      	mov	r2, r8
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073c0:	464b      	mov	r3, r9
 80073c2:	460a      	mov	r2, r1
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073e0:	460b      	mov	r3, r1
 80073e2:	18db      	adds	r3, r3, r3
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e6:	4613      	mov	r3, r2
 80073e8:	eb42 0303 	adc.w	r3, r2, r3
 80073ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073f6:	f7f8 fee7 	bl	80001c8 <__aeabi_uldivmod>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <UART_SetConfig+0x2d4>)
 8007400:	fba3 1302 	umull	r1, r3, r3, r2
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	2164      	movs	r1, #100	@ 0x64
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	3332      	adds	r3, #50	@ 0x32
 8007412:	4a08      	ldr	r2, [pc, #32]	@ (8007434 <UART_SetConfig+0x2d4>)
 8007414:	fba2 2303 	umull	r2, r3, r2, r3
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f003 0207 	and.w	r2, r3, #7
 800741e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4422      	add	r2, r4
 8007426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007428:	e106      	b.n	8007638 <UART_SetConfig+0x4d8>
 800742a:	bf00      	nop
 800742c:	40011000 	.word	0x40011000
 8007430:	40011400 	.word	0x40011400
 8007434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743c:	2200      	movs	r2, #0
 800743e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800744a:	4642      	mov	r2, r8
 800744c:	464b      	mov	r3, r9
 800744e:	1891      	adds	r1, r2, r2
 8007450:	6239      	str	r1, [r7, #32]
 8007452:	415b      	adcs	r3, r3
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
 8007456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800745a:	4641      	mov	r1, r8
 800745c:	1854      	adds	r4, r2, r1
 800745e:	4649      	mov	r1, r9
 8007460:	eb43 0501 	adc.w	r5, r3, r1
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	00eb      	lsls	r3, r5, #3
 800746e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007472:	00e2      	lsls	r2, r4, #3
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	4643      	mov	r3, r8
 800747a:	18e3      	adds	r3, r4, r3
 800747c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007480:	464b      	mov	r3, r9
 8007482:	eb45 0303 	adc.w	r3, r5, r3
 8007486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074a6:	4629      	mov	r1, r5
 80074a8:	008b      	lsls	r3, r1, #2
 80074aa:	4621      	mov	r1, r4
 80074ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074b0:	4621      	mov	r1, r4
 80074b2:	008a      	lsls	r2, r1, #2
 80074b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074b8:	f7f8 fe86 	bl	80001c8 <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4b60      	ldr	r3, [pc, #384]	@ (8007644 <UART_SetConfig+0x4e4>)
 80074c2:	fba3 2302 	umull	r2, r3, r3, r2
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	011c      	lsls	r4, r3, #4
 80074ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	1891      	adds	r1, r2, r2
 80074e2:	61b9      	str	r1, [r7, #24]
 80074e4:	415b      	adcs	r3, r3
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ec:	4641      	mov	r1, r8
 80074ee:	1851      	adds	r1, r2, r1
 80074f0:	6139      	str	r1, [r7, #16]
 80074f2:	4649      	mov	r1, r9
 80074f4:	414b      	adcs	r3, r1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007504:	4659      	mov	r1, fp
 8007506:	00cb      	lsls	r3, r1, #3
 8007508:	4651      	mov	r1, sl
 800750a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800750e:	4651      	mov	r1, sl
 8007510:	00ca      	lsls	r2, r1, #3
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	4603      	mov	r3, r0
 8007518:	4642      	mov	r2, r8
 800751a:	189b      	adds	r3, r3, r2
 800751c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007520:	464b      	mov	r3, r9
 8007522:	460a      	mov	r2, r1
 8007524:	eb42 0303 	adc.w	r3, r2, r3
 8007528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007544:	4649      	mov	r1, r9
 8007546:	008b      	lsls	r3, r1, #2
 8007548:	4641      	mov	r1, r8
 800754a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754e:	4641      	mov	r1, r8
 8007550:	008a      	lsls	r2, r1, #2
 8007552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007556:	f7f8 fe37 	bl	80001c8 <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4611      	mov	r1, r2
 8007560:	4b38      	ldr	r3, [pc, #224]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007562:	fba3 2301 	umull	r2, r3, r3, r1
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2264      	movs	r2, #100	@ 0x64
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	1acb      	subs	r3, r1, r3
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	3332      	adds	r3, #50	@ 0x32
 8007574:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007580:	441c      	add	r4, r3
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007586:	2200      	movs	r2, #0
 8007588:	673b      	str	r3, [r7, #112]	@ 0x70
 800758a:	677a      	str	r2, [r7, #116]	@ 0x74
 800758c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	1891      	adds	r1, r2, r2
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	415b      	adcs	r3, r3
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075a0:	4641      	mov	r1, r8
 80075a2:	1851      	adds	r1, r2, r1
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	4649      	mov	r1, r9
 80075a8:	414b      	adcs	r3, r1
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075b8:	4659      	mov	r1, fp
 80075ba:	00cb      	lsls	r3, r1, #3
 80075bc:	4651      	mov	r1, sl
 80075be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c2:	4651      	mov	r1, sl
 80075c4:	00ca      	lsls	r2, r1, #3
 80075c6:	4610      	mov	r0, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	4642      	mov	r2, r8
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d2:	464b      	mov	r3, r9
 80075d4:	460a      	mov	r2, r1
 80075d6:	eb42 0303 	adc.w	r3, r2, r3
 80075da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075f4:	4649      	mov	r1, r9
 80075f6:	008b      	lsls	r3, r1, #2
 80075f8:	4641      	mov	r1, r8
 80075fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fe:	4641      	mov	r1, r8
 8007600:	008a      	lsls	r2, r1, #2
 8007602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007606:	f7f8 fddf 	bl	80001c8 <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007610:	fba3 1302 	umull	r1, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	2164      	movs	r1, #100	@ 0x64
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	3332      	adds	r3, #50	@ 0x32
 8007622:	4a08      	ldr	r2, [pc, #32]	@ (8007644 <UART_SetConfig+0x4e4>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4422      	add	r2, r4
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800763e:	46bd      	mov	sp, r7
 8007640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007644:	51eb851f 	.word	0x51eb851f

08007648 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800764c:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 800764e:	2200      	movs	r2, #0
 8007650:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007652:	4b0f      	ldr	r3, [pc, #60]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 8007654:	2201      	movs	r2, #1
 8007656:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007658:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 800765a:	4a0e      	ldr	r2, [pc, #56]	@ (8007694 <MX_PDM2PCM_Init+0x4c>)
 800765c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800765e:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 8007660:	2201      	movs	r2, #1
 8007662:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8007664:	4b0a      	ldr	r3, [pc, #40]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 8007666:	2201      	movs	r2, #1
 8007668:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800766a:	4809      	ldr	r0, [pc, #36]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 800766c:	f001 fd38 	bl	80090e0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007670:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <MX_PDM2PCM_Init+0x50>)
 8007672:	2202      	movs	r2, #2
 8007674:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007676:	4b08      	ldr	r3, [pc, #32]	@ (8007698 <MX_PDM2PCM_Init+0x50>)
 8007678:	2210      	movs	r2, #16
 800767a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <MX_PDM2PCM_Init+0x50>)
 800767e:	2200      	movs	r2, #0
 8007680:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007682:	4905      	ldr	r1, [pc, #20]	@ (8007698 <MX_PDM2PCM_Init+0x50>)
 8007684:	4802      	ldr	r0, [pc, #8]	@ (8007690 <MX_PDM2PCM_Init+0x48>)
 8007686:	f001 fdfb 	bl	8009280 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800768a:	bf00      	nop
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20003b90 	.word	0x20003b90
 8007694:	7d70a3d6 	.word	0x7d70a3d6
 8007698:	20003bdc 	.word	0x20003bdc

0800769c <MX_PDM2PCM_Process>:

/* USER CODE BEGIN 4 */

/* process function */
uint8_t MX_PDM2PCM_Process(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  // La librería PDM a menudo espera uint8_t* para la entrada PDM (ya que son bits empaquetados)
  // y int16_t* para la salida PCM (audio con signo).

  // Ajusta los casts según la firma exacta de PDM_Filter en tu pdm_filter.h.
  // Es muy común que la entrada PDM sea (uint8_t*) y la salida PCM (int16_t*).
  PDM_Filter((uint8_t*)PDMBuf, (int16_t*)PCMBuf, &PDM1_filter_handler);
 80076a6:	4a05      	ldr	r2, [pc, #20]	@ (80076bc <MX_PDM2PCM_Process+0x20>)
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 feee 	bl	800948c <PDM_Filter>

  // Si la función PDM_Filter no devuelve un código de error, asumimos éxito.
  return 0; // Retorna 0 para éxito (AUDIO_OK)
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20003b90 	.word	0x20003b90

080076c0 <D16_GENERIC>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 80076c8:	b089      	sub	sp, #36	@ 0x24
 80076ca:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80076cc:	6993      	ldr	r3, [r2, #24]
 80076ce:	9406      	str	r4, [sp, #24]
 80076d0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80076d2:	9307      	str	r3, [sp, #28]
 80076d4:	9402      	str	r4, [sp, #8]
 80076d6:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 80076da:	69d3      	ldr	r3, [r2, #28]
 80076dc:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80076de:	9103      	str	r1, [sp, #12]
 80076e0:	2d00      	cmp	r5, #0
 80076e2:	d066      	beq.n	80077b2 <D16_GENERIC+0xf2>
 80076e4:	f004 0520 	and.w	r5, r4, #32
 80076e8:	f004 0410 	and.w	r4, r4, #16
 80076ec:	9505      	str	r5, [sp, #20]
 80076ee:	4937      	ldr	r1, [pc, #220]	@ (80077cc <D16_GENERIC+0x10c>)
 80076f0:	9404      	str	r4, [sp, #16]
 80076f2:	f04f 0c00 	mov.w	ip, #0
 80076f6:	4635      	mov	r5, r6
 80076f8:	e04f      	b.n	800779a <D16_GENERIC+0xda>
 80076fa:	5d87      	ldrb	r7, [r0, r6]
 80076fc:	7804      	ldrb	r4, [r0, #0]
 80076fe:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007702:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8007706:	b2e6      	uxtb	r6, r4
 8007708:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800770c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007710:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007714:	4433      	add	r3, r6
 8007716:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800771a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800771e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007722:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8007726:	0aa3      	lsrs	r3, r4, #10
 8007728:	4c29      	ldr	r4, [pc, #164]	@ (80077d0 <D16_GENERIC+0x110>)
 800772a:	fb26 5404 	smlad	r4, r6, r4, r5
 800772e:	4d29      	ldr	r5, [pc, #164]	@ (80077d4 <D16_GENERIC+0x114>)
 8007730:	fb26 f505 	smuad	r5, r6, r5
 8007734:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8007738:	eb04 080a 	add.w	r8, r4, sl
 800773c:	eba8 080b 	sub.w	r8, r8, fp
 8007740:	4646      	mov	r6, r8
 8007742:	17f7      	asrs	r7, r6, #31
 8007744:	e9cd 6700 	strd	r6, r7, [sp]
 8007748:	9e04      	ldr	r6, [sp, #16]
 800774a:	f10c 0e01 	add.w	lr, ip, #1
 800774e:	b16e      	cbz	r6, 800776c <D16_GENERIC+0xac>
 8007750:	6a16      	ldr	r6, [r2, #32]
 8007752:	9f01      	ldr	r7, [sp, #4]
 8007754:	fba8 ab06 	umull	sl, fp, r8, r6
 8007758:	fb06 bb07 	mla	fp, r6, r7, fp
 800775c:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8007760:	f14b 0900 	adc.w	r9, fp, #0
 8007764:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007768:	46a3      	mov	fp, r4
 800776a:	4654      	mov	r4, sl
 800776c:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800776e:	9f02      	ldr	r7, [sp, #8]
 8007770:	0424      	lsls	r4, r4, #16
 8007772:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007776:	f04f 0900 	mov.w	r9, #0
 800777a:	fb0c fc06 	mul.w	ip, ip, r6
 800777e:	fbc7 8904 	smlal	r8, r9, r7, r4
 8007782:	9e03      	ldr	r6, [sp, #12]
 8007784:	464f      	mov	r7, r9
 8007786:	10bc      	asrs	r4, r7, #2
 8007788:	f304 040f 	ssat	r4, #16, r4
 800778c:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8007790:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007792:	fa1f fc8e 	uxth.w	ip, lr
 8007796:	4564      	cmp	r4, ip
 8007798:	d90a      	bls.n	80077b0 <D16_GENERIC+0xf0>
 800779a:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 800779c:	2c01      	cmp	r4, #1
 800779e:	b2e6      	uxtb	r6, r4
 80077a0:	d1ab      	bne.n	80076fa <D16_GENERIC+0x3a>
 80077a2:	9e05      	ldr	r6, [sp, #20]
 80077a4:	f850 4b02 	ldr.w	r4, [r0], #2
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	d0ac      	beq.n	8007706 <D16_GENERIC+0x46>
 80077ac:	ba64      	rev16	r4, r4
 80077ae:	e7aa      	b.n	8007706 <D16_GENERIC+0x46>
 80077b0:	462e      	mov	r6, r5
 80077b2:	9906      	ldr	r1, [sp, #24]
 80077b4:	61d3      	str	r3, [r2, #28]
 80077b6:	9b07      	ldr	r3, [sp, #28]
 80077b8:	6096      	str	r6, [r2, #8]
 80077ba:	2000      	movs	r0, #0
 80077bc:	60d1      	str	r1, [r2, #12]
 80077be:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 80077c2:	6193      	str	r3, [r2, #24]
 80077c4:	b009      	add	sp, #36	@ 0x24
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	bf00      	nop
 80077cc:	20000018 	.word	0x20000018
 80077d0:	00030001 	.word	0x00030001
 80077d4:	00010003 	.word	0x00010003

080077d8 <D24_GENERIC>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80077de:	6993      	ldr	r3, [r2, #24]
 80077e0:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80077e2:	b089      	sub	sp, #36	@ 0x24
 80077e4:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80077e8:	9307      	str	r3, [sp, #28]
 80077ea:	9503      	str	r5, [sp, #12]
 80077ec:	69d3      	ldr	r3, [r2, #28]
 80077ee:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80077f0:	9104      	str	r1, [sp, #16]
 80077f2:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	f000 808f 	beq.w	800791a <D24_GENERIC+0x142>
 80077fc:	f005 0620 	and.w	r6, r5, #32
 8007800:	f005 0510 	and.w	r5, r5, #16
 8007804:	4953      	ldr	r1, [pc, #332]	@ (8007954 <D24_GENERIC+0x17c>)
 8007806:	9606      	str	r6, [sp, #24]
 8007808:	9505      	str	r5, [sp, #20]
 800780a:	f04f 0c00 	mov.w	ip, #0
 800780e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007812:	e068      	b.n	80078e6 <D24_GENERIC+0x10e>
 8007814:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007818:	f810 8007 	ldrb.w	r8, [r0, r7]
 800781c:	042d      	lsls	r5, r5, #16
 800781e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007822:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8007826:	44ae      	add	lr, r5
 8007828:	4438      	add	r0, r7
 800782a:	fa5f f68e 	uxtb.w	r6, lr
 800782e:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8007832:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007836:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800783a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800783e:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8007842:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007846:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 800784a:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800784e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007852:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007856:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800785a:	4d3f      	ldr	r5, [pc, #252]	@ (8007958 <D24_GENERIC+0x180>)
 800785c:	fb26 b705 	smlad	r7, r6, r5, fp
 8007860:	4d3e      	ldr	r5, [pc, #248]	@ (800795c <D24_GENERIC+0x184>)
 8007862:	fb26 4b05 	smlad	fp, r6, r5, r4
 8007866:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800786a:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800786e:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8007872:	2401      	movs	r4, #1
 8007874:	fb26 f604 	smuad	r6, r6, r4
 8007878:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 800787c:	9f02      	ldr	r7, [sp, #8]
 800787e:	eb0c 0e04 	add.w	lr, ip, r4
 8007882:	eb08 0406 	add.w	r4, r8, r6
 8007886:	eb05 060a 	add.w	r6, r5, sl
 800788a:	1bf6      	subs	r6, r6, r7
 800788c:	4637      	mov	r7, r6
 800788e:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007892:	e9cd 7800 	strd	r7, r8, [sp]
 8007896:	9f05      	ldr	r7, [sp, #20]
 8007898:	b177      	cbz	r7, 80078b8 <D24_GENERIC+0xe0>
 800789a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800789e:	9502      	str	r5, [sp, #8]
 80078a0:	fba6 9a08 	umull	r9, sl, r6, r8
 80078a4:	9e01      	ldr	r6, [sp, #4]
 80078a6:	fb08 aa06 	mla	sl, r8, r6, sl
 80078aa:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80078ae:	f14a 0700 	adc.w	r7, sl, #0
 80078b2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80078b6:	4655      	mov	r5, sl
 80078b8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80078ba:	9f03      	ldr	r7, [sp, #12]
 80078bc:	03ad      	lsls	r5, r5, #14
 80078be:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80078c2:	f04f 0900 	mov.w	r9, #0
 80078c6:	fb0c fc06 	mul.w	ip, ip, r6
 80078ca:	fbc7 8905 	smlal	r8, r9, r7, r5
 80078ce:	9e04      	ldr	r6, [sp, #16]
 80078d0:	464f      	mov	r7, r9
 80078d2:	10bd      	asrs	r5, r7, #2
 80078d4:	f305 050f 	ssat	r5, #16, r5
 80078d8:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 80078dc:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80078de:	fa1f fc8e 	uxth.w	ip, lr
 80078e2:	4565      	cmp	r5, ip
 80078e4:	d917      	bls.n	8007916 <D24_GENERIC+0x13e>
 80078e6:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80078e8:	f890 e000 	ldrb.w	lr, [r0]
 80078ec:	b2ef      	uxtb	r7, r5
 80078ee:	2d01      	cmp	r5, #1
 80078f0:	b23e      	sxth	r6, r7
 80078f2:	d18f      	bne.n	8007814 <D24_GENERIC+0x3c>
 80078f4:	9d06      	ldr	r5, [sp, #24]
 80078f6:	b1dd      	cbz	r5, 8007930 <D24_GENERIC+0x158>
 80078f8:	78c5      	ldrb	r5, [r0, #3]
 80078fa:	ea4f 280e 	mov.w	r8, lr, lsl #8
 80078fe:	f01c 0f01 	tst.w	ip, #1
 8007902:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8007906:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 800790a:	d11b      	bne.n	8007944 <D24_GENERIC+0x16c>
 800790c:	f890 e001 	ldrb.w	lr, [r0, #1]
 8007910:	3002      	adds	r0, #2
 8007912:	44c6      	add	lr, r8
 8007914:	e789      	b.n	800782a <D24_GENERIC+0x52>
 8007916:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800791a:	61d3      	str	r3, [r2, #28]
 800791c:	9b07      	ldr	r3, [sp, #28]
 800791e:	6193      	str	r3, [r2, #24]
 8007920:	2000      	movs	r0, #0
 8007922:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8007926:	e9c2 a904 	strd	sl, r9, [r2, #16]
 800792a:	b009      	add	sp, #36	@ 0x24
 800792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007930:	f890 8001 	ldrb.w	r8, [r0, #1]
 8007934:	7885      	ldrb	r5, [r0, #2]
 8007936:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800793a:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 800793e:	44c6      	add	lr, r8
 8007940:	3003      	adds	r0, #3
 8007942:	e772      	b.n	800782a <D24_GENERIC+0x52>
 8007944:	f890 8002 	ldrb.w	r8, [r0, #2]
 8007948:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 800794c:	44c6      	add	lr, r8
 800794e:	3004      	adds	r0, #4
 8007950:	e76b      	b.n	800782a <D24_GENERIC+0x52>
 8007952:	bf00      	nop
 8007954:	20000018 	.word	0x20000018
 8007958:	00030001 	.word	0x00030001
 800795c:	00060007 	.word	0x00060007

08007960 <D32_GENERIC>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007966:	6993      	ldr	r3, [r2, #24]
 8007968:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800796a:	69d6      	ldr	r6, [r2, #28]
 800796c:	b089      	sub	sp, #36	@ 0x24
 800796e:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8007972:	9307      	str	r3, [sp, #28]
 8007974:	9403      	str	r4, [sp, #12]
 8007976:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 800797a:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800797c:	9104      	str	r1, [sp, #16]
 800797e:	2d00      	cmp	r5, #0
 8007980:	f000 809a 	beq.w	8007ab8 <D32_GENERIC+0x158>
 8007984:	f004 0520 	and.w	r5, r4, #32
 8007988:	f004 0410 	and.w	r4, r4, #16
 800798c:	9506      	str	r5, [sp, #24]
 800798e:	4951      	ldr	r1, [pc, #324]	@ (8007ad4 <D32_GENERIC+0x174>)
 8007990:	9405      	str	r4, [sp, #20]
 8007992:	f04f 0e00 	mov.w	lr, #0
 8007996:	f8cd 9008 	str.w	r9, [sp, #8]
 800799a:	461d      	mov	r5, r3
 800799c:	4617      	mov	r7, r2
 800799e:	e077      	b.n	8007a90 <D32_GENERIC+0x130>
 80079a0:	7823      	ldrb	r3, [r4, #0]
 80079a2:	f810 800c 	ldrb.w	r8, [r0, ip]
 80079a6:	f810 c002 	ldrb.w	ip, [r0, r2]
 80079aa:	7800      	ldrb	r0, [r0, #0]
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80079b2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80079b6:	4403      	add	r3, r0
 80079b8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80079bc:	b2dc      	uxtb	r4, r3
 80079be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80079c2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80079c6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80079ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80079ce:	0e1b      	lsrs	r3, r3, #24
 80079d0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80079d4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80079d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80079dc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80079e0:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 80079e4:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 80079e8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80079ec:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80079f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80079f4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80079f8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80079fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a00:	4b35      	ldr	r3, [pc, #212]	@ (8007ad8 <D32_GENERIC+0x178>)
 8007a02:	fb22 b403 	smlad	r4, r2, r3, fp
 8007a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007a0a:	fb2c 4803 	smlad	r8, ip, r3, r4
 8007a0e:	4b33      	ldr	r3, [pc, #204]	@ (8007adc <D32_GENERIC+0x17c>)
 8007a10:	fb22 5503 	smlad	r5, r2, r3, r5
 8007a14:	4b32      	ldr	r3, [pc, #200]	@ (8007ae0 <D32_GENERIC+0x180>)
 8007a16:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	fb22 f203 	smuad	r2, r2, r3
 8007a20:	4b30      	ldr	r3, [pc, #192]	@ (8007ae4 <D32_GENERIC+0x184>)
 8007a22:	fb2c 2503 	smlad	r5, ip, r3, r2
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8007a2c:	eb04 080a 	add.w	r8, r4, sl
 8007a30:	eba8 0803 	sub.w	r8, r8, r3
 8007a34:	4642      	mov	r2, r8
 8007a36:	17d3      	asrs	r3, r2, #31
 8007a38:	e9cd 2300 	strd	r2, r3, [sp]
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	f10e 0c01 	add.w	ip, lr, #1
 8007a42:	b173      	cbz	r3, 8007a62 <D32_GENERIC+0x102>
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	9b01      	ldr	r3, [sp, #4]
 8007a48:	9402      	str	r4, [sp, #8]
 8007a4a:	fba8 8902 	umull	r8, r9, r8, r2
 8007a4e:	469a      	mov	sl, r3
 8007a50:	fb02 930a 	mla	r3, r2, sl, r9
 8007a54:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8007a58:	f143 0900 	adc.w	r9, r3, #0
 8007a5c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007a60:	4654      	mov	r4, sl
 8007a62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a64:	9a04      	ldr	r2, [sp, #16]
 8007a66:	fb0e fe03 	mul.w	lr, lr, r3
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	0364      	lsls	r4, r4, #13
 8007a6e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007a72:	f04f 0900 	mov.w	r9, #0
 8007a76:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	109b      	asrs	r3, r3, #2
 8007a7e:	f303 030f 	ssat	r3, #16, r3
 8007a82:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8007a86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a88:	fa1f fe8c 	uxth.w	lr, ip
 8007a8c:	4573      	cmp	r3, lr
 8007a8e:	d90f      	bls.n	8007ab0 <D32_GENERIC+0x150>
 8007a90:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8007a9a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8007a9e:	f47f af7f 	bne.w	80079a0 <D32_GENERIC+0x40>
 8007aa2:	1d02      	adds	r2, r0, #4
 8007aa4:	6803      	ldr	r3, [r0, #0]
 8007aa6:	9806      	ldr	r0, [sp, #24]
 8007aa8:	b188      	cbz	r0, 8007ace <D32_GENERIC+0x16e>
 8007aaa:	ba5b      	rev16	r3, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	e785      	b.n	80079bc <D32_GENERIC+0x5c>
 8007ab0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007ab4:	462b      	mov	r3, r5
 8007ab6:	463a      	mov	r2, r7
 8007ab8:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	61d6      	str	r6, [r2, #28]
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8007ac6:	6193      	str	r3, [r2, #24]
 8007ac8:	b009      	add	sp, #36	@ 0x24
 8007aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ace:	4610      	mov	r0, r2
 8007ad0:	e774      	b.n	80079bc <D32_GENERIC+0x5c>
 8007ad2:	bf00      	nop
 8007ad4:	20000018 	.word	0x20000018
 8007ad8:	00060003 	.word	0x00060003
 8007adc:	000a000c 	.word	0x000a000c
 8007ae0:	000c000a 	.word	0x000c000a
 8007ae4:	00030006 	.word	0x00030006

08007ae8 <D48_GENERIC>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8007af0:	b08b      	sub	sp, #44	@ 0x2c
 8007af2:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	6993      	ldr	r3, [r2, #24]
 8007af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afa:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8007afe:	9401      	str	r4, [sp, #4]
 8007b00:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007b02:	9405      	str	r4, [sp, #20]
 8007b04:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007b08:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007b0a:	9106      	str	r1, [sp, #24]
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	f000 80c2 	beq.w	8007c96 <D48_GENERIC+0x1ae>
 8007b12:	f004 0520 	and.w	r5, r4, #32
 8007b16:	f04f 0900 	mov.w	r9, #0
 8007b1a:	f004 0410 	and.w	r4, r4, #16
 8007b1e:	9508      	str	r5, [sp, #32]
 8007b20:	4964      	ldr	r1, [pc, #400]	@ (8007cb4 <D48_GENERIC+0x1cc>)
 8007b22:	9407      	str	r4, [sp, #28]
 8007b24:	464d      	mov	r5, r9
 8007b26:	e09e      	b.n	8007c66 <D48_GENERIC+0x17e>
 8007b28:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8007b2c:	f810 b008 	ldrb.w	fp, [r0, r8]
 8007b30:	f819 8008 	ldrb.w	r8, [r9, r8]
 8007b34:	f810 9006 	ldrb.w	r9, [r0, r6]
 8007b38:	7800      	ldrb	r0, [r0, #0]
 8007b3a:	0424      	lsls	r4, r4, #16
 8007b3c:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007b40:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8007b44:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8007b48:	44be      	add	lr, r7
 8007b4a:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8007b4e:	eb0b 0700 	add.w	r7, fp, r0
 8007b52:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8007b56:	fa5f fe87 	uxtb.w	lr, r7
 8007b5a:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8007b5e:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8007b62:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007b66:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8007b6a:	0e3f      	lsrs	r7, r7, #24
 8007b6c:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8007b70:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8007b74:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8007b78:	b2e7      	uxtb	r7, r4
 8007b7a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007b7e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007b82:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007b86:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007b8a:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8007b8e:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8007b92:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007b96:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007b9a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007b9e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007ba2:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8007ba6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007baa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007bae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007bb2:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8007bb6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8007bba:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8007bbe:	4c3e      	ldr	r4, [pc, #248]	@ (8007cb8 <D48_GENERIC+0x1d0>)
 8007bc0:	9e01      	ldr	r6, [sp, #4]
 8007bc2:	fb29 6404 	smlad	r4, r9, r4, r6
 8007bc6:	4e3d      	ldr	r6, [pc, #244]	@ (8007cbc <D48_GENERIC+0x1d4>)
 8007bc8:	fb2e 4406 	smlad	r4, lr, r6, r4
 8007bcc:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007bd0:	fb27 4b06 	smlad	fp, r7, r6, r4
 8007bd4:	4c3a      	ldr	r4, [pc, #232]	@ (8007cc0 <D48_GENERIC+0x1d8>)
 8007bd6:	fb29 3304 	smlad	r3, r9, r4, r3
 8007bda:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8007bde:	fb2e 3304 	smlad	r3, lr, r4, r3
 8007be2:	4c38      	ldr	r4, [pc, #224]	@ (8007cc4 <D48_GENERIC+0x1dc>)
 8007be4:	fb27 3304 	smlad	r3, r7, r4, r3
 8007be8:	2601      	movs	r6, #1
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	fb29 f906 	smuad	r9, r9, r6
 8007bf0:	4b35      	ldr	r3, [pc, #212]	@ (8007cc8 <D48_GENERIC+0x1e0>)
 8007bf2:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8007bf6:	4b35      	ldr	r3, [pc, #212]	@ (8007ccc <D48_GENERIC+0x1e4>)
 8007bf8:	fb27 e303 	smlad	r3, r7, r3, lr
 8007bfc:	9f04      	ldr	r7, [sp, #16]
 8007bfe:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8007c02:	eb05 0e06 	add.w	lr, r5, r6
 8007c06:	eb04 060a 	add.w	r6, r4, sl
 8007c0a:	1bf6      	subs	r6, r6, r7
 8007c0c:	4637      	mov	r7, r6
 8007c0e:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007c12:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007c16:	9f07      	ldr	r7, [sp, #28]
 8007c18:	b177      	cbz	r7, 8007c38 <D48_GENERIC+0x150>
 8007c1a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007c1e:	9404      	str	r4, [sp, #16]
 8007c20:	fba6 9a08 	umull	r9, sl, r6, r8
 8007c24:	9e03      	ldr	r6, [sp, #12]
 8007c26:	fb08 aa06 	mla	sl, r8, r6, sl
 8007c2a:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007c2e:	f14a 0700 	adc.w	r7, sl, #0
 8007c32:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007c36:	4654      	mov	r4, sl
 8007c38:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007c3a:	fb05 f606 	mul.w	r6, r5, r6
 8007c3e:	9d05      	ldr	r5, [sp, #20]
 8007c40:	02e4      	lsls	r4, r4, #11
 8007c42:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	fbc5 7804 	smlal	r7, r8, r5, r4
 8007c4e:	4645      	mov	r5, r8
 8007c50:	10ac      	asrs	r4, r5, #2
 8007c52:	9d06      	ldr	r5, [sp, #24]
 8007c54:	f304 040f 	ssat	r4, #16, r4
 8007c58:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007c5c:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007c5e:	fa1f f58e 	uxth.w	r5, lr
 8007c62:	42ac      	cmp	r4, r5
 8007c64:	d917      	bls.n	8007c96 <D48_GENERIC+0x1ae>
 8007c66:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8007c68:	b2e6      	uxtb	r6, r4
 8007c6a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8007c6e:	4277      	negs	r7, r6
 8007c70:	eb00 0b08 	add.w	fp, r0, r8
 8007c74:	eb0b 0907 	add.w	r9, fp, r7
 8007c78:	2c01      	cmp	r4, #1
 8007c7a:	eb09 0e08 	add.w	lr, r9, r8
 8007c7e:	f47f af53 	bne.w	8007b28 <D48_GENERIC+0x40>
 8007c82:	9e08      	ldr	r6, [sp, #32]
 8007c84:	e9d0 7400 	ldrd	r7, r4, [r0]
 8007c88:	3006      	adds	r0, #6
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	f43f af63 	beq.w	8007b56 <D48_GENERIC+0x6e>
 8007c90:	ba7f      	rev16	r7, r7
 8007c92:	ba64      	rev16	r4, r4
 8007c94:	e75f      	b.n	8007b56 <D48_GENERIC+0x6e>
 8007c96:	6093      	str	r3, [r2, #8]
 8007c98:	9b01      	ldr	r3, [sp, #4]
 8007c9a:	60d3      	str	r3, [r2, #12]
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	6153      	str	r3, [r2, #20]
 8007ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca2:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f8c2 a010 	str.w	sl, [r2, #16]
 8007cac:	6193      	str	r3, [r2, #24]
 8007cae:	b00b      	add	sp, #44	@ 0x2c
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	20000018 	.word	0x20000018
 8007cb8:	000f000a 	.word	0x000f000a
 8007cbc:	00060003 	.word	0x00060003
 8007cc0:	00150019 	.word	0x00150019
 8007cc4:	00190015 	.word	0x00190015
 8007cc8:	00030006 	.word	0x00030006
 8007ccc:	000a000f 	.word	0x000a000f

08007cd0 <D64_GENERIC>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	b089      	sub	sp, #36	@ 0x24
 8007cd6:	6895      	ldr	r5, [r2, #8]
 8007cd8:	6913      	ldr	r3, [r2, #16]
 8007cda:	9501      	str	r5, [sp, #4]
 8007cdc:	68d5      	ldr	r5, [r2, #12]
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	9500      	str	r5, [sp, #0]
 8007ce2:	6953      	ldr	r3, [r2, #20]
 8007ce4:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8007ce6:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007ce8:	9303      	str	r3, [sp, #12]
 8007cea:	6993      	ldr	r3, [r2, #24]
 8007cec:	9307      	str	r3, [sp, #28]
 8007cee:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8007cf2:	69d3      	ldr	r3, [r2, #28]
 8007cf4:	2c00      	cmp	r4, #0
 8007cf6:	f000 80d7 	beq.w	8007ea8 <D64_GENERIC+0x1d8>
 8007cfa:	6a11      	ldr	r1, [r2, #32]
 8007cfc:	9106      	str	r1, [sp, #24]
 8007cfe:	f04f 0e00 	mov.w	lr, #0
 8007d02:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8007ee8 <D64_GENERIC+0x218>
 8007d06:	4681      	mov	r9, r0
 8007d08:	e0bf      	b.n	8007e8a <D64_GENERIC+0x1ba>
 8007d0a:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007d0e:	426c      	negs	r4, r5
 8007d10:	eb09 0708 	add.w	r7, r9, r8
 8007d14:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007d18:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8007d1c:	5d38      	ldrb	r0, [r7, r4]
 8007d1e:	5d31      	ldrb	r1, [r6, r4]
 8007d20:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007d24:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007d28:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007d2c:	f899 7000 	ldrb.w	r7, [r9]
 8007d30:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8007d34:	4426      	add	r6, r4
 8007d36:	0409      	lsls	r1, r1, #16
 8007d38:	0400      	lsls	r0, r0, #16
 8007d3a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8007d3e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007d42:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8007d46:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8007d4a:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8007d4e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8007d52:	4459      	add	r1, fp
 8007d54:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8007d58:	4438      	add	r0, r7
 8007d5a:	b2c5      	uxtb	r5, r0
 8007d5c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8007d60:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8007d64:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8007d68:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8007d6c:	0e00      	lsrs	r0, r0, #24
 8007d6e:	eb03 0806 	add.w	r8, r3, r6
 8007d72:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007d76:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8007d7a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007d7e:	b2c8      	uxtb	r0, r1
 8007d80:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007d84:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007d88:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8007d8c:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8007d90:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007d94:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007d98:	0e09      	lsrs	r1, r1, #24
 8007d9a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8007d9e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8007da2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007da6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8007daa:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8007dae:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007db2:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8007db6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007dba:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007dbe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007dc2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8007dc6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007dca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007dce:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007dd2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007dd6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8007dda:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8007dde:	0a8b      	lsrs	r3, r1, #10
 8007de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007de4:	4938      	ldr	r1, [pc, #224]	@ (8007ec8 <D64_GENERIC+0x1f8>)
 8007de6:	9c00      	ldr	r4, [sp, #0]
 8007de8:	fb28 4101 	smlad	r1, r8, r1, r4
 8007dec:	4c37      	ldr	r4, [pc, #220]	@ (8007ecc <D64_GENERIC+0x1fc>)
 8007dee:	fb27 1104 	smlad	r1, r7, r4, r1
 8007df2:	4c37      	ldr	r4, [pc, #220]	@ (8007ed0 <D64_GENERIC+0x200>)
 8007df4:	fb20 1104 	smlad	r1, r0, r4, r1
 8007df8:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007dfc:	fb2a 1106 	smlad	r1, sl, r6, r1
 8007e00:	4d34      	ldr	r5, [pc, #208]	@ (8007ed4 <D64_GENERIC+0x204>)
 8007e02:	9c01      	ldr	r4, [sp, #4]
 8007e04:	fb28 4405 	smlad	r4, r8, r5, r4
 8007e08:	fb2a 4415 	smladx	r4, sl, r5, r4
 8007e0c:	4d32      	ldr	r5, [pc, #200]	@ (8007ed8 <D64_GENERIC+0x208>)
 8007e0e:	fb27 4405 	smlad	r4, r7, r5, r4
 8007e12:	fb20 4415 	smladx	r4, r0, r5, r4
 8007e16:	2501      	movs	r5, #1
 8007e18:	9400      	str	r4, [sp, #0]
 8007e1a:	fb28 f805 	smuad	r8, r8, r5
 8007e1e:	4c2f      	ldr	r4, [pc, #188]	@ (8007edc <D64_GENERIC+0x20c>)
 8007e20:	fb27 8704 	smlad	r7, r7, r4, r8
 8007e24:	4c2e      	ldr	r4, [pc, #184]	@ (8007ee0 <D64_GENERIC+0x210>)
 8007e26:	fb20 7004 	smlad	r0, r0, r4, r7
 8007e2a:	4c2e      	ldr	r4, [pc, #184]	@ (8007ee4 <D64_GENERIC+0x214>)
 8007e2c:	fb2a 0004 	smlad	r0, sl, r4, r0
 8007e30:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8007e34:	9906      	ldr	r1, [sp, #24]
 8007e36:	9001      	str	r0, [sp, #4]
 8007e38:	b181      	cbz	r1, 8007e5c <D64_GENERIC+0x18c>
 8007e3a:	9802      	ldr	r0, [sp, #8]
 8007e3c:	9c03      	ldr	r4, [sp, #12]
 8007e3e:	4430      	add	r0, r6
 8007e40:	1b00      	subs	r0, r0, r4
 8007e42:	fba0 7801 	umull	r7, r8, r0, r1
 8007e46:	17c5      	asrs	r5, r0, #31
 8007e48:	fb01 8805 	mla	r8, r1, r5, r8
 8007e4c:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8007e50:	f148 0100 	adc.w	r1, r8, #0
 8007e54:	0049      	lsls	r1, r1, #1
 8007e56:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8007e5e:	9904      	ldr	r1, [sp, #16]
 8007e60:	9805      	ldr	r0, [sp, #20]
 8007e62:	02b6      	lsls	r6, r6, #10
 8007e64:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007e68:	f04f 0800 	mov.w	r8, #0
 8007e6c:	fb0e f404 	mul.w	r4, lr, r4
 8007e70:	fbc1 7806 	smlal	r7, r8, r1, r6
 8007e74:	4641      	mov	r1, r8
 8007e76:	1089      	asrs	r1, r1, #2
 8007e78:	f301 010f 	ssat	r1, #16, r1
 8007e7c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8007e80:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8007e82:	f10e 0e01 	add.w	lr, lr, #1
 8007e86:	4571      	cmp	r1, lr
 8007e88:	dd0e      	ble.n	8007ea8 <D64_GENERIC+0x1d8>
 8007e8a:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8007e8c:	2d01      	cmp	r5, #1
 8007e8e:	f47f af3c 	bne.w	8007d0a <D64_GENERIC+0x3a>
 8007e92:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007e94:	06ac      	lsls	r4, r5, #26
 8007e96:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007e9a:	f109 0908 	add.w	r9, r9, #8
 8007e9e:	f57f af5c 	bpl.w	8007d5a <D64_GENERIC+0x8a>
 8007ea2:	ba40      	rev16	r0, r0
 8007ea4:	ba49      	rev16	r1, r1
 8007ea6:	e758      	b.n	8007d5a <D64_GENERIC+0x8a>
 8007ea8:	61d3      	str	r3, [r2, #28]
 8007eaa:	9b02      	ldr	r3, [sp, #8]
 8007eac:	9901      	ldr	r1, [sp, #4]
 8007eae:	6113      	str	r3, [r2, #16]
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	6091      	str	r1, [r2, #8]
 8007eb4:	6153      	str	r3, [r2, #20]
 8007eb6:	9900      	ldr	r1, [sp, #0]
 8007eb8:	9b07      	ldr	r3, [sp, #28]
 8007eba:	60d1      	str	r1, [r2, #12]
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6193      	str	r3, [r2, #24]
 8007ec0:	b009      	add	sp, #36	@ 0x24
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	bf00      	nop
 8007ec8:	001c0015 	.word	0x001c0015
 8007ecc:	000f000a 	.word	0x000f000a
 8007ed0:	00060003 	.word	0x00060003
 8007ed4:	0024002a 	.word	0x0024002a
 8007ed8:	002e0030 	.word	0x002e0030
 8007edc:	00030006 	.word	0x00030006
 8007ee0:	000a000f 	.word	0x000a000f
 8007ee4:	0015001c 	.word	0x0015001c
 8007ee8:	20000018 	.word	0x20000018

08007eec <D80_GENERIC>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	b08b      	sub	sp, #44	@ 0x2c
 8007ef2:	6914      	ldr	r4, [r2, #16]
 8007ef4:	9405      	str	r4, [sp, #20]
 8007ef6:	6954      	ldr	r4, [r2, #20]
 8007ef8:	9406      	str	r4, [sp, #24]
 8007efa:	6994      	ldr	r4, [r2, #24]
 8007efc:	9409      	str	r4, [sp, #36]	@ 0x24
 8007efe:	6894      	ldr	r4, [r2, #8]
 8007f00:	9402      	str	r4, [sp, #8]
 8007f02:	68d4      	ldr	r4, [r2, #12]
 8007f04:	9401      	str	r4, [sp, #4]
 8007f06:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007f08:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007f0a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8007f0e:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 810a 	beq.w	800812c <D80_GENERIC+0x240>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 800817c <D80_GENERIC+0x290>
 8007f1e:	e9cd b303 	strd	fp, r3, [sp, #12]
 8007f22:	e0ee      	b.n	8008102 <D80_GENERIC+0x216>
 8007f24:	fa5f fe8e 	uxtb.w	lr, lr
 8007f28:	fa0f f48e 	sxth.w	r4, lr
 8007f2c:	0066      	lsls	r6, r4, #1
 8007f2e:	eb06 0804 	add.w	r8, r6, r4
 8007f32:	f1ce 0500 	rsb	r5, lr, #0
 8007f36:	eb00 0108 	add.w	r1, r0, r8
 8007f3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007f3e:	194b      	adds	r3, r1, r5
 8007f40:	5d49      	ldrb	r1, [r1, r5]
 8007f42:	f810 a008 	ldrb.w	sl, [r0, r8]
 8007f46:	f813 b004 	ldrb.w	fp, [r3, r4]
 8007f4a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8007f4e:	f890 8000 	ldrb.w	r8, [r0]
 8007f52:	eb03 0c04 	add.w	ip, r3, r4
 8007f56:	eb0c 0705 	add.w	r7, ip, r5
 8007f5a:	0409      	lsls	r1, r1, #16
 8007f5c:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8007f60:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8007f64:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007f68:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8007f6c:	eb0a 0004 	add.w	r0, sl, r4
 8007f70:	041b      	lsls	r3, r3, #16
 8007f72:	f81a a004 	ldrb.w	sl, [sl, r4]
 8007f76:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8007f7a:	5d44      	ldrb	r4, [r0, r5]
 8007f7c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007f80:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8007f84:	4428      	add	r0, r5
 8007f86:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8007f8a:	4441      	add	r1, r8
 8007f8c:	4430      	add	r0, r6
 8007f8e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8007f92:	441f      	add	r7, r3
 8007f94:	b2cd      	uxtb	r5, r1
 8007f96:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007f9a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8007f9e:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007fa8:	0e09      	lsrs	r1, r1, #24
 8007faa:	4433      	add	r3, r6
 8007fac:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8007fb0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8007fb4:	b2fd      	uxtb	r5, r7
 8007fb6:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8007fba:	469b      	mov	fp, r3
 8007fbc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8007fc0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8007fc4:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8007fc8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8007fcc:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8007fd0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8007fd4:	0e3b      	lsrs	r3, r7, #24
 8007fd6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007fda:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8007fde:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007fe2:	fa5f fc84 	uxtb.w	ip, r4
 8007fe6:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8007fea:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007fee:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007ff2:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8007ff6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8007ffa:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007ffe:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8008002:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008006:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800800a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800800e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008012:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008016:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800801a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800801e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008022:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008026:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800802a:	0aa3      	lsrs	r3, r4, #10
 800802c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008030:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008034:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008038:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8008042:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8008046:	4b41      	ldr	r3, [pc, #260]	@ (800814c <D80_GENERIC+0x260>)
 8008048:	9901      	ldr	r1, [sp, #4]
 800804a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800804e:	4940      	ldr	r1, [pc, #256]	@ (8008150 <D80_GENERIC+0x264>)
 8008050:	fb28 3301 	smlad	r3, r8, r1, r3
 8008054:	493f      	ldr	r1, [pc, #252]	@ (8008154 <D80_GENERIC+0x268>)
 8008056:	fb2e 3301 	smlad	r3, lr, r1, r3
 800805a:	493f      	ldr	r1, [pc, #252]	@ (8008158 <D80_GENERIC+0x26c>)
 800805c:	fb27 3301 	smlad	r3, r7, r1, r3
 8008060:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008064:	fb2c 3404 	smlad	r4, ip, r4, r3
 8008068:	4b3c      	ldr	r3, [pc, #240]	@ (800815c <D80_GENERIC+0x270>)
 800806a:	9902      	ldr	r1, [sp, #8]
 800806c:	fb2b 1303 	smlad	r3, fp, r3, r1
 8008070:	493b      	ldr	r1, [pc, #236]	@ (8008160 <D80_GENERIC+0x274>)
 8008072:	fb28 3301 	smlad	r3, r8, r1, r3
 8008076:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 800807a:	fb2e 3101 	smlad	r1, lr, r1, r3
 800807e:	4b39      	ldr	r3, [pc, #228]	@ (8008164 <D80_GENERIC+0x278>)
 8008080:	fb27 1103 	smlad	r1, r7, r3, r1
 8008084:	4b38      	ldr	r3, [pc, #224]	@ (8008168 <D80_GENERIC+0x27c>)
 8008086:	fb2c 1303 	smlad	r3, ip, r3, r1
 800808a:	2101      	movs	r1, #1
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	fb2b fb01 	smuad	fp, fp, r1
 8008092:	4b36      	ldr	r3, [pc, #216]	@ (800816c <D80_GENERIC+0x280>)
 8008094:	fb28 b803 	smlad	r8, r8, r3, fp
 8008098:	4d35      	ldr	r5, [pc, #212]	@ (8008170 <D80_GENERIC+0x284>)
 800809a:	fb2e 8e05 	smlad	lr, lr, r5, r8
 800809e:	4d35      	ldr	r5, [pc, #212]	@ (8008174 <D80_GENERIC+0x288>)
 80080a0:	fb27 e705 	smlad	r7, r7, r5, lr
 80080a4:	4b34      	ldr	r3, [pc, #208]	@ (8008178 <D80_GENERIC+0x28c>)
 80080a6:	fb2c 7303 	smlad	r3, ip, r3, r7
 80080aa:	6a11      	ldr	r1, [r2, #32]
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 80080b2:	b181      	cbz	r1, 80080d6 <D80_GENERIC+0x1ea>
 80080b4:	9c05      	ldr	r4, [sp, #20]
 80080b6:	9d06      	ldr	r5, [sp, #24]
 80080b8:	441c      	add	r4, r3
 80080ba:	1b64      	subs	r4, r4, r5
 80080bc:	fba4 ab01 	umull	sl, fp, r4, r1
 80080c0:	17e7      	asrs	r7, r4, #31
 80080c2:	fb01 bb07 	mla	fp, r1, r7, fp
 80080c6:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 80080ca:	f14b 0500 	adc.w	r5, fp, #0
 80080ce:	0069      	lsls	r1, r5, #1
 80080d0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80080d4:	460b      	mov	r3, r1
 80080d6:	9e04      	ldr	r6, [sp, #16]
 80080d8:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80080da:	9f07      	ldr	r7, [sp, #28]
 80080dc:	025b      	lsls	r3, r3, #9
 80080de:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80080e2:	2500      	movs	r5, #0
 80080e4:	fb06 f101 	mul.w	r1, r6, r1
 80080e8:	fbc7 4503 	smlal	r4, r5, r7, r3
 80080ec:	9c08      	ldr	r4, [sp, #32]
 80080ee:	10ab      	asrs	r3, r5, #2
 80080f0:	f303 030f 	ssat	r3, #16, r3
 80080f4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80080f8:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80080fa:	1c71      	adds	r1, r6, #1
 80080fc:	428b      	cmp	r3, r1
 80080fe:	9104      	str	r1, [sp, #16]
 8008100:	dd12      	ble.n	8008128 <D80_GENERIC+0x23c>
 8008102:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8008106:	f1be 0f01 	cmp.w	lr, #1
 800810a:	f47f af0b 	bne.w	8007f24 <D80_GENERIC+0x38>
 800810e:	6801      	ldr	r1, [r0, #0]
 8008110:	6847      	ldr	r7, [r0, #4]
 8008112:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008114:	6884      	ldr	r4, [r0, #8]
 8008116:	069b      	lsls	r3, r3, #26
 8008118:	f100 000a 	add.w	r0, r0, #10
 800811c:	f57f af3a 	bpl.w	8007f94 <D80_GENERIC+0xa8>
 8008120:	ba49      	rev16	r1, r1
 8008122:	ba7f      	rev16	r7, r7
 8008124:	ba64      	rev16	r4, r4
 8008126:	e735      	b.n	8007f94 <D80_GENERIC+0xa8>
 8008128:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800812c:	9b02      	ldr	r3, [sp, #8]
 800812e:	6093      	str	r3, [r2, #8]
 8008130:	9b01      	ldr	r3, [sp, #4]
 8008132:	60d3      	str	r3, [r2, #12]
 8008134:	9b05      	ldr	r3, [sp, #20]
 8008136:	6113      	str	r3, [r2, #16]
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	6153      	str	r3, [r2, #20]
 800813c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813e:	f8c2 b01c 	str.w	fp, [r2, #28]
 8008142:	2000      	movs	r0, #0
 8008144:	6193      	str	r3, [r2, #24]
 8008146:	b00b      	add	sp, #44	@ 0x2c
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	002d0024 	.word	0x002d0024
 8008150:	001c0015 	.word	0x001c0015
 8008154:	000f000a 	.word	0x000f000a
 8008158:	00060003 	.word	0x00060003
 800815c:	0037003f 	.word	0x0037003f
 8008160:	00450049 	.word	0x00450049
 8008164:	00490045 	.word	0x00490045
 8008168:	003f0037 	.word	0x003f0037
 800816c:	00030006 	.word	0x00030006
 8008170:	000a000f 	.word	0x000a000f
 8008174:	0015001c 	.word	0x0015001c
 8008178:	0024002d 	.word	0x0024002d
 800817c:	20000018 	.word	0x20000018

08008180 <D128_GENERIC>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	b091      	sub	sp, #68	@ 0x44
 8008186:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008188:	9004      	str	r0, [sp, #16]
 800818a:	6910      	ldr	r0, [r2, #16]
 800818c:	900a      	str	r0, [sp, #40]	@ 0x28
 800818e:	6950      	ldr	r0, [r2, #20]
 8008190:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008192:	6990      	ldr	r0, [r2, #24]
 8008194:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008196:	69d0      	ldr	r0, [r2, #28]
 8008198:	9002      	str	r0, [sp, #8]
 800819a:	6890      	ldr	r0, [r2, #8]
 800819c:	9003      	str	r0, [sp, #12]
 800819e:	68d0      	ldr	r0, [r2, #12]
 80081a0:	9001      	str	r0, [sp, #4]
 80081a2:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80081a4:	9200      	str	r2, [sp, #0]
 80081a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8196 	beq.w	80084dc <D128_GENERIC+0x35c>
 80081b0:	2300      	movs	r3, #0
 80081b2:	6a12      	ldr	r2, [r2, #32]
 80081b4:	920e      	str	r2, [sp, #56]	@ 0x38
 80081b6:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8008558 <D128_GENERIC+0x3d8>
 80081ba:	9305      	str	r3, [sp, #20]
 80081bc:	e177      	b.n	80084ae <D128_GENERIC+0x32e>
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	9d04      	ldr	r5, [sp, #16]
 80081c2:	b214      	sxth	r4, r2
 80081c4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80081c8:	4250      	negs	r0, r2
 80081ca:	eb05 010a 	add.w	r1, r5, sl
 80081ce:	00a6      	lsls	r6, r4, #2
 80081d0:	eb01 0800 	add.w	r8, r1, r0
 80081d4:	eb06 0e04 	add.w	lr, r6, r4
 80081d8:	eb08 070e 	add.w	r7, r8, lr
 80081dc:	183b      	adds	r3, r7, r0
 80081de:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80081e2:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 80081e6:	9608      	str	r6, [sp, #32]
 80081e8:	eb0c 0604 	add.w	r6, ip, r4
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	1833      	adds	r3, r6, r0
 80081f0:	f815 b00a 	ldrb.w	fp, [r5, sl]
 80081f4:	9306      	str	r3, [sp, #24]
 80081f6:	f818 a00e 	ldrb.w	sl, [r8, lr]
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	f815 e002 	ldrb.w	lr, [r5, r2]
 8008200:	782d      	ldrb	r5, [r5, #0]
 8008202:	5c3a      	ldrb	r2, [r7, r0]
 8008204:	9507      	str	r5, [sp, #28]
 8008206:	9d06      	ldr	r5, [sp, #24]
 8008208:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800820c:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8008216:	5c33      	ldrb	r3, [r6, r0]
 8008218:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800821c:	5c09      	ldrb	r1, [r1, r0]
 800821e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8008222:	0412      	lsls	r2, r2, #16
 8008224:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8008228:	eb06 0a04 	add.w	sl, r6, r4
 800822c:	5d36      	ldrb	r6, [r6, r4]
 800822e:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8008232:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8008236:	042d      	lsls	r5, r5, #16
 8008238:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800823c:	0409      	lsls	r1, r1, #16
 800823e:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8008242:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8008246:	041b      	lsls	r3, r3, #16
 8008248:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800824c:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8008250:	eb0a 0e00 	add.w	lr, sl, r0
 8008254:	9d07      	ldr	r5, [sp, #28]
 8008256:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 800825a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800825e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8008262:	9f08      	ldr	r7, [sp, #32]
 8008264:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8008268:	4429      	add	r1, r5
 800826a:	9d04      	ldr	r5, [sp, #16]
 800826c:	4438      	add	r0, r7
 800826e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8008272:	9004      	str	r0, [sp, #16]
 8008274:	442a      	add	r2, r5
 8008276:	eb06 0a0b 	add.w	sl, r6, fp
 800827a:	1918      	adds	r0, r3, r4
 800827c:	b2cb      	uxtb	r3, r1
 800827e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008282:	9e02      	ldr	r6, [sp, #8]
 8008284:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008288:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800828c:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8008290:	441e      	add	r6, r3
 8008292:	0e09      	lsrs	r1, r1, #24
 8008294:	4633      	mov	r3, r6
 8008296:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800829a:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800829e:	b2d4      	uxtb	r4, r2
 80082a0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80082a4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80082a8:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80082ac:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80082b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80082b4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80082b8:	0e12      	lsrs	r2, r2, #24
 80082ba:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80082be:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80082c2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80082c6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80082ca:	9702      	str	r7, [sp, #8]
 80082cc:	b2c2      	uxtb	r2, r0
 80082ce:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80082d2:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 80082d6:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80082da:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80082de:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80082e2:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 80082e6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80082ea:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80082ee:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80082f2:	0e00      	lsrs	r0, r0, #24
 80082f4:	fa5f f68a 	uxtb.w	r6, sl
 80082f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082fc:	9308      	str	r3, [sp, #32]
 80082fe:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008302:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8008306:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800830a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800830e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008312:	9509      	str	r5, [sp, #36]	@ 0x24
 8008314:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008318:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800831c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008320:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008324:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008328:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800832c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008330:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008334:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008338:	9306      	str	r3, [sp, #24]
 800833a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008344:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008348:	f8cd a01c 	str.w	sl, [sp, #28]
 800834c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008350:	9b06      	ldr	r3, [sp, #24]
 8008352:	9506      	str	r5, [sp, #24]
 8008354:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008356:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800835a:	f8cd e008 	str.w	lr, [sp, #8]
 800835e:	46ae      	mov	lr, r5
 8008360:	9d08      	ldr	r5, [sp, #32]
 8008362:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008366:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800836a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800836e:	9d02      	ldr	r5, [sp, #8]
 8008370:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008374:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008378:	9f07      	ldr	r7, [sp, #28]
 800837a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800837e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008382:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008386:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800838a:	9d06      	ldr	r5, [sp, #24]
 800838c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008390:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008394:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008398:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800839c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80083a0:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 80083a4:	0abe      	lsrs	r6, r7, #10
 80083a6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80083aa:	9602      	str	r6, [sp, #8]
 80083ac:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80083b0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80083b4:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 80083b8:	4e52      	ldr	r6, [pc, #328]	@ (8008504 <D128_GENERIC+0x384>)
 80083ba:	9f01      	ldr	r7, [sp, #4]
 80083bc:	fb2e 7606 	smlad	r6, lr, r6, r7
 80083c0:	4f51      	ldr	r7, [pc, #324]	@ (8008508 <D128_GENERIC+0x388>)
 80083c2:	fb2a 6607 	smlad	r6, sl, r7, r6
 80083c6:	4f51      	ldr	r7, [pc, #324]	@ (800850c <D128_GENERIC+0x38c>)
 80083c8:	fb21 6607 	smlad	r6, r1, r7, r6
 80083cc:	4f50      	ldr	r7, [pc, #320]	@ (8008510 <D128_GENERIC+0x390>)
 80083ce:	fb24 6607 	smlad	r6, r4, r7, r6
 80083d2:	4f50      	ldr	r7, [pc, #320]	@ (8008514 <D128_GENERIC+0x394>)
 80083d4:	fb22 6607 	smlad	r6, r2, r7, r6
 80083d8:	4f4f      	ldr	r7, [pc, #316]	@ (8008518 <D128_GENERIC+0x398>)
 80083da:	fb20 6607 	smlad	r6, r0, r7, r6
 80083de:	4f4f      	ldr	r7, [pc, #316]	@ (800851c <D128_GENERIC+0x39c>)
 80083e0:	fb23 6607 	smlad	r6, r3, r7, r6
 80083e4:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 80083e8:	fb25 6807 	smlad	r8, r5, r7, r6
 80083ec:	4f4c      	ldr	r7, [pc, #304]	@ (8008520 <D128_GENERIC+0x3a0>)
 80083ee:	9e03      	ldr	r6, [sp, #12]
 80083f0:	fb2e 6c07 	smlad	ip, lr, r7, r6
 80083f4:	4e4b      	ldr	r6, [pc, #300]	@ (8008524 <D128_GENERIC+0x3a4>)
 80083f6:	fb2a cc06 	smlad	ip, sl, r6, ip
 80083fa:	4f4b      	ldr	r7, [pc, #300]	@ (8008528 <D128_GENERIC+0x3a8>)
 80083fc:	fb21 cc07 	smlad	ip, r1, r7, ip
 8008400:	4f4a      	ldr	r7, [pc, #296]	@ (800852c <D128_GENERIC+0x3ac>)
 8008402:	fb24 cc07 	smlad	ip, r4, r7, ip
 8008406:	4f4a      	ldr	r7, [pc, #296]	@ (8008530 <D128_GENERIC+0x3b0>)
 8008408:	fb22 cc07 	smlad	ip, r2, r7, ip
 800840c:	4f49      	ldr	r7, [pc, #292]	@ (8008534 <D128_GENERIC+0x3b4>)
 800840e:	fb20 cc07 	smlad	ip, r0, r7, ip
 8008412:	4f49      	ldr	r7, [pc, #292]	@ (8008538 <D128_GENERIC+0x3b8>)
 8008414:	fb23 c707 	smlad	r7, r3, r7, ip
 8008418:	f8df c140 	ldr.w	ip, [pc, #320]	@ 800855c <D128_GENERIC+0x3dc>
 800841c:	fb25 760c 	smlad	r6, r5, ip, r7
 8008420:	f04f 0b01 	mov.w	fp, #1
 8008424:	9601      	str	r6, [sp, #4]
 8008426:	fb2e fb0b 	smuad	fp, lr, fp
 800842a:	4f44      	ldr	r7, [pc, #272]	@ (800853c <D128_GENERIC+0x3bc>)
 800842c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008430:	4f43      	ldr	r7, [pc, #268]	@ (8008540 <D128_GENERIC+0x3c0>)
 8008432:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008436:	4f43      	ldr	r7, [pc, #268]	@ (8008544 <D128_GENERIC+0x3c4>)
 8008438:	fb24 aa07 	smlad	sl, r4, r7, sl
 800843c:	4f42      	ldr	r7, [pc, #264]	@ (8008548 <D128_GENERIC+0x3c8>)
 800843e:	fb22 a707 	smlad	r7, r2, r7, sl
 8008442:	4a42      	ldr	r2, [pc, #264]	@ (800854c <D128_GENERIC+0x3cc>)
 8008444:	fb20 7702 	smlad	r7, r0, r2, r7
 8008448:	4a41      	ldr	r2, [pc, #260]	@ (8008550 <D128_GENERIC+0x3d0>)
 800844a:	fb23 7702 	smlad	r7, r3, r2, r7
 800844e:	4b41      	ldr	r3, [pc, #260]	@ (8008554 <D128_GENERIC+0x3d4>)
 8008450:	fb25 7303 	smlad	r3, r5, r3, r7
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008458:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 800845c:	b183      	cbz	r3, 8008480 <D128_GENERIC+0x300>
 800845e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008460:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008462:	4432      	add	r2, r6
 8008464:	1a52      	subs	r2, r2, r1
 8008466:	fba2 4503 	umull	r4, r5, r2, r3
 800846a:	17d1      	asrs	r1, r2, #31
 800846c:	fb03 5501 	mla	r5, r3, r1, r5
 8008470:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8008474:	f145 0300 	adc.w	r3, r5, #0
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 800847e:	461e      	mov	r6, r3
 8008480:	9800      	ldr	r0, [sp, #0]
 8008482:	9c05      	ldr	r4, [sp, #20]
 8008484:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8008486:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008488:	01f6      	lsls	r6, r6, #7
 800848a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800848e:	2300      	movs	r3, #0
 8008490:	fbc5 2306 	smlal	r2, r3, r5, r6
 8008494:	fb04 f101 	mul.w	r1, r4, r1
 8008498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800849a:	109b      	asrs	r3, r3, #2
 800849c:	f303 030f 	ssat	r3, #16, r3
 80084a0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80084a4:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80084a6:	1c62      	adds	r2, r4, #1
 80084a8:	4293      	cmp	r3, r2
 80084aa:	9205      	str	r2, [sp, #20]
 80084ac:	dd16      	ble.n	80084dc <D128_GENERIC+0x35c>
 80084ae:	9b00      	ldr	r3, [sp, #0]
 80084b0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80084b2:	2a01      	cmp	r2, #1
 80084b4:	f47f ae83 	bne.w	80081be <D128_GENERIC+0x3e>
 80084b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ba:	9c04      	ldr	r4, [sp, #16]
 80084bc:	069b      	lsls	r3, r3, #26
 80084be:	e9d4 1200 	ldrd	r1, r2, [r4]
 80084c2:	68a0      	ldr	r0, [r4, #8]
 80084c4:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80084c8:	f104 0410 	add.w	r4, r4, #16
 80084cc:	d517      	bpl.n	80084fe <D128_GENERIC+0x37e>
 80084ce:	ba49      	rev16	r1, r1
 80084d0:	ba52      	rev16	r2, r2
 80084d2:	ba40      	rev16	r0, r0
 80084d4:	fa9a fa9a 	rev16.w	sl, sl
 80084d8:	9404      	str	r4, [sp, #16]
 80084da:	e6cf      	b.n	800827c <D128_GENERIC+0xfc>
 80084dc:	9b00      	ldr	r3, [sp, #0]
 80084de:	9903      	ldr	r1, [sp, #12]
 80084e0:	6099      	str	r1, [r3, #8]
 80084e2:	9901      	ldr	r1, [sp, #4]
 80084e4:	60d9      	str	r1, [r3, #12]
 80084e6:	9902      	ldr	r1, [sp, #8]
 80084e8:	61d9      	str	r1, [r3, #28]
 80084ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084ec:	6119      	str	r1, [r3, #16]
 80084ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084f2:	6159      	str	r1, [r3, #20]
 80084f4:	2000      	movs	r0, #0
 80084f6:	619a      	str	r2, [r3, #24]
 80084f8:	b011      	add	sp, #68	@ 0x44
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	9404      	str	r4, [sp, #16]
 8008500:	e6bc      	b.n	800827c <D128_GENERIC+0xfc>
 8008502:	bf00      	nop
 8008504:	00780069 	.word	0x00780069
 8008508:	005b004e 	.word	0x005b004e
 800850c:	00420037 	.word	0x00420037
 8008510:	002d0024 	.word	0x002d0024
 8008514:	001c0015 	.word	0x001c0015
 8008518:	000f000a 	.word	0x000f000a
 800851c:	00060003 	.word	0x00060003
 8008520:	00880096 	.word	0x00880096
 8008524:	00a200ac 	.word	0x00a200ac
 8008528:	00b400ba 	.word	0x00b400ba
 800852c:	00be00c0 	.word	0x00be00c0
 8008530:	00c000be 	.word	0x00c000be
 8008534:	00ba00b4 	.word	0x00ba00b4
 8008538:	00ac00a2 	.word	0x00ac00a2
 800853c:	00030006 	.word	0x00030006
 8008540:	000a000f 	.word	0x000a000f
 8008544:	0015001c 	.word	0x0015001c
 8008548:	0024002d 	.word	0x0024002d
 800854c:	00370042 	.word	0x00370042
 8008550:	004e005b 	.word	0x004e005b
 8008554:	00690078 	.word	0x00690078
 8008558:	20000018 	.word	0x20000018
 800855c:	00960088 	.word	0x00960088

08008560 <D16_1CH_HTONS_VOL_HP>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008568:	b085      	sub	sp, #20
 800856a:	4681      	mov	r9, r0
 800856c:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800856e:	6993      	ldr	r3, [r2, #24]
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8008576:	69d3      	ldr	r3, [r2, #28]
 8008578:	9402      	str	r4, [sp, #8]
 800857a:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 800857e:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8008582:	2800      	cmp	r0, #0
 8008584:	d057      	beq.n	8008636 <D16_1CH_HTONS_VOL_HP+0xd6>
 8008586:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 800858a:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8008644 <D16_1CH_HTONS_VOL_HP+0xe4>
 800858e:	f1a1 0802 	sub.w	r8, r1, #2
 8008592:	4639      	mov	r1, r7
 8008594:	465f      	mov	r7, fp
 8008596:	46d3      	mov	fp, sl
 8008598:	46ca      	mov	sl, r9
 800859a:	4699      	mov	r9, r3
 800859c:	4633      	mov	r3, r6
 800859e:	4616      	mov	r6, r2
 80085a0:	f85a 2b02 	ldr.w	r2, [sl], #2
 80085a4:	ba52      	rev16	r2, r2
 80085a6:	b2d4      	uxtb	r4, r2
 80085a8:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80085ac:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 80085b0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80085b4:	4491      	add	r9, r2
 80085b6:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 80085ba:	f3c0 0209 	ubfx	r2, r0, #0, #10
 80085be:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80085c2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80085c6:	ea4f 2990 	mov.w	r9, r0, lsr #10
 80085ca:	481c      	ldr	r0, [pc, #112]	@ (800863c <D16_1CH_HTONS_VOL_HP+0xdc>)
 80085cc:	fb22 5400 	smlad	r4, r2, r0, r5
 80085d0:	481b      	ldr	r0, [pc, #108]	@ (8008640 <D16_1CH_HTONS_VOL_HP+0xe0>)
 80085d2:	fb22 f500 	smuad	r5, r2, r0
 80085d6:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80085da:	18e2      	adds	r2, r4, r3
 80085dc:	1a52      	subs	r2, r2, r1
 80085de:	17d1      	asrs	r1, r2, #31
 80085e0:	fba2 230c 	umull	r2, r3, r2, ip
 80085e4:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 80085e8:	fb0c 3301 	mla	r3, ip, r1, r3
 80085ec:	f143 0100 	adc.w	r1, r3, #0
 80085f0:	e9cd 0100 	strd	r0, r1, [sp]
 80085f4:	044a      	lsls	r2, r1, #17
 80085f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80085fa:	2100      	movs	r1, #0
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	fbcb 0102 	smlal	r0, r1, fp, r2
 8008602:	45ba      	cmp	sl, r7
 8008604:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8008608:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800860c:	f302 020f 	ssat	r2, #16, r2
 8008610:	4621      	mov	r1, r4
 8008612:	f828 2f02 	strh.w	r2, [r8, #2]!
 8008616:	d1c3      	bne.n	80085a0 <D16_1CH_HTONS_VOL_HP+0x40>
 8008618:	4632      	mov	r2, r6
 800861a:	461e      	mov	r6, r3
 800861c:	464b      	mov	r3, r9
 800861e:	9902      	ldr	r1, [sp, #8]
 8008620:	61d3      	str	r3, [r2, #28]
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	6095      	str	r5, [r2, #8]
 8008626:	2000      	movs	r0, #0
 8008628:	60d1      	str	r1, [r2, #12]
 800862a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800862e:	6193      	str	r3, [r2, #24]
 8008630:	b005      	add	sp, #20
 8008632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008636:	463c      	mov	r4, r7
 8008638:	e7f1      	b.n	800861e <D16_1CH_HTONS_VOL_HP+0xbe>
 800863a:	bf00      	nop
 800863c:	00030001 	.word	0x00030001
 8008640:	00010003 	.word	0x00010003
 8008644:	20000018 	.word	0x20000018

08008648 <D24_1CH_HTONS_VOL_HP>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	4696      	mov	lr, r2
 800864e:	b089      	sub	sp, #36	@ 0x24
 8008650:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 8008654:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008656:	f8de 3018 	ldr.w	r3, [lr, #24]
 800865a:	9703      	str	r7, [sp, #12]
 800865c:	f8de 7020 	ldr.w	r7, [lr, #32]
 8008660:	9306      	str	r3, [sp, #24]
 8008662:	9205      	str	r2, [sp, #20]
 8008664:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8008668:	f8de 601c 	ldr.w	r6, [lr, #28]
 800866c:	9704      	str	r7, [sp, #16]
 800866e:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 8008672:	2a00      	cmp	r2, #0
 8008674:	f000 8081 	beq.w	800877a <D24_1CH_HTONS_VOL_HP+0x132>
 8008678:	f1a1 0b02 	sub.w	fp, r1, #2
 800867c:	2700      	movs	r7, #0
 800867e:	46d9      	mov	r9, fp
 8008680:	f8cd e01c 	str.w	lr, [sp, #28]
 8008684:	46d3      	mov	fp, sl
 8008686:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8008788 <D24_1CH_HTONS_VOL_HP+0x140>
 800868a:	46a8      	mov	r8, r5
 800868c:	46ba      	mov	sl, r7
 800868e:	469e      	mov	lr, r3
 8008690:	e052      	b.n	8008738 <D24_1CH_HTONS_VOL_HP+0xf0>
 8008692:	7842      	ldrb	r2, [r0, #1]
 8008694:	3002      	adds	r0, #2
 8008696:	4413      	add	r3, r2
 8008698:	b2d9      	uxtb	r1, r3
 800869a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800869e:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80086a2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80086a6:	0c1b      	lsrs	r3, r3, #16
 80086a8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80086ac:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80086b0:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 80086b4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80086b8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80086bc:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80086c0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80086c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008780 <D24_1CH_HTONS_VOL_HP+0x138>)
 80086c6:	fb23 b102 	smlad	r1, r3, r2, fp
 80086ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008784 <D24_1CH_HTONS_VOL_HP+0x13c>)
 80086cc:	fb23 eb02 	smlad	fp, r3, r2, lr
 80086d0:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 80086d4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80086d8:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 80086dc:	2201      	movs	r2, #1
 80086de:	fb23 f702 	smuad	r7, r3, r2
 80086e2:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 80086e6:	eb01 0208 	add.w	r2, r1, r8
 80086ea:	1b12      	subs	r2, r2, r4
 80086ec:	17d4      	asrs	r4, r2, #31
 80086ee:	4613      	mov	r3, r2
 80086f0:	e9cd 3400 	strd	r3, r4, [sp]
 80086f4:	9c04      	ldr	r4, [sp, #16]
 80086f6:	9d01      	ldr	r5, [sp, #4]
 80086f8:	fba2 2304 	umull	r2, r3, r2, r4
 80086fc:	fb04 3305 	mla	r3, r4, r5, r3
 8008700:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8008704:	f143 0500 	adc.w	r5, r3, #0
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	e9cd 4500 	strd	r4, r5, [sp]
 800870e:	03ea      	lsls	r2, r5, #15
 8008710:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8008714:	2500      	movs	r5, #0
 8008716:	fbc3 4502 	smlal	r4, r5, r3, r2
 800871a:	9b01      	ldr	r3, [sp, #4]
 800871c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008720:	10ab      	asrs	r3, r5, #2
 8008722:	f303 030f 	ssat	r3, #16, r3
 8008726:	f829 3f02 	strh.w	r3, [r9, #2]!
 800872a:	9b05      	ldr	r3, [sp, #20]
 800872c:	f10a 0a01 	add.w	sl, sl, #1
 8008730:	459a      	cmp	sl, r3
 8008732:	44be      	add	lr, r7
 8008734:	460c      	mov	r4, r1
 8008736:	d00e      	beq.n	8008756 <D24_1CH_HTONS_VOL_HP+0x10e>
 8008738:	7801      	ldrb	r1, [r0, #0]
 800873a:	78c2      	ldrb	r2, [r0, #3]
 800873c:	020b      	lsls	r3, r1, #8
 800873e:	f01a 0f01 	tst.w	sl, #1
 8008742:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8008746:	d0a4      	beq.n	8008692 <D24_1CH_HTONS_VOL_HP+0x4a>
 8008748:	7885      	ldrb	r5, [r0, #2]
 800874a:	0212      	lsls	r2, r2, #8
 800874c:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8008750:	440b      	add	r3, r1
 8008752:	3004      	adds	r0, #4
 8008754:	e7a0      	b.n	8008698 <D24_1CH_HTONS_VOL_HP+0x50>
 8008756:	4673      	mov	r3, lr
 8008758:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800875c:	46da      	mov	sl, fp
 800875e:	4645      	mov	r5, r8
 8008760:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	f8ce 601c 	str.w	r6, [lr, #28]
 800876a:	2000      	movs	r0, #0
 800876c:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8008770:	f8ce 3018 	str.w	r3, [lr, #24]
 8008774:	b009      	add	sp, #36	@ 0x24
 8008776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877a:	4621      	mov	r1, r4
 800877c:	e7f0      	b.n	8008760 <D24_1CH_HTONS_VOL_HP+0x118>
 800877e:	bf00      	nop
 8008780:	00030001 	.word	0x00030001
 8008784:	00060007 	.word	0x00060007
 8008788:	20000018 	.word	0x20000018

0800878c <D32_1CH_HTONS_VOL_HP>:
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	4682      	mov	sl, r0
 8008792:	b087      	sub	sp, #28
 8008794:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8008796:	6993      	ldr	r3, [r2, #24]
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800879e:	69d5      	ldr	r5, [r2, #28]
 80087a0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80087a2:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80087a6:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d070      	beq.n	8008890 <D32_1CH_HTONS_VOL_HP+0x104>
 80087ae:	468e      	mov	lr, r1
 80087b0:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 80088a4 <D32_1CH_HTONS_VOL_HP+0x118>
 80087b4:	9205      	str	r2, [sp, #20]
 80087b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80087ba:	46d3      	mov	fp, sl
 80087bc:	4638      	mov	r0, r7
 80087be:	46ca      	mov	sl, r9
 80087c0:	9103      	str	r1, [sp, #12]
 80087c2:	4627      	mov	r7, r4
 80087c4:	4699      	mov	r9, r3
 80087c6:	f85b 1b04 	ldr.w	r1, [fp], #4
 80087ca:	ba49      	rev16	r1, r1
 80087cc:	b2ca      	uxtb	r2, r1
 80087ce:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80087d2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80087d6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80087da:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80087de:	0e09      	lsrs	r1, r1, #24
 80087e0:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80087e4:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80087e8:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 80087ec:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80087f0:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80087f4:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 80087f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087fc:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8008800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008804:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880c:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8008810:	4a20      	ldr	r2, [pc, #128]	@ (8008894 <D32_1CH_HTONS_VOL_HP+0x108>)
 8008812:	fb23 8802 	smlad	r8, r3, r2, r8
 8008816:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800881a:	fb24 8102 	smlad	r1, r4, r2, r8
 800881e:	4a1e      	ldr	r2, [pc, #120]	@ (8008898 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8008820:	fb23 9802 	smlad	r8, r3, r2, r9
 8008824:	4a1d      	ldr	r2, [pc, #116]	@ (800889c <D32_1CH_HTONS_VOL_HP+0x110>)
 8008826:	fb24 8802 	smlad	r8, r4, r2, r8
 800882a:	2201      	movs	r2, #1
 800882c:	fb23 f302 	smuad	r3, r3, r2
 8008830:	4a1b      	ldr	r2, [pc, #108]	@ (80088a0 <D32_1CH_HTONS_VOL_HP+0x114>)
 8008832:	fb24 3902 	smlad	r9, r4, r2, r3
 8008836:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 800883a:	19a2      	adds	r2, r4, r6
 800883c:	1a12      	subs	r2, r2, r0
 800883e:	17d1      	asrs	r1, r2, #31
 8008840:	fba2 230a 	umull	r2, r3, r2, sl
 8008844:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8008848:	fb0a 3301 	mla	r3, sl, r1, r3
 800884c:	f143 0100 	adc.w	r1, r3, #0
 8008850:	e9cd 0100 	strd	r0, r1, [sp]
 8008854:	038a      	lsls	r2, r1, #14
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800885c:	2100      	movs	r1, #0
 800885e:	fbc7 0102 	smlal	r0, r1, r7, r2
 8008862:	108a      	asrs	r2, r1, #2
 8008864:	005e      	lsls	r6, r3, #1
 8008866:	f302 020f 	ssat	r2, #16, r2
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f82e 2b02 	strh.w	r2, [lr], #2
 8008870:	459e      	cmp	lr, r3
 8008872:	4620      	mov	r0, r4
 8008874:	d1a7      	bne.n	80087c6 <D32_1CH_HTONS_VOL_HP+0x3a>
 8008876:	9a05      	ldr	r2, [sp, #20]
 8008878:	464b      	mov	r3, r9
 800887a:	e9c2 3802 	strd	r3, r8, [r2, #8]
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	61d5      	str	r5, [r2, #28]
 8008882:	2000      	movs	r0, #0
 8008884:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008888:	6193      	str	r3, [r2, #24]
 800888a:	b007      	add	sp, #28
 800888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008890:	463c      	mov	r4, r7
 8008892:	e7f2      	b.n	800887a <D32_1CH_HTONS_VOL_HP+0xee>
 8008894:	00060003 	.word	0x00060003
 8008898:	000a000c 	.word	0x000a000c
 800889c:	000c000a 	.word	0x000c000a
 80088a0:	00030006 	.word	0x00030006
 80088a4:	20000018 	.word	0x20000018

080088a8 <D48_1CH_HTONS_VOL_HP>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	b087      	sub	sp, #28
 80088ae:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 80088b0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80088b2:	6993      	ldr	r3, [r2, #24]
 80088b4:	9702      	str	r7, [sp, #8]
 80088b6:	6a17      	ldr	r7, [r2, #32]
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 80088be:	69d6      	ldr	r6, [r2, #28]
 80088c0:	9705      	str	r7, [sp, #20]
 80088c2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	f000 8093 	beq.w	80089f2 <D48_1CH_HTONS_VOL_HP+0x14a>
 80088cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088d0:	46ba      	mov	sl, r7
 80088d2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80088d6:	3902      	subs	r1, #2
 80088d8:	4f47      	ldr	r7, [pc, #284]	@ (80089f8 <D48_1CH_HTONS_VOL_HP+0x150>)
 80088da:	9503      	str	r5, [sp, #12]
 80088dc:	9101      	str	r1, [sp, #4]
 80088de:	469e      	mov	lr, r3
 80088e0:	9205      	str	r2, [sp, #20]
 80088e2:	e9d0 3500 	ldrd	r3, r5, [r0]
 80088e6:	3006      	adds	r0, #6
 80088e8:	ba5b      	rev16	r3, r3
 80088ea:	ba6d      	rev16	r5, r5
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80088f2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80088f6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80088fa:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008904:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8008908:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800890c:	fa5f fb85 	uxtb.w	fp, r5
 8008910:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8008914:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8008918:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800891c:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8008920:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8008924:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8008928:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800892c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008930:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008938:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 800893c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008940:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008944:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008948:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800894c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008950:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8008954:	4b29      	ldr	r3, [pc, #164]	@ (80089fc <D48_1CH_HTONS_VOL_HP+0x154>)
 8008956:	fb22 c103 	smlad	r1, r2, r3, ip
 800895a:	4b29      	ldr	r3, [pc, #164]	@ (8008a00 <D48_1CH_HTONS_VOL_HP+0x158>)
 800895c:	fb28 1103 	smlad	r1, r8, r3, r1
 8008960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008964:	fb25 1103 	smlad	r1, r5, r3, r1
 8008968:	4b26      	ldr	r3, [pc, #152]	@ (8008a04 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800896a:	fb22 ec03 	smlad	ip, r2, r3, lr
 800896e:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8008972:	fb28 cc03 	smlad	ip, r8, r3, ip
 8008976:	4b24      	ldr	r3, [pc, #144]	@ (8008a08 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008978:	fb25 cc03 	smlad	ip, r5, r3, ip
 800897c:	f04f 0e01 	mov.w	lr, #1
 8008980:	fb22 f20e 	smuad	r2, r2, lr
 8008984:	4b21      	ldr	r3, [pc, #132]	@ (8008a0c <D48_1CH_HTONS_VOL_HP+0x164>)
 8008986:	fb28 2803 	smlad	r8, r8, r3, r2
 800898a:	4b21      	ldr	r3, [pc, #132]	@ (8008a10 <D48_1CH_HTONS_VOL_HP+0x168>)
 800898c:	fb25 8e03 	smlad	lr, r5, r3, r8
 8008990:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8008994:	190a      	adds	r2, r1, r4
 8008996:	eba2 0209 	sub.w	r2, r2, r9
 800899a:	17d5      	asrs	r5, r2, #31
 800899c:	fba2 230a 	umull	r2, r3, r2, sl
 80089a0:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80089a4:	fb0a 3305 	mla	r3, sl, r5, r3
 80089a8:	f143 0500 	adc.w	r5, r3, #0
 80089ac:	9b02      	ldr	r3, [sp, #8]
 80089ae:	032a      	lsls	r2, r5, #12
 80089b0:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80089b4:	f04f 0900 	mov.w	r9, #0
 80089b8:	fbc3 8902 	smlal	r8, r9, r3, r2
 80089bc:	9a01      	ldr	r2, [sp, #4]
 80089be:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80089c2:	f303 030f 	ssat	r3, #16, r3
 80089c6:	f822 3f02 	strh.w	r3, [r2, #2]!
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	9201      	str	r2, [sp, #4]
 80089ce:	4283      	cmp	r3, r0
 80089d0:	ea4f 0445 	mov.w	r4, r5, lsl #1
 80089d4:	4689      	mov	r9, r1
 80089d6:	d184      	bne.n	80088e2 <D48_1CH_HTONS_VOL_HP+0x3a>
 80089d8:	9a05      	ldr	r2, [sp, #20]
 80089da:	4673      	mov	r3, lr
 80089dc:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 80089e0:	9b04      	ldr	r3, [sp, #16]
 80089e2:	61d6      	str	r6, [r2, #28]
 80089e4:	2000      	movs	r0, #0
 80089e6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80089ea:	6193      	str	r3, [r2, #24]
 80089ec:	b007      	add	sp, #28
 80089ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f2:	4649      	mov	r1, r9
 80089f4:	e7f2      	b.n	80089dc <D48_1CH_HTONS_VOL_HP+0x134>
 80089f6:	bf00      	nop
 80089f8:	20000018 	.word	0x20000018
 80089fc:	000f000a 	.word	0x000f000a
 8008a00:	00060003 	.word	0x00060003
 8008a04:	00150019 	.word	0x00150019
 8008a08:	00190015 	.word	0x00190015
 8008a0c:	00030006 	.word	0x00030006
 8008a10:	000a000f 	.word	0x000a000f

08008a14 <D64_1CH_HTONS_VOL_HP>:
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	b087      	sub	sp, #28
 8008a1a:	6913      	ldr	r3, [r2, #16]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8008a22:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8008a24:	9601      	str	r6, [sp, #4]
 8008a26:	4681      	mov	r9, r0
 8008a28:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8008a2a:	6a16      	ldr	r6, [r2, #32]
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8008a32:	69d3      	ldr	r3, [r2, #28]
 8008a34:	9602      	str	r6, [sp, #8]
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f000 809d 	beq.w	8008b76 <D64_1CH_HTONS_VOL_HP+0x162>
 8008a3c:	468e      	mov	lr, r1
 8008a3e:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8008bb0 <D64_1CH_HTONS_VOL_HP+0x19c>
 8008a42:	9205      	str	r2, [sp, #20]
 8008a44:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f859 3b08 	ldr.w	r3, [r9], #8
 8008a52:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8008a56:	ba5b      	rev16	r3, r3
 8008a58:	ba76      	rev16	r6, r6
 8008a5a:	b2dc      	uxtb	r4, r3
 8008a5c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008a60:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008a64:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8008a68:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008a6c:	0e1b      	lsrs	r3, r3, #24
 8008a6e:	eb01 0b07 	add.w	fp, r1, r7
 8008a72:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8008a76:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8008a7a:	b2f1      	uxtb	r1, r6
 8008a7c:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8008a80:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008a84:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8008a88:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8008a8c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8008a90:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8008a94:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8008a98:	0e36      	lsrs	r6, r6, #24
 8008a9a:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8008a9e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008aa2:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008aa6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8008aaa:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008aae:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008ab2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008ab6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008aba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008ac6:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8008aca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008ace:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008ad2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008ad6:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8008ada:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008ade:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b90 <D64_1CH_HTONS_VOL_HP+0x17c>)
 8008ae4:	0ab1      	lsrs	r1, r6, #10
 8008ae6:	fb2b 8803 	smlad	r8, fp, r3, r8
 8008aea:	4b2a      	ldr	r3, [pc, #168]	@ (8008b94 <D64_1CH_HTONS_VOL_HP+0x180>)
 8008aec:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008af0:	4b29      	ldr	r3, [pc, #164]	@ (8008b98 <D64_1CH_HTONS_VOL_HP+0x184>)
 8008af2:	fb27 8803 	smlad	r8, r7, r3, r8
 8008af6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008afa:	fb20 8604 	smlad	r6, r0, r4, r8
 8008afe:	4b27      	ldr	r3, [pc, #156]	@ (8008b9c <D64_1CH_HTONS_VOL_HP+0x188>)
 8008b00:	fb2b 5803 	smlad	r8, fp, r3, r5
 8008b04:	fb20 8813 	smladx	r8, r0, r3, r8
 8008b08:	4b25      	ldr	r3, [pc, #148]	@ (8008ba0 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008b0a:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008b0e:	fb27 8813 	smladx	r8, r7, r3, r8
 8008b12:	2401      	movs	r4, #1
 8008b14:	fb2b fb04 	smuad	fp, fp, r4
 8008b18:	4b22      	ldr	r3, [pc, #136]	@ (8008ba4 <D64_1CH_HTONS_VOL_HP+0x190>)
 8008b1a:	fb2a ba03 	smlad	sl, sl, r3, fp
 8008b1e:	4b22      	ldr	r3, [pc, #136]	@ (8008ba8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008b20:	fb27 a703 	smlad	r7, r7, r3, sl
 8008b24:	4b21      	ldr	r3, [pc, #132]	@ (8008bac <D64_1CH_HTONS_VOL_HP+0x198>)
 8008b26:	fb20 7503 	smlad	r5, r0, r3, r7
 8008b2a:	9b00      	ldr	r3, [sp, #0]
 8008b2c:	9802      	ldr	r0, [sp, #8]
 8008b2e:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8008b32:	4423      	add	r3, r4
 8008b34:	1a9a      	subs	r2, r3, r2
 8008b36:	17d7      	asrs	r7, r2, #31
 8008b38:	fba2 2300 	umull	r2, r3, r2, r0
 8008b3c:	fb00 3307 	mla	r3, r0, r7, r3
 8008b40:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8008b44:	f143 0b00 	adc.w	fp, r3, #0
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8008b4e:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8008b52:	2700      	movs	r7, #0
 8008b54:	fbc3 6702 	smlal	r6, r7, r3, r2
 8008b58:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008b5c:	10ba      	asrs	r2, r7, #2
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	f302 020f 	ssat	r2, #16, r2
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	f82e 2b02 	strh.w	r2, [lr], #2
 8008b6a:	459e      	cmp	lr, r3
 8008b6c:	4622      	mov	r2, r4
 8008b6e:	f47f af6e 	bne.w	8008a4e <D64_1CH_HTONS_VOL_HP+0x3a>
 8008b72:	9a05      	ldr	r2, [sp, #20]
 8008b74:	460b      	mov	r3, r1
 8008b76:	61d3      	str	r3, [r2, #28]
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	6193      	str	r3, [r2, #24]
 8008b82:	2000      	movs	r0, #0
 8008b84:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8008b88:	b007      	add	sp, #28
 8008b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8e:	bf00      	nop
 8008b90:	001c0015 	.word	0x001c0015
 8008b94:	000f000a 	.word	0x000f000a
 8008b98:	00060003 	.word	0x00060003
 8008b9c:	0024002a 	.word	0x0024002a
 8008ba0:	002e0030 	.word	0x002e0030
 8008ba4:	00030006 	.word	0x00030006
 8008ba8:	000a000f 	.word	0x000a000f
 8008bac:	0015001c 	.word	0x0015001c
 8008bb0:	20000018 	.word	0x20000018

08008bb4 <D80_1CH_HTONS_VOL_HP>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	4615      	mov	r5, r2
 8008bba:	b089      	sub	sp, #36	@ 0x24
 8008bbc:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8008bc0:	692b      	ldr	r3, [r5, #16]
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8008bc8:	9400      	str	r4, [sp, #0]
 8008bca:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008bcc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8008bce:	9403      	str	r4, [sp, #12]
 8008bd0:	6a2c      	ldr	r4, [r5, #32]
 8008bd2:	9306      	str	r3, [sp, #24]
 8008bd4:	9404      	str	r4, [sp, #16]
 8008bd6:	69eb      	ldr	r3, [r5, #28]
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	f000 80d3 	beq.w	8008d84 <D80_1CH_HTONS_VOL_HP+0x1d0>
 8008bde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008be2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008be6:	9205      	str	r2, [sp, #20]
 8008be8:	4c67      	ldr	r4, [pc, #412]	@ (8008d88 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008bea:	9507      	str	r5, [sp, #28]
 8008bec:	1e8a      	subs	r2, r1, #2
 8008bee:	9202      	str	r2, [sp, #8]
 8008bf0:	469b      	mov	fp, r3
 8008bf2:	6807      	ldr	r7, [r0, #0]
 8008bf4:	6842      	ldr	r2, [r0, #4]
 8008bf6:	6883      	ldr	r3, [r0, #8]
 8008bf8:	300a      	adds	r0, #10
 8008bfa:	ba7f      	rev16	r7, r7
 8008bfc:	ba52      	rev16	r2, r2
 8008bfe:	ba5b      	rev16	r3, r3
 8008c00:	b2fd      	uxtb	r5, r7
 8008c02:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8008c06:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8008c0a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008c0e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8008c12:	44f3      	add	fp, lr
 8008c14:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008c18:	0e3f      	lsrs	r7, r7, #24
 8008c1a:	fa5f fe82 	uxtb.w	lr, r2
 8008c1e:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8008c22:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8008c26:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8008c2a:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8008c2e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8008c32:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8008c36:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8008c3a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008c3e:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8008c42:	0e12      	lsrs	r2, r2, #24
 8008c44:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008c48:	fa5f fe83 	uxtb.w	lr, r3
 8008c4c:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8008c50:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c54:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8008c58:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008c5c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8008c60:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008c64:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008c68:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8008c6c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008c70:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008c74:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c78:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008c7c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008c80:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008c84:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8008c88:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c8c:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8008c90:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008c94:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008c98:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c9c:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8008ca0:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8008ca4:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8008ca8:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8008cac:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8008cb0:	4b36      	ldr	r3, [pc, #216]	@ (8008d8c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008cb2:	9a00      	ldr	r2, [sp, #0]
 8008cb4:	fb21 2303 	smlad	r3, r1, r3, r2
 8008cb8:	4a35      	ldr	r2, [pc, #212]	@ (8008d90 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008cba:	fb27 3302 	smlad	r3, r7, r2, r3
 8008cbe:	4a35      	ldr	r2, [pc, #212]	@ (8008d94 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008cc0:	fb25 3302 	smlad	r3, r5, r2, r3
 8008cc4:	4a34      	ldr	r2, [pc, #208]	@ (8008d98 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008cc6:	fb28 3302 	smlad	r3, r8, r2, r3
 8008cca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008cce:	fb2e 3302 	smlad	r3, lr, r2, r3
 8008cd2:	4a32      	ldr	r2, [pc, #200]	@ (8008d9c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008cd4:	fb21 cc02 	smlad	ip, r1, r2, ip
 8008cd8:	4a31      	ldr	r2, [pc, #196]	@ (8008da0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008cda:	fb27 cc02 	smlad	ip, r7, r2, ip
 8008cde:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8008ce2:	fb25 c909 	smlad	r9, r5, r9, ip
 8008ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8008da4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008ce8:	fb28 9902 	smlad	r9, r8, r2, r9
 8008cec:	4a2e      	ldr	r2, [pc, #184]	@ (8008da8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008cee:	fb2e 9202 	smlad	r2, lr, r2, r9
 8008cf2:	f04f 0a01 	mov.w	sl, #1
 8008cf6:	9200      	str	r2, [sp, #0]
 8008cf8:	fb21 fa0a 	smuad	sl, r1, sl
 8008cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8008dac <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008cfe:	fb27 a702 	smlad	r7, r7, r2, sl
 8008d02:	4a2b      	ldr	r2, [pc, #172]	@ (8008db0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8008d04:	fb25 7702 	smlad	r7, r5, r2, r7
 8008d08:	4a2a      	ldr	r2, [pc, #168]	@ (8008db4 <D80_1CH_HTONS_VOL_HP+0x200>)
 8008d0a:	fb28 7202 	smlad	r2, r8, r2, r7
 8008d0e:	4d2a      	ldr	r5, [pc, #168]	@ (8008db8 <D80_1CH_HTONS_VOL_HP+0x204>)
 8008d10:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8008d14:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	9903      	ldr	r1, [sp, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	1b9e      	subs	r6, r3, r6
 8008d20:	9b04      	ldr	r3, [sp, #16]
 8008d22:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008d26:	fba6 5603 	umull	r5, r6, r6, r3
 8008d2a:	fb03 6309 	mla	r3, r3, r9, r6
 8008d2e:	462e      	mov	r6, r5
 8008d30:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8008d34:	f143 0700 	adc.w	r7, r3, #0
 8008d38:	02bb      	lsls	r3, r7, #10
 8008d3a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008d3e:	f04f 0900 	mov.w	r9, #0
 8008d42:	fbc1 8903 	smlal	r8, r9, r1, r3
 8008d46:	9902      	ldr	r1, [sp, #8]
 8008d48:	007b      	lsls	r3, r7, #1
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008d50:	f303 030f 	ssat	r3, #16, r3
 8008d54:	f821 3f02 	strh.w	r3, [r1, #2]!
 8008d58:	9b05      	ldr	r3, [sp, #20]
 8008d5a:	9102      	str	r1, [sp, #8]
 8008d5c:	4283      	cmp	r3, r0
 8008d5e:	4616      	mov	r6, r2
 8008d60:	f47f af47 	bne.w	8008bf2 <D80_1CH_HTONS_VOL_HP+0x3e>
 8008d64:	9d07      	ldr	r5, [sp, #28]
 8008d66:	465b      	mov	r3, fp
 8008d68:	61eb      	str	r3, [r5, #28]
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	9900      	ldr	r1, [sp, #0]
 8008d6e:	f8c5 c008 	str.w	ip, [r5, #8]
 8008d72:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	60e9      	str	r1, [r5, #12]
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	61ab      	str	r3, [r5, #24]
 8008d7e:	b009      	add	sp, #36	@ 0x24
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	4632      	mov	r2, r6
 8008d86:	e7ef      	b.n	8008d68 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8008d88:	20000018 	.word	0x20000018
 8008d8c:	002d0024 	.word	0x002d0024
 8008d90:	001c0015 	.word	0x001c0015
 8008d94:	000f000a 	.word	0x000f000a
 8008d98:	00060003 	.word	0x00060003
 8008d9c:	0037003f 	.word	0x0037003f
 8008da0:	00450049 	.word	0x00450049
 8008da4:	00490045 	.word	0x00490045
 8008da8:	003f0037 	.word	0x003f0037
 8008dac:	00030006 	.word	0x00030006
 8008db0:	000a000f 	.word	0x000a000f
 8008db4:	0015001c 	.word	0x0015001c
 8008db8:	0024002d 	.word	0x0024002d

08008dbc <D128_1CH_HTONS_VOL_HP>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	b093      	sub	sp, #76	@ 0x4c
 8008dc2:	6914      	ldr	r4, [r2, #16]
 8008dc4:	9404      	str	r4, [sp, #16]
 8008dc6:	6954      	ldr	r4, [r2, #20]
 8008dc8:	9406      	str	r4, [sp, #24]
 8008dca:	6994      	ldr	r4, [r2, #24]
 8008dcc:	9410      	str	r4, [sp, #64]	@ 0x40
 8008dce:	6894      	ldr	r4, [r2, #8]
 8008dd0:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008dd2:	9403      	str	r4, [sp, #12]
 8008dd4:	68d4      	ldr	r4, [r2, #12]
 8008dd6:	9211      	str	r2, [sp, #68]	@ 0x44
 8008dd8:	69d6      	ldr	r6, [r2, #28]
 8008dda:	9402      	str	r4, [sp, #8]
 8008ddc:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008dde:	6a12      	ldr	r2, [r2, #32]
 8008de0:	940d      	str	r4, [sp, #52]	@ 0x34
 8008de2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 814a 	beq.w	800907e <D128_1CH_HTONS_VOL_HP+0x2c2>
 8008dea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008dee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008df0:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 80090bc <D128_1CH_HTONS_VOL_HP+0x300>
 8008df4:	9107      	str	r1, [sp, #28]
 8008df6:	f100 0310 	add.w	r3, r0, #16
 8008dfa:	469b      	mov	fp, r3
 8008dfc:	9605      	str	r6, [sp, #20]
 8008dfe:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 8008e02:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8008e06:	ba49      	rev16	r1, r1
 8008e08:	ba52      	rev16	r2, r2
 8008e0a:	ba5b      	rev16	r3, r3
 8008e0c:	fa90 fa90 	rev16.w	sl, r0
 8008e10:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8008e14:	b2cc      	uxtb	r4, r1
 8008e16:	9e05      	ldr	r6, [sp, #20]
 8008e18:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8008e1c:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8008e20:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008e24:	0e09      	lsrs	r1, r1, #24
 8008e26:	4426      	add	r6, r4
 8008e28:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8008e2c:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8008e30:	b2d0      	uxtb	r0, r2
 8008e32:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008e36:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008e3a:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8008e3e:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8008e42:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8008e46:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008e4a:	0e12      	lsrs	r2, r2, #24
 8008e4c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008e50:	9401      	str	r4, [sp, #4]
 8008e52:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8008e56:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8008e5a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008e5e:	9705      	str	r7, [sp, #20]
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8008e66:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8008e6a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8008e6e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008e72:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8008e76:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008e7a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008e7e:	0e1b      	lsrs	r3, r3, #24
 8008e80:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8008e84:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8008e88:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8008e8c:	fa5f f38a 	uxtb.w	r3, sl
 8008e90:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008e94:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e96:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008e9a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8008e9e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008ea2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8008ea6:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008ea8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008eac:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008eb0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008eb4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8008eb8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8008ebc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008ec0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008ec4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008ec8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8008ecc:	9308      	str	r3, [sp, #32]
 8008ece:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008ed2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008ed6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008edc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008ee0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008ee4:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008ee8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008eec:	9b05      	ldr	r3, [sp, #20]
 8008eee:	f8cd 9014 	str.w	r9, [sp, #20]
 8008ef2:	4691      	mov	r9, r2
 8008ef4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ef6:	f8cd a004 	str.w	sl, [sp, #4]
 8008efa:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8008efe:	9a01      	ldr	r2, [sp, #4]
 8008f00:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008f04:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8008f08:	9b08      	ldr	r3, [sp, #32]
 8008f0a:	9a05      	ldr	r2, [sp, #20]
 8008f0c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008f10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f16:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008f1a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8008f1e:	9201      	str	r2, [sp, #4]
 8008f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008f26:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008f2a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008f2e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f32:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008f36:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008f3a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008f3e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8008f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f46:	0a92      	lsrs	r2, r2, #10
 8008f48:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8008f4c:	9205      	str	r2, [sp, #20]
 8008f4e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008f56:	4d4b      	ldr	r5, [pc, #300]	@ (8009084 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008f58:	9a02      	ldr	r2, [sp, #8]
 8008f5a:	fb29 2505 	smlad	r5, r9, r5, r2
 8008f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8009088 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8008f60:	fb2a 5502 	smlad	r5, sl, r2, r5
 8008f64:	4a49      	ldr	r2, [pc, #292]	@ (800908c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8008f66:	fb21 5502 	smlad	r5, r1, r2, r5
 8008f6a:	4a49      	ldr	r2, [pc, #292]	@ (8009090 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8008f6c:	fb24 5502 	smlad	r5, r4, r2, r5
 8008f70:	4a48      	ldr	r2, [pc, #288]	@ (8009094 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8008f72:	9e01      	ldr	r6, [sp, #4]
 8008f74:	fb26 5502 	smlad	r5, r6, r2, r5
 8008f78:	4a47      	ldr	r2, [pc, #284]	@ (8009098 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8008f7a:	fb20 5502 	smlad	r5, r0, r2, r5
 8008f7e:	4a47      	ldr	r2, [pc, #284]	@ (800909c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8008f80:	fb23 5502 	smlad	r5, r3, r2, r5
 8008f84:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8008f88:	fb27 520c 	smlad	r2, r7, ip, r5
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	9d03      	ldr	r5, [sp, #12]
 8008f90:	4a43      	ldr	r2, [pc, #268]	@ (80090a0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8008f92:	fb29 5c02 	smlad	ip, r9, r2, r5
 8008f96:	4a43      	ldr	r2, [pc, #268]	@ (80090a4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8008f98:	fb2a ce02 	smlad	lr, sl, r2, ip
 8008f9c:	f8df c120 	ldr.w	ip, [pc, #288]	@ 80090c0 <D128_1CH_HTONS_VOL_HP+0x304>
 8008fa0:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8008fa4:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 80090c4 <D128_1CH_HTONS_VOL_HP+0x308>
 8008fa8:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8008fac:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80090c8 <D128_1CH_HTONS_VOL_HP+0x30c>
 8008fb0:	9d01      	ldr	r5, [sp, #4]
 8008fb2:	fb25 ce0e 	smlad	lr, r5, lr, ip
 8008fb6:	f8df c114 	ldr.w	ip, [pc, #276]	@ 80090cc <D128_1CH_HTONS_VOL_HP+0x310>
 8008fba:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8008fbe:	f8df c110 	ldr.w	ip, [pc, #272]	@ 80090d0 <D128_1CH_HTONS_VOL_HP+0x314>
 8008fc2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008fc6:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 80090d4 <D128_1CH_HTONS_VOL_HP+0x318>
 8008fca:	fb27 c20e 	smlad	r2, r7, lr, ip
 8008fce:	f04f 0c01 	mov.w	ip, #1
 8008fd2:	9202      	str	r2, [sp, #8]
 8008fd4:	fb29 fc0c 	smuad	ip, r9, ip
 8008fd8:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80090d8 <D128_1CH_HTONS_VOL_HP+0x31c>
 8008fdc:	fb2a ca09 	smlad	sl, sl, r9, ip
 8008fe0:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80090dc <D128_1CH_HTONS_VOL_HP+0x320>
 8008fe4:	fb21 a909 	smlad	r9, r1, r9, sl
 8008fe8:	492f      	ldr	r1, [pc, #188]	@ (80090a8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8008fea:	fb24 9901 	smlad	r9, r4, r1, r9
 8008fee:	492f      	ldr	r1, [pc, #188]	@ (80090ac <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8008ff0:	fb25 9901 	smlad	r9, r5, r1, r9
 8008ff4:	492e      	ldr	r1, [pc, #184]	@ (80090b0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8008ff6:	fb20 9901 	smlad	r9, r0, r1, r9
 8008ffa:	492e      	ldr	r1, [pc, #184]	@ (80090b4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8008ffc:	fb23 9301 	smlad	r3, r3, r1, r9
 8009000:	482d      	ldr	r0, [pc, #180]	@ (80090b8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8009002:	fb27 3300 	smlad	r3, r7, r0, r3
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800900c:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8009010:	442b      	add	r3, r5
 8009012:	461a      	mov	r2, r3
 8009014:	9b06      	ldr	r3, [sp, #24]
 8009016:	9506      	str	r5, [sp, #24]
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	17d1      	asrs	r1, r2, #31
 800901c:	fba2 2304 	umull	r2, r3, r2, r4
 8009020:	fb04 3301 	mla	r3, r4, r1, r3
 8009024:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8009028:	f143 0a00 	adc.w	sl, r3, #0
 800902c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800902e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8009032:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009036:	2100      	movs	r1, #0
 8009038:	fbc3 0102 	smlal	r0, r1, r3, r2
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	108a      	asrs	r2, r1, #2
 8009040:	f302 020f 	ssat	r2, #16, r2
 8009044:	f823 2b02 	strh.w	r2, [r3], #2
 8009048:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800904c:	9204      	str	r2, [sp, #16]
 800904e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009050:	9307      	str	r3, [sp, #28]
 8009052:	4293      	cmp	r3, r2
 8009054:	f10b 0b10 	add.w	fp, fp, #16
 8009058:	f47f aed1 	bne.w	8008dfe <D128_1CH_HTONS_VOL_HP+0x42>
 800905c:	9e05      	ldr	r6, [sp, #20]
 800905e:	4629      	mov	r1, r5
 8009060:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009062:	9803      	ldr	r0, [sp, #12]
 8009064:	6098      	str	r0, [r3, #8]
 8009066:	9802      	ldr	r0, [sp, #8]
 8009068:	60d8      	str	r0, [r3, #12]
 800906a:	9804      	ldr	r0, [sp, #16]
 800906c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800906e:	61de      	str	r6, [r3, #28]
 8009070:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009074:	2000      	movs	r0, #0
 8009076:	619a      	str	r2, [r3, #24]
 8009078:	b013      	add	sp, #76	@ 0x4c
 800907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907e:	9906      	ldr	r1, [sp, #24]
 8009080:	e7ee      	b.n	8009060 <D128_1CH_HTONS_VOL_HP+0x2a4>
 8009082:	bf00      	nop
 8009084:	00780069 	.word	0x00780069
 8009088:	005b004e 	.word	0x005b004e
 800908c:	00420037 	.word	0x00420037
 8009090:	002d0024 	.word	0x002d0024
 8009094:	001c0015 	.word	0x001c0015
 8009098:	000f000a 	.word	0x000f000a
 800909c:	00060003 	.word	0x00060003
 80090a0:	00880096 	.word	0x00880096
 80090a4:	00a200ac 	.word	0x00a200ac
 80090a8:	0015001c 	.word	0x0015001c
 80090ac:	0024002d 	.word	0x0024002d
 80090b0:	00370042 	.word	0x00370042
 80090b4:	004e005b 	.word	0x004e005b
 80090b8:	00690078 	.word	0x00690078
 80090bc:	20000018 	.word	0x20000018
 80090c0:	00b400ba 	.word	0x00b400ba
 80090c4:	00be00c0 	.word	0x00be00c0
 80090c8:	00c000be 	.word	0x00c000be
 80090cc:	00ba00b4 	.word	0x00ba00b4
 80090d0:	00ac00a2 	.word	0x00ac00a2
 80090d4:	00960088 	.word	0x00960088
 80090d8:	00030006 	.word	0x00030006
 80090dc:	000a000f 	.word	0x000a000f

080090e0 <PDM_Filter_Init>:
 80090e0:	4a59      	ldr	r2, [pc, #356]	@ (8009248 <PDM_Filter_Init+0x168>)
 80090e2:	495a      	ldr	r1, [pc, #360]	@ (800924c <PDM_Filter_Init+0x16c>)
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	680b      	ldr	r3, [r1, #0]
 80090f0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80090f4:	4013      	ands	r3, r2
 80090f6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80090fa:	42ab      	cmp	r3, r5
 80090fc:	4604      	mov	r4, r0
 80090fe:	d044      	beq.n	800918a <PDM_Filter_Init+0xaa>
 8009100:	680b      	ldr	r3, [r1, #0]
 8009102:	f24c 2170 	movw	r1, #49776	@ 0xc270
 8009106:	401a      	ands	r2, r3
 8009108:	428a      	cmp	r2, r1
 800910a:	d03e      	beq.n	800918a <PDM_Filter_Init+0xaa>
 800910c:	4b50      	ldr	r3, [pc, #320]	@ (8009250 <PDM_Filter_Init+0x170>)
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	2900      	cmp	r1, #0
 8009116:	d1fc      	bne.n	8009112 <PDM_Filter_Init+0x32>
 8009118:	4b4e      	ldr	r3, [pc, #312]	@ (8009254 <PDM_Filter_Init+0x174>)
 800911a:	4a4f      	ldr	r2, [pc, #316]	@ (8009258 <PDM_Filter_Init+0x178>)
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	4b4e      	ldr	r3, [pc, #312]	@ (800925c <PDM_Filter_Init+0x17c>)
 8009122:	429a      	cmp	r2, r3
 8009124:	f104 000c 	add.w	r0, r4, #12
 8009128:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800912c:	d047      	beq.n	80091be <PDM_Filter_Init+0xde>
 800912e:	f000 f9c7 	bl	80094c0 <memset>
 8009132:	2300      	movs	r3, #0
 8009134:	6463      	str	r3, [r4, #68]	@ 0x44
 8009136:	8820      	ldrh	r0, [r4, #0]
 8009138:	8963      	ldrh	r3, [r4, #10]
 800913a:	8922      	ldrh	r2, [r4, #8]
 800913c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800913e:	2801      	cmp	r0, #1
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	61a3      	str	r3, [r4, #24]
 8009146:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800914a:	60e3      	str	r3, [r4, #12]
 800914c:	6263      	str	r3, [r4, #36]	@ 0x24
 800914e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009152:	6423      	str	r3, [r4, #64]	@ 0x40
 8009154:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8009156:	d93a      	bls.n	80091ce <PDM_Filter_Init+0xee>
 8009158:	2003      	movs	r0, #3
 800915a:	2302      	movs	r3, #2
 800915c:	8862      	ldrh	r2, [r4, #2]
 800915e:	2a01      	cmp	r2, #1
 8009160:	d932      	bls.n	80091c8 <PDM_Filter_Init+0xe8>
 8009162:	2140      	movs	r1, #64	@ 0x40
 8009164:	2300      	movs	r3, #0
 8009166:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009168:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	bf04      	itt	eq
 8009170:	6421      	streq	r1, [r4, #64]	@ 0x40
 8009172:	460b      	moveq	r3, r1
 8009174:	b11a      	cbz	r2, 800917e <PDM_Filter_Init+0x9e>
 8009176:	f043 0310 	orr.w	r3, r3, #16
 800917a:	6423      	str	r3, [r4, #64]	@ 0x40
 800917c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800917e:	2200      	movs	r2, #0
 8009180:	8722      	strh	r2, [r4, #56]	@ 0x38
 8009182:	b908      	cbnz	r0, 8009188 <PDM_Filter_Init+0xa8>
 8009184:	3380      	adds	r3, #128	@ 0x80
 8009186:	6423      	str	r3, [r4, #64]	@ 0x40
 8009188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918a:	4b35      	ldr	r3, [pc, #212]	@ (8009260 <PDM_Filter_Init+0x180>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1bc      	bne.n	800910c <PDM_Filter_Init+0x2c>
 8009192:	4a34      	ldr	r2, [pc, #208]	@ (8009264 <PDM_Filter_Init+0x184>)
 8009194:	6813      	ldr	r3, [r2, #0]
 8009196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800919a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800919e:	d006      	beq.n	80091ae <PDM_Filter_Init+0xce>
 80091a0:	6813      	ldr	r3, [r2, #0]
 80091a2:	f240 4283 	movw	r2, #1155	@ 0x483
 80091a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d1ae      	bne.n	800910c <PDM_Filter_Init+0x2c>
 80091ae:	4b2e      	ldr	r3, [pc, #184]	@ (8009268 <PDM_Filter_Init+0x188>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	6819      	ldr	r1, [r3, #0]
 80091b6:	2900      	cmp	r1, #0
 80091b8:	d1fc      	bne.n	80091b4 <PDM_Filter_Init+0xd4>
 80091ba:	4b2c      	ldr	r3, [pc, #176]	@ (800926c <PDM_Filter_Init+0x18c>)
 80091bc:	e7ad      	b.n	800911a <PDM_Filter_Init+0x3a>
 80091be:	f000 f97f 	bl	80094c0 <memset>
 80091c2:	4b26      	ldr	r3, [pc, #152]	@ (800925c <PDM_Filter_Init+0x17c>)
 80091c4:	6463      	str	r3, [r4, #68]	@ 0x44
 80091c6:	e7b6      	b.n	8009136 <PDM_Filter_Init+0x56>
 80091c8:	d038      	beq.n	800923c <PDM_Filter_Init+0x15c>
 80091ca:	4618      	mov	r0, r3
 80091cc:	e7c9      	b.n	8009162 <PDM_Filter_Init+0x82>
 80091ce:	4d28      	ldr	r5, [pc, #160]	@ (8009270 <PDM_Filter_Init+0x190>)
 80091d0:	782a      	ldrb	r2, [r5, #0]
 80091d2:	d01a      	beq.n	800920a <PDM_Filter_Init+0x12a>
 80091d4:	2a01      	cmp	r2, #1
 80091d6:	d001      	beq.n	80091dc <PDM_Filter_Init+0xfc>
 80091d8:	2001      	movs	r0, #1
 80091da:	e7bf      	b.n	800915c <PDM_Filter_Init+0x7c>
 80091dc:	4925      	ldr	r1, [pc, #148]	@ (8009274 <PDM_Filter_Init+0x194>)
 80091de:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 800927c <PDM_Filter_Init+0x19c>
 80091e2:	4f25      	ldr	r7, [pc, #148]	@ (8009278 <PDM_Filter_Init+0x198>)
 80091e4:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80091e8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80091ec:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80091f0:	ea02 0007 	and.w	r0, r2, r7
 80091f4:	4303      	orrs	r3, r0
 80091f6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80091fa:	4413      	add	r3, r2
 80091fc:	428e      	cmp	r6, r1
 80091fe:	600b      	str	r3, [r1, #0]
 8009200:	d1f2      	bne.n	80091e8 <PDM_Filter_Init+0x108>
 8009202:	2300      	movs	r3, #0
 8009204:	702b      	strb	r3, [r5, #0]
 8009206:	2001      	movs	r0, #1
 8009208:	e7a8      	b.n	800915c <PDM_Filter_Init+0x7c>
 800920a:	2a00      	cmp	r2, #0
 800920c:	d1a6      	bne.n	800915c <PDM_Filter_Init+0x7c>
 800920e:	4919      	ldr	r1, [pc, #100]	@ (8009274 <PDM_Filter_Init+0x194>)
 8009210:	f8df c068 	ldr.w	ip, [pc, #104]	@ 800927c <PDM_Filter_Init+0x19c>
 8009214:	4f18      	ldr	r7, [pc, #96]	@ (8009278 <PDM_Filter_Init+0x198>)
 8009216:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800921a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800921e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009222:	ea02 0007 	and.w	r0, r2, r7
 8009226:	4303      	orrs	r3, r0
 8009228:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800922c:	4413      	add	r3, r2
 800922e:	428e      	cmp	r6, r1
 8009230:	600b      	str	r3, [r1, #0]
 8009232:	d1f2      	bne.n	800921a <PDM_Filter_Init+0x13a>
 8009234:	2001      	movs	r0, #1
 8009236:	7028      	strb	r0, [r5, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	e78f      	b.n	800915c <PDM_Filter_Init+0x7c>
 800923c:	2220      	movs	r2, #32
 800923e:	4618      	mov	r0, r3
 8009240:	6422      	str	r2, [r4, #64]	@ 0x40
 8009242:	4613      	mov	r3, r2
 8009244:	2160      	movs	r1, #96	@ 0x60
 8009246:	e78e      	b.n	8009166 <PDM_Filter_Init+0x86>
 8009248:	e0002000 	.word	0xe0002000
 800924c:	e000ed00 	.word	0xe000ed00
 8009250:	40023008 	.word	0x40023008
 8009254:	40023000 	.word	0x40023000
 8009258:	f407a5c2 	.word	0xf407a5c2
 800925c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009260:	e0042000 	.word	0xe0042000
 8009264:	5c001000 	.word	0x5c001000
 8009268:	58024c08 	.word	0x58024c08
 800926c:	58024c00 	.word	0x58024c00
 8009270:	20003be2 	.word	0x20003be2
 8009274:	20000014 	.word	0x20000014
 8009278:	000ffc00 	.word	0x000ffc00
 800927c:	3ff00000 	.word	0x3ff00000

08009280 <PDM_Filter_setConfig>:
 8009280:	4b6d      	ldr	r3, [pc, #436]	@ (8009438 <PDM_Filter_setConfig+0x1b8>)
 8009282:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8009284:	429a      	cmp	r2, r3
 8009286:	d12f      	bne.n	80092e8 <PDM_Filter_setConfig+0x68>
 8009288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800928a:	880e      	ldrh	r6, [r1, #0]
 800928c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800928e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009292:	ed2d 8b02 	vpush	{d8}
 8009296:	4604      	mov	r4, r0
 8009298:	1e72      	subs	r2, r6, #1
 800929a:	460d      	mov	r5, r1
 800929c:	2a06      	cmp	r2, #6
 800929e:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80092a2:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 80092a6:	6421      	str	r1, [r4, #64]	@ 0x40
 80092a8:	b083      	sub	sp, #12
 80092aa:	d904      	bls.n	80092b6 <PDM_Filter_setConfig+0x36>
 80092ac:	42b8      	cmp	r0, r7
 80092ae:	f000 80bb 	beq.w	8009428 <PDM_Filter_setConfig+0x1a8>
 80092b2:	2008      	movs	r0, #8
 80092b4:	e01d      	b.n	80092f2 <PDM_Filter_setConfig+0x72>
 80092b6:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80092b8:	42b2      	cmp	r2, r6
 80092ba:	d070      	beq.n	800939e <PDM_Filter_setConfig+0x11e>
 80092bc:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 80092c0:	f023 0301 	bic.w	r3, r3, #1
 80092c4:	4333      	orrs	r3, r6
 80092c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80092ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80092cc:	2a70      	cmp	r2, #112	@ 0x70
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80092d6:	d067      	beq.n	80093a8 <PDM_Filter_setConfig+0x128>
 80092d8:	2b06      	cmp	r3, #6
 80092da:	d809      	bhi.n	80092f0 <PDM_Filter_setConfig+0x70>
 80092dc:	e8df f003 	tbb	[pc, r3]
 80092e0:	89868380 	.word	0x89868380
 80092e4:	8f8c      	.short	0x8f8c
 80092e6:	7d          	.byte	0x7d
 80092e7:	00          	.byte	0x00
 80092e8:	2004      	movs	r0, #4
 80092ea:	4770      	bx	lr
 80092ec:	4b53      	ldr	r3, [pc, #332]	@ (800943c <PDM_Filter_setConfig+0x1bc>)
 80092ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 80092f0:	2000      	movs	r0, #0
 80092f2:	f117 0f0c 	cmn.w	r7, #12
 80092f6:	da0a      	bge.n	800930e <PDM_Filter_setConfig+0x8e>
 80092f8:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80092fc:	3040      	adds	r0, #64	@ 0x40
 80092fe:	80ab      	strh	r3, [r5, #4]
 8009300:	886b      	ldrh	r3, [r5, #2]
 8009302:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009304:	8626      	strh	r6, [r4, #48]	@ 0x30
 8009306:	b003      	add	sp, #12
 8009308:	ecbd 8b02 	vpop	{d8}
 800930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930e:	2f33      	cmp	r7, #51	@ 0x33
 8009310:	dc41      	bgt.n	8009396 <PDM_Filter_setConfig+0x116>
 8009312:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	3b01      	subs	r3, #1
 800931a:	2b06      	cmp	r3, #6
 800931c:	d858      	bhi.n	80093d0 <PDM_Filter_setConfig+0x150>
 800931e:	4948      	ldr	r1, [pc, #288]	@ (8009440 <PDM_Filter_setConfig+0x1c0>)
 8009320:	4a48      	ldr	r2, [pc, #288]	@ (8009444 <PDM_Filter_setConfig+0x1c4>)
 8009322:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8009448 <PDM_Filter_setConfig+0x1c8>
 8009326:	9001      	str	r0, [sp, #4]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4419      	add	r1, r3
 800932c:	edd1 7a00 	vldr	s15, [r1]
 8009330:	4413      	add	r3, r2
 8009332:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009336:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800933a:	ed93 8a00 	vldr	s16, [r3]
 800933e:	f000 f8f1 	bl	8009524 <powf>
 8009342:	9801      	ldr	r0, [sp, #4]
 8009344:	eef0 8a40 	vmov.f32	s17, s0
 8009348:	ee07 7a10 	vmov	s14, r7
 800934c:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800944c <PDM_Filter_setConfig+0x1cc>
 8009350:	9001      	str	r0, [sp, #4]
 8009352:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8009356:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800935a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800935e:	f000 f8e1 	bl	8009524 <powf>
 8009362:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009366:	ee28 0a00 	vmul.f32	s0, s16, s0
 800936a:	f000 f965 	bl	8009638 <roundf>
 800936e:	9801      	ldr	r0, [sp, #4]
 8009370:	886b      	ldrh	r3, [r5, #2]
 8009372:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009374:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009378:	8727      	strh	r7, [r4, #56]	@ 0x38
 800937a:	8626      	strh	r6, [r4, #48]	@ 0x30
 800937c:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8009380:	2800      	cmp	r0, #0
 8009382:	d1c0      	bne.n	8009306 <PDM_Filter_setConfig+0x86>
 8009384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009386:	2000      	movs	r0, #0
 8009388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800938c:	6423      	str	r3, [r4, #64]	@ 0x40
 800938e:	b003      	add	sp, #12
 8009390:	ecbd 8b02 	vpop	{d8}
 8009394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009396:	2333      	movs	r3, #51	@ 0x33
 8009398:	3040      	adds	r0, #64	@ 0x40
 800939a:	80ab      	strh	r3, [r5, #4]
 800939c:	e7b0      	b.n	8009300 <PDM_Filter_setConfig+0x80>
 800939e:	42b8      	cmp	r0, r7
 80093a0:	d1a6      	bne.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093a2:	886b      	ldrh	r3, [r5, #2]
 80093a4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80093a6:	e7ed      	b.n	8009384 <PDM_Filter_setConfig+0x104>
 80093a8:	2b06      	cmp	r3, #6
 80093aa:	d8a1      	bhi.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093ac:	a201      	add	r2, pc, #4	@ (adr r2, 80093b4 <PDM_Filter_setConfig+0x134>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	08009423 	.word	0x08009423
 80093b8:	0800941d 	.word	0x0800941d
 80093bc:	08009411 	.word	0x08009411
 80093c0:	0800940b 	.word	0x0800940b
 80093c4:	080092ed 	.word	0x080092ed
 80093c8:	08009405 	.word	0x08009405
 80093cc:	08009417 	.word	0x08009417
 80093d0:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8009450 <PDM_Filter_setConfig+0x1d0>
 80093d4:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8009454 <PDM_Filter_setConfig+0x1d4>
 80093d8:	e7b6      	b.n	8009348 <PDM_Filter_setConfig+0xc8>
 80093da:	4b1f      	ldr	r3, [pc, #124]	@ (8009458 <PDM_Filter_setConfig+0x1d8>)
 80093dc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093de:	e787      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093e0:	4b1e      	ldr	r3, [pc, #120]	@ (800945c <PDM_Filter_setConfig+0x1dc>)
 80093e2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093e4:	e784      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009460 <PDM_Filter_setConfig+0x1e0>)
 80093e8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093ea:	e781      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009464 <PDM_Filter_setConfig+0x1e4>)
 80093ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093f0:	e77e      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009468 <PDM_Filter_setConfig+0x1e8>)
 80093f4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093f6:	e77b      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093f8:	4b1c      	ldr	r3, [pc, #112]	@ (800946c <PDM_Filter_setConfig+0x1ec>)
 80093fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093fc:	e778      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 80093fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009470 <PDM_Filter_setConfig+0x1f0>)
 8009400:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009402:	e775      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 8009404:	4b1b      	ldr	r3, [pc, #108]	@ (8009474 <PDM_Filter_setConfig+0x1f4>)
 8009406:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009408:	e772      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 800940a:	4b1b      	ldr	r3, [pc, #108]	@ (8009478 <PDM_Filter_setConfig+0x1f8>)
 800940c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800940e:	e76f      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 8009410:	4b1a      	ldr	r3, [pc, #104]	@ (800947c <PDM_Filter_setConfig+0x1fc>)
 8009412:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009414:	e76c      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 8009416:	4b1a      	ldr	r3, [pc, #104]	@ (8009480 <PDM_Filter_setConfig+0x200>)
 8009418:	64a3      	str	r3, [r4, #72]	@ 0x48
 800941a:	e769      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 800941c:	4b19      	ldr	r3, [pc, #100]	@ (8009484 <PDM_Filter_setConfig+0x204>)
 800941e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009420:	e766      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 8009422:	4b19      	ldr	r3, [pc, #100]	@ (8009488 <PDM_Filter_setConfig+0x208>)
 8009424:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009426:	e763      	b.n	80092f0 <PDM_Filter_setConfig+0x70>
 8009428:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800942a:	42b3      	cmp	r3, r6
 800942c:	f47f af41 	bne.w	80092b2 <PDM_Filter_setConfig+0x32>
 8009430:	886b      	ldrh	r3, [r5, #2]
 8009432:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009434:	2008      	movs	r0, #8
 8009436:	e766      	b.n	8009306 <PDM_Filter_setConfig+0x86>
 8009438:	b5e8b5cd 	.word	0xb5e8b5cd
 800943c:	08008561 	.word	0x08008561
 8009440:	08009d30 	.word	0x08009d30
 8009444:	08009d4c 	.word	0x08009d4c
 8009448:	42000000 	.word	0x42000000
 800944c:	3d4ccccd 	.word	0x3d4ccccd
 8009450:	4f800000 	.word	0x4f800000
 8009454:	00000000 	.word	0x00000000
 8009458:	08007961 	.word	0x08007961
 800945c:	08007ae9 	.word	0x08007ae9
 8009460:	08007cd1 	.word	0x08007cd1
 8009464:	08007eed 	.word	0x08007eed
 8009468:	08008181 	.word	0x08008181
 800946c:	080076c1 	.word	0x080076c1
 8009470:	080077d9 	.word	0x080077d9
 8009474:	08008649 	.word	0x08008649
 8009478:	08008dbd 	.word	0x08008dbd
 800947c:	08008bb5 	.word	0x08008bb5
 8009480:	0800878d 	.word	0x0800878d
 8009484:	08008a15 	.word	0x08008a15
 8009488:	080088a9 	.word	0x080088a9

0800948c <PDM_Filter>:
 800948c:	b410      	push	{r4}
 800948e:	4b0b      	ldr	r3, [pc, #44]	@ (80094bc <PDM_Filter+0x30>)
 8009490:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8009492:	429c      	cmp	r4, r3
 8009494:	d107      	bne.n	80094a6 <PDM_Filter+0x1a>
 8009496:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009498:	05dc      	lsls	r4, r3, #23
 800949a:	d508      	bpl.n	80094ae <PDM_Filter+0x22>
 800949c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800949e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a2:	320c      	adds	r2, #12
 80094a4:	4718      	bx	r3
 80094a6:	2004      	movs	r0, #4
 80094a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094b2:	bf14      	ite	ne
 80094b4:	2020      	movne	r0, #32
 80094b6:	2030      	moveq	r0, #48	@ 0x30
 80094b8:	e7f6      	b.n	80094a8 <PDM_Filter+0x1c>
 80094ba:	bf00      	nop
 80094bc:	b5e8b5cd 	.word	0xb5e8b5cd

080094c0 <memset>:
 80094c0:	4402      	add	r2, r0
 80094c2:	4603      	mov	r3, r0
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d100      	bne.n	80094ca <memset+0xa>
 80094c8:	4770      	bx	lr
 80094ca:	f803 1b01 	strb.w	r1, [r3], #1
 80094ce:	e7f9      	b.n	80094c4 <memset+0x4>

080094d0 <__errno>:
 80094d0:	4b01      	ldr	r3, [pc, #4]	@ (80094d8 <__errno+0x8>)
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	20000418 	.word	0x20000418

080094dc <__libc_init_array>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	4d0d      	ldr	r5, [pc, #52]	@ (8009514 <__libc_init_array+0x38>)
 80094e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009518 <__libc_init_array+0x3c>)
 80094e2:	1b64      	subs	r4, r4, r5
 80094e4:	10a4      	asrs	r4, r4, #2
 80094e6:	2600      	movs	r6, #0
 80094e8:	42a6      	cmp	r6, r4
 80094ea:	d109      	bne.n	8009500 <__libc_init_array+0x24>
 80094ec:	4d0b      	ldr	r5, [pc, #44]	@ (800951c <__libc_init_array+0x40>)
 80094ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009520 <__libc_init_array+0x44>)
 80094f0:	f000 fc02 	bl	8009cf8 <_init>
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	2600      	movs	r6, #0
 80094fa:	42a6      	cmp	r6, r4
 80094fc:	d105      	bne.n	800950a <__libc_init_array+0x2e>
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	f855 3b04 	ldr.w	r3, [r5], #4
 8009504:	4798      	blx	r3
 8009506:	3601      	adds	r6, #1
 8009508:	e7ee      	b.n	80094e8 <__libc_init_array+0xc>
 800950a:	f855 3b04 	ldr.w	r3, [r5], #4
 800950e:	4798      	blx	r3
 8009510:	3601      	adds	r6, #1
 8009512:	e7f2      	b.n	80094fa <__libc_init_array+0x1e>
 8009514:	08009d88 	.word	0x08009d88
 8009518:	08009d88 	.word	0x08009d88
 800951c:	08009d88 	.word	0x08009d88
 8009520:	08009d8c 	.word	0x08009d8c

08009524 <powf>:
 8009524:	b508      	push	{r3, lr}
 8009526:	ed2d 8b04 	vpush	{d8-d9}
 800952a:	eeb0 8a60 	vmov.f32	s16, s1
 800952e:	eeb0 9a40 	vmov.f32	s18, s0
 8009532:	f000 f8a5 	bl	8009680 <__ieee754_powf>
 8009536:	eeb4 8a48 	vcmp.f32	s16, s16
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	eef0 8a40 	vmov.f32	s17, s0
 8009542:	d63e      	bvs.n	80095c2 <powf+0x9e>
 8009544:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	d112      	bne.n	8009574 <powf+0x50>
 800954e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009556:	d039      	beq.n	80095cc <powf+0xa8>
 8009558:	eeb0 0a48 	vmov.f32	s0, s16
 800955c:	f000 f839 	bl	80095d2 <finitef>
 8009560:	b378      	cbz	r0, 80095c2 <powf+0x9e>
 8009562:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956a:	d52a      	bpl.n	80095c2 <powf+0x9e>
 800956c:	f7ff ffb0 	bl	80094d0 <__errno>
 8009570:	2322      	movs	r3, #34	@ 0x22
 8009572:	e014      	b.n	800959e <powf+0x7a>
 8009574:	f000 f82d 	bl	80095d2 <finitef>
 8009578:	b998      	cbnz	r0, 80095a2 <powf+0x7e>
 800957a:	eeb0 0a49 	vmov.f32	s0, s18
 800957e:	f000 f828 	bl	80095d2 <finitef>
 8009582:	b170      	cbz	r0, 80095a2 <powf+0x7e>
 8009584:	eeb0 0a48 	vmov.f32	s0, s16
 8009588:	f000 f823 	bl	80095d2 <finitef>
 800958c:	b148      	cbz	r0, 80095a2 <powf+0x7e>
 800958e:	eef4 8a68 	vcmp.f32	s17, s17
 8009592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009596:	d7e9      	bvc.n	800956c <powf+0x48>
 8009598:	f7ff ff9a 	bl	80094d0 <__errno>
 800959c:	2321      	movs	r3, #33	@ 0x21
 800959e:	6003      	str	r3, [r0, #0]
 80095a0:	e00f      	b.n	80095c2 <powf+0x9e>
 80095a2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80095a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095aa:	d10a      	bne.n	80095c2 <powf+0x9e>
 80095ac:	eeb0 0a49 	vmov.f32	s0, s18
 80095b0:	f000 f80f 	bl	80095d2 <finitef>
 80095b4:	b128      	cbz	r0, 80095c2 <powf+0x9e>
 80095b6:	eeb0 0a48 	vmov.f32	s0, s16
 80095ba:	f000 f80a 	bl	80095d2 <finitef>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1d4      	bne.n	800956c <powf+0x48>
 80095c2:	eeb0 0a68 	vmov.f32	s0, s17
 80095c6:	ecbd 8b04 	vpop	{d8-d9}
 80095ca:	bd08      	pop	{r3, pc}
 80095cc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80095d0:	e7f7      	b.n	80095c2 <powf+0x9e>

080095d2 <finitef>:
 80095d2:	ee10 3a10 	vmov	r3, s0
 80095d6:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80095da:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80095de:	bfac      	ite	ge
 80095e0:	2000      	movge	r0, #0
 80095e2:	2001      	movlt	r0, #1
 80095e4:	4770      	bx	lr

080095e6 <with_errnof>:
 80095e6:	b510      	push	{r4, lr}
 80095e8:	ed2d 8b02 	vpush	{d8}
 80095ec:	eeb0 8a40 	vmov.f32	s16, s0
 80095f0:	4604      	mov	r4, r0
 80095f2:	f7ff ff6d 	bl	80094d0 <__errno>
 80095f6:	eeb0 0a48 	vmov.f32	s0, s16
 80095fa:	ecbd 8b02 	vpop	{d8}
 80095fe:	6004      	str	r4, [r0, #0]
 8009600:	bd10      	pop	{r4, pc}

08009602 <xflowf>:
 8009602:	b130      	cbz	r0, 8009612 <xflowf+0x10>
 8009604:	eef1 7a40 	vneg.f32	s15, s0
 8009608:	ee27 0a80 	vmul.f32	s0, s15, s0
 800960c:	2022      	movs	r0, #34	@ 0x22
 800960e:	f7ff bfea 	b.w	80095e6 <with_errnof>
 8009612:	eef0 7a40 	vmov.f32	s15, s0
 8009616:	e7f7      	b.n	8009608 <xflowf+0x6>

08009618 <__math_uflowf>:
 8009618:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009620 <__math_uflowf+0x8>
 800961c:	f7ff bff1 	b.w	8009602 <xflowf>
 8009620:	10000000 	.word	0x10000000

08009624 <__math_oflowf>:
 8009624:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800962c <__math_oflowf+0x8>
 8009628:	f7ff bfeb 	b.w	8009602 <xflowf>
 800962c:	70000000 	.word	0x70000000

08009630 <__ieee754_sqrtf>:
 8009630:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009634:	4770      	bx	lr
	...

08009638 <roundf>:
 8009638:	ee10 0a10 	vmov	r0, s0
 800963c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009640:	3a7f      	subs	r2, #127	@ 0x7f
 8009642:	2a16      	cmp	r2, #22
 8009644:	dc15      	bgt.n	8009672 <roundf+0x3a>
 8009646:	2a00      	cmp	r2, #0
 8009648:	da08      	bge.n	800965c <roundf+0x24>
 800964a:	3201      	adds	r2, #1
 800964c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8009650:	d101      	bne.n	8009656 <roundf+0x1e>
 8009652:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8009656:	ee00 3a10 	vmov	s0, r3
 800965a:	4770      	bx	lr
 800965c:	4907      	ldr	r1, [pc, #28]	@ (800967c <roundf+0x44>)
 800965e:	4111      	asrs	r1, r2
 8009660:	4201      	tst	r1, r0
 8009662:	d0fa      	beq.n	800965a <roundf+0x22>
 8009664:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009668:	4113      	asrs	r3, r2
 800966a:	4403      	add	r3, r0
 800966c:	ea23 0301 	bic.w	r3, r3, r1
 8009670:	e7f1      	b.n	8009656 <roundf+0x1e>
 8009672:	2a80      	cmp	r2, #128	@ 0x80
 8009674:	d1f1      	bne.n	800965a <roundf+0x22>
 8009676:	ee30 0a00 	vadd.f32	s0, s0, s0
 800967a:	4770      	bx	lr
 800967c:	007fffff 	.word	0x007fffff

08009680 <__ieee754_powf>:
 8009680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009684:	ee10 4a90 	vmov	r4, s1
 8009688:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800968c:	ed2d 8b02 	vpush	{d8}
 8009690:	ee10 6a10 	vmov	r6, s0
 8009694:	eeb0 8a40 	vmov.f32	s16, s0
 8009698:	eef0 8a60 	vmov.f32	s17, s1
 800969c:	d10c      	bne.n	80096b8 <__ieee754_powf+0x38>
 800969e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80096a2:	0076      	lsls	r6, r6, #1
 80096a4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80096a8:	f240 8274 	bls.w	8009b94 <__ieee754_powf+0x514>
 80096ac:	ee38 0a28 	vadd.f32	s0, s16, s17
 80096b0:	ecbd 8b02 	vpop	{d8}
 80096b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80096bc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80096c0:	d802      	bhi.n	80096c8 <__ieee754_powf+0x48>
 80096c2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80096c6:	d908      	bls.n	80096da <__ieee754_powf+0x5a>
 80096c8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80096cc:	d1ee      	bne.n	80096ac <__ieee754_powf+0x2c>
 80096ce:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80096d2:	0064      	lsls	r4, r4, #1
 80096d4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80096d8:	e7e6      	b.n	80096a8 <__ieee754_powf+0x28>
 80096da:	2e00      	cmp	r6, #0
 80096dc:	da1f      	bge.n	800971e <__ieee754_powf+0x9e>
 80096de:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80096e2:	f080 8260 	bcs.w	8009ba6 <__ieee754_powf+0x526>
 80096e6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80096ea:	d32f      	bcc.n	800974c <__ieee754_powf+0xcc>
 80096ec:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80096f0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80096f4:	fa49 f503 	asr.w	r5, r9, r3
 80096f8:	fa05 f303 	lsl.w	r3, r5, r3
 80096fc:	454b      	cmp	r3, r9
 80096fe:	d123      	bne.n	8009748 <__ieee754_powf+0xc8>
 8009700:	f005 0501 	and.w	r5, r5, #1
 8009704:	f1c5 0502 	rsb	r5, r5, #2
 8009708:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800970c:	d11f      	bne.n	800974e <__ieee754_powf+0xce>
 800970e:	2c00      	cmp	r4, #0
 8009710:	f280 8246 	bge.w	8009ba0 <__ieee754_powf+0x520>
 8009714:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009718:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800971c:	e7c8      	b.n	80096b0 <__ieee754_powf+0x30>
 800971e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009722:	d111      	bne.n	8009748 <__ieee754_powf+0xc8>
 8009724:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009728:	f000 8234 	beq.w	8009b94 <__ieee754_powf+0x514>
 800972c:	d906      	bls.n	800973c <__ieee754_powf+0xbc>
 800972e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009a44 <__ieee754_powf+0x3c4>
 8009732:	2c00      	cmp	r4, #0
 8009734:	bfa8      	it	ge
 8009736:	eeb0 0a68 	vmovge.f32	s0, s17
 800973a:	e7b9      	b.n	80096b0 <__ieee754_powf+0x30>
 800973c:	2c00      	cmp	r4, #0
 800973e:	f280 822c 	bge.w	8009b9a <__ieee754_powf+0x51a>
 8009742:	eeb1 0a68 	vneg.f32	s0, s17
 8009746:	e7b3      	b.n	80096b0 <__ieee754_powf+0x30>
 8009748:	2500      	movs	r5, #0
 800974a:	e7dd      	b.n	8009708 <__ieee754_powf+0x88>
 800974c:	2500      	movs	r5, #0
 800974e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009752:	d102      	bne.n	800975a <__ieee754_powf+0xda>
 8009754:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009758:	e7aa      	b.n	80096b0 <__ieee754_powf+0x30>
 800975a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800975e:	f040 8227 	bne.w	8009bb0 <__ieee754_powf+0x530>
 8009762:	2e00      	cmp	r6, #0
 8009764:	f2c0 8224 	blt.w	8009bb0 <__ieee754_powf+0x530>
 8009768:	eeb0 0a48 	vmov.f32	s0, s16
 800976c:	ecbd 8b02 	vpop	{d8}
 8009770:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009774:	f7ff bf5c 	b.w	8009630 <__ieee754_sqrtf>
 8009778:	2d01      	cmp	r5, #1
 800977a:	d199      	bne.n	80096b0 <__ieee754_powf+0x30>
 800977c:	eeb1 0a40 	vneg.f32	s0, s0
 8009780:	e796      	b.n	80096b0 <__ieee754_powf+0x30>
 8009782:	0ff0      	lsrs	r0, r6, #31
 8009784:	3801      	subs	r0, #1
 8009786:	ea55 0300 	orrs.w	r3, r5, r0
 800978a:	d104      	bne.n	8009796 <__ieee754_powf+0x116>
 800978c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009790:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009794:	e78c      	b.n	80096b0 <__ieee754_powf+0x30>
 8009796:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800979a:	d96d      	bls.n	8009878 <__ieee754_powf+0x1f8>
 800979c:	4baa      	ldr	r3, [pc, #680]	@ (8009a48 <__ieee754_powf+0x3c8>)
 800979e:	4598      	cmp	r8, r3
 80097a0:	d808      	bhi.n	80097b4 <__ieee754_powf+0x134>
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	da0b      	bge.n	80097be <__ieee754_powf+0x13e>
 80097a6:	2000      	movs	r0, #0
 80097a8:	ecbd 8b02 	vpop	{d8}
 80097ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	f7ff bf38 	b.w	8009624 <__math_oflowf>
 80097b4:	4ba5      	ldr	r3, [pc, #660]	@ (8009a4c <__ieee754_powf+0x3cc>)
 80097b6:	4598      	cmp	r8, r3
 80097b8:	d908      	bls.n	80097cc <__ieee754_powf+0x14c>
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	dcf3      	bgt.n	80097a6 <__ieee754_powf+0x126>
 80097be:	2000      	movs	r0, #0
 80097c0:	ecbd 8b02 	vpop	{d8}
 80097c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c8:	f7ff bf26 	b.w	8009618 <__math_uflowf>
 80097cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80097d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097d4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009a50 <__ieee754_powf+0x3d0>
 80097d8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80097dc:	eee0 6a67 	vfms.f32	s13, s0, s15
 80097e0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80097e4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80097e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80097ec:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009a54 <__ieee754_powf+0x3d4>
 80097f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097f4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009a58 <__ieee754_powf+0x3d8>
 80097f8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80097fc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009a5c <__ieee754_powf+0x3dc>
 8009800:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009804:	eeb0 7a67 	vmov.f32	s14, s15
 8009808:	eea0 7a26 	vfma.f32	s14, s0, s13
 800980c:	ee17 3a10 	vmov	r3, s14
 8009810:	f36f 030b 	bfc	r3, #0, #12
 8009814:	ee07 3a10 	vmov	s14, r3
 8009818:	eeb0 6a47 	vmov.f32	s12, s14
 800981c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009820:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009824:	3d01      	subs	r5, #1
 8009826:	4305      	orrs	r5, r0
 8009828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800982c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009830:	f36f 040b 	bfc	r4, #0, #12
 8009834:	bf18      	it	ne
 8009836:	eeb0 8a66 	vmovne.f32	s16, s13
 800983a:	ee06 4a90 	vmov	s13, r4
 800983e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009842:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8009846:	ee67 7a26 	vmul.f32	s15, s14, s13
 800984a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800984e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009852:	ee17 1a10 	vmov	r1, s14
 8009856:	2900      	cmp	r1, #0
 8009858:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800985c:	f340 80dd 	ble.w	8009a1a <__ieee754_powf+0x39a>
 8009860:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009864:	f240 80ca 	bls.w	80099fc <__ieee754_powf+0x37c>
 8009868:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009870:	bf4c      	ite	mi
 8009872:	2001      	movmi	r0, #1
 8009874:	2000      	movpl	r0, #0
 8009876:	e797      	b.n	80097a8 <__ieee754_powf+0x128>
 8009878:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800987c:	bf01      	itttt	eq
 800987e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009a60 <__ieee754_powf+0x3e0>
 8009882:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009886:	f06f 0317 	mvneq.w	r3, #23
 800988a:	ee17 7a90 	vmoveq	r7, s15
 800988e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8009892:	bf18      	it	ne
 8009894:	2300      	movne	r3, #0
 8009896:	3a7f      	subs	r2, #127	@ 0x7f
 8009898:	441a      	add	r2, r3
 800989a:	4b72      	ldr	r3, [pc, #456]	@ (8009a64 <__ieee754_powf+0x3e4>)
 800989c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80098a0:	429f      	cmp	r7, r3
 80098a2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80098a6:	dd06      	ble.n	80098b6 <__ieee754_powf+0x236>
 80098a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009a68 <__ieee754_powf+0x3e8>)
 80098aa:	429f      	cmp	r7, r3
 80098ac:	f340 80a4 	ble.w	80099f8 <__ieee754_powf+0x378>
 80098b0:	3201      	adds	r2, #1
 80098b2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80098b6:	2600      	movs	r6, #0
 80098b8:	4b6c      	ldr	r3, [pc, #432]	@ (8009a6c <__ieee754_powf+0x3ec>)
 80098ba:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80098be:	ee07 1a10 	vmov	s14, r1
 80098c2:	edd3 5a00 	vldr	s11, [r3]
 80098c6:	4b6a      	ldr	r3, [pc, #424]	@ (8009a70 <__ieee754_powf+0x3f0>)
 80098c8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80098cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098d0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80098d4:	1049      	asrs	r1, r1, #1
 80098d6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80098da:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80098de:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80098e2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80098e6:	ee07 1a90 	vmov	s15, r1
 80098ea:	ee26 5a24 	vmul.f32	s10, s12, s9
 80098ee:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80098f2:	ee15 7a10 	vmov	r7, s10
 80098f6:	401f      	ands	r7, r3
 80098f8:	ee06 7a90 	vmov	s13, r7
 80098fc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009900:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009904:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009908:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800990c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009a74 <__ieee754_powf+0x3f4>
 8009910:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009a78 <__ieee754_powf+0x3f8>
 8009914:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009918:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009a7c <__ieee754_powf+0x3fc>
 800991c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009920:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009a50 <__ieee754_powf+0x3d0>
 8009924:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009928:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009a80 <__ieee754_powf+0x400>
 800992c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009930:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009a84 <__ieee754_powf+0x404>
 8009934:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009938:	eee7 5a27 	vfma.f32	s11, s14, s15
 800993c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009940:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009944:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009948:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800994c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009950:	eef0 5a67 	vmov.f32	s11, s15
 8009954:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009958:	ee75 5a87 	vadd.f32	s11, s11, s14
 800995c:	ee15 1a90 	vmov	r1, s11
 8009960:	4019      	ands	r1, r3
 8009962:	ee05 1a90 	vmov	s11, r1
 8009966:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800996a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800996e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009972:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009976:	eee6 7a25 	vfma.f32	s15, s12, s11
 800997a:	eeb0 6a67 	vmov.f32	s12, s15
 800997e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009982:	ee16 1a10 	vmov	r1, s12
 8009986:	4019      	ands	r1, r3
 8009988:	ee06 1a10 	vmov	s12, r1
 800998c:	eeb0 7a46 	vmov.f32	s14, s12
 8009990:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009994:	493c      	ldr	r1, [pc, #240]	@ (8009a88 <__ieee754_powf+0x408>)
 8009996:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800999a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800999e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009a8c <__ieee754_powf+0x40c>
 80099a2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009a90 <__ieee754_powf+0x410>
 80099a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099aa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009a94 <__ieee754_powf+0x414>
 80099ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80099b2:	ed91 7a00 	vldr	s14, [r1]
 80099b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099ba:	ee07 2a10 	vmov	s14, r2
 80099be:	4a36      	ldr	r2, [pc, #216]	@ (8009a98 <__ieee754_powf+0x418>)
 80099c0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80099c4:	eeb0 7a67 	vmov.f32	s14, s15
 80099c8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80099cc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80099d0:	ed92 5a00 	vldr	s10, [r2]
 80099d4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80099d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80099dc:	ee17 2a10 	vmov	r2, s14
 80099e0:	401a      	ands	r2, r3
 80099e2:	ee07 2a10 	vmov	s14, r2
 80099e6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80099ea:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80099ee:	eee6 6a65 	vfms.f32	s13, s12, s11
 80099f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099f6:	e715      	b.n	8009824 <__ieee754_powf+0x1a4>
 80099f8:	2601      	movs	r6, #1
 80099fa:	e75d      	b.n	80098b8 <__ieee754_powf+0x238>
 80099fc:	d152      	bne.n	8009aa4 <__ieee754_powf+0x424>
 80099fe:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009a9c <__ieee754_powf+0x41c>
 8009a02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a06:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009a0a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a12:	f73f af29 	bgt.w	8009868 <__ieee754_powf+0x1e8>
 8009a16:	2386      	movs	r3, #134	@ 0x86
 8009a18:	e048      	b.n	8009aac <__ieee754_powf+0x42c>
 8009a1a:	4a21      	ldr	r2, [pc, #132]	@ (8009aa0 <__ieee754_powf+0x420>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d907      	bls.n	8009a30 <__ieee754_powf+0x3b0>
 8009a20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a28:	bf4c      	ite	mi
 8009a2a:	2001      	movmi	r0, #1
 8009a2c:	2000      	movpl	r0, #0
 8009a2e:	e6c7      	b.n	80097c0 <__ieee754_powf+0x140>
 8009a30:	d138      	bne.n	8009aa4 <__ieee754_powf+0x424>
 8009a32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a36:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3e:	dbea      	blt.n	8009a16 <__ieee754_powf+0x396>
 8009a40:	e7ee      	b.n	8009a20 <__ieee754_powf+0x3a0>
 8009a42:	bf00      	nop
 8009a44:	00000000 	.word	0x00000000
 8009a48:	3f7ffff3 	.word	0x3f7ffff3
 8009a4c:	3f800007 	.word	0x3f800007
 8009a50:	3eaaaaab 	.word	0x3eaaaaab
 8009a54:	3fb8aa00 	.word	0x3fb8aa00
 8009a58:	3fb8aa3b 	.word	0x3fb8aa3b
 8009a5c:	36eca570 	.word	0x36eca570
 8009a60:	4b800000 	.word	0x4b800000
 8009a64:	001cc471 	.word	0x001cc471
 8009a68:	005db3d6 	.word	0x005db3d6
 8009a6c:	08009d78 	.word	0x08009d78
 8009a70:	fffff000 	.word	0xfffff000
 8009a74:	3e6c3255 	.word	0x3e6c3255
 8009a78:	3e53f142 	.word	0x3e53f142
 8009a7c:	3e8ba305 	.word	0x3e8ba305
 8009a80:	3edb6db7 	.word	0x3edb6db7
 8009a84:	3f19999a 	.word	0x3f19999a
 8009a88:	08009d68 	.word	0x08009d68
 8009a8c:	3f76384f 	.word	0x3f76384f
 8009a90:	3f763800 	.word	0x3f763800
 8009a94:	369dc3a0 	.word	0x369dc3a0
 8009a98:	08009d70 	.word	0x08009d70
 8009a9c:	3338aa3c 	.word	0x3338aa3c
 8009aa0:	43160000 	.word	0x43160000
 8009aa4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009aa8:	d96f      	bls.n	8009b8a <__ieee754_powf+0x50a>
 8009aaa:	15db      	asrs	r3, r3, #23
 8009aac:	3b7e      	subs	r3, #126	@ 0x7e
 8009aae:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009ab2:	4118      	asrs	r0, r3
 8009ab4:	4408      	add	r0, r1
 8009ab6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009aba:	4a4e      	ldr	r2, [pc, #312]	@ (8009bf4 <__ieee754_powf+0x574>)
 8009abc:	3b7f      	subs	r3, #127	@ 0x7f
 8009abe:	411a      	asrs	r2, r3
 8009ac0:	4002      	ands	r2, r0
 8009ac2:	ee07 2a10 	vmov	s14, r2
 8009ac6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009ace:	f1c3 0317 	rsb	r3, r3, #23
 8009ad2:	4118      	asrs	r0, r3
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ada:	bfb8      	it	lt
 8009adc:	4240      	neglt	r0, r0
 8009ade:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009ae2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009bf8 <__ieee754_powf+0x578>
 8009ae6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009bfc <__ieee754_powf+0x57c>
 8009aea:	ee16 3a90 	vmov	r3, s13
 8009aee:	f36f 030b 	bfc	r3, #0, #12
 8009af2:	ee06 3a90 	vmov	s13, r3
 8009af6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009afa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009afe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009b02:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009c00 <__ieee754_powf+0x580>
 8009b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b0a:	eee0 7a87 	vfma.f32	s15, s1, s14
 8009b0e:	eeb0 7a67 	vmov.f32	s14, s15
 8009b12:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009b16:	eef0 5a47 	vmov.f32	s11, s14
 8009b1a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8009b1e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009b22:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009b26:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009c04 <__ieee754_powf+0x584>
 8009b2a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009c08 <__ieee754_powf+0x588>
 8009b2e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009b32:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009c0c <__ieee754_powf+0x58c>
 8009b36:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009b3a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009c10 <__ieee754_powf+0x590>
 8009b3e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009b42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c14 <__ieee754_powf+0x594>
 8009b46:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009b4a:	eeb0 6a47 	vmov.f32	s12, s14
 8009b4e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009b52:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009b56:	ee67 5a06 	vmul.f32	s11, s14, s12
 8009b5a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009b5e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8009b62:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009b66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b72:	ee10 3a10 	vmov	r3, s0
 8009b76:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b7e:	da06      	bge.n	8009b8e <__ieee754_powf+0x50e>
 8009b80:	f000 f854 	bl	8009c2c <scalbnf>
 8009b84:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009b88:	e592      	b.n	80096b0 <__ieee754_powf+0x30>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	e7a7      	b.n	8009ade <__ieee754_powf+0x45e>
 8009b8e:	ee00 3a10 	vmov	s0, r3
 8009b92:	e7f7      	b.n	8009b84 <__ieee754_powf+0x504>
 8009b94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009b98:	e58a      	b.n	80096b0 <__ieee754_powf+0x30>
 8009b9a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009c18 <__ieee754_powf+0x598>
 8009b9e:	e587      	b.n	80096b0 <__ieee754_powf+0x30>
 8009ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ba4:	e584      	b.n	80096b0 <__ieee754_powf+0x30>
 8009ba6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009baa:	f43f adbb 	beq.w	8009724 <__ieee754_powf+0xa4>
 8009bae:	2502      	movs	r5, #2
 8009bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8009bb4:	f000 f832 	bl	8009c1c <fabsf>
 8009bb8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009bbc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009bc0:	4647      	mov	r7, r8
 8009bc2:	d003      	beq.n	8009bcc <__ieee754_powf+0x54c>
 8009bc4:	f1b8 0f00 	cmp.w	r8, #0
 8009bc8:	f47f addb 	bne.w	8009782 <__ieee754_powf+0x102>
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	bfbc      	itt	lt
 8009bd0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009bd4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009bd8:	2e00      	cmp	r6, #0
 8009bda:	f6bf ad69 	bge.w	80096b0 <__ieee754_powf+0x30>
 8009bde:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009be2:	ea58 0805 	orrs.w	r8, r8, r5
 8009be6:	f47f adc7 	bne.w	8009778 <__ieee754_powf+0xf8>
 8009bea:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009bee:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009bf2:	e55d      	b.n	80096b0 <__ieee754_powf+0x30>
 8009bf4:	ff800000 	.word	0xff800000
 8009bf8:	3f317218 	.word	0x3f317218
 8009bfc:	3f317200 	.word	0x3f317200
 8009c00:	35bfbe8c 	.word	0x35bfbe8c
 8009c04:	b5ddea0e 	.word	0xb5ddea0e
 8009c08:	3331bb4c 	.word	0x3331bb4c
 8009c0c:	388ab355 	.word	0x388ab355
 8009c10:	bb360b61 	.word	0xbb360b61
 8009c14:	3e2aaaab 	.word	0x3e2aaaab
 8009c18:	00000000 	.word	0x00000000

08009c1c <fabsf>:
 8009c1c:	ee10 3a10 	vmov	r3, s0
 8009c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c24:	ee00 3a10 	vmov	s0, r3
 8009c28:	4770      	bx	lr
	...

08009c2c <scalbnf>:
 8009c2c:	ee10 3a10 	vmov	r3, s0
 8009c30:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009c34:	d02b      	beq.n	8009c8e <scalbnf+0x62>
 8009c36:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009c3a:	d302      	bcc.n	8009c42 <scalbnf+0x16>
 8009c3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c40:	4770      	bx	lr
 8009c42:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009c46:	d123      	bne.n	8009c90 <scalbnf+0x64>
 8009c48:	4b24      	ldr	r3, [pc, #144]	@ (8009cdc <scalbnf+0xb0>)
 8009c4a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009ce0 <scalbnf+0xb4>
 8009c4e:	4298      	cmp	r0, r3
 8009c50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c54:	db17      	blt.n	8009c86 <scalbnf+0x5a>
 8009c56:	ee10 3a10 	vmov	r3, s0
 8009c5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c5e:	3a19      	subs	r2, #25
 8009c60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009c64:	4288      	cmp	r0, r1
 8009c66:	dd15      	ble.n	8009c94 <scalbnf+0x68>
 8009c68:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009ce4 <scalbnf+0xb8>
 8009c6c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009ce8 <scalbnf+0xbc>
 8009c70:	ee10 3a10 	vmov	r3, s0
 8009c74:	eeb0 7a67 	vmov.f32	s14, s15
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bfb8      	it	lt
 8009c7c:	eef0 7a66 	vmovlt.f32	s15, s13
 8009c80:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009c84:	4770      	bx	lr
 8009c86:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009cec <scalbnf+0xc0>
 8009c8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009c8e:	4770      	bx	lr
 8009c90:	0dd2      	lsrs	r2, r2, #23
 8009c92:	e7e5      	b.n	8009c60 <scalbnf+0x34>
 8009c94:	4410      	add	r0, r2
 8009c96:	28fe      	cmp	r0, #254	@ 0xfe
 8009c98:	dce6      	bgt.n	8009c68 <scalbnf+0x3c>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	dd06      	ble.n	8009cac <scalbnf+0x80>
 8009c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009ca2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009ca6:	ee00 3a10 	vmov	s0, r3
 8009caa:	4770      	bx	lr
 8009cac:	f110 0f16 	cmn.w	r0, #22
 8009cb0:	da09      	bge.n	8009cc6 <scalbnf+0x9a>
 8009cb2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009cec <scalbnf+0xc0>
 8009cb6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009cf0 <scalbnf+0xc4>
 8009cba:	ee10 3a10 	vmov	r3, s0
 8009cbe:	eeb0 7a67 	vmov.f32	s14, s15
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	e7d9      	b.n	8009c7a <scalbnf+0x4e>
 8009cc6:	3019      	adds	r0, #25
 8009cc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009ccc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009cd0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009cf4 <scalbnf+0xc8>
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	e7d7      	b.n	8009c8a <scalbnf+0x5e>
 8009cda:	bf00      	nop
 8009cdc:	ffff3cb0 	.word	0xffff3cb0
 8009ce0:	4c000000 	.word	0x4c000000
 8009ce4:	7149f2ca 	.word	0x7149f2ca
 8009ce8:	f149f2ca 	.word	0xf149f2ca
 8009cec:	0da24260 	.word	0x0da24260
 8009cf0:	8da24260 	.word	0x8da24260
 8009cf4:	33000000 	.word	0x33000000

08009cf8 <_init>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr

08009d04 <_fini>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr
