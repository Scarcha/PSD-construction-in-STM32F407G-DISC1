
HelloWorldMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005218  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005408  08005408  0000745c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005410  08005410  0000745c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00006410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000045c  20000000  08005418  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000745c  2**0
                  CONTENTS
 10 .bss          00000460  2000045c  2000045c  0000745c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008bc  200008bc  0000745c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000745c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007dcb  00000000  00000000  0000748c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002096  00000000  00000000  0000f257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  000112f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000573  00000000  00000000  00011a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204f7  00000000  00000000  00011feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf93  00000000  00000000  000324e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf109  00000000  00000000  0003e475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  000fd57e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e90  00000000  00000000  000fd63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  000ff4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000045c 	.word	0x2000045c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005388 	.word	0x08005388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000460 	.word	0x20000460
 80001c4:	08005388 	.word	0x08005388

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_CRC_Init+0x20>)
 80004fa:	4a07      	ldr	r2, [pc, #28]	@ (8000518 <MX_CRC_Init+0x24>)
 80004fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_CRC_Init+0x20>)
 8000500:	f000 fc2f 	bl	8000d62 <HAL_CRC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050a:	f000 fa03 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000478 	.word	0x20000478
 8000518:	40023000 	.word	0x40023000

0800051c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <HAL_CRC_MspInit+0x3c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023000 	.word	0x40023000
 800055c:	40023800 	.word	0x40023800

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_DMA_Init+0x3c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <MX_DMA_Init+0x3c>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_DMA_Init+0x3c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200e      	movs	r0, #14
 8000588:	f000 fbb5 	bl	8000cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800058c:	200e      	movs	r0, #14
 800058e:	f000 fbce 	bl	8000d2e <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a16      	ldr	r2, [pc, #88]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a08      	ldr	r2, [pc, #32]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_GPIO_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_I2S2_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_I2S2_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_I2S2_Init+0x50>)
 8000618:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800061c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_I2S2_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <MX_I2S2_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_I2S2_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_192K;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_I2S2_Init+0x50>)
 8000632:	4a0c      	ldr	r2, [pc, #48]	@ (8000664 <MX_I2S2_Init+0x58>)
 8000634:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_I2S2_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_I2S2_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_I2S2_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_I2S2_Init+0x50>)
 800064a:	f001 f82d 	bl	80016a8 <HAL_I2S_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000654:	f000 f95e 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000480 	.word	0x20000480
 8000660:	40003800 	.word	0x40003800
 8000664:	0002ee00 	.word	0x0002ee00

08000668 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a49      	ldr	r2, [pc, #292]	@ (80007b8 <HAL_I2S_MspInit+0x150>)
 8000694:	4293      	cmp	r3, r2
 8000696:	f040 808b 	bne.w	80007b0 <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800069a:	2301      	movs	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800069e:	23c0      	movs	r3, #192	@ 0xc0
 80006a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f9fe 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80006b6:	f000 f92d 	bl	8000914 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b3f      	ldr	r3, [pc, #252]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c2:	4a3e      	ldr	r2, [pc, #248]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ca:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b38      	ldr	r3, [pc, #224]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a37      	ldr	r2, [pc, #220]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a30      	ldr	r2, [pc, #192]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <HAL_I2S_MspInit+0x154>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800070e:	2348      	movs	r3, #72	@ 0x48
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800071e:	2305      	movs	r3, #5
 8000720:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000726:	4619      	mov	r1, r3
 8000728:	4825      	ldr	r0, [pc, #148]	@ (80007c0 <HAL_I2S_MspInit+0x158>)
 800072a:	f000 fe21 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800072e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000740:	2305      	movs	r3, #5
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	481e      	ldr	r0, [pc, #120]	@ (80007c4 <HAL_I2S_MspInit+0x15c>)
 800074c:	f000 fe10 	bl	8001370 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <HAL_I2S_MspInit+0x164>)
 8000754:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 800076a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800076e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000776:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 800077a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800077e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000786:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 8000796:	f000 fb01 	bl	8000d9c <HAL_DMA_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 80007a0:	f000 f8b8 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 80007a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <HAL_I2S_MspInit+0x160>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	@ 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40003800 	.word	0x40003800
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	200004c8 	.word	0x200004c8
 80007cc:	40026058 	.word	0x40026058

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 f941 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f831 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f7ff fedf 	bl	80005a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e2:	f7ff febd 	bl	8000560 <MX_DMA_Init>
  MX_CRC_Init();
 80007e6:	f7ff fe85 	bl	80004f4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80007ea:	f002 faa1 	bl	8002d30 <MX_PDM2PCM_Init>
  MX_I2S2_Init();
 80007ee:	f7ff ff0d 	bl	800060c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  __HAL_I2S_ENABLE(&hi2s2);
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <main+0x64>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	69da      	ldr	r2, [r3, #28]
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <main+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000800:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint16_t dato_recibido;
    HAL_I2S_Receive(&hi2s2, &dato_recibido, 1, HAL_MAX_DELAY);
 8000802:	1db9      	adds	r1, r7, #6
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	2201      	movs	r2, #1
 800080a:	480a      	ldr	r0, [pc, #40]	@ (8000834 <main+0x64>)
 800080c:	f001 f88c 	bl	8001928 <HAL_I2S_Receive>
    // 3. Almacenar o procesar el dato
    if (buffer_index < BUFFER_SIZE) {
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <main+0x68>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2bff      	cmp	r3, #255	@ 0xff
 8000816:	d809      	bhi.n	800082c <main+0x5c>
        mi_buffer_audio[buffer_index++] = dato_recibido;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <main+0x68>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4906      	ldr	r1, [pc, #24]	@ (8000838 <main+0x68>)
 8000820:	600a      	str	r2, [r1, #0]
 8000822:	88f9      	ldrh	r1, [r7, #6]
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <main+0x6c>)
 8000826:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800082a:	e7ea      	b.n	8000802 <main+0x32>
    } else {
        // Buffer lleno, reiniciar índice o manejar el caso
        buffer_index = 0;
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <main+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
  {
 8000832:	e7e6      	b.n	8000802 <main+0x32>
 8000834:	20000480 	.word	0x20000480
 8000838:	20000728 	.word	0x20000728
 800083c:	20000528 	.word	0x20000528

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	@ 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 f97e 	bl	8004b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b28      	ldr	r3, [pc, #160]	@ (800090c <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a27      	ldr	r2, [pc, #156]	@ (800090c <SystemClock_Config+0xcc>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <SystemClock_Config+0xcc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <SystemClock_Config+0xd0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <SystemClock_Config+0xd0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008b4:	2332      	movs	r3, #50	@ 0x32
 80008b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008bc:	2307      	movs	r3, #7
 80008be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fc8d 	bl	80021e4 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d0:	f000 f820 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 feee 	bl	80026d4 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008fe:	f000 f809 	bl	8000914 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	@ 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095e:	2007      	movs	r0, #7
 8000960:	f000 f9be 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 f89b 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <DMA1_Stream3_IRQHandler+0x10>)
 80009d6:	f000 fa8f 	bl	8000ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200004c8 	.word	0x200004c8

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a0c:	f7ff ffea 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	@ (8000a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	@ (8000a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f004 f899 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3a:	f7ff fec9 	bl	80007d0 <main>
  bx  lr    
 8000a3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 8000a4c:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 8000a50:	2000045c 	.word	0x2000045c
  ldr r4, =_ebss
 8000a54:	200008bc 	.word	0x200008bc

08000a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <HAL_Init+0x40>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <HAL_Init+0x40>)
 8000a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <HAL_Init+0x40>)
 8000a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f92b 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff ff46 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023c00 	.word	0x40023c00

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f943 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 f90b 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	2000072c 	.word	0x2000072c

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2000072c 	.word	0x2000072c

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	@ (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff29 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff3e 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff31 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa2 	bl	8000c9c <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e00e      	b.n	8000d92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	795b      	ldrb	r3, [r3, #5]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fbc9 	bl	800051c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff febe 	bl	8000b28 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e099      	b.n	8000eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2202      	movs	r2, #2
 8000dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd8:	e00f      	b.n	8000dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dda:	f7ff fea5 	bl	8000b28 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d908      	bls.n	8000dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2220      	movs	r2, #32
 8000dec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2203      	movs	r2, #3
 8000df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e078      	b.n	8000eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e8      	bne.n	8000dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	4b38      	ldr	r3, [pc, #224]	@ (8000ef4 <HAL_DMA_Init+0x158>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d107      	bne.n	8000e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f023 0307 	bic.w	r3, r3, #7
 8000e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d117      	bne.n	8000ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00e      	beq.n	8000ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f9e9 	bl	8001278 <DMA_CheckFifoParam>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2240      	movs	r2, #64	@ 0x40
 8000eb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e016      	b.n	8000eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f9a0 	bl	800120c <DMA_CalcBaseAndBitshift>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed4:	223f      	movs	r2, #63	@ 0x3f
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	f010803f 	.word	0xf010803f

08000ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f04:	4b8e      	ldr	r3, [pc, #568]	@ (8001140 <HAL_DMA_IRQHandler+0x248>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a8e      	ldr	r2, [pc, #568]	@ (8001144 <HAL_DMA_IRQHandler+0x24c>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0a9b      	lsrs	r3, r3, #10
 8000f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f22:	2208      	movs	r2, #8
 8000f24:	409a      	lsls	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0204 	bic.w	r2, r2, #4
 8000f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f50:	2208      	movs	r2, #8
 8000f52:	409a      	lsls	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f68:	2201      	movs	r2, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d012      	beq.n	8000f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f86:	2201      	movs	r2, #1
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f92:	f043 0202 	orr.w	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d012      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc8:	f043 0204 	orr.w	r2, r3, #4
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d043      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d03c      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d018      	beq.n	800103a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d108      	bne.n	8001028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d024      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	4798      	blx	r3
 8001026:	e01f      	b.n	8001068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102c:	2b00      	cmp	r3, #0
 800102e:	d01b      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	4798      	blx	r3
 8001038:	e016      	b.n	8001068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0208 	bic.w	r2, r2, #8
 8001056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800106c:	2220      	movs	r2, #32
 800106e:	409a      	lsls	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 808f 	beq.w	8001198 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8087 	beq.w	8001198 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800108e:	2220      	movs	r2, #32
 8001090:	409a      	lsls	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d136      	bne.n	8001110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0216 	bic.w	r2, r2, #22
 80010b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <HAL_DMA_IRQHandler+0x1da>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0208 	bic.w	r2, r2, #8
 80010e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e6:	223f      	movs	r2, #63	@ 0x3f
 80010e8:	409a      	lsls	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001102:	2b00      	cmp	r3, #0
 8001104:	d07e      	beq.n	8001204 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
        }
        return;
 800110e:	e079      	b.n	8001204 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01d      	beq.n	800115a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10d      	bne.n	8001148 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001130:	2b00      	cmp	r3, #0
 8001132:	d031      	beq.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
 800113c:	e02c      	b.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
 800113e:	bf00      	nop
 8001140:	20000000 	.word	0x20000000
 8001144:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d023      	beq.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
 8001158:	e01e      	b.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10f      	bne.n	8001188 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0210 	bic.w	r2, r2, #16
 8001176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119c:	2b00      	cmp	r3, #0
 800119e:	d032      	beq.n	8001206 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d022      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2205      	movs	r2, #5
 80011b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d307      	bcc.n	80011e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f2      	bne.n	80011c4 <HAL_DMA_IRQHandler+0x2cc>
 80011de:	e000      	b.n	80011e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
 8001202:	e000      	b.n	8001206 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001204:	bf00      	nop
    }
  }
}
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3b10      	subs	r3, #16
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <DMA_CalcBaseAndBitshift+0x64>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001226:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <DMA_CalcBaseAndBitshift+0x68>)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d909      	bls.n	800124e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	1d1a      	adds	r2, r3, #4
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58
 800124c:	e007      	b.n	800125e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001256:	f023 0303 	bic.w	r3, r3, #3
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	aaaaaaab 	.word	0xaaaaaaab
 8001274:	080053b0 	.word	0x080053b0

08001278 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d11f      	bne.n	80012d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d856      	bhi.n	8001346 <DMA_CheckFifoParam+0xce>
 8001298:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <DMA_CheckFifoParam+0x28>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012c3 	.word	0x080012c3
 80012a8:	080012b1 	.word	0x080012b1
 80012ac:	08001347 	.word	0x08001347
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d046      	beq.n	800134a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012c0:	e043      	b.n	800134a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80012ca:	d140      	bne.n	800134e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012d0:	e03d      	b.n	800134e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012da:	d121      	bne.n	8001320 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d837      	bhi.n	8001352 <DMA_CheckFifoParam+0xda>
 80012e2:	a201      	add	r2, pc, #4	@ (adr r2, 80012e8 <DMA_CheckFifoParam+0x70>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	080012ff 	.word	0x080012ff
 80012f0:	080012f9 	.word	0x080012f9
 80012f4:	08001311 	.word	0x08001311
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
      break;
 80012fc:	e030      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d025      	beq.n	8001356 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800130e:	e022      	b.n	8001356 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001318:	d11f      	bne.n	800135a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800131e:	e01c      	b.n	800135a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d903      	bls.n	800132e <DMA_CheckFifoParam+0xb6>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d003      	beq.n	8001334 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800132c:	e018      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
      break;
 8001332:	e015      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00e      	beq.n	800135e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
      break;
 8001344:	e00b      	b.n	800135e <DMA_CheckFifoParam+0xe6>
      break;
 8001346:	bf00      	nop
 8001348:	e00a      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      break;
 800134a:	bf00      	nop
 800134c:	e008      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      break;
 800134e:	bf00      	nop
 8001350:	e006      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      break;
 8001352:	bf00      	nop
 8001354:	e004      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      break;
 8001356:	bf00      	nop
 8001358:	e002      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      break;   
 800135a:	bf00      	nop
 800135c:	e000      	b.n	8001360 <DMA_CheckFifoParam+0xe8>
      break;
 800135e:	bf00      	nop
    }
  } 
  
  return status; 
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e16b      	b.n	8001664 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 815a 	bne.w	800165e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d005      	beq.n	80013c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d017      	beq.n	8001460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80b4 	beq.w	800165e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b60      	ldr	r3, [pc, #384]	@ (800167c <HAL_GPIO_Init+0x30c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a5f      	ldr	r2, [pc, #380]	@ (800167c <HAL_GPIO_Init+0x30c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <HAL_GPIO_Init+0x30c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a5b      	ldr	r2, [pc, #364]	@ (8001680 <HAL_GPIO_Init+0x310>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a52      	ldr	r2, [pc, #328]	@ (8001684 <HAL_GPIO_Init+0x314>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d02b      	beq.n	8001596 <HAL_GPIO_Init+0x226>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a51      	ldr	r2, [pc, #324]	@ (8001688 <HAL_GPIO_Init+0x318>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d025      	beq.n	8001592 <HAL_GPIO_Init+0x222>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a50      	ldr	r2, [pc, #320]	@ (800168c <HAL_GPIO_Init+0x31c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01f      	beq.n	800158e <HAL_GPIO_Init+0x21e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4f      	ldr	r2, [pc, #316]	@ (8001690 <HAL_GPIO_Init+0x320>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x21a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4e      	ldr	r2, [pc, #312]	@ (8001694 <HAL_GPIO_Init+0x324>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x216>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4d      	ldr	r2, [pc, #308]	@ (8001698 <HAL_GPIO_Init+0x328>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x212>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4c      	ldr	r2, [pc, #304]	@ (800169c <HAL_GPIO_Init+0x32c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x20e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4b      	ldr	r2, [pc, #300]	@ (80016a0 <HAL_GPIO_Init+0x330>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x20a>
 8001576:	2307      	movs	r3, #7
 8001578:	e00e      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800157a:	2308      	movs	r3, #8
 800157c:	e00c      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800157e:	2306      	movs	r3, #6
 8001580:	e00a      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001582:	2305      	movs	r3, #5
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001586:	2304      	movs	r3, #4
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	@ (8001680 <HAL_GPIO_Init+0x310>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a32      	ldr	r2, [pc, #200]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a27      	ldr	r2, [pc, #156]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <HAL_GPIO_Init+0x334>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f ae90 	bls.w	800138c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021c00 	.word	0x40021c00
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e128      	b.n	800190c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a90      	ldr	r2, [pc, #576]	@ (8001914 <HAL_I2S_Init+0x26c>)
 80016d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7fe ffc7 	bl	8000668 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2202      	movs	r2, #2
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80016f0:	f023 030f 	bic.w	r3, r3, #15
 80016f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2202      	movs	r2, #2
 80016fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d060      	beq.n	80017c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800170e:	2310      	movs	r3, #16
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e001      	b.n	8001718 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b20      	cmp	r3, #32
 800171e:	d802      	bhi.n	8001726 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001726:	2001      	movs	r0, #1
 8001728:	f001 faa2 	bl	8002c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800172c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001736:	d125      	bne.n	8001784 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d010      	beq.n	8001762 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	fbb2 f2f3 	udiv	r2, r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	3305      	adds	r3, #5
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e01f      	b.n	80017a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	fbb2 f2f3 	udiv	r2, r2, r3
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	3305      	adds	r3, #5
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	e00e      	b.n	80017a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fbb2 f2f3 	udiv	r2, r2, r3
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	3305      	adds	r3, #5
 80017a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001918 <HAL_I2S_Init+0x270>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	e003      	b.n	80017d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d902      	bls.n	80017dc <HAL_I2S_Init+0x134>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2bff      	cmp	r3, #255	@ 0xff
 80017da:	d907      	bls.n	80017ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e08f      	b.n	800190c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	ea42 0103 	orr.w	r1, r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800180a:	f023 030f 	bic.w	r3, r3, #15
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6851      	ldr	r1, [r2, #4]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6892      	ldr	r2, [r2, #8]
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	68d2      	ldr	r2, [r2, #12]
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6992      	ldr	r2, [r2, #24]
 8001822:	430a      	orrs	r2, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800182e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d161      	bne.n	80018fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a38      	ldr	r2, [pc, #224]	@ (800191c <HAL_I2S_Init+0x274>)
 800183c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a37      	ldr	r2, [pc, #220]	@ (8001920 <HAL_I2S_Init+0x278>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_I2S_Init+0x1a4>
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_I2S_Init+0x27c>)
 800184a:	e001      	b.n	8001850 <HAL_I2S_Init+0x1a8>
 800184c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4932      	ldr	r1, [pc, #200]	@ (8001920 <HAL_I2S_Init+0x278>)
 8001858:	428a      	cmp	r2, r1
 800185a:	d101      	bne.n	8001860 <HAL_I2S_Init+0x1b8>
 800185c:	4a31      	ldr	r2, [pc, #196]	@ (8001924 <HAL_I2S_Init+0x27c>)
 800185e:	e001      	b.n	8001864 <HAL_I2S_Init+0x1bc>
 8001860:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001864:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001868:	f023 030f 	bic.w	r3, r3, #15
 800186c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <HAL_I2S_Init+0x278>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_I2S_Init+0x1d4>
 8001878:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <HAL_I2S_Init+0x27c>)
 800187a:	e001      	b.n	8001880 <HAL_I2S_Init+0x1d8>
 800187c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001880:	2202      	movs	r2, #2
 8001882:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a25      	ldr	r2, [pc, #148]	@ (8001920 <HAL_I2S_Init+0x278>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_I2S_Init+0x1ea>
 800188e:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_I2S_Init+0x27c>)
 8001890:	e001      	b.n	8001896 <HAL_I2S_Init+0x1ee>
 8001892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018a2:	d003      	beq.n	80018ac <HAL_I2S_Init+0x204>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80018ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e001      	b.n	80018b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b29a      	uxth	r2, r3
 80018da:	897b      	ldrh	r3, [r7, #10]
 80018dc:	4313      	orrs	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_I2S_Init+0x278>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_I2S_Init+0x24c>
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_I2S_Init+0x27c>)
 80018f2:	e001      	b.n	80018f8 <HAL_I2S_Init+0x250>
 80018f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80018f8:	897a      	ldrh	r2, [r7, #10]
 80018fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08001ba9 	.word	0x08001ba9
 8001918:	cccccccd 	.word	0xcccccccd
 800191c:	08001d31 	.word	0x08001d31
 8001920:	40003800 	.word	0x40003800
 8001924:	40003400 	.word	0x40003400

08001928 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_I2S_Receive+0x1c>
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b0      	b.n	8001aaa <HAL_I2S_Receive+0x182>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d001      	beq.n	8001958 <HAL_I2S_Receive+0x30>
  {
    return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
 8001956:	e0a8      	b.n	8001aaa <HAL_I2S_Receive+0x182>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_I2S_Receive+0x40>
 8001964:	2302      	movs	r3, #2
 8001966:	e0a0      	b.n	8001aaa <HAL_I2S_Receive+0x182>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2204      	movs	r2, #4
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d002      	beq.n	800199c <HAL_I2S_Receive+0x74>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d10a      	bne.n	80019b2 <HAL_I2S_Receive+0x8a>
  {
    hi2s->RxXferSize = (Size << 1U);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	865a      	strh	r2, [r3, #50]	@ 0x32
 80019b0:	e005      	b.n	80019be <HAL_I2S_Receive+0x96>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019cc:	d007      	beq.n	80019de <HAL_I2S_Receive+0xb6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019dc:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019ec:	d14f      	bne.n	8001a8e <HAL_I2S_Receive+0x166>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8001a04:	e043      	b.n	8001a8e <HAL_I2S_Receive+0x166>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f955 	bl	8001cbc <I2S_WaitFlagStateUntilTimeout>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00f      	beq.n	8001a38 <HAL_I2S_Receive+0x110>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e038      	b.n	8001aaa <HAL_I2S_Receive+0x182>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	b292      	uxth	r2, r2
 8001a44:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	1c9a      	adds	r2, r3, #2
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a68:	2b40      	cmp	r3, #64	@ 0x40
 8001a6a:	d110      	bne.n	8001a8e <HAL_I2S_Receive+0x166>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->RxXferCount > 0U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1b6      	bne.n	8001a06 <HAL_I2S_Receive+0xde>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	1c9a      	adds	r2, r3, #2
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10e      	bne.n	8001b42 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ffb8 	bl	8001ab2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	1c9a      	adds	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001b90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff93 	bl	8001ac6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d13a      	bne.n	8001c3a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d109      	bne.n	8001be2 <I2S_IRQHandler+0x3a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd8:	2b40      	cmp	r3, #64	@ 0x40
 8001bda:	d102      	bne.n	8001be2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffb4 	bl	8001b4a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be8:	2b40      	cmp	r3, #64	@ 0x40
 8001bea:	d126      	bne.n	8001c3a <I2S_IRQHandler+0x92>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d11f      	bne.n	8001c3a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c08:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff50 	bl	8001ada <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d136      	bne.n	8001cb4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d109      	bne.n	8001c64 <I2S_IRQHandler+0xbc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	2b80      	cmp	r3, #128	@ 0x80
 8001c5c:	d102      	bne.n	8001c64 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff45 	bl	8001aee <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d122      	bne.n	8001cb4 <I2S_IRQHandler+0x10c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d11b      	bne.n	8001cb4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c8a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f043 0204 	orr.w	r2, r3, #4
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff13 	bl	8001ada <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7fe ff2c 	bl	8000b28 <HAL_GetTick>
 8001cd0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001cd2:	e018      	b.n	8001d06 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cda:	d014      	beq.n	8001d06 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8001cdc:	f7fe ff24 	bl	8000b28 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d902      	bls.n	8001cf2 <I2S_WaitFlagStateUntilTimeout+0x36>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e00f      	b.n	8001d26 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1d7      	bne.n	8001cd4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a92      	ldr	r2, [pc, #584]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d4a:	4b92      	ldr	r3, [pc, #584]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d4c:	e001      	b.n	8001d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a8b      	ldr	r2, [pc, #556]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d68:	4b8a      	ldr	r3, [pc, #552]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d6a:	e001      	b.n	8001d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d7c:	d004      	beq.n	8001d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8099 	bne.w	8001eba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d107      	bne.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f925 	bl	8001fec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f9c8 	bl	800214c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc2:	2b40      	cmp	r3, #64	@ 0x40
 8001dc4:	d13a      	bne.n	8001e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d035      	beq.n	8001e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001dda:	4b6e      	ldr	r3, [pc, #440]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ddc:	e001      	b.n	8001de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001dde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4969      	ldr	r1, [pc, #420]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d101      	bne.n	8001df2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001dee:	4b69      	ldr	r3, [pc, #420]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001df0:	e001      	b.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001df2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001df6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001dfa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fe4f 	bl	8001ada <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	f040 80c3 	bne.w	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80bd 	beq.w	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a49      	ldr	r2, [pc, #292]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e70:	e001      	b.n	8001e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4944      	ldr	r1, [pc, #272]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e7e:	428b      	cmp	r3, r1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e82:	4b44      	ldr	r3, [pc, #272]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e84:	e001      	b.n	8001e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f043 0204 	orr.w	r2, r3, #4
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fe11 	bl	8001ada <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eb8:	e089      	b.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8be 	bl	8002050 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8fd 	bl	80020e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef4:	2b40      	cmp	r3, #64	@ 0x40
 8001ef6:	d12f      	bne.n	8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02a      	beq.n	8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f1e:	e001      	b.n	8001f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4919      	ldr	r1, [pc, #100]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f32:	e001      	b.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f043 0202 	orr.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fdc1 	bl	8001ada <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d136      	bne.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d031      	beq.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f78:	e001      	b.n	8001f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4902      	ldr	r1, [pc, #8]	@ (8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f86:	428b      	cmp	r3, r1
 8001f88:	d106      	bne.n	8001f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f8a:	4b02      	ldr	r3, [pc, #8]	@ (8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f8c:	e006      	b.n	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f8e:	bf00      	nop
 8001f90:	40003800 	.word	0x40003800
 8001f94:	40003400 	.word	0x40003400
 8001f98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001fa0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f043 0204 	orr.w	r2, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fd87 	bl	8001ada <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fcc:	e000      	b.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fce:	bf00      	nop
}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	1c99      	adds	r1, r3, #2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6251      	str	r1, [r2, #36]	@ 0x24
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d113      	bne.n	8002046 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800202c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffc9 	bl	8001fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	1c99      	adds	r1, r3, #2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6251      	str	r1, [r2, #36]	@ 0x24
 8002062:	8819      	ldrh	r1, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <I2SEx_TxISR_I2SExt+0x90>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <I2SEx_TxISR_I2SExt+0x22>
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <I2SEx_TxISR_I2SExt+0x94>)
 8002070:	e001      	b.n	8002076 <I2SEx_TxISR_I2SExt+0x26>
 8002072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002076:	460a      	mov	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d121      	bne.n	80020d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <I2SEx_TxISR_I2SExt+0x90>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <I2SEx_TxISR_I2SExt+0x50>
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <I2SEx_TxISR_I2SExt+0x94>)
 800209e:	e001      	b.n	80020a4 <I2SEx_TxISR_I2SExt+0x54>
 80020a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	490d      	ldr	r1, [pc, #52]	@ (80020e0 <I2SEx_TxISR_I2SExt+0x90>)
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d101      	bne.n	80020b4 <I2SEx_TxISR_I2SExt+0x64>
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <I2SEx_TxISR_I2SExt+0x94>)
 80020b2:	e001      	b.n	80020b8 <I2SEx_TxISR_I2SExt+0x68>
 80020b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff81 	bl	8001fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40003800 	.word	0x40003800
 80020e4:	40003400 	.word	0x40003400

080020e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68d8      	ldr	r0, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	1c99      	adds	r1, r3, #2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002100:	b282      	uxth	r2, r0
 8002102:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d113      	bne.n	8002144 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800212a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ff4a 	bl	8001fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a20      	ldr	r2, [pc, #128]	@ (80021dc <I2SEx_RxISR_I2SExt+0x90>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <I2SEx_RxISR_I2SExt+0x16>
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <I2SEx_RxISR_I2SExt+0x94>)
 8002160:	e001      	b.n	8002166 <I2SEx_RxISR_I2SExt+0x1a>
 8002162:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002166:	68d8      	ldr	r0, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	1c99      	adds	r1, r3, #2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002172:	b282      	uxth	r2, r0
 8002174:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d121      	bne.n	80021d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <I2SEx_RxISR_I2SExt+0x90>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <I2SEx_RxISR_I2SExt+0x50>
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <I2SEx_RxISR_I2SExt+0x94>)
 800219a:	e001      	b.n	80021a0 <I2SEx_RxISR_I2SExt+0x54>
 800219c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	490d      	ldr	r1, [pc, #52]	@ (80021dc <I2SEx_RxISR_I2SExt+0x90>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d101      	bne.n	80021b0 <I2SEx_RxISR_I2SExt+0x64>
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <I2SEx_RxISR_I2SExt+0x94>)
 80021ae:	e001      	b.n	80021b4 <I2SEx_RxISR_I2SExt+0x68>
 80021b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff03 	bl	8001fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40003800 	.word	0x40003800
 80021e0:	40003400 	.word	0x40003400

080021e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e267      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d075      	beq.n	80022ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002202:	4b88      	ldr	r3, [pc, #544]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b04      	cmp	r3, #4
 800220c:	d00c      	beq.n	8002228 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b85      	ldr	r3, [pc, #532]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002216:	2b08      	cmp	r3, #8
 8002218:	d112      	bne.n	8002240 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b82      	ldr	r3, [pc, #520]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002226:	d10b      	bne.n	8002240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b7e      	ldr	r3, [pc, #504]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05b      	beq.n	80022ec <HAL_RCC_OscConfig+0x108>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d157      	bne.n	80022ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e242      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x74>
 800224a:	4b76      	ldr	r3, [pc, #472]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xb0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x98>
 8002262:	4b70      	ldr	r3, [pc, #448]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6f      	ldr	r2, [pc, #444]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6c      	ldr	r2, [pc, #432]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xb0>
 800227c:	4b69      	ldr	r3, [pc, #420]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a68      	ldr	r2, [pc, #416]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b66      	ldr	r3, [pc, #408]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a65      	ldr	r2, [pc, #404]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fc44 	bl	8000b28 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fc40 	bl	8000b28 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e207      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xc0>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fc30 	bl	8000b28 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fc2c 	bl	8000b28 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	@ 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1f3      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b51      	ldr	r3, [pc, #324]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0xe8>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d063      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800230e:	2b08      	cmp	r3, #8
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b44      	ldr	r3, [pc, #272]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d116      	bne.n	800234c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x152>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1c7      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4b3b      	ldr	r3, [pc, #236]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4937      	ldr	r1, [pc, #220]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	e03a      	b.n	80023c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <HAL_RCC_OscConfig+0x244>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fbe5 	bl	8000b28 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002362:	f7fe fbe1 	bl	8000b28 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1a8      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	4b2b      	ldr	r3, [pc, #172]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4925      	ldr	r1, [pc, #148]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002396:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_RCC_OscConfig+0x244>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe fbc4 	bl	8000b28 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a4:	f7fe fbc0 	bl	8000b28 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e187      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d036      	beq.n	800243c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_RCC_OscConfig+0x248>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe fba4 	bl	8000b28 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe fba0 	bl	8000b28 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e167      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_OscConfig+0x240>)
 80023f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x200>
 8002402:	e01b      	b.n	800243c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_OscConfig+0x248>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe fb8d 	bl	8000b28 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	e00e      	b.n	8002430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fb89 	bl	8000b28 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d907      	bls.n	8002430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e150      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
 8002424:	40023800 	.word	0x40023800
 8002428:	42470000 	.word	0x42470000
 800242c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ea      	bne.n	8002412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8097 	beq.w	8002578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b81      	ldr	r3, [pc, #516]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b7d      	ldr	r3, [pc, #500]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4a7c      	ldr	r2, [pc, #496]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6413      	str	r3, [r2, #64]	@ 0x40
 800246a:	4b7a      	ldr	r3, [pc, #488]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b77      	ldr	r3, [pc, #476]	@ (8002658 <HAL_RCC_OscConfig+0x474>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b74      	ldr	r3, [pc, #464]	@ (8002658 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a73      	ldr	r2, [pc, #460]	@ (8002658 <HAL_RCC_OscConfig+0x474>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fb49 	bl	8000b28 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fb45 	bl	8000b28 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e10c      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_OscConfig+0x474>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x2ea>
 80024c0:	4b64      	ldr	r3, [pc, #400]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c4:	4a63      	ldr	r2, [pc, #396]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80024cc:	e01c      	b.n	8002508 <HAL_RCC_OscConfig+0x324>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x30c>
 80024d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	4a5e      	ldr	r2, [pc, #376]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0x324>
 80024f0:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fc:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002500:	4a54      	ldr	r2, [pc, #336]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d015      	beq.n	800253c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fb0a 	bl	8000b28 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002518:	f7fe fb06 	bl	8000b28 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e0cb      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0ee      	beq.n	8002518 <HAL_RCC_OscConfig+0x334>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe faf4 	bl	8000b28 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe faf0 	bl	8000b28 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0b5      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255a:	4b3e      	ldr	r3, [pc, #248]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ee      	bne.n	8002544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256c:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	4a38      	ldr	r2, [pc, #224]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a1 	beq.w	80026c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002582:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d05c      	beq.n	8002648 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d141      	bne.n	800261a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_RCC_OscConfig+0x478>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fac4 	bl	8000b28 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fac0 	bl	8000b28 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e087      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	3b01      	subs	r3, #1
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	491b      	ldr	r1, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x478>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fa99 	bl	8000b28 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fa95 	bl	8000b28 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e05c      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x416>
 8002618:	e054      	b.n	80026c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_RCC_OscConfig+0x478>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fa82 	bl	8000b28 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fa7e 	bl	8000b28 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e045      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_OscConfig+0x470>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x444>
 8002646:	e03d      	b.n	80026c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e038      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x4ec>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d028      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d121      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d11a      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	4293      	cmp	r3, r2
 800269a:	d111      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0cc      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b68      	ldr	r3, [pc, #416]	@ (800288c <HAL_RCC_ClockConfig+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d90c      	bls.n	8002710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b65      	ldr	r3, [pc, #404]	@ (800288c <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b63      	ldr	r3, [pc, #396]	@ (800288c <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b8      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002728:	4b59      	ldr	r3, [pc, #356]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a58      	ldr	r2, [pc, #352]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002740:	4b53      	ldr	r3, [pc, #332]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a52      	ldr	r2, [pc, #328]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800274a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b50      	ldr	r3, [pc, #320]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	494d      	ldr	r1, [pc, #308]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d044      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b47      	ldr	r3, [pc, #284]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d119      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d003      	beq.n	8002792 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	2b03      	cmp	r3, #3
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b3f      	ldr	r3, [pc, #252]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e067      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4934      	ldr	r1, [pc, #208]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe f9b0 	bl	8000b28 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe f9ac 	bl	8000b28 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e04f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b25      	ldr	r3, [pc, #148]	@ (800288c <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d20c      	bcs.n	800281c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b22      	ldr	r3, [pc, #136]	@ (800288c <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e032      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002828:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4916      	ldr	r1, [pc, #88]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002846:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	490e      	ldr	r1, [pc, #56]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285a:	f000 f821 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800285e:	4602      	mov	r2, r0
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	490a      	ldr	r1, [pc, #40]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	5ccb      	ldrb	r3, [r1, r3]
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f910 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00
 8002890:	40023800 	.word	0x40023800
 8002894:	080053a0 	.word	0x080053a0
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a4:	b094      	sub	sp, #80	@ 0x50
 80028a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b8:	4b79      	ldr	r3, [pc, #484]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d00d      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x40>
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	f200 80e1 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x34>
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x3a>
 80028d2:	e0db      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028d8:	e0db      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028da:	4b73      	ldr	r3, [pc, #460]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80028dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028de:	e0d8      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d063      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f6:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	099b      	lsrs	r3, r3, #6
 80028fc:	2200      	movs	r2, #0
 80028fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002908:	633b      	str	r3, [r7, #48]	@ 0x30
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
 800290e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002912:	4622      	mov	r2, r4
 8002914:	462b      	mov	r3, r5
 8002916:	f04f 0000 	mov.w	r0, #0
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	0159      	lsls	r1, r3, #5
 8002920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002924:	0150      	lsls	r0, r2, #5
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4621      	mov	r1, r4
 800292c:	1a51      	subs	r1, r2, r1
 800292e:	6139      	str	r1, [r7, #16]
 8002930:	4629      	mov	r1, r5
 8002932:	eb63 0301 	sbc.w	r3, r3, r1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002944:	4659      	mov	r1, fp
 8002946:	018b      	lsls	r3, r1, #6
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800294e:	4651      	mov	r1, sl
 8002950:	018a      	lsls	r2, r1, #6
 8002952:	4651      	mov	r1, sl
 8002954:	ebb2 0801 	subs.w	r8, r2, r1
 8002958:	4659      	mov	r1, fp
 800295a:	eb63 0901 	sbc.w	r9, r3, r1
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002972:	4690      	mov	r8, r2
 8002974:	4699      	mov	r9, r3
 8002976:	4623      	mov	r3, r4
 8002978:	eb18 0303 	adds.w	r3, r8, r3
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	462b      	mov	r3, r5
 8002980:	eb49 0303 	adc.w	r3, r9, r3
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002992:	4629      	mov	r1, r5
 8002994:	024b      	lsls	r3, r1, #9
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800299c:	4621      	mov	r1, r4
 800299e:	024a      	lsls	r2, r1, #9
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029b0:	f7fd fc0a 	bl	80001c8 <__aeabi_uldivmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4613      	mov	r3, r2
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029bc:	e058      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	2200      	movs	r2, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	4611      	mov	r1, r2
 80029ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	f04f 0000 	mov.w	r0, #0
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	0159      	lsls	r1, r3, #5
 80029e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ea:	0150      	lsls	r0, r2, #5
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4641      	mov	r1, r8
 80029f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80029f6:	4649      	mov	r1, r9
 80029f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a10:	ebb2 040a 	subs.w	r4, r2, sl
 8002a14:	eb63 050b 	sbc.w	r5, r3, fp
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	00eb      	lsls	r3, r5, #3
 8002a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a26:	00e2      	lsls	r2, r4, #3
 8002a28:	4614      	mov	r4, r2
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	4643      	mov	r3, r8
 8002a2e:	18e3      	adds	r3, r4, r3
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	464b      	mov	r3, r9
 8002a34:	eb45 0303 	adc.w	r3, r5, r3
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a46:	4629      	mov	r1, r5
 8002a48:	028b      	lsls	r3, r1, #10
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a50:	4621      	mov	r1, r4
 8002a52:	028a      	lsls	r2, r1, #10
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	61fa      	str	r2, [r7, #28]
 8002a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a64:	f7fd fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3750      	adds	r7, #80	@ 0x50
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d035      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ad4:	4b62      	ldr	r3, [pc, #392]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ada:	f7fe f825 	bl	8000b28 <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ae2:	f7fe f821 	bl	8000b28 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0b0      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af4:	4b5b      	ldr	r3, [pc, #364]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	019a      	lsls	r2, r3, #6
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	071b      	lsls	r3, r3, #28
 8002b0c:	4955      	ldr	r1, [pc, #340]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b14:	4b52      	ldr	r3, [pc, #328]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b1a:	f7fe f805 	bl	8000b28 <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b22:	f7fe f801 	bl	8000b28 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e090      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b34:	4b4b      	ldr	r3, [pc, #300]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8083 	beq.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b44      	ldr	r3, [pc, #272]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a43      	ldr	r2, [pc, #268]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b41      	ldr	r3, [pc, #260]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b76:	f7fd ffd7 	bl	8000b28 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fd ffd3 	bl	8000b28 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e062      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002b90:	4b35      	ldr	r3, [pc, #212]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9c:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02f      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bba:	4b2a      	ldr	r3, [pc, #168]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc4:	4b29      	ldr	r3, [pc, #164]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bca:	4b28      	ldr	r3, [pc, #160]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bd0:	4a24      	ldr	r2, [pc, #144]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bd6:	4b23      	ldr	r3, [pc, #140]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d114      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fd ffa1 	bl	8000b28 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fd ff9d 	bl	8000b28 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e02a      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ee      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c18:	d10d      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002c1a:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2e:	490d      	ldr	r1, [pc, #52]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
 8002c34:	e005      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c3c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c40:	6093      	str	r3, [r2, #8]
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4e:	4905      	ldr	r1, [pc, #20]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	42470068 	.word	0x42470068
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42470e40 	.word	0x42470e40

08002c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d13f      	bne.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c96:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ca4:	d12f      	bne.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002ca8:	617b      	str	r3, [r7, #20]
          break;
 8002caa:	e02f      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cac:	4b1c      	ldr	r3, [pc, #112]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002cba:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc2:	4a19      	ldr	r2, [pc, #100]	@ (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e007      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd4:	4a15      	ldr	r2, [pc, #84]	@ (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002cdc:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf6:	0f1b      	lsrs	r3, r3, #28
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]
          break;
 8002d04:	e002      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
          break;
 8002d0a:	bf00      	nop
        }
      }
      break;
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8002d0e:	bf00      	nop
    }
  }
  return frequency;
 8002d10:	697b      	ldr	r3, [r7, #20]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00bb8000 	.word	0x00bb8000
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	00f42400 	.word	0x00f42400

08002d30 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8002d34:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d42:	4a0e      	ldr	r2, [pc, #56]	@ (8002d7c <MX_PDM2PCM_Init+0x4c>)
 8002d44:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8002d46:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d48:	2202      	movs	r2, #2
 8002d4a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d4e:	2202      	movs	r2, #2
 8002d50:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8002d52:	4809      	ldr	r0, [pc, #36]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d54:	f001 fd26 	bl	80047a4 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8002d58:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_PDM2PCM_Init+0x50>)
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <MX_PDM2PCM_Init+0x50>)
 8002d60:	2210      	movs	r2, #16
 8002d62:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_PDM2PCM_Init+0x50>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8002d6a:	4905      	ldr	r1, [pc, #20]	@ (8002d80 <MX_PDM2PCM_Init+0x50>)
 8002d6c:	4802      	ldr	r0, [pc, #8]	@ (8002d78 <MX_PDM2PCM_Init+0x48>)
 8002d6e:	f001 fde9 	bl	8004944 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000730 	.word	0x20000730
 8002d7c:	7d70a3d6 	.word	0x7d70a3d6
 8002d80:	2000077c 	.word	0x2000077c

08002d84 <D16_GENERIC>:
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8002d8c:	b089      	sub	sp, #36	@ 0x24
 8002d8e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8002d90:	6993      	ldr	r3, [r2, #24]
 8002d92:	9406      	str	r4, [sp, #24]
 8002d94:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8002d96:	9307      	str	r3, [sp, #28]
 8002d98:	9402      	str	r4, [sp, #8]
 8002d9a:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8002d9e:	69d3      	ldr	r3, [r2, #28]
 8002da0:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8002da2:	9103      	str	r1, [sp, #12]
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d066      	beq.n	8002e76 <D16_GENERIC+0xf2>
 8002da8:	f004 0520 	and.w	r5, r4, #32
 8002dac:	f004 0410 	and.w	r4, r4, #16
 8002db0:	9505      	str	r5, [sp, #20]
 8002db2:	4937      	ldr	r1, [pc, #220]	@ (8002e90 <D16_GENERIC+0x10c>)
 8002db4:	9404      	str	r4, [sp, #16]
 8002db6:	f04f 0c00 	mov.w	ip, #0
 8002dba:	4635      	mov	r5, r6
 8002dbc:	e04f      	b.n	8002e5e <D16_GENERIC+0xda>
 8002dbe:	5d87      	ldrb	r7, [r0, r6]
 8002dc0:	7804      	ldrb	r4, [r0, #0]
 8002dc2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8002dc6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8002dca:	b2e6      	uxtb	r6, r4
 8002dcc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002dd0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002dd4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8002dd8:	4433      	add	r3, r6
 8002dda:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8002dde:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8002dea:	0aa3      	lsrs	r3, r4, #10
 8002dec:	4c29      	ldr	r4, [pc, #164]	@ (8002e94 <D16_GENERIC+0x110>)
 8002dee:	fb26 5404 	smlad	r4, r6, r4, r5
 8002df2:	4d29      	ldr	r5, [pc, #164]	@ (8002e98 <D16_GENERIC+0x114>)
 8002df4:	fb26 f505 	smuad	r5, r6, r5
 8002df8:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8002dfc:	eb04 080a 	add.w	r8, r4, sl
 8002e00:	eba8 080b 	sub.w	r8, r8, fp
 8002e04:	4646      	mov	r6, r8
 8002e06:	17f7      	asrs	r7, r6, #31
 8002e08:	e9cd 6700 	strd	r6, r7, [sp]
 8002e0c:	9e04      	ldr	r6, [sp, #16]
 8002e0e:	f10c 0e01 	add.w	lr, ip, #1
 8002e12:	b16e      	cbz	r6, 8002e30 <D16_GENERIC+0xac>
 8002e14:	6a16      	ldr	r6, [r2, #32]
 8002e16:	9f01      	ldr	r7, [sp, #4]
 8002e18:	fba8 ab06 	umull	sl, fp, r8, r6
 8002e1c:	fb06 bb07 	mla	fp, r6, r7, fp
 8002e20:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8002e24:	f14b 0900 	adc.w	r9, fp, #0
 8002e28:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8002e2c:	46a3      	mov	fp, r4
 8002e2e:	4654      	mov	r4, sl
 8002e30:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8002e32:	9f02      	ldr	r7, [sp, #8]
 8002e34:	0424      	lsls	r4, r4, #16
 8002e36:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8002e3a:	f04f 0900 	mov.w	r9, #0
 8002e3e:	fb0c fc06 	mul.w	ip, ip, r6
 8002e42:	fbc7 8904 	smlal	r8, r9, r7, r4
 8002e46:	9e03      	ldr	r6, [sp, #12]
 8002e48:	464f      	mov	r7, r9
 8002e4a:	10bc      	asrs	r4, r7, #2
 8002e4c:	f304 040f 	ssat	r4, #16, r4
 8002e50:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8002e54:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8002e56:	fa1f fc8e 	uxth.w	ip, lr
 8002e5a:	4564      	cmp	r4, ip
 8002e5c:	d90a      	bls.n	8002e74 <D16_GENERIC+0xf0>
 8002e5e:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8002e60:	2c01      	cmp	r4, #1
 8002e62:	b2e6      	uxtb	r6, r4
 8002e64:	d1ab      	bne.n	8002dbe <D16_GENERIC+0x3a>
 8002e66:	9e05      	ldr	r6, [sp, #20]
 8002e68:	f850 4b02 	ldr.w	r4, [r0], #2
 8002e6c:	2e00      	cmp	r6, #0
 8002e6e:	d0ac      	beq.n	8002dca <D16_GENERIC+0x46>
 8002e70:	ba64      	rev16	r4, r4
 8002e72:	e7aa      	b.n	8002dca <D16_GENERIC+0x46>
 8002e74:	462e      	mov	r6, r5
 8002e76:	9906      	ldr	r1, [sp, #24]
 8002e78:	61d3      	str	r3, [r2, #28]
 8002e7a:	9b07      	ldr	r3, [sp, #28]
 8002e7c:	6096      	str	r6, [r2, #8]
 8002e7e:	2000      	movs	r0, #0
 8002e80:	60d1      	str	r1, [r2, #12]
 8002e82:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	b009      	add	sp, #36	@ 0x24
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	00030001 	.word	0x00030001
 8002e98:	00010003 	.word	0x00010003

08002e9c <D24_GENERIC>:
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8002ea2:	6993      	ldr	r3, [r2, #24]
 8002ea4:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8002eac:	9307      	str	r3, [sp, #28]
 8002eae:	9503      	str	r5, [sp, #12]
 8002eb0:	69d3      	ldr	r3, [r2, #28]
 8002eb2:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8002eb4:	9104      	str	r1, [sp, #16]
 8002eb6:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8002eba:	2e00      	cmp	r6, #0
 8002ebc:	f000 808f 	beq.w	8002fde <D24_GENERIC+0x142>
 8002ec0:	f005 0620 	and.w	r6, r5, #32
 8002ec4:	f005 0510 	and.w	r5, r5, #16
 8002ec8:	4953      	ldr	r1, [pc, #332]	@ (8003018 <D24_GENERIC+0x17c>)
 8002eca:	9606      	str	r6, [sp, #24]
 8002ecc:	9505      	str	r5, [sp, #20]
 8002ece:	f04f 0c00 	mov.w	ip, #0
 8002ed2:	f8cd 9008 	str.w	r9, [sp, #8]
 8002ed6:	e068      	b.n	8002faa <D24_GENERIC+0x10e>
 8002ed8:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8002edc:	f810 8007 	ldrb.w	r8, [r0, r7]
 8002ee0:	042d      	lsls	r5, r5, #16
 8002ee2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8002ee6:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8002eea:	44ae      	add	lr, r5
 8002eec:	4438      	add	r0, r7
 8002eee:	fa5f f68e 	uxtb.w	r6, lr
 8002ef2:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8002ef6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002efa:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8002efe:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8002f02:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8002f06:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8002f0a:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8002f0e:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8002f12:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002f16:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8002f1a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8002f1e:	4d3f      	ldr	r5, [pc, #252]	@ (800301c <D24_GENERIC+0x180>)
 8002f20:	fb26 b705 	smlad	r7, r6, r5, fp
 8002f24:	4d3e      	ldr	r5, [pc, #248]	@ (8003020 <D24_GENERIC+0x184>)
 8002f26:	fb26 4b05 	smlad	fp, r6, r5, r4
 8002f2a:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8002f2e:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8002f32:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8002f36:	2401      	movs	r4, #1
 8002f38:	fb26 f604 	smuad	r6, r6, r4
 8002f3c:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8002f40:	9f02      	ldr	r7, [sp, #8]
 8002f42:	eb0c 0e04 	add.w	lr, ip, r4
 8002f46:	eb08 0406 	add.w	r4, r8, r6
 8002f4a:	eb05 060a 	add.w	r6, r5, sl
 8002f4e:	1bf6      	subs	r6, r6, r7
 8002f50:	4637      	mov	r7, r6
 8002f52:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8002f56:	e9cd 7800 	strd	r7, r8, [sp]
 8002f5a:	9f05      	ldr	r7, [sp, #20]
 8002f5c:	b177      	cbz	r7, 8002f7c <D24_GENERIC+0xe0>
 8002f5e:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8002f62:	9502      	str	r5, [sp, #8]
 8002f64:	fba6 9a08 	umull	r9, sl, r6, r8
 8002f68:	9e01      	ldr	r6, [sp, #4]
 8002f6a:	fb08 aa06 	mla	sl, r8, r6, sl
 8002f6e:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8002f72:	f14a 0700 	adc.w	r7, sl, #0
 8002f76:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8002f7a:	4655      	mov	r5, sl
 8002f7c:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8002f7e:	9f03      	ldr	r7, [sp, #12]
 8002f80:	03ad      	lsls	r5, r5, #14
 8002f82:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8002f86:	f04f 0900 	mov.w	r9, #0
 8002f8a:	fb0c fc06 	mul.w	ip, ip, r6
 8002f8e:	fbc7 8905 	smlal	r8, r9, r7, r5
 8002f92:	9e04      	ldr	r6, [sp, #16]
 8002f94:	464f      	mov	r7, r9
 8002f96:	10bd      	asrs	r5, r7, #2
 8002f98:	f305 050f 	ssat	r5, #16, r5
 8002f9c:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8002fa0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8002fa2:	fa1f fc8e 	uxth.w	ip, lr
 8002fa6:	4565      	cmp	r5, ip
 8002fa8:	d917      	bls.n	8002fda <D24_GENERIC+0x13e>
 8002faa:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8002fac:	f890 e000 	ldrb.w	lr, [r0]
 8002fb0:	b2ef      	uxtb	r7, r5
 8002fb2:	2d01      	cmp	r5, #1
 8002fb4:	b23e      	sxth	r6, r7
 8002fb6:	d18f      	bne.n	8002ed8 <D24_GENERIC+0x3c>
 8002fb8:	9d06      	ldr	r5, [sp, #24]
 8002fba:	b1dd      	cbz	r5, 8002ff4 <D24_GENERIC+0x158>
 8002fbc:	78c5      	ldrb	r5, [r0, #3]
 8002fbe:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8002fc2:	f01c 0f01 	tst.w	ip, #1
 8002fc6:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8002fca:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8002fce:	d11b      	bne.n	8003008 <D24_GENERIC+0x16c>
 8002fd0:	f890 e001 	ldrb.w	lr, [r0, #1]
 8002fd4:	3002      	adds	r0, #2
 8002fd6:	44c6      	add	lr, r8
 8002fd8:	e789      	b.n	8002eee <D24_GENERIC+0x52>
 8002fda:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	9b07      	ldr	r3, [sp, #28]
 8002fe2:	6193      	str	r3, [r2, #24]
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8002fea:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8002fee:	b009      	add	sp, #36	@ 0x24
 8002ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff4:	f890 8001 	ldrb.w	r8, [r0, #1]
 8002ff8:	7885      	ldrb	r5, [r0, #2]
 8002ffa:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8002ffe:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8003002:	44c6      	add	lr, r8
 8003004:	3003      	adds	r0, #3
 8003006:	e772      	b.n	8002eee <D24_GENERIC+0x52>
 8003008:	f890 8002 	ldrb.w	r8, [r0, #2]
 800300c:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8003010:	44c6      	add	lr, r8
 8003012:	3004      	adds	r0, #4
 8003014:	e76b      	b.n	8002eee <D24_GENERIC+0x52>
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c
 800301c:	00030001 	.word	0x00030001
 8003020:	00060007 	.word	0x00060007

08003024 <D32_GENERIC>:
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800302a:	6993      	ldr	r3, [r2, #24]
 800302c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800302e:	69d6      	ldr	r6, [r2, #28]
 8003030:	b089      	sub	sp, #36	@ 0x24
 8003032:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8003036:	9307      	str	r3, [sp, #28]
 8003038:	9403      	str	r4, [sp, #12]
 800303a:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 800303e:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8003040:	9104      	str	r1, [sp, #16]
 8003042:	2d00      	cmp	r5, #0
 8003044:	f000 809a 	beq.w	800317c <D32_GENERIC+0x158>
 8003048:	f004 0520 	and.w	r5, r4, #32
 800304c:	f004 0410 	and.w	r4, r4, #16
 8003050:	9506      	str	r5, [sp, #24]
 8003052:	4951      	ldr	r1, [pc, #324]	@ (8003198 <D32_GENERIC+0x174>)
 8003054:	9405      	str	r4, [sp, #20]
 8003056:	f04f 0e00 	mov.w	lr, #0
 800305a:	f8cd 9008 	str.w	r9, [sp, #8]
 800305e:	461d      	mov	r5, r3
 8003060:	4617      	mov	r7, r2
 8003062:	e077      	b.n	8003154 <D32_GENERIC+0x130>
 8003064:	7823      	ldrb	r3, [r4, #0]
 8003066:	f810 800c 	ldrb.w	r8, [r0, ip]
 800306a:	f810 c002 	ldrb.w	ip, [r0, r2]
 800306e:	7800      	ldrb	r0, [r0, #0]
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003076:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800307a:	4403      	add	r3, r0
 800307c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8003080:	b2dc      	uxtb	r4, r3
 8003082:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003086:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800308a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800308e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003092:	0e1b      	lsrs	r3, r3, #24
 8003094:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8003098:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800309c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030a0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80030a4:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 80030a8:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 80030ac:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80030b0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80030b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80030b8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80030bc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80030c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80030c4:	4b35      	ldr	r3, [pc, #212]	@ (800319c <D32_GENERIC+0x178>)
 80030c6:	fb22 b403 	smlad	r4, r2, r3, fp
 80030ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ce:	fb2c 4803 	smlad	r8, ip, r3, r4
 80030d2:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <D32_GENERIC+0x17c>)
 80030d4:	fb22 5503 	smlad	r5, r2, r3, r5
 80030d8:	4b32      	ldr	r3, [pc, #200]	@ (80031a4 <D32_GENERIC+0x180>)
 80030da:	fb2c 5b03 	smlad	fp, ip, r3, r5
 80030de:	2301      	movs	r3, #1
 80030e0:	fb22 f203 	smuad	r2, r2, r3
 80030e4:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <D32_GENERIC+0x184>)
 80030e6:	fb2c 2503 	smlad	r5, ip, r3, r2
 80030ea:	9b02      	ldr	r3, [sp, #8]
 80030ec:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 80030f0:	eb04 080a 	add.w	r8, r4, sl
 80030f4:	eba8 0803 	sub.w	r8, r8, r3
 80030f8:	4642      	mov	r2, r8
 80030fa:	17d3      	asrs	r3, r2, #31
 80030fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003100:	9b05      	ldr	r3, [sp, #20]
 8003102:	f10e 0c01 	add.w	ip, lr, #1
 8003106:	b173      	cbz	r3, 8003126 <D32_GENERIC+0x102>
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	9402      	str	r4, [sp, #8]
 800310e:	fba8 8902 	umull	r8, r9, r8, r2
 8003112:	469a      	mov	sl, r3
 8003114:	fb02 930a 	mla	r3, r2, sl, r9
 8003118:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 800311c:	f143 0900 	adc.w	r9, r3, #0
 8003120:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003124:	4654      	mov	r4, sl
 8003126:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003128:	9a04      	ldr	r2, [sp, #16]
 800312a:	fb0e fe03 	mul.w	lr, lr, r3
 800312e:	9b03      	ldr	r3, [sp, #12]
 8003130:	0364      	lsls	r4, r4, #13
 8003132:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8003136:	f04f 0900 	mov.w	r9, #0
 800313a:	fbc3 8904 	smlal	r8, r9, r3, r4
 800313e:	464b      	mov	r3, r9
 8003140:	109b      	asrs	r3, r3, #2
 8003142:	f303 030f 	ssat	r3, #16, r3
 8003146:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 800314a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800314c:	fa1f fe8c 	uxth.w	lr, ip
 8003150:	4573      	cmp	r3, lr
 8003152:	d90f      	bls.n	8003174 <D32_GENERIC+0x150>
 8003154:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003156:	b2da      	uxtb	r2, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 800315e:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8003162:	f47f af7f 	bne.w	8003064 <D32_GENERIC+0x40>
 8003166:	1d02      	adds	r2, r0, #4
 8003168:	6803      	ldr	r3, [r0, #0]
 800316a:	9806      	ldr	r0, [sp, #24]
 800316c:	b188      	cbz	r0, 8003192 <D32_GENERIC+0x16e>
 800316e:	ba5b      	rev16	r3, r3
 8003170:	4610      	mov	r0, r2
 8003172:	e785      	b.n	8003080 <D32_GENERIC+0x5c>
 8003174:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003178:	462b      	mov	r3, r5
 800317a:	463a      	mov	r2, r7
 800317c:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8003180:	9b07      	ldr	r3, [sp, #28]
 8003182:	61d6      	str	r6, [r2, #28]
 8003184:	2000      	movs	r0, #0
 8003186:	e9c2 a904 	strd	sl, r9, [r2, #16]
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	b009      	add	sp, #36	@ 0x24
 800318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003192:	4610      	mov	r0, r2
 8003194:	e774      	b.n	8003080 <D32_GENERIC+0x5c>
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c
 800319c:	00060003 	.word	0x00060003
 80031a0:	000a000c 	.word	0x000a000c
 80031a4:	000c000a 	.word	0x000c000a
 80031a8:	00030006 	.word	0x00030006

080031ac <D48_GENERIC>:
 80031ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b0:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 80031b4:	b08b      	sub	sp, #44	@ 0x2c
 80031b6:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80031b8:	9304      	str	r3, [sp, #16]
 80031ba:	6993      	ldr	r3, [r2, #24]
 80031bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80031be:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 80031c2:	9401      	str	r4, [sp, #4]
 80031c4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80031c6:	9405      	str	r4, [sp, #20]
 80031c8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80031cc:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80031ce:	9106      	str	r1, [sp, #24]
 80031d0:	2d00      	cmp	r5, #0
 80031d2:	f000 80c2 	beq.w	800335a <D48_GENERIC+0x1ae>
 80031d6:	f004 0520 	and.w	r5, r4, #32
 80031da:	f04f 0900 	mov.w	r9, #0
 80031de:	f004 0410 	and.w	r4, r4, #16
 80031e2:	9508      	str	r5, [sp, #32]
 80031e4:	4964      	ldr	r1, [pc, #400]	@ (8003378 <D48_GENERIC+0x1cc>)
 80031e6:	9407      	str	r4, [sp, #28]
 80031e8:	464d      	mov	r5, r9
 80031ea:	e09e      	b.n	800332a <D48_GENERIC+0x17e>
 80031ec:	f81b 4007 	ldrb.w	r4, [fp, r7]
 80031f0:	f810 b008 	ldrb.w	fp, [r0, r8]
 80031f4:	f819 8008 	ldrb.w	r8, [r9, r8]
 80031f8:	f810 9006 	ldrb.w	r9, [r0, r6]
 80031fc:	7800      	ldrb	r0, [r0, #0]
 80031fe:	0424      	lsls	r4, r4, #16
 8003200:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8003204:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8003208:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 800320c:	44be      	add	lr, r7
 800320e:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8003212:	eb0b 0700 	add.w	r7, fp, r0
 8003216:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 800321a:	fa5f fe87 	uxtb.w	lr, r7
 800321e:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8003222:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003226:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800322a:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800322e:	0e3f      	lsrs	r7, r7, #24
 8003230:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8003234:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8003238:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800323c:	b2e7      	uxtb	r7, r4
 800323e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8003242:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003246:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800324a:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800324e:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8003252:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8003256:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800325a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800325e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003262:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003266:	f3cc 0809 	ubfx	r8, ip, #0, #10
 800326a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800326e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003272:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003276:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800327a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 800327e:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8003282:	4c3e      	ldr	r4, [pc, #248]	@ (800337c <D48_GENERIC+0x1d0>)
 8003284:	9e01      	ldr	r6, [sp, #4]
 8003286:	fb29 6404 	smlad	r4, r9, r4, r6
 800328a:	4e3d      	ldr	r6, [pc, #244]	@ (8003380 <D48_GENERIC+0x1d4>)
 800328c:	fb2e 4406 	smlad	r4, lr, r6, r4
 8003290:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8003294:	fb27 4b06 	smlad	fp, r7, r6, r4
 8003298:	4c3a      	ldr	r4, [pc, #232]	@ (8003384 <D48_GENERIC+0x1d8>)
 800329a:	fb29 3304 	smlad	r3, r9, r4, r3
 800329e:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80032a2:	fb2e 3304 	smlad	r3, lr, r4, r3
 80032a6:	4c38      	ldr	r4, [pc, #224]	@ (8003388 <D48_GENERIC+0x1dc>)
 80032a8:	fb27 3304 	smlad	r3, r7, r4, r3
 80032ac:	2601      	movs	r6, #1
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	fb29 f906 	smuad	r9, r9, r6
 80032b4:	4b35      	ldr	r3, [pc, #212]	@ (800338c <D48_GENERIC+0x1e0>)
 80032b6:	fb2e 9e03 	smlad	lr, lr, r3, r9
 80032ba:	4b35      	ldr	r3, [pc, #212]	@ (8003390 <D48_GENERIC+0x1e4>)
 80032bc:	fb27 e303 	smlad	r3, r7, r3, lr
 80032c0:	9f04      	ldr	r7, [sp, #16]
 80032c2:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 80032c6:	eb05 0e06 	add.w	lr, r5, r6
 80032ca:	eb04 060a 	add.w	r6, r4, sl
 80032ce:	1bf6      	subs	r6, r6, r7
 80032d0:	4637      	mov	r7, r6
 80032d2:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80032d6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80032da:	9f07      	ldr	r7, [sp, #28]
 80032dc:	b177      	cbz	r7, 80032fc <D48_GENERIC+0x150>
 80032de:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80032e2:	9404      	str	r4, [sp, #16]
 80032e4:	fba6 9a08 	umull	r9, sl, r6, r8
 80032e8:	9e03      	ldr	r6, [sp, #12]
 80032ea:	fb08 aa06 	mla	sl, r8, r6, sl
 80032ee:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80032f2:	f14a 0700 	adc.w	r7, sl, #0
 80032f6:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80032fa:	4654      	mov	r4, sl
 80032fc:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80032fe:	fb05 f606 	mul.w	r6, r5, r6
 8003302:	9d05      	ldr	r5, [sp, #20]
 8003304:	02e4      	lsls	r4, r4, #11
 8003306:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 800330a:	f04f 0800 	mov.w	r8, #0
 800330e:	fbc5 7804 	smlal	r7, r8, r5, r4
 8003312:	4645      	mov	r5, r8
 8003314:	10ac      	asrs	r4, r5, #2
 8003316:	9d06      	ldr	r5, [sp, #24]
 8003318:	f304 040f 	ssat	r4, #16, r4
 800331c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8003320:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8003322:	fa1f f58e 	uxth.w	r5, lr
 8003326:	42ac      	cmp	r4, r5
 8003328:	d917      	bls.n	800335a <D48_GENERIC+0x1ae>
 800332a:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 800332c:	b2e6      	uxtb	r6, r4
 800332e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8003332:	4277      	negs	r7, r6
 8003334:	eb00 0b08 	add.w	fp, r0, r8
 8003338:	eb0b 0907 	add.w	r9, fp, r7
 800333c:	2c01      	cmp	r4, #1
 800333e:	eb09 0e08 	add.w	lr, r9, r8
 8003342:	f47f af53 	bne.w	80031ec <D48_GENERIC+0x40>
 8003346:	9e08      	ldr	r6, [sp, #32]
 8003348:	e9d0 7400 	ldrd	r7, r4, [r0]
 800334c:	3006      	adds	r0, #6
 800334e:	2e00      	cmp	r6, #0
 8003350:	f43f af63 	beq.w	800321a <D48_GENERIC+0x6e>
 8003354:	ba7f      	rev16	r7, r7
 8003356:	ba64      	rev16	r4, r4
 8003358:	e75f      	b.n	800321a <D48_GENERIC+0x6e>
 800335a:	6093      	str	r3, [r2, #8]
 800335c:	9b01      	ldr	r3, [sp, #4]
 800335e:	60d3      	str	r3, [r2, #12]
 8003360:	9b04      	ldr	r3, [sp, #16]
 8003362:	6153      	str	r3, [r2, #20]
 8003364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003366:	f8c2 c01c 	str.w	ip, [r2, #28]
 800336a:	2000      	movs	r0, #0
 800336c:	f8c2 a010 	str.w	sl, [r2, #16]
 8003370:	6193      	str	r3, [r2, #24]
 8003372:	b00b      	add	sp, #44	@ 0x2c
 8003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003378:	2000000c 	.word	0x2000000c
 800337c:	000f000a 	.word	0x000f000a
 8003380:	00060003 	.word	0x00060003
 8003384:	00150019 	.word	0x00150019
 8003388:	00190015 	.word	0x00190015
 800338c:	00030006 	.word	0x00030006
 8003390:	000a000f 	.word	0x000a000f

08003394 <D64_GENERIC>:
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	b089      	sub	sp, #36	@ 0x24
 800339a:	6895      	ldr	r5, [r2, #8]
 800339c:	6913      	ldr	r3, [r2, #16]
 800339e:	9501      	str	r5, [sp, #4]
 80033a0:	68d5      	ldr	r5, [r2, #12]
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	9500      	str	r5, [sp, #0]
 80033a6:	6953      	ldr	r3, [r2, #20]
 80033a8:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80033aa:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80033ac:	9303      	str	r3, [sp, #12]
 80033ae:	6993      	ldr	r3, [r2, #24]
 80033b0:	9307      	str	r3, [sp, #28]
 80033b2:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80033b6:	69d3      	ldr	r3, [r2, #28]
 80033b8:	2c00      	cmp	r4, #0
 80033ba:	f000 80d7 	beq.w	800356c <D64_GENERIC+0x1d8>
 80033be:	6a11      	ldr	r1, [r2, #32]
 80033c0:	9106      	str	r1, [sp, #24]
 80033c2:	f04f 0e00 	mov.w	lr, #0
 80033c6:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 80035ac <D64_GENERIC+0x218>
 80033ca:	4681      	mov	r9, r0
 80033cc:	e0bf      	b.n	800354e <D64_GENERIC+0x1ba>
 80033ce:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80033d2:	426c      	negs	r4, r5
 80033d4:	eb09 0708 	add.w	r7, r9, r8
 80033d8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80033dc:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 80033e0:	5d38      	ldrb	r0, [r7, r4]
 80033e2:	5d31      	ldrb	r1, [r6, r4]
 80033e4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80033e8:	f819 a008 	ldrb.w	sl, [r9, r8]
 80033ec:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80033f0:	f899 7000 	ldrb.w	r7, [r9]
 80033f4:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 80033f8:	4426      	add	r6, r4
 80033fa:	0409      	lsls	r1, r1, #16
 80033fc:	0400      	lsls	r0, r0, #16
 80033fe:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8003402:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8003406:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 800340a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800340e:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8003412:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8003416:	4459      	add	r1, fp
 8003418:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 800341c:	4438      	add	r0, r7
 800341e:	b2c5      	uxtb	r5, r0
 8003420:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003424:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8003428:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 800342c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003430:	0e00      	lsrs	r0, r0, #24
 8003432:	eb03 0806 	add.w	r8, r3, r6
 8003436:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800343a:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 800343e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003442:	b2c8      	uxtb	r0, r1
 8003444:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003448:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800344c:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8003450:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8003454:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003458:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800345c:	0e09      	lsrs	r1, r1, #24
 800345e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8003462:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8003466:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800346a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800346e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8003472:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8003476:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800347a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800347e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003482:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003486:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800348a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800348e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003492:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003496:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800349a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800349e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80034a2:	0a8b      	lsrs	r3, r1, #10
 80034a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80034a8:	4938      	ldr	r1, [pc, #224]	@ (800358c <D64_GENERIC+0x1f8>)
 80034aa:	9c00      	ldr	r4, [sp, #0]
 80034ac:	fb28 4101 	smlad	r1, r8, r1, r4
 80034b0:	4c37      	ldr	r4, [pc, #220]	@ (8003590 <D64_GENERIC+0x1fc>)
 80034b2:	fb27 1104 	smlad	r1, r7, r4, r1
 80034b6:	4c37      	ldr	r4, [pc, #220]	@ (8003594 <D64_GENERIC+0x200>)
 80034b8:	fb20 1104 	smlad	r1, r0, r4, r1
 80034bc:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80034c0:	fb2a 1106 	smlad	r1, sl, r6, r1
 80034c4:	4d34      	ldr	r5, [pc, #208]	@ (8003598 <D64_GENERIC+0x204>)
 80034c6:	9c01      	ldr	r4, [sp, #4]
 80034c8:	fb28 4405 	smlad	r4, r8, r5, r4
 80034cc:	fb2a 4415 	smladx	r4, sl, r5, r4
 80034d0:	4d32      	ldr	r5, [pc, #200]	@ (800359c <D64_GENERIC+0x208>)
 80034d2:	fb27 4405 	smlad	r4, r7, r5, r4
 80034d6:	fb20 4415 	smladx	r4, r0, r5, r4
 80034da:	2501      	movs	r5, #1
 80034dc:	9400      	str	r4, [sp, #0]
 80034de:	fb28 f805 	smuad	r8, r8, r5
 80034e2:	4c2f      	ldr	r4, [pc, #188]	@ (80035a0 <D64_GENERIC+0x20c>)
 80034e4:	fb27 8704 	smlad	r7, r7, r4, r8
 80034e8:	4c2e      	ldr	r4, [pc, #184]	@ (80035a4 <D64_GENERIC+0x210>)
 80034ea:	fb20 7004 	smlad	r0, r0, r4, r7
 80034ee:	4c2e      	ldr	r4, [pc, #184]	@ (80035a8 <D64_GENERIC+0x214>)
 80034f0:	fb2a 0004 	smlad	r0, sl, r4, r0
 80034f4:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 80034f8:	9906      	ldr	r1, [sp, #24]
 80034fa:	9001      	str	r0, [sp, #4]
 80034fc:	b181      	cbz	r1, 8003520 <D64_GENERIC+0x18c>
 80034fe:	9802      	ldr	r0, [sp, #8]
 8003500:	9c03      	ldr	r4, [sp, #12]
 8003502:	4430      	add	r0, r6
 8003504:	1b00      	subs	r0, r0, r4
 8003506:	fba0 7801 	umull	r7, r8, r0, r1
 800350a:	17c5      	asrs	r5, r0, #31
 800350c:	fb01 8805 	mla	r8, r1, r5, r8
 8003510:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8003514:	f148 0100 	adc.w	r1, r8, #0
 8003518:	0049      	lsls	r1, r1, #1
 800351a:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800351e:	460e      	mov	r6, r1
 8003520:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8003522:	9904      	ldr	r1, [sp, #16]
 8003524:	9805      	ldr	r0, [sp, #20]
 8003526:	02b6      	lsls	r6, r6, #10
 8003528:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 800352c:	f04f 0800 	mov.w	r8, #0
 8003530:	fb0e f404 	mul.w	r4, lr, r4
 8003534:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003538:	4641      	mov	r1, r8
 800353a:	1089      	asrs	r1, r1, #2
 800353c:	f301 010f 	ssat	r1, #16, r1
 8003540:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003544:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8003546:	f10e 0e01 	add.w	lr, lr, #1
 800354a:	4571      	cmp	r1, lr
 800354c:	dd0e      	ble.n	800356c <D64_GENERIC+0x1d8>
 800354e:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8003550:	2d01      	cmp	r5, #1
 8003552:	f47f af3c 	bne.w	80033ce <D64_GENERIC+0x3a>
 8003556:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8003558:	06ac      	lsls	r4, r5, #26
 800355a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800355e:	f109 0908 	add.w	r9, r9, #8
 8003562:	f57f af5c 	bpl.w	800341e <D64_GENERIC+0x8a>
 8003566:	ba40      	rev16	r0, r0
 8003568:	ba49      	rev16	r1, r1
 800356a:	e758      	b.n	800341e <D64_GENERIC+0x8a>
 800356c:	61d3      	str	r3, [r2, #28]
 800356e:	9b02      	ldr	r3, [sp, #8]
 8003570:	9901      	ldr	r1, [sp, #4]
 8003572:	6113      	str	r3, [r2, #16]
 8003574:	9b03      	ldr	r3, [sp, #12]
 8003576:	6091      	str	r1, [r2, #8]
 8003578:	6153      	str	r3, [r2, #20]
 800357a:	9900      	ldr	r1, [sp, #0]
 800357c:	9b07      	ldr	r3, [sp, #28]
 800357e:	60d1      	str	r1, [r2, #12]
 8003580:	2000      	movs	r0, #0
 8003582:	6193      	str	r3, [r2, #24]
 8003584:	b009      	add	sp, #36	@ 0x24
 8003586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358a:	bf00      	nop
 800358c:	001c0015 	.word	0x001c0015
 8003590:	000f000a 	.word	0x000f000a
 8003594:	00060003 	.word	0x00060003
 8003598:	0024002a 	.word	0x0024002a
 800359c:	002e0030 	.word	0x002e0030
 80035a0:	00030006 	.word	0x00030006
 80035a4:	000a000f 	.word	0x000a000f
 80035a8:	0015001c 	.word	0x0015001c
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <D80_GENERIC>:
 80035b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b4:	b08b      	sub	sp, #44	@ 0x2c
 80035b6:	6914      	ldr	r4, [r2, #16]
 80035b8:	9405      	str	r4, [sp, #20]
 80035ba:	6954      	ldr	r4, [r2, #20]
 80035bc:	9406      	str	r4, [sp, #24]
 80035be:	6994      	ldr	r4, [r2, #24]
 80035c0:	9409      	str	r4, [sp, #36]	@ 0x24
 80035c2:	6894      	ldr	r4, [r2, #8]
 80035c4:	9402      	str	r4, [sp, #8]
 80035c6:	68d4      	ldr	r4, [r2, #12]
 80035c8:	9401      	str	r4, [sp, #4]
 80035ca:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80035cc:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80035ce:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80035d2:	e9cd 4107 	strd	r4, r1, [sp, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 810a 	beq.w	80037f0 <D80_GENERIC+0x240>
 80035dc:	2300      	movs	r3, #0
 80035de:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8003840 <D80_GENERIC+0x290>
 80035e2:	e9cd b303 	strd	fp, r3, [sp, #12]
 80035e6:	e0ee      	b.n	80037c6 <D80_GENERIC+0x216>
 80035e8:	fa5f fe8e 	uxtb.w	lr, lr
 80035ec:	fa0f f48e 	sxth.w	r4, lr
 80035f0:	0066      	lsls	r6, r4, #1
 80035f2:	eb06 0804 	add.w	r8, r6, r4
 80035f6:	f1ce 0500 	rsb	r5, lr, #0
 80035fa:	eb00 0108 	add.w	r1, r0, r8
 80035fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003602:	194b      	adds	r3, r1, r5
 8003604:	5d49      	ldrb	r1, [r1, r5]
 8003606:	f810 a008 	ldrb.w	sl, [r0, r8]
 800360a:	f813 b004 	ldrb.w	fp, [r3, r4]
 800360e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8003612:	f890 8000 	ldrb.w	r8, [r0]
 8003616:	eb03 0c04 	add.w	ip, r3, r4
 800361a:	eb0c 0705 	add.w	r7, ip, r5
 800361e:	0409      	lsls	r1, r1, #16
 8003620:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8003624:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8003628:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800362c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8003630:	eb0a 0004 	add.w	r0, sl, r4
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	f81a a004 	ldrb.w	sl, [sl, r4]
 800363a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800363e:	5d44      	ldrb	r4, [r0, r5]
 8003640:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8003644:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8003648:	4428      	add	r0, r5
 800364a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800364e:	4441      	add	r1, r8
 8003650:	4430      	add	r0, r6
 8003652:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8003656:	441f      	add	r7, r3
 8003658:	b2cd      	uxtb	r5, r1
 800365a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800365e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8003662:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8003666:	9b03      	ldr	r3, [sp, #12]
 8003668:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800366c:	0e09      	lsrs	r1, r1, #24
 800366e:	4433      	add	r3, r6
 8003670:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8003674:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8003678:	b2fd      	uxtb	r5, r7
 800367a:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 800367e:	469b      	mov	fp, r3
 8003680:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003684:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8003688:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 800368c:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8003690:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8003694:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8003698:	0e3b      	lsrs	r3, r7, #24
 800369a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800369e:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 80036a2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80036a6:	fa5f fc84 	uxtb.w	ip, r4
 80036aa:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 80036ae:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80036b2:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80036b6:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 80036ba:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80036be:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80036c2:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 80036c6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80036ca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80036ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80036d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80036da:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80036de:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80036e2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80036e6:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80036ea:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80036ee:	0aa3      	lsrs	r3, r4, #10
 80036f0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80036f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80036f8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80036fc:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8003706:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 800370a:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <D80_GENERIC+0x260>)
 800370c:	9901      	ldr	r1, [sp, #4]
 800370e:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003712:	4940      	ldr	r1, [pc, #256]	@ (8003814 <D80_GENERIC+0x264>)
 8003714:	fb28 3301 	smlad	r3, r8, r1, r3
 8003718:	493f      	ldr	r1, [pc, #252]	@ (8003818 <D80_GENERIC+0x268>)
 800371a:	fb2e 3301 	smlad	r3, lr, r1, r3
 800371e:	493f      	ldr	r1, [pc, #252]	@ (800381c <D80_GENERIC+0x26c>)
 8003720:	fb27 3301 	smlad	r3, r7, r1, r3
 8003724:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8003728:	fb2c 3404 	smlad	r4, ip, r4, r3
 800372c:	4b3c      	ldr	r3, [pc, #240]	@ (8003820 <D80_GENERIC+0x270>)
 800372e:	9902      	ldr	r1, [sp, #8]
 8003730:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003734:	493b      	ldr	r1, [pc, #236]	@ (8003824 <D80_GENERIC+0x274>)
 8003736:	fb28 3301 	smlad	r3, r8, r1, r3
 800373a:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 800373e:	fb2e 3101 	smlad	r1, lr, r1, r3
 8003742:	4b39      	ldr	r3, [pc, #228]	@ (8003828 <D80_GENERIC+0x278>)
 8003744:	fb27 1103 	smlad	r1, r7, r3, r1
 8003748:	4b38      	ldr	r3, [pc, #224]	@ (800382c <D80_GENERIC+0x27c>)
 800374a:	fb2c 1303 	smlad	r3, ip, r3, r1
 800374e:	2101      	movs	r1, #1
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	fb2b fb01 	smuad	fp, fp, r1
 8003756:	4b36      	ldr	r3, [pc, #216]	@ (8003830 <D80_GENERIC+0x280>)
 8003758:	fb28 b803 	smlad	r8, r8, r3, fp
 800375c:	4d35      	ldr	r5, [pc, #212]	@ (8003834 <D80_GENERIC+0x284>)
 800375e:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8003762:	4d35      	ldr	r5, [pc, #212]	@ (8003838 <D80_GENERIC+0x288>)
 8003764:	fb27 e705 	smlad	r7, r7, r5, lr
 8003768:	4b34      	ldr	r3, [pc, #208]	@ (800383c <D80_GENERIC+0x28c>)
 800376a:	fb2c 7303 	smlad	r3, ip, r3, r7
 800376e:	6a11      	ldr	r1, [r2, #32]
 8003770:	9302      	str	r3, [sp, #8]
 8003772:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 8003776:	b181      	cbz	r1, 800379a <D80_GENERIC+0x1ea>
 8003778:	9c05      	ldr	r4, [sp, #20]
 800377a:	9d06      	ldr	r5, [sp, #24]
 800377c:	441c      	add	r4, r3
 800377e:	1b64      	subs	r4, r4, r5
 8003780:	fba4 ab01 	umull	sl, fp, r4, r1
 8003784:	17e7      	asrs	r7, r4, #31
 8003786:	fb01 bb07 	mla	fp, r1, r7, fp
 800378a:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 800378e:	f14b 0500 	adc.w	r5, fp, #0
 8003792:	0069      	lsls	r1, r5, #1
 8003794:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8003798:	460b      	mov	r3, r1
 800379a:	9e04      	ldr	r6, [sp, #16]
 800379c:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800379e:	9f07      	ldr	r7, [sp, #28]
 80037a0:	025b      	lsls	r3, r3, #9
 80037a2:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80037a6:	2500      	movs	r5, #0
 80037a8:	fb06 f101 	mul.w	r1, r6, r1
 80037ac:	fbc7 4503 	smlal	r4, r5, r7, r3
 80037b0:	9c08      	ldr	r4, [sp, #32]
 80037b2:	10ab      	asrs	r3, r5, #2
 80037b4:	f303 030f 	ssat	r3, #16, r3
 80037b8:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80037bc:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80037be:	1c71      	adds	r1, r6, #1
 80037c0:	428b      	cmp	r3, r1
 80037c2:	9104      	str	r1, [sp, #16]
 80037c4:	dd12      	ble.n	80037ec <D80_GENERIC+0x23c>
 80037c6:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 80037ca:	f1be 0f01 	cmp.w	lr, #1
 80037ce:	f47f af0b 	bne.w	80035e8 <D80_GENERIC+0x38>
 80037d2:	6801      	ldr	r1, [r0, #0]
 80037d4:	6847      	ldr	r7, [r0, #4]
 80037d6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80037d8:	6884      	ldr	r4, [r0, #8]
 80037da:	069b      	lsls	r3, r3, #26
 80037dc:	f100 000a 	add.w	r0, r0, #10
 80037e0:	f57f af3a 	bpl.w	8003658 <D80_GENERIC+0xa8>
 80037e4:	ba49      	rev16	r1, r1
 80037e6:	ba7f      	rev16	r7, r7
 80037e8:	ba64      	rev16	r4, r4
 80037ea:	e735      	b.n	8003658 <D80_GENERIC+0xa8>
 80037ec:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80037f0:	9b02      	ldr	r3, [sp, #8]
 80037f2:	6093      	str	r3, [r2, #8]
 80037f4:	9b01      	ldr	r3, [sp, #4]
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	9b05      	ldr	r3, [sp, #20]
 80037fa:	6113      	str	r3, [r2, #16]
 80037fc:	9b06      	ldr	r3, [sp, #24]
 80037fe:	6153      	str	r3, [r2, #20]
 8003800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003802:	f8c2 b01c 	str.w	fp, [r2, #28]
 8003806:	2000      	movs	r0, #0
 8003808:	6193      	str	r3, [r2, #24]
 800380a:	b00b      	add	sp, #44	@ 0x2c
 800380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003810:	002d0024 	.word	0x002d0024
 8003814:	001c0015 	.word	0x001c0015
 8003818:	000f000a 	.word	0x000f000a
 800381c:	00060003 	.word	0x00060003
 8003820:	0037003f 	.word	0x0037003f
 8003824:	00450049 	.word	0x00450049
 8003828:	00490045 	.word	0x00490045
 800382c:	003f0037 	.word	0x003f0037
 8003830:	00030006 	.word	0x00030006
 8003834:	000a000f 	.word	0x000a000f
 8003838:	0015001c 	.word	0x0015001c
 800383c:	0024002d 	.word	0x0024002d
 8003840:	2000000c 	.word	0x2000000c

08003844 <D128_GENERIC>:
 8003844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003848:	b091      	sub	sp, #68	@ 0x44
 800384a:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 800384c:	9004      	str	r0, [sp, #16]
 800384e:	6910      	ldr	r0, [r2, #16]
 8003850:	900a      	str	r0, [sp, #40]	@ 0x28
 8003852:	6950      	ldr	r0, [r2, #20]
 8003854:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003856:	6990      	ldr	r0, [r2, #24]
 8003858:	900f      	str	r0, [sp, #60]	@ 0x3c
 800385a:	69d0      	ldr	r0, [r2, #28]
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	6890      	ldr	r0, [r2, #8]
 8003860:	9003      	str	r0, [sp, #12]
 8003862:	68d0      	ldr	r0, [r2, #12]
 8003864:	9001      	str	r0, [sp, #4]
 8003866:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8003868:	9200      	str	r2, [sp, #0]
 800386a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8196 	beq.w	8003ba0 <D128_GENERIC+0x35c>
 8003874:	2300      	movs	r3, #0
 8003876:	6a12      	ldr	r2, [r2, #32]
 8003878:	920e      	str	r2, [sp, #56]	@ 0x38
 800387a:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8003c1c <D128_GENERIC+0x3d8>
 800387e:	9305      	str	r3, [sp, #20]
 8003880:	e177      	b.n	8003b72 <D128_GENERIC+0x32e>
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	9d04      	ldr	r5, [sp, #16]
 8003886:	b214      	sxth	r4, r2
 8003888:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800388c:	4250      	negs	r0, r2
 800388e:	eb05 010a 	add.w	r1, r5, sl
 8003892:	00a6      	lsls	r6, r4, #2
 8003894:	eb01 0800 	add.w	r8, r1, r0
 8003898:	eb06 0e04 	add.w	lr, r6, r4
 800389c:	eb08 070e 	add.w	r7, r8, lr
 80038a0:	183b      	adds	r3, r7, r0
 80038a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80038a6:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 80038aa:	9608      	str	r6, [sp, #32]
 80038ac:	eb0c 0604 	add.w	r6, ip, r4
 80038b0:	9304      	str	r3, [sp, #16]
 80038b2:	1833      	adds	r3, r6, r0
 80038b4:	f815 b00a 	ldrb.w	fp, [r5, sl]
 80038b8:	9306      	str	r3, [sp, #24]
 80038ba:	f818 a00e 	ldrb.w	sl, [r8, lr]
 80038be:	9b04      	ldr	r3, [sp, #16]
 80038c0:	f815 e002 	ldrb.w	lr, [r5, r2]
 80038c4:	782d      	ldrb	r5, [r5, #0]
 80038c6:	5c3a      	ldrb	r2, [r7, r0]
 80038c8:	9507      	str	r5, [sp, #28]
 80038ca:	9d06      	ldr	r5, [sp, #24]
 80038cc:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80038d0:	f81c 8004 	ldrb.w	r8, [ip, r4]
 80038d4:	9304      	str	r3, [sp, #16]
 80038d6:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 80038da:	5c33      	ldrb	r3, [r6, r0]
 80038dc:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 80038e0:	5c09      	ldrb	r1, [r1, r0]
 80038e2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 80038e6:	0412      	lsls	r2, r2, #16
 80038e8:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 80038ec:	eb06 0a04 	add.w	sl, r6, r4
 80038f0:	5d36      	ldrb	r6, [r6, r4]
 80038f2:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 80038f6:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80038fa:	042d      	lsls	r5, r5, #16
 80038fc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8003900:	0409      	lsls	r1, r1, #16
 8003902:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8003906:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8003910:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8003914:	eb0a 0e00 	add.w	lr, sl, r0
 8003918:	9d07      	ldr	r5, [sp, #28]
 800391a:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 800391e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003922:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8003926:	9f08      	ldr	r7, [sp, #32]
 8003928:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 800392c:	4429      	add	r1, r5
 800392e:	9d04      	ldr	r5, [sp, #16]
 8003930:	4438      	add	r0, r7
 8003932:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8003936:	9004      	str	r0, [sp, #16]
 8003938:	442a      	add	r2, r5
 800393a:	eb06 0a0b 	add.w	sl, r6, fp
 800393e:	1918      	adds	r0, r3, r4
 8003940:	b2cb      	uxtb	r3, r1
 8003942:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8003946:	9e02      	ldr	r6, [sp, #8]
 8003948:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800394c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8003950:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8003954:	441e      	add	r6, r3
 8003956:	0e09      	lsrs	r1, r1, #24
 8003958:	4633      	mov	r3, r6
 800395a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800395e:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8003962:	b2d4      	uxtb	r4, r2
 8003964:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003968:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800396c:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8003970:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8003978:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800397c:	0e12      	lsrs	r2, r2, #24
 800397e:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8003982:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8003986:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800398a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800398e:	9702      	str	r7, [sp, #8]
 8003990:	b2c2      	uxtb	r2, r0
 8003992:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8003996:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 800399a:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800399e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80039a2:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80039a6:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 80039aa:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80039ae:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80039b2:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80039b6:	0e00      	lsrs	r0, r0, #24
 80039b8:	fa5f f68a 	uxtb.w	r6, sl
 80039bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c0:	9308      	str	r3, [sp, #32]
 80039c2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80039c6:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80039ca:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80039ce:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80039d2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80039d6:	9509      	str	r5, [sp, #36]	@ 0x24
 80039d8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80039dc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80039e0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80039e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80039e8:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80039ec:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80039f0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80039f4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80039f8:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 80039fc:	9306      	str	r3, [sp, #24]
 80039fe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003a02:	9b02      	ldr	r3, [sp, #8]
 8003a04:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8003a08:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003a0c:	f8cd a01c 	str.w	sl, [sp, #28]
 8003a10:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003a14:	9b06      	ldr	r3, [sp, #24]
 8003a16:	9506      	str	r5, [sp, #24]
 8003a18:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003a1a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003a1e:	f8cd e008 	str.w	lr, [sp, #8]
 8003a22:	46ae      	mov	lr, r5
 8003a24:	9d08      	ldr	r5, [sp, #32]
 8003a26:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003a2a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8003a2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003a32:	9d02      	ldr	r5, [sp, #8]
 8003a34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003a38:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003a3c:	9f07      	ldr	r7, [sp, #28]
 8003a3e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003a42:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003a46:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003a4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003a4e:	9d06      	ldr	r5, [sp, #24]
 8003a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a54:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003a58:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003a5c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8003a60:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003a64:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8003a68:	0abe      	lsrs	r6, r7, #10
 8003a6a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003a6e:	9602      	str	r6, [sp, #8]
 8003a70:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8003a74:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8003a78:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8003a7c:	4e52      	ldr	r6, [pc, #328]	@ (8003bc8 <D128_GENERIC+0x384>)
 8003a7e:	9f01      	ldr	r7, [sp, #4]
 8003a80:	fb2e 7606 	smlad	r6, lr, r6, r7
 8003a84:	4f51      	ldr	r7, [pc, #324]	@ (8003bcc <D128_GENERIC+0x388>)
 8003a86:	fb2a 6607 	smlad	r6, sl, r7, r6
 8003a8a:	4f51      	ldr	r7, [pc, #324]	@ (8003bd0 <D128_GENERIC+0x38c>)
 8003a8c:	fb21 6607 	smlad	r6, r1, r7, r6
 8003a90:	4f50      	ldr	r7, [pc, #320]	@ (8003bd4 <D128_GENERIC+0x390>)
 8003a92:	fb24 6607 	smlad	r6, r4, r7, r6
 8003a96:	4f50      	ldr	r7, [pc, #320]	@ (8003bd8 <D128_GENERIC+0x394>)
 8003a98:	fb22 6607 	smlad	r6, r2, r7, r6
 8003a9c:	4f4f      	ldr	r7, [pc, #316]	@ (8003bdc <D128_GENERIC+0x398>)
 8003a9e:	fb20 6607 	smlad	r6, r0, r7, r6
 8003aa2:	4f4f      	ldr	r7, [pc, #316]	@ (8003be0 <D128_GENERIC+0x39c>)
 8003aa4:	fb23 6607 	smlad	r6, r3, r7, r6
 8003aa8:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8003aac:	fb25 6807 	smlad	r8, r5, r7, r6
 8003ab0:	4f4c      	ldr	r7, [pc, #304]	@ (8003be4 <D128_GENERIC+0x3a0>)
 8003ab2:	9e03      	ldr	r6, [sp, #12]
 8003ab4:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8003ab8:	4e4b      	ldr	r6, [pc, #300]	@ (8003be8 <D128_GENERIC+0x3a4>)
 8003aba:	fb2a cc06 	smlad	ip, sl, r6, ip
 8003abe:	4f4b      	ldr	r7, [pc, #300]	@ (8003bec <D128_GENERIC+0x3a8>)
 8003ac0:	fb21 cc07 	smlad	ip, r1, r7, ip
 8003ac4:	4f4a      	ldr	r7, [pc, #296]	@ (8003bf0 <D128_GENERIC+0x3ac>)
 8003ac6:	fb24 cc07 	smlad	ip, r4, r7, ip
 8003aca:	4f4a      	ldr	r7, [pc, #296]	@ (8003bf4 <D128_GENERIC+0x3b0>)
 8003acc:	fb22 cc07 	smlad	ip, r2, r7, ip
 8003ad0:	4f49      	ldr	r7, [pc, #292]	@ (8003bf8 <D128_GENERIC+0x3b4>)
 8003ad2:	fb20 cc07 	smlad	ip, r0, r7, ip
 8003ad6:	4f49      	ldr	r7, [pc, #292]	@ (8003bfc <D128_GENERIC+0x3b8>)
 8003ad8:	fb23 c707 	smlad	r7, r3, r7, ip
 8003adc:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8003c20 <D128_GENERIC+0x3dc>
 8003ae0:	fb25 760c 	smlad	r6, r5, ip, r7
 8003ae4:	f04f 0b01 	mov.w	fp, #1
 8003ae8:	9601      	str	r6, [sp, #4]
 8003aea:	fb2e fb0b 	smuad	fp, lr, fp
 8003aee:	4f44      	ldr	r7, [pc, #272]	@ (8003c00 <D128_GENERIC+0x3bc>)
 8003af0:	fb2a ba07 	smlad	sl, sl, r7, fp
 8003af4:	4f43      	ldr	r7, [pc, #268]	@ (8003c04 <D128_GENERIC+0x3c0>)
 8003af6:	fb21 aa07 	smlad	sl, r1, r7, sl
 8003afa:	4f43      	ldr	r7, [pc, #268]	@ (8003c08 <D128_GENERIC+0x3c4>)
 8003afc:	fb24 aa07 	smlad	sl, r4, r7, sl
 8003b00:	4f42      	ldr	r7, [pc, #264]	@ (8003c0c <D128_GENERIC+0x3c8>)
 8003b02:	fb22 a707 	smlad	r7, r2, r7, sl
 8003b06:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <D128_GENERIC+0x3cc>)
 8003b08:	fb20 7702 	smlad	r7, r0, r2, r7
 8003b0c:	4a41      	ldr	r2, [pc, #260]	@ (8003c14 <D128_GENERIC+0x3d0>)
 8003b0e:	fb23 7702 	smlad	r7, r3, r2, r7
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <D128_GENERIC+0x3d4>)
 8003b14:	fb25 7303 	smlad	r3, r5, r3, r7
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b1c:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8003b20:	b183      	cbz	r3, 8003b44 <D128_GENERIC+0x300>
 8003b22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b26:	4432      	add	r2, r6
 8003b28:	1a52      	subs	r2, r2, r1
 8003b2a:	fba2 4503 	umull	r4, r5, r2, r3
 8003b2e:	17d1      	asrs	r1, r2, #31
 8003b30:	fb03 5501 	mla	r5, r3, r1, r5
 8003b34:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8003b38:	f145 0300 	adc.w	r3, r5, #0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 8003b42:	461e      	mov	r6, r3
 8003b44:	9800      	ldr	r0, [sp, #0]
 8003b46:	9c05      	ldr	r4, [sp, #20]
 8003b48:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8003b4a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003b4c:	01f6      	lsls	r6, r6, #7
 8003b4e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b52:	2300      	movs	r3, #0
 8003b54:	fbc5 2306 	smlal	r2, r3, r5, r6
 8003b58:	fb04 f101 	mul.w	r1, r4, r1
 8003b5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003b5e:	109b      	asrs	r3, r3, #2
 8003b60:	f303 030f 	ssat	r3, #16, r3
 8003b64:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8003b68:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8003b6a:	1c62      	adds	r2, r4, #1
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	9205      	str	r2, [sp, #20]
 8003b70:	dd16      	ble.n	8003ba0 <D128_GENERIC+0x35c>
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8003b76:	2a01      	cmp	r2, #1
 8003b78:	f47f ae83 	bne.w	8003882 <D128_GENERIC+0x3e>
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7e:	9c04      	ldr	r4, [sp, #16]
 8003b80:	069b      	lsls	r3, r3, #26
 8003b82:	e9d4 1200 	ldrd	r1, r2, [r4]
 8003b86:	68a0      	ldr	r0, [r4, #8]
 8003b88:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8003b8c:	f104 0410 	add.w	r4, r4, #16
 8003b90:	d517      	bpl.n	8003bc2 <D128_GENERIC+0x37e>
 8003b92:	ba49      	rev16	r1, r1
 8003b94:	ba52      	rev16	r2, r2
 8003b96:	ba40      	rev16	r0, r0
 8003b98:	fa9a fa9a 	rev16.w	sl, sl
 8003b9c:	9404      	str	r4, [sp, #16]
 8003b9e:	e6cf      	b.n	8003940 <D128_GENERIC+0xfc>
 8003ba0:	9b00      	ldr	r3, [sp, #0]
 8003ba2:	9903      	ldr	r1, [sp, #12]
 8003ba4:	6099      	str	r1, [r3, #8]
 8003ba6:	9901      	ldr	r1, [sp, #4]
 8003ba8:	60d9      	str	r1, [r3, #12]
 8003baa:	9902      	ldr	r1, [sp, #8]
 8003bac:	61d9      	str	r1, [r3, #28]
 8003bae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003bb0:	6119      	str	r1, [r3, #16]
 8003bb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003bb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003bb6:	6159      	str	r1, [r3, #20]
 8003bb8:	2000      	movs	r0, #0
 8003bba:	619a      	str	r2, [r3, #24]
 8003bbc:	b011      	add	sp, #68	@ 0x44
 8003bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc2:	9404      	str	r4, [sp, #16]
 8003bc4:	e6bc      	b.n	8003940 <D128_GENERIC+0xfc>
 8003bc6:	bf00      	nop
 8003bc8:	00780069 	.word	0x00780069
 8003bcc:	005b004e 	.word	0x005b004e
 8003bd0:	00420037 	.word	0x00420037
 8003bd4:	002d0024 	.word	0x002d0024
 8003bd8:	001c0015 	.word	0x001c0015
 8003bdc:	000f000a 	.word	0x000f000a
 8003be0:	00060003 	.word	0x00060003
 8003be4:	00880096 	.word	0x00880096
 8003be8:	00a200ac 	.word	0x00a200ac
 8003bec:	00b400ba 	.word	0x00b400ba
 8003bf0:	00be00c0 	.word	0x00be00c0
 8003bf4:	00c000be 	.word	0x00c000be
 8003bf8:	00ba00b4 	.word	0x00ba00b4
 8003bfc:	00ac00a2 	.word	0x00ac00a2
 8003c00:	00030006 	.word	0x00030006
 8003c04:	000a000f 	.word	0x000a000f
 8003c08:	0015001c 	.word	0x0015001c
 8003c0c:	0024002d 	.word	0x0024002d
 8003c10:	00370042 	.word	0x00370042
 8003c14:	004e005b 	.word	0x004e005b
 8003c18:	00690078 	.word	0x00690078
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	00960088 	.word	0x00960088

08003c24 <D16_1CH_HTONS_VOL_HP>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	4681      	mov	r9, r0
 8003c30:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8003c32:	6993      	ldr	r3, [r2, #24]
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8003c3a:	69d3      	ldr	r3, [r2, #28]
 8003c3c:	9402      	str	r4, [sp, #8]
 8003c3e:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8003c42:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d057      	beq.n	8003cfa <D16_1CH_HTONS_VOL_HP+0xd6>
 8003c4a:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8003c4e:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8003d08 <D16_1CH_HTONS_VOL_HP+0xe4>
 8003c52:	f1a1 0802 	sub.w	r8, r1, #2
 8003c56:	4639      	mov	r1, r7
 8003c58:	465f      	mov	r7, fp
 8003c5a:	46d3      	mov	fp, sl
 8003c5c:	46ca      	mov	sl, r9
 8003c5e:	4699      	mov	r9, r3
 8003c60:	4633      	mov	r3, r6
 8003c62:	4616      	mov	r6, r2
 8003c64:	f85a 2b02 	ldr.w	r2, [sl], #2
 8003c68:	ba52      	rev16	r2, r2
 8003c6a:	b2d4      	uxtb	r4, r2
 8003c6c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8003c70:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 8003c74:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8003c78:	4491      	add	r9, r2
 8003c7a:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 8003c7e:	f3c0 0209 	ubfx	r2, r0, #0, #10
 8003c82:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8003c86:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8003c8a:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8003c8e:	481c      	ldr	r0, [pc, #112]	@ (8003d00 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8003c90:	fb22 5400 	smlad	r4, r2, r0, r5
 8003c94:	481b      	ldr	r0, [pc, #108]	@ (8003d04 <D16_1CH_HTONS_VOL_HP+0xe0>)
 8003c96:	fb22 f500 	smuad	r5, r2, r0
 8003c9a:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8003c9e:	18e2      	adds	r2, r4, r3
 8003ca0:	1a52      	subs	r2, r2, r1
 8003ca2:	17d1      	asrs	r1, r2, #31
 8003ca4:	fba2 230c 	umull	r2, r3, r2, ip
 8003ca8:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8003cac:	fb0c 3301 	mla	r3, ip, r1, r3
 8003cb0:	f143 0100 	adc.w	r1, r3, #0
 8003cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8003cb8:	044a      	lsls	r2, r1, #17
 8003cba:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	9b01      	ldr	r3, [sp, #4]
 8003cc2:	fbcb 0102 	smlal	r0, r1, fp, r2
 8003cc6:	45ba      	cmp	sl, r7
 8003cc8:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8003ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003cd0:	f302 020f 	ssat	r2, #16, r2
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	f828 2f02 	strh.w	r2, [r8, #2]!
 8003cda:	d1c3      	bne.n	8003c64 <D16_1CH_HTONS_VOL_HP+0x40>
 8003cdc:	4632      	mov	r2, r6
 8003cde:	461e      	mov	r6, r3
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	9902      	ldr	r1, [sp, #8]
 8003ce4:	61d3      	str	r3, [r2, #28]
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	6095      	str	r5, [r2, #8]
 8003cea:	2000      	movs	r0, #0
 8003cec:	60d1      	str	r1, [r2, #12]
 8003cee:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8003cf2:	6193      	str	r3, [r2, #24]
 8003cf4:	b005      	add	sp, #20
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	463c      	mov	r4, r7
 8003cfc:	e7f1      	b.n	8003ce2 <D16_1CH_HTONS_VOL_HP+0xbe>
 8003cfe:	bf00      	nop
 8003d00:	00030001 	.word	0x00030001
 8003d04:	00010003 	.word	0x00010003
 8003d08:	2000000c 	.word	0x2000000c

08003d0c <D24_1CH_HTONS_VOL_HP>:
 8003d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d10:	4696      	mov	lr, r2
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 8003d18:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8003d1a:	f8de 3018 	ldr.w	r3, [lr, #24]
 8003d1e:	9703      	str	r7, [sp, #12]
 8003d20:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003d24:	9306      	str	r3, [sp, #24]
 8003d26:	9205      	str	r2, [sp, #20]
 8003d28:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8003d2c:	f8de 601c 	ldr.w	r6, [lr, #28]
 8003d30:	9704      	str	r7, [sp, #16]
 8003d32:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	f000 8081 	beq.w	8003e3e <D24_1CH_HTONS_VOL_HP+0x132>
 8003d3c:	f1a1 0b02 	sub.w	fp, r1, #2
 8003d40:	2700      	movs	r7, #0
 8003d42:	46d9      	mov	r9, fp
 8003d44:	f8cd e01c 	str.w	lr, [sp, #28]
 8003d48:	46d3      	mov	fp, sl
 8003d4a:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8003e4c <D24_1CH_HTONS_VOL_HP+0x140>
 8003d4e:	46a8      	mov	r8, r5
 8003d50:	46ba      	mov	sl, r7
 8003d52:	469e      	mov	lr, r3
 8003d54:	e052      	b.n	8003dfc <D24_1CH_HTONS_VOL_HP+0xf0>
 8003d56:	7842      	ldrb	r2, [r0, #1]
 8003d58:	3002      	adds	r0, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	b2d9      	uxtb	r1, r3
 8003d5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003d62:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8003d66:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003d70:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8003d74:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8003d78:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8003d7c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8003d80:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8003d84:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8003d88:	4a2e      	ldr	r2, [pc, #184]	@ (8003e44 <D24_1CH_HTONS_VOL_HP+0x138>)
 8003d8a:	fb23 b102 	smlad	r1, r3, r2, fp
 8003d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e48 <D24_1CH_HTONS_VOL_HP+0x13c>)
 8003d90:	fb23 eb02 	smlad	fp, r3, r2, lr
 8003d94:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 8003d98:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8003d9c:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8003da0:	2201      	movs	r2, #1
 8003da2:	fb23 f702 	smuad	r7, r3, r2
 8003da6:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8003daa:	eb01 0208 	add.w	r2, r1, r8
 8003dae:	1b12      	subs	r2, r2, r4
 8003db0:	17d4      	asrs	r4, r2, #31
 8003db2:	4613      	mov	r3, r2
 8003db4:	e9cd 3400 	strd	r3, r4, [sp]
 8003db8:	9c04      	ldr	r4, [sp, #16]
 8003dba:	9d01      	ldr	r5, [sp, #4]
 8003dbc:	fba2 2304 	umull	r2, r3, r2, r4
 8003dc0:	fb04 3305 	mla	r3, r4, r5, r3
 8003dc4:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8003dc8:	f143 0500 	adc.w	r5, r3, #0
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	e9cd 4500 	strd	r4, r5, [sp]
 8003dd2:	03ea      	lsls	r2, r5, #15
 8003dd4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003dd8:	2500      	movs	r5, #0
 8003dda:	fbc3 4502 	smlal	r4, r5, r3, r2
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8003de4:	10ab      	asrs	r3, r5, #2
 8003de6:	f303 030f 	ssat	r3, #16, r3
 8003dea:	f829 3f02 	strh.w	r3, [r9, #2]!
 8003dee:	9b05      	ldr	r3, [sp, #20]
 8003df0:	f10a 0a01 	add.w	sl, sl, #1
 8003df4:	459a      	cmp	sl, r3
 8003df6:	44be      	add	lr, r7
 8003df8:	460c      	mov	r4, r1
 8003dfa:	d00e      	beq.n	8003e1a <D24_1CH_HTONS_VOL_HP+0x10e>
 8003dfc:	7801      	ldrb	r1, [r0, #0]
 8003dfe:	78c2      	ldrb	r2, [r0, #3]
 8003e00:	020b      	lsls	r3, r1, #8
 8003e02:	f01a 0f01 	tst.w	sl, #1
 8003e06:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8003e0a:	d0a4      	beq.n	8003d56 <D24_1CH_HTONS_VOL_HP+0x4a>
 8003e0c:	7885      	ldrb	r5, [r0, #2]
 8003e0e:	0212      	lsls	r2, r2, #8
 8003e10:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8003e14:	440b      	add	r3, r1
 8003e16:	3004      	adds	r0, #4
 8003e18:	e7a0      	b.n	8003d5c <D24_1CH_HTONS_VOL_HP+0x50>
 8003e1a:	4673      	mov	r3, lr
 8003e1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8003e20:	46da      	mov	sl, fp
 8003e22:	4645      	mov	r5, r8
 8003e24:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8003e28:	9b06      	ldr	r3, [sp, #24]
 8003e2a:	f8ce 601c 	str.w	r6, [lr, #28]
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8003e34:	f8ce 3018 	str.w	r3, [lr, #24]
 8003e38:	b009      	add	sp, #36	@ 0x24
 8003e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3e:	4621      	mov	r1, r4
 8003e40:	e7f0      	b.n	8003e24 <D24_1CH_HTONS_VOL_HP+0x118>
 8003e42:	bf00      	nop
 8003e44:	00030001 	.word	0x00030001
 8003e48:	00060007 	.word	0x00060007
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <D32_1CH_HTONS_VOL_HP>:
 8003e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e54:	4682      	mov	sl, r0
 8003e56:	b087      	sub	sp, #28
 8003e58:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8003e5a:	6993      	ldr	r3, [r2, #24]
 8003e5c:	9304      	str	r3, [sp, #16]
 8003e5e:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8003e62:	69d5      	ldr	r5, [r2, #28]
 8003e64:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8003e66:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8003e6a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d070      	beq.n	8003f54 <D32_1CH_HTONS_VOL_HP+0x104>
 8003e72:	468e      	mov	lr, r1
 8003e74:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8003f68 <D32_1CH_HTONS_VOL_HP+0x118>
 8003e78:	9205      	str	r2, [sp, #20]
 8003e7a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003e7e:	46d3      	mov	fp, sl
 8003e80:	4638      	mov	r0, r7
 8003e82:	46ca      	mov	sl, r9
 8003e84:	9103      	str	r1, [sp, #12]
 8003e86:	4627      	mov	r7, r4
 8003e88:	4699      	mov	r9, r3
 8003e8a:	f85b 1b04 	ldr.w	r1, [fp], #4
 8003e8e:	ba49      	rev16	r1, r1
 8003e90:	b2ca      	uxtb	r2, r1
 8003e92:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003e96:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8003e9a:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8003e9e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8003ea2:	0e09      	lsrs	r1, r1, #24
 8003ea4:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8003ea8:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8003eac:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8003eb0:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8003eb4:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8003eb8:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8003ebc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ec0:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8003ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ed0:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8003ed4:	4a20      	ldr	r2, [pc, #128]	@ (8003f58 <D32_1CH_HTONS_VOL_HP+0x108>)
 8003ed6:	fb23 8802 	smlad	r8, r3, r2, r8
 8003eda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ede:	fb24 8102 	smlad	r1, r4, r2, r8
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <D32_1CH_HTONS_VOL_HP+0x10c>)
 8003ee4:	fb23 9802 	smlad	r8, r3, r2, r9
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f60 <D32_1CH_HTONS_VOL_HP+0x110>)
 8003eea:	fb24 8802 	smlad	r8, r4, r2, r8
 8003eee:	2201      	movs	r2, #1
 8003ef0:	fb23 f302 	smuad	r3, r3, r2
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <D32_1CH_HTONS_VOL_HP+0x114>)
 8003ef6:	fb24 3902 	smlad	r9, r4, r2, r3
 8003efa:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8003efe:	19a2      	adds	r2, r4, r6
 8003f00:	1a12      	subs	r2, r2, r0
 8003f02:	17d1      	asrs	r1, r2, #31
 8003f04:	fba2 230a 	umull	r2, r3, r2, sl
 8003f08:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8003f0c:	fb0a 3301 	mla	r3, sl, r1, r3
 8003f10:	f143 0100 	adc.w	r1, r3, #0
 8003f14:	e9cd 0100 	strd	r0, r1, [sp]
 8003f18:	038a      	lsls	r2, r1, #14
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003f20:	2100      	movs	r1, #0
 8003f22:	fbc7 0102 	smlal	r0, r1, r7, r2
 8003f26:	108a      	asrs	r2, r1, #2
 8003f28:	005e      	lsls	r6, r3, #1
 8003f2a:	f302 020f 	ssat	r2, #16, r2
 8003f2e:	9b03      	ldr	r3, [sp, #12]
 8003f30:	f82e 2b02 	strh.w	r2, [lr], #2
 8003f34:	459e      	cmp	lr, r3
 8003f36:	4620      	mov	r0, r4
 8003f38:	d1a7      	bne.n	8003e8a <D32_1CH_HTONS_VOL_HP+0x3a>
 8003f3a:	9a05      	ldr	r2, [sp, #20]
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	e9c2 3802 	strd	r3, r8, [r2, #8]
 8003f42:	9b04      	ldr	r3, [sp, #16]
 8003f44:	61d5      	str	r5, [r2, #28]
 8003f46:	2000      	movs	r0, #0
 8003f48:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8003f4c:	6193      	str	r3, [r2, #24]
 8003f4e:	b007      	add	sp, #28
 8003f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f54:	463c      	mov	r4, r7
 8003f56:	e7f2      	b.n	8003f3e <D32_1CH_HTONS_VOL_HP+0xee>
 8003f58:	00060003 	.word	0x00060003
 8003f5c:	000a000c 	.word	0x000a000c
 8003f60:	000c000a 	.word	0x000c000a
 8003f64:	00030006 	.word	0x00030006
 8003f68:	2000000c 	.word	0x2000000c

08003f6c <D48_1CH_HTONS_VOL_HP>:
 8003f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	b087      	sub	sp, #28
 8003f72:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8003f74:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8003f76:	6993      	ldr	r3, [r2, #24]
 8003f78:	9702      	str	r7, [sp, #8]
 8003f7a:	6a17      	ldr	r7, [r2, #32]
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 8003f82:	69d6      	ldr	r6, [r2, #28]
 8003f84:	9705      	str	r7, [sp, #20]
 8003f86:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	f000 8093 	beq.w	80040b6 <D48_1CH_HTONS_VOL_HP+0x14a>
 8003f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f94:	46ba      	mov	sl, r7
 8003f96:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8003f9a:	3902      	subs	r1, #2
 8003f9c:	4f47      	ldr	r7, [pc, #284]	@ (80040bc <D48_1CH_HTONS_VOL_HP+0x150>)
 8003f9e:	9503      	str	r5, [sp, #12]
 8003fa0:	9101      	str	r1, [sp, #4]
 8003fa2:	469e      	mov	lr, r3
 8003fa4:	9205      	str	r2, [sp, #20]
 8003fa6:	e9d0 3500 	ldrd	r3, r5, [r0]
 8003faa:	3006      	adds	r0, #6
 8003fac:	ba5b      	rev16	r3, r3
 8003fae:	ba6d      	rev16	r5, r5
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003fb6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8003fba:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8003fbe:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8003fc2:	0e1b      	lsrs	r3, r3, #24
 8003fc4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8003fc8:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8003fcc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003fd0:	fa5f fb85 	uxtb.w	fp, r5
 8003fd4:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8003fd8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8003fdc:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8003fe0:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8003fe4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8003fe8:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8003fec:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003ff0:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8003ff4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffc:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8004000:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004004:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004008:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800400c:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8004010:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004014:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8004018:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <D48_1CH_HTONS_VOL_HP+0x154>)
 800401a:	fb22 c103 	smlad	r1, r2, r3, ip
 800401e:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <D48_1CH_HTONS_VOL_HP+0x158>)
 8004020:	fb28 1103 	smlad	r1, r8, r3, r1
 8004024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004028:	fb25 1103 	smlad	r1, r5, r3, r1
 800402c:	4b26      	ldr	r3, [pc, #152]	@ (80040c8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800402e:	fb22 ec03 	smlad	ip, r2, r3, lr
 8004032:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8004036:	fb28 cc03 	smlad	ip, r8, r3, ip
 800403a:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <D48_1CH_HTONS_VOL_HP+0x160>)
 800403c:	fb25 cc03 	smlad	ip, r5, r3, ip
 8004040:	f04f 0e01 	mov.w	lr, #1
 8004044:	fb22 f20e 	smuad	r2, r2, lr
 8004048:	4b21      	ldr	r3, [pc, #132]	@ (80040d0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800404a:	fb28 2803 	smlad	r8, r8, r3, r2
 800404e:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8004050:	fb25 8e03 	smlad	lr, r5, r3, r8
 8004054:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8004058:	190a      	adds	r2, r1, r4
 800405a:	eba2 0209 	sub.w	r2, r2, r9
 800405e:	17d5      	asrs	r5, r2, #31
 8004060:	fba2 230a 	umull	r2, r3, r2, sl
 8004064:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8004068:	fb0a 3305 	mla	r3, sl, r5, r3
 800406c:	f143 0500 	adc.w	r5, r3, #0
 8004070:	9b02      	ldr	r3, [sp, #8]
 8004072:	032a      	lsls	r2, r5, #12
 8004074:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004078:	f04f 0900 	mov.w	r9, #0
 800407c:	fbc3 8902 	smlal	r8, r9, r3, r2
 8004080:	9a01      	ldr	r2, [sp, #4]
 8004082:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8004086:	f303 030f 	ssat	r3, #16, r3
 800408a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800408e:	9b03      	ldr	r3, [sp, #12]
 8004090:	9201      	str	r2, [sp, #4]
 8004092:	4283      	cmp	r3, r0
 8004094:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8004098:	4689      	mov	r9, r1
 800409a:	d184      	bne.n	8003fa6 <D48_1CH_HTONS_VOL_HP+0x3a>
 800409c:	9a05      	ldr	r2, [sp, #20]
 800409e:	4673      	mov	r3, lr
 80040a0:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 80040a4:	9b04      	ldr	r3, [sp, #16]
 80040a6:	61d6      	str	r6, [r2, #28]
 80040a8:	2000      	movs	r0, #0
 80040aa:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80040ae:	6193      	str	r3, [r2, #24]
 80040b0:	b007      	add	sp, #28
 80040b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b6:	4649      	mov	r1, r9
 80040b8:	e7f2      	b.n	80040a0 <D48_1CH_HTONS_VOL_HP+0x134>
 80040ba:	bf00      	nop
 80040bc:	2000000c 	.word	0x2000000c
 80040c0:	000f000a 	.word	0x000f000a
 80040c4:	00060003 	.word	0x00060003
 80040c8:	00150019 	.word	0x00150019
 80040cc:	00190015 	.word	0x00190015
 80040d0:	00030006 	.word	0x00030006
 80040d4:	000a000f 	.word	0x000a000f

080040d8 <D64_1CH_HTONS_VOL_HP>:
 80040d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	b087      	sub	sp, #28
 80040de:	6913      	ldr	r3, [r2, #16]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 80040e6:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80040e8:	9601      	str	r6, [sp, #4]
 80040ea:	4681      	mov	r9, r0
 80040ec:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80040ee:	6a16      	ldr	r6, [r2, #32]
 80040f0:	9304      	str	r3, [sp, #16]
 80040f2:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 80040f6:	69d3      	ldr	r3, [r2, #28]
 80040f8:	9602      	str	r6, [sp, #8]
 80040fa:	2800      	cmp	r0, #0
 80040fc:	f000 809d 	beq.w	800423a <D64_1CH_HTONS_VOL_HP+0x162>
 8004100:	468e      	mov	lr, r1
 8004102:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8004274 <D64_1CH_HTONS_VOL_HP+0x19c>
 8004106:	9205      	str	r2, [sp, #20]
 8004108:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800410c:	9103      	str	r1, [sp, #12]
 800410e:	4622      	mov	r2, r4
 8004110:	4619      	mov	r1, r3
 8004112:	f859 3b08 	ldr.w	r3, [r9], #8
 8004116:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800411a:	ba5b      	rev16	r3, r3
 800411c:	ba76      	rev16	r6, r6
 800411e:	b2dc      	uxtb	r4, r3
 8004120:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8004124:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8004128:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 800412c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004130:	0e1b      	lsrs	r3, r3, #24
 8004132:	eb01 0b07 	add.w	fp, r1, r7
 8004136:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 800413a:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800413e:	b2f1      	uxtb	r1, r6
 8004140:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8004144:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8004148:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 800414c:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8004150:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8004154:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8004158:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 800415c:	0e36      	lsrs	r6, r6, #24
 800415e:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8004162:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8004166:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800416a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800416e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8004172:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8004176:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800417a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800417e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004186:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800418a:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 800418e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004192:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8004196:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800419a:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 800419e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80041a2:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80041a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <D64_1CH_HTONS_VOL_HP+0x17c>)
 80041a8:	0ab1      	lsrs	r1, r6, #10
 80041aa:	fb2b 8803 	smlad	r8, fp, r3, r8
 80041ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <D64_1CH_HTONS_VOL_HP+0x180>)
 80041b0:	fb2a 8803 	smlad	r8, sl, r3, r8
 80041b4:	4b29      	ldr	r3, [pc, #164]	@ (800425c <D64_1CH_HTONS_VOL_HP+0x184>)
 80041b6:	fb27 8803 	smlad	r8, r7, r3, r8
 80041ba:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80041be:	fb20 8604 	smlad	r6, r0, r4, r8
 80041c2:	4b27      	ldr	r3, [pc, #156]	@ (8004260 <D64_1CH_HTONS_VOL_HP+0x188>)
 80041c4:	fb2b 5803 	smlad	r8, fp, r3, r5
 80041c8:	fb20 8813 	smladx	r8, r0, r3, r8
 80041cc:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <D64_1CH_HTONS_VOL_HP+0x18c>)
 80041ce:	fb2a 8803 	smlad	r8, sl, r3, r8
 80041d2:	fb27 8813 	smladx	r8, r7, r3, r8
 80041d6:	2401      	movs	r4, #1
 80041d8:	fb2b fb04 	smuad	fp, fp, r4
 80041dc:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <D64_1CH_HTONS_VOL_HP+0x190>)
 80041de:	fb2a ba03 	smlad	sl, sl, r3, fp
 80041e2:	4b22      	ldr	r3, [pc, #136]	@ (800426c <D64_1CH_HTONS_VOL_HP+0x194>)
 80041e4:	fb27 a703 	smlad	r7, r7, r3, sl
 80041e8:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <D64_1CH_HTONS_VOL_HP+0x198>)
 80041ea:	fb20 7503 	smlad	r5, r0, r3, r7
 80041ee:	9b00      	ldr	r3, [sp, #0]
 80041f0:	9802      	ldr	r0, [sp, #8]
 80041f2:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 80041f6:	4423      	add	r3, r4
 80041f8:	1a9a      	subs	r2, r3, r2
 80041fa:	17d7      	asrs	r7, r2, #31
 80041fc:	fba2 2300 	umull	r2, r3, r2, r0
 8004200:	fb00 3307 	mla	r3, r0, r7, r3
 8004204:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8004208:	f143 0b00 	adc.w	fp, r3, #0
 800420c:	9b01      	ldr	r3, [sp, #4]
 800420e:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8004212:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8004216:	2700      	movs	r7, #0
 8004218:	fbc3 6702 	smlal	r6, r7, r3, r2
 800421c:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8004220:	10ba      	asrs	r2, r7, #2
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	f302 020f 	ssat	r2, #16, r2
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	f82e 2b02 	strh.w	r2, [lr], #2
 800422e:	459e      	cmp	lr, r3
 8004230:	4622      	mov	r2, r4
 8004232:	f47f af6e 	bne.w	8004112 <D64_1CH_HTONS_VOL_HP+0x3a>
 8004236:	9a05      	ldr	r2, [sp, #20]
 8004238:	460b      	mov	r3, r1
 800423a:	61d3      	str	r3, [r2, #28]
 800423c:	9b00      	ldr	r3, [sp, #0]
 800423e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004242:	9b04      	ldr	r3, [sp, #16]
 8004244:	6193      	str	r3, [r2, #24]
 8004246:	2000      	movs	r0, #0
 8004248:	e9c2 5802 	strd	r5, r8, [r2, #8]
 800424c:	b007      	add	sp, #28
 800424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	001c0015 	.word	0x001c0015
 8004258:	000f000a 	.word	0x000f000a
 800425c:	00060003 	.word	0x00060003
 8004260:	0024002a 	.word	0x0024002a
 8004264:	002e0030 	.word	0x002e0030
 8004268:	00030006 	.word	0x00030006
 800426c:	000a000f 	.word	0x000a000f
 8004270:	0015001c 	.word	0x0015001c
 8004274:	2000000c 	.word	0x2000000c

08004278 <D80_1CH_HTONS_VOL_HP>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	4615      	mov	r5, r2
 800427e:	b089      	sub	sp, #36	@ 0x24
 8004280:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8004284:	692b      	ldr	r3, [r5, #16]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 800428c:	9400      	str	r4, [sp, #0]
 800428e:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8004290:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8004292:	9403      	str	r4, [sp, #12]
 8004294:	6a2c      	ldr	r4, [r5, #32]
 8004296:	9306      	str	r3, [sp, #24]
 8004298:	9404      	str	r4, [sp, #16]
 800429a:	69eb      	ldr	r3, [r5, #28]
 800429c:	2a00      	cmp	r2, #0
 800429e:	f000 80d3 	beq.w	8004448 <D80_1CH_HTONS_VOL_HP+0x1d0>
 80042a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042a6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80042aa:	9205      	str	r2, [sp, #20]
 80042ac:	4c67      	ldr	r4, [pc, #412]	@ (800444c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80042ae:	9507      	str	r5, [sp, #28]
 80042b0:	1e8a      	subs	r2, r1, #2
 80042b2:	9202      	str	r2, [sp, #8]
 80042b4:	469b      	mov	fp, r3
 80042b6:	6807      	ldr	r7, [r0, #0]
 80042b8:	6842      	ldr	r2, [r0, #4]
 80042ba:	6883      	ldr	r3, [r0, #8]
 80042bc:	300a      	adds	r0, #10
 80042be:	ba7f      	rev16	r7, r7
 80042c0:	ba52      	rev16	r2, r2
 80042c2:	ba5b      	rev16	r3, r3
 80042c4:	b2fd      	uxtb	r5, r7
 80042c6:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80042ca:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 80042ce:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80042d2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80042d6:	44f3      	add	fp, lr
 80042d8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80042dc:	0e3f      	lsrs	r7, r7, #24
 80042de:	fa5f fe82 	uxtb.w	lr, r2
 80042e2:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 80042e6:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 80042ea:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80042ee:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 80042f2:	f3c2 2507 	ubfx	r5, r2, #8, #8
 80042f6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80042fa:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 80042fe:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8004302:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8004306:	0e12      	lsrs	r2, r2, #24
 8004308:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800430c:	fa5f fe83 	uxtb.w	lr, r3
 8004310:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8004314:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004318:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800431c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004320:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8004324:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8004328:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800432c:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8004330:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8004334:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004338:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800433c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004340:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004344:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004348:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 800434c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004350:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8004354:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004358:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800435c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004360:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8004364:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8004368:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 800436c:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8004370:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8004374:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8004376:	9a00      	ldr	r2, [sp, #0]
 8004378:	fb21 2303 	smlad	r3, r1, r3, r2
 800437c:	4a35      	ldr	r2, [pc, #212]	@ (8004454 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800437e:	fb27 3302 	smlad	r3, r7, r2, r3
 8004382:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8004384:	fb25 3302 	smlad	r3, r5, r2, r3
 8004388:	4a34      	ldr	r2, [pc, #208]	@ (800445c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800438a:	fb28 3302 	smlad	r3, r8, r2, r3
 800438e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004392:	fb2e 3302 	smlad	r3, lr, r2, r3
 8004396:	4a32      	ldr	r2, [pc, #200]	@ (8004460 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8004398:	fb21 cc02 	smlad	ip, r1, r2, ip
 800439c:	4a31      	ldr	r2, [pc, #196]	@ (8004464 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800439e:	fb27 cc02 	smlad	ip, r7, r2, ip
 80043a2:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 80043a6:	fb25 c909 	smlad	r9, r5, r9, ip
 80043aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004468 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80043ac:	fb28 9902 	smlad	r9, r8, r2, r9
 80043b0:	4a2e      	ldr	r2, [pc, #184]	@ (800446c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80043b2:	fb2e 9202 	smlad	r2, lr, r2, r9
 80043b6:	f04f 0a01 	mov.w	sl, #1
 80043ba:	9200      	str	r2, [sp, #0]
 80043bc:	fb21 fa0a 	smuad	sl, r1, sl
 80043c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004470 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80043c2:	fb27 a702 	smlad	r7, r7, r2, sl
 80043c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004474 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80043c8:	fb25 7702 	smlad	r7, r5, r2, r7
 80043cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004478 <D80_1CH_HTONS_VOL_HP+0x200>)
 80043ce:	fb28 7202 	smlad	r2, r8, r2, r7
 80043d2:	4d2a      	ldr	r5, [pc, #168]	@ (800447c <D80_1CH_HTONS_VOL_HP+0x204>)
 80043d4:	fb2e 2c05 	smlad	ip, lr, r5, r2
 80043d8:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 80043dc:	9b01      	ldr	r3, [sp, #4]
 80043de:	9903      	ldr	r1, [sp, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	1b9e      	subs	r6, r3, r6
 80043e4:	9b04      	ldr	r3, [sp, #16]
 80043e6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80043ea:	fba6 5603 	umull	r5, r6, r6, r3
 80043ee:	fb03 6309 	mla	r3, r3, r9, r6
 80043f2:	462e      	mov	r6, r5
 80043f4:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 80043f8:	f143 0700 	adc.w	r7, r3, #0
 80043fc:	02bb      	lsls	r3, r7, #10
 80043fe:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004402:	f04f 0900 	mov.w	r9, #0
 8004406:	fbc1 8903 	smlal	r8, r9, r1, r3
 800440a:	9902      	ldr	r1, [sp, #8]
 800440c:	007b      	lsls	r3, r7, #1
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8004414:	f303 030f 	ssat	r3, #16, r3
 8004418:	f821 3f02 	strh.w	r3, [r1, #2]!
 800441c:	9b05      	ldr	r3, [sp, #20]
 800441e:	9102      	str	r1, [sp, #8]
 8004420:	4283      	cmp	r3, r0
 8004422:	4616      	mov	r6, r2
 8004424:	f47f af47 	bne.w	80042b6 <D80_1CH_HTONS_VOL_HP+0x3e>
 8004428:	9d07      	ldr	r5, [sp, #28]
 800442a:	465b      	mov	r3, fp
 800442c:	61eb      	str	r3, [r5, #28]
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	9900      	ldr	r1, [sp, #0]
 8004432:	f8c5 c008 	str.w	ip, [r5, #8]
 8004436:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800443a:	9b06      	ldr	r3, [sp, #24]
 800443c:	60e9      	str	r1, [r5, #12]
 800443e:	2000      	movs	r0, #0
 8004440:	61ab      	str	r3, [r5, #24]
 8004442:	b009      	add	sp, #36	@ 0x24
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004448:	4632      	mov	r2, r6
 800444a:	e7ef      	b.n	800442c <D80_1CH_HTONS_VOL_HP+0x1b4>
 800444c:	2000000c 	.word	0x2000000c
 8004450:	002d0024 	.word	0x002d0024
 8004454:	001c0015 	.word	0x001c0015
 8004458:	000f000a 	.word	0x000f000a
 800445c:	00060003 	.word	0x00060003
 8004460:	0037003f 	.word	0x0037003f
 8004464:	00450049 	.word	0x00450049
 8004468:	00490045 	.word	0x00490045
 800446c:	003f0037 	.word	0x003f0037
 8004470:	00030006 	.word	0x00030006
 8004474:	000a000f 	.word	0x000a000f
 8004478:	0015001c 	.word	0x0015001c
 800447c:	0024002d 	.word	0x0024002d

08004480 <D128_1CH_HTONS_VOL_HP>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	b093      	sub	sp, #76	@ 0x4c
 8004486:	6914      	ldr	r4, [r2, #16]
 8004488:	9404      	str	r4, [sp, #16]
 800448a:	6954      	ldr	r4, [r2, #20]
 800448c:	9406      	str	r4, [sp, #24]
 800448e:	6994      	ldr	r4, [r2, #24]
 8004490:	9410      	str	r4, [sp, #64]	@ 0x40
 8004492:	6894      	ldr	r4, [r2, #8]
 8004494:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8004496:	9403      	str	r4, [sp, #12]
 8004498:	68d4      	ldr	r4, [r2, #12]
 800449a:	9211      	str	r2, [sp, #68]	@ 0x44
 800449c:	69d6      	ldr	r6, [r2, #28]
 800449e:	9402      	str	r4, [sp, #8]
 80044a0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80044a2:	6a12      	ldr	r2, [r2, #32]
 80044a4:	940d      	str	r4, [sp, #52]	@ 0x34
 80044a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 814a 	beq.w	8004742 <D128_1CH_HTONS_VOL_HP+0x2c2>
 80044ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80044b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80044b4:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8004780 <D128_1CH_HTONS_VOL_HP+0x300>
 80044b8:	9107      	str	r1, [sp, #28]
 80044ba:	f100 0310 	add.w	r3, r0, #16
 80044be:	469b      	mov	fp, r3
 80044c0:	9605      	str	r6, [sp, #20]
 80044c2:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 80044c6:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 80044ca:	ba49      	rev16	r1, r1
 80044cc:	ba52      	rev16	r2, r2
 80044ce:	ba5b      	rev16	r3, r3
 80044d0:	fa90 fa90 	rev16.w	sl, r0
 80044d4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80044d8:	b2cc      	uxtb	r4, r1
 80044da:	9e05      	ldr	r6, [sp, #20]
 80044dc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80044e0:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80044e4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80044e8:	0e09      	lsrs	r1, r1, #24
 80044ea:	4426      	add	r6, r4
 80044ec:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80044f0:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80044f4:	b2d0      	uxtb	r0, r2
 80044f6:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80044fa:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80044fe:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8004502:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004506:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 800450a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800450e:	0e12      	lsrs	r2, r2, #24
 8004510:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8004514:	9401      	str	r4, [sp, #4]
 8004516:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 800451a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800451e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8004522:	9705      	str	r7, [sp, #20]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 800452a:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 800452e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8004532:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004536:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 800453a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800453e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004542:	0e1b      	lsrs	r3, r3, #24
 8004544:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8004548:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800454c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8004550:	fa5f f38a 	uxtb.w	r3, sl
 8004554:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004558:	960a      	str	r6, [sp, #40]	@ 0x28
 800455a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800455e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8004562:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004566:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800456a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800456c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004570:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004574:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004578:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800457c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8004580:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004584:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004588:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800458c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8004590:	9308      	str	r3, [sp, #32]
 8004592:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004596:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800459a:	920c      	str	r2, [sp, #48]	@ 0x30
 800459c:	9b01      	ldr	r3, [sp, #4]
 800459e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80045a0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80045a4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80045a8:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80045ac:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80045b0:	9b05      	ldr	r3, [sp, #20]
 80045b2:	f8cd 9014 	str.w	r9, [sp, #20]
 80045b6:	4691      	mov	r9, r2
 80045b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045ba:	f8cd a004 	str.w	sl, [sp, #4]
 80045be:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 80045c2:	9a01      	ldr	r2, [sp, #4]
 80045c4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80045c8:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 80045cc:	9b08      	ldr	r3, [sp, #32]
 80045ce:	9a05      	ldr	r2, [sp, #20]
 80045d0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80045d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80045da:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80045de:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80045e2:	9201      	str	r2, [sp, #4]
 80045e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045e6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80045ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80045ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80045f2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80045f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80045fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80045fe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004602:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800460a:	0a92      	lsrs	r2, r2, #10
 800460c:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8004610:	9205      	str	r2, [sp, #20]
 8004612:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8004616:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800461a:	4d4b      	ldr	r5, [pc, #300]	@ (8004748 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800461c:	9a02      	ldr	r2, [sp, #8]
 800461e:	fb29 2505 	smlad	r5, r9, r5, r2
 8004622:	4a4a      	ldr	r2, [pc, #296]	@ (800474c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8004624:	fb2a 5502 	smlad	r5, sl, r2, r5
 8004628:	4a49      	ldr	r2, [pc, #292]	@ (8004750 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800462a:	fb21 5502 	smlad	r5, r1, r2, r5
 800462e:	4a49      	ldr	r2, [pc, #292]	@ (8004754 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8004630:	fb24 5502 	smlad	r5, r4, r2, r5
 8004634:	4a48      	ldr	r2, [pc, #288]	@ (8004758 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8004636:	9e01      	ldr	r6, [sp, #4]
 8004638:	fb26 5502 	smlad	r5, r6, r2, r5
 800463c:	4a47      	ldr	r2, [pc, #284]	@ (800475c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800463e:	fb20 5502 	smlad	r5, r0, r2, r5
 8004642:	4a47      	ldr	r2, [pc, #284]	@ (8004760 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8004644:	fb23 5502 	smlad	r5, r3, r2, r5
 8004648:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 800464c:	fb27 520c 	smlad	r2, r7, ip, r5
 8004650:	4616      	mov	r6, r2
 8004652:	9d03      	ldr	r5, [sp, #12]
 8004654:	4a43      	ldr	r2, [pc, #268]	@ (8004764 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8004656:	fb29 5c02 	smlad	ip, r9, r2, r5
 800465a:	4a43      	ldr	r2, [pc, #268]	@ (8004768 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800465c:	fb2a ce02 	smlad	lr, sl, r2, ip
 8004660:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8004784 <D128_1CH_HTONS_VOL_HP+0x304>
 8004664:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8004668:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 8004788 <D128_1CH_HTONS_VOL_HP+0x308>
 800466c:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8004670:	f8df e118 	ldr.w	lr, [pc, #280]	@ 800478c <D128_1CH_HTONS_VOL_HP+0x30c>
 8004674:	9d01      	ldr	r5, [sp, #4]
 8004676:	fb25 ce0e 	smlad	lr, r5, lr, ip
 800467a:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8004790 <D128_1CH_HTONS_VOL_HP+0x310>
 800467e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8004682:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8004794 <D128_1CH_HTONS_VOL_HP+0x314>
 8004686:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800468a:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 8004798 <D128_1CH_HTONS_VOL_HP+0x318>
 800468e:	fb27 c20e 	smlad	r2, r7, lr, ip
 8004692:	f04f 0c01 	mov.w	ip, #1
 8004696:	9202      	str	r2, [sp, #8]
 8004698:	fb29 fc0c 	smuad	ip, r9, ip
 800469c:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 800479c <D128_1CH_HTONS_VOL_HP+0x31c>
 80046a0:	fb2a ca09 	smlad	sl, sl, r9, ip
 80046a4:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80047a0 <D128_1CH_HTONS_VOL_HP+0x320>
 80046a8:	fb21 a909 	smlad	r9, r1, r9, sl
 80046ac:	492f      	ldr	r1, [pc, #188]	@ (800476c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80046ae:	fb24 9901 	smlad	r9, r4, r1, r9
 80046b2:	492f      	ldr	r1, [pc, #188]	@ (8004770 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80046b4:	fb25 9901 	smlad	r9, r5, r1, r9
 80046b8:	492e      	ldr	r1, [pc, #184]	@ (8004774 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80046ba:	fb20 9901 	smlad	r9, r0, r1, r9
 80046be:	492e      	ldr	r1, [pc, #184]	@ (8004778 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80046c0:	fb23 9301 	smlad	r3, r3, r1, r9
 80046c4:	482d      	ldr	r0, [pc, #180]	@ (800477c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80046c6:	fb27 3300 	smlad	r3, r7, r0, r3
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	9b04      	ldr	r3, [sp, #16]
 80046ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80046d0:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 80046d4:	442b      	add	r3, r5
 80046d6:	461a      	mov	r2, r3
 80046d8:	9b06      	ldr	r3, [sp, #24]
 80046da:	9506      	str	r5, [sp, #24]
 80046dc:	1ad2      	subs	r2, r2, r3
 80046de:	17d1      	asrs	r1, r2, #31
 80046e0:	fba2 2304 	umull	r2, r3, r2, r4
 80046e4:	fb04 3301 	mla	r3, r4, r1, r3
 80046e8:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 80046ec:	f143 0a00 	adc.w	sl, r3, #0
 80046f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046f2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80046f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80046fa:	2100      	movs	r1, #0
 80046fc:	fbc3 0102 	smlal	r0, r1, r3, r2
 8004700:	9b07      	ldr	r3, [sp, #28]
 8004702:	108a      	asrs	r2, r1, #2
 8004704:	f302 020f 	ssat	r2, #16, r2
 8004708:	f823 2b02 	strh.w	r2, [r3], #2
 800470c:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8004710:	9204      	str	r2, [sp, #16]
 8004712:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004714:	9307      	str	r3, [sp, #28]
 8004716:	4293      	cmp	r3, r2
 8004718:	f10b 0b10 	add.w	fp, fp, #16
 800471c:	f47f aed1 	bne.w	80044c2 <D128_1CH_HTONS_VOL_HP+0x42>
 8004720:	9e05      	ldr	r6, [sp, #20]
 8004722:	4629      	mov	r1, r5
 8004724:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004726:	9803      	ldr	r0, [sp, #12]
 8004728:	6098      	str	r0, [r3, #8]
 800472a:	9802      	ldr	r0, [sp, #8]
 800472c:	60d8      	str	r0, [r3, #12]
 800472e:	9804      	ldr	r0, [sp, #16]
 8004730:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004732:	61de      	str	r6, [r3, #28]
 8004734:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004738:	2000      	movs	r0, #0
 800473a:	619a      	str	r2, [r3, #24]
 800473c:	b013      	add	sp, #76	@ 0x4c
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	9906      	ldr	r1, [sp, #24]
 8004744:	e7ee      	b.n	8004724 <D128_1CH_HTONS_VOL_HP+0x2a4>
 8004746:	bf00      	nop
 8004748:	00780069 	.word	0x00780069
 800474c:	005b004e 	.word	0x005b004e
 8004750:	00420037 	.word	0x00420037
 8004754:	002d0024 	.word	0x002d0024
 8004758:	001c0015 	.word	0x001c0015
 800475c:	000f000a 	.word	0x000f000a
 8004760:	00060003 	.word	0x00060003
 8004764:	00880096 	.word	0x00880096
 8004768:	00a200ac 	.word	0x00a200ac
 800476c:	0015001c 	.word	0x0015001c
 8004770:	0024002d 	.word	0x0024002d
 8004774:	00370042 	.word	0x00370042
 8004778:	004e005b 	.word	0x004e005b
 800477c:	00690078 	.word	0x00690078
 8004780:	2000000c 	.word	0x2000000c
 8004784:	00b400ba 	.word	0x00b400ba
 8004788:	00be00c0 	.word	0x00be00c0
 800478c:	00c000be 	.word	0x00c000be
 8004790:	00ba00b4 	.word	0x00ba00b4
 8004794:	00ac00a2 	.word	0x00ac00a2
 8004798:	00960088 	.word	0x00960088
 800479c:	00030006 	.word	0x00030006
 80047a0:	000a000f 	.word	0x000a000f

080047a4 <PDM_Filter_Init>:
 80047a4:	4a59      	ldr	r2, [pc, #356]	@ (800490c <PDM_Filter_Init+0x168>)
 80047a6:	495a      	ldr	r1, [pc, #360]	@ (8004910 <PDM_Filter_Init+0x16c>)
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	680b      	ldr	r3, [r1, #0]
 80047b4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80047b8:	4013      	ands	r3, r2
 80047ba:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80047be:	42ab      	cmp	r3, r5
 80047c0:	4604      	mov	r4, r0
 80047c2:	d044      	beq.n	800484e <PDM_Filter_Init+0xaa>
 80047c4:	680b      	ldr	r3, [r1, #0]
 80047c6:	f24c 2170 	movw	r1, #49776	@ 0xc270
 80047ca:	401a      	ands	r2, r3
 80047cc:	428a      	cmp	r2, r1
 80047ce:	d03e      	beq.n	800484e <PDM_Filter_Init+0xaa>
 80047d0:	4b50      	ldr	r3, [pc, #320]	@ (8004914 <PDM_Filter_Init+0x170>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	6819      	ldr	r1, [r3, #0]
 80047d8:	2900      	cmp	r1, #0
 80047da:	d1fc      	bne.n	80047d6 <PDM_Filter_Init+0x32>
 80047dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004918 <PDM_Filter_Init+0x174>)
 80047de:	4a4f      	ldr	r2, [pc, #316]	@ (800491c <PDM_Filter_Init+0x178>)
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004920 <PDM_Filter_Init+0x17c>)
 80047e6:	429a      	cmp	r2, r3
 80047e8:	f104 000c 	add.w	r0, r4, #12
 80047ec:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80047f0:	d047      	beq.n	8004882 <PDM_Filter_Init+0xde>
 80047f2:	f000 f9ad 	bl	8004b50 <memset>
 80047f6:	2300      	movs	r3, #0
 80047f8:	6463      	str	r3, [r4, #68]	@ 0x44
 80047fa:	8820      	ldrh	r0, [r4, #0]
 80047fc:	8963      	ldrh	r3, [r4, #10]
 80047fe:	8922      	ldrh	r2, [r4, #8]
 8004800:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8004802:	2801      	cmp	r0, #1
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	61a3      	str	r3, [r4, #24]
 800480a:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800480e:	60e3      	str	r3, [r4, #12]
 8004810:	6263      	str	r3, [r4, #36]	@ 0x24
 8004812:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8004816:	6423      	str	r3, [r4, #64]	@ 0x40
 8004818:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800481a:	d93a      	bls.n	8004892 <PDM_Filter_Init+0xee>
 800481c:	2003      	movs	r0, #3
 800481e:	2302      	movs	r3, #2
 8004820:	8862      	ldrh	r2, [r4, #2]
 8004822:	2a01      	cmp	r2, #1
 8004824:	d932      	bls.n	800488c <PDM_Filter_Init+0xe8>
 8004826:	2140      	movs	r1, #64	@ 0x40
 8004828:	2300      	movs	r3, #0
 800482a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800482c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004830:	6862      	ldr	r2, [r4, #4]
 8004832:	bf04      	itt	eq
 8004834:	6421      	streq	r1, [r4, #64]	@ 0x40
 8004836:	460b      	moveq	r3, r1
 8004838:	b11a      	cbz	r2, 8004842 <PDM_Filter_Init+0x9e>
 800483a:	f043 0310 	orr.w	r3, r3, #16
 800483e:	6423      	str	r3, [r4, #64]	@ 0x40
 8004840:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8004842:	2200      	movs	r2, #0
 8004844:	8722      	strh	r2, [r4, #56]	@ 0x38
 8004846:	b908      	cbnz	r0, 800484c <PDM_Filter_Init+0xa8>
 8004848:	3380      	adds	r3, #128	@ 0x80
 800484a:	6423      	str	r3, [r4, #64]	@ 0x40
 800484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484e:	4b35      	ldr	r3, [pc, #212]	@ (8004924 <PDM_Filter_Init+0x180>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1bc      	bne.n	80047d0 <PDM_Filter_Init+0x2c>
 8004856:	4a34      	ldr	r2, [pc, #208]	@ (8004928 <PDM_Filter_Init+0x184>)
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004862:	d006      	beq.n	8004872 <PDM_Filter_Init+0xce>
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	f240 4283 	movw	r2, #1155	@ 0x483
 800486a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486e:	4293      	cmp	r3, r2
 8004870:	d1ae      	bne.n	80047d0 <PDM_Filter_Init+0x2c>
 8004872:	4b2e      	ldr	r3, [pc, #184]	@ (800492c <PDM_Filter_Init+0x188>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	2900      	cmp	r1, #0
 800487c:	d1fc      	bne.n	8004878 <PDM_Filter_Init+0xd4>
 800487e:	4b2c      	ldr	r3, [pc, #176]	@ (8004930 <PDM_Filter_Init+0x18c>)
 8004880:	e7ad      	b.n	80047de <PDM_Filter_Init+0x3a>
 8004882:	f000 f965 	bl	8004b50 <memset>
 8004886:	4b26      	ldr	r3, [pc, #152]	@ (8004920 <PDM_Filter_Init+0x17c>)
 8004888:	6463      	str	r3, [r4, #68]	@ 0x44
 800488a:	e7b6      	b.n	80047fa <PDM_Filter_Init+0x56>
 800488c:	d038      	beq.n	8004900 <PDM_Filter_Init+0x15c>
 800488e:	4618      	mov	r0, r3
 8004890:	e7c9      	b.n	8004826 <PDM_Filter_Init+0x82>
 8004892:	4d28      	ldr	r5, [pc, #160]	@ (8004934 <PDM_Filter_Init+0x190>)
 8004894:	782a      	ldrb	r2, [r5, #0]
 8004896:	d01a      	beq.n	80048ce <PDM_Filter_Init+0x12a>
 8004898:	2a01      	cmp	r2, #1
 800489a:	d001      	beq.n	80048a0 <PDM_Filter_Init+0xfc>
 800489c:	2001      	movs	r0, #1
 800489e:	e7bf      	b.n	8004820 <PDM_Filter_Init+0x7c>
 80048a0:	4925      	ldr	r1, [pc, #148]	@ (8004938 <PDM_Filter_Init+0x194>)
 80048a2:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8004940 <PDM_Filter_Init+0x19c>
 80048a6:	4f25      	ldr	r7, [pc, #148]	@ (800493c <PDM_Filter_Init+0x198>)
 80048a8:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80048ac:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80048b0:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80048b4:	ea02 0007 	and.w	r0, r2, r7
 80048b8:	4303      	orrs	r3, r0
 80048ba:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80048be:	4413      	add	r3, r2
 80048c0:	428e      	cmp	r6, r1
 80048c2:	600b      	str	r3, [r1, #0]
 80048c4:	d1f2      	bne.n	80048ac <PDM_Filter_Init+0x108>
 80048c6:	2300      	movs	r3, #0
 80048c8:	702b      	strb	r3, [r5, #0]
 80048ca:	2001      	movs	r0, #1
 80048cc:	e7a8      	b.n	8004820 <PDM_Filter_Init+0x7c>
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	d1a6      	bne.n	8004820 <PDM_Filter_Init+0x7c>
 80048d2:	4919      	ldr	r1, [pc, #100]	@ (8004938 <PDM_Filter_Init+0x194>)
 80048d4:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8004940 <PDM_Filter_Init+0x19c>
 80048d8:	4f18      	ldr	r7, [pc, #96]	@ (800493c <PDM_Filter_Init+0x198>)
 80048da:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80048de:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80048e2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80048e6:	ea02 0007 	and.w	r0, r2, r7
 80048ea:	4303      	orrs	r3, r0
 80048ec:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80048f0:	4413      	add	r3, r2
 80048f2:	428e      	cmp	r6, r1
 80048f4:	600b      	str	r3, [r1, #0]
 80048f6:	d1f2      	bne.n	80048de <PDM_Filter_Init+0x13a>
 80048f8:	2001      	movs	r0, #1
 80048fa:	7028      	strb	r0, [r5, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	e78f      	b.n	8004820 <PDM_Filter_Init+0x7c>
 8004900:	2220      	movs	r2, #32
 8004902:	4618      	mov	r0, r3
 8004904:	6422      	str	r2, [r4, #64]	@ 0x40
 8004906:	4613      	mov	r3, r2
 8004908:	2160      	movs	r1, #96	@ 0x60
 800490a:	e78e      	b.n	800482a <PDM_Filter_Init+0x86>
 800490c:	e0002000 	.word	0xe0002000
 8004910:	e000ed00 	.word	0xe000ed00
 8004914:	40023008 	.word	0x40023008
 8004918:	40023000 	.word	0x40023000
 800491c:	f407a5c2 	.word	0xf407a5c2
 8004920:	b5e8b5cd 	.word	0xb5e8b5cd
 8004924:	e0042000 	.word	0xe0042000
 8004928:	5c001000 	.word	0x5c001000
 800492c:	58024c08 	.word	0x58024c08
 8004930:	58024c00 	.word	0x58024c00
 8004934:	20000782 	.word	0x20000782
 8004938:	20000008 	.word	0x20000008
 800493c:	000ffc00 	.word	0x000ffc00
 8004940:	3ff00000 	.word	0x3ff00000

08004944 <PDM_Filter_setConfig>:
 8004944:	4b6d      	ldr	r3, [pc, #436]	@ (8004afc <PDM_Filter_setConfig+0x1b8>)
 8004946:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004948:	429a      	cmp	r2, r3
 800494a:	d12f      	bne.n	80049ac <PDM_Filter_setConfig+0x68>
 800494c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494e:	880e      	ldrh	r6, [r1, #0]
 8004950:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004952:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8004956:	ed2d 8b02 	vpush	{d8}
 800495a:	4604      	mov	r4, r0
 800495c:	1e72      	subs	r2, r6, #1
 800495e:	460d      	mov	r5, r1
 8004960:	2a06      	cmp	r2, #6
 8004962:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004966:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 800496a:	6421      	str	r1, [r4, #64]	@ 0x40
 800496c:	b083      	sub	sp, #12
 800496e:	d904      	bls.n	800497a <PDM_Filter_setConfig+0x36>
 8004970:	42b8      	cmp	r0, r7
 8004972:	f000 80bb 	beq.w	8004aec <PDM_Filter_setConfig+0x1a8>
 8004976:	2008      	movs	r0, #8
 8004978:	e01d      	b.n	80049b6 <PDM_Filter_setConfig+0x72>
 800497a:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800497c:	42b2      	cmp	r2, r6
 800497e:	d070      	beq.n	8004a62 <PDM_Filter_setConfig+0x11e>
 8004980:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	4333      	orrs	r3, r6
 800498a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800498e:	6423      	str	r3, [r4, #64]	@ 0x40
 8004990:	2a70      	cmp	r2, #112	@ 0x70
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	f103 33ff 	add.w	r3, r3, #4294967295
 800499a:	d067      	beq.n	8004a6c <PDM_Filter_setConfig+0x128>
 800499c:	2b06      	cmp	r3, #6
 800499e:	d809      	bhi.n	80049b4 <PDM_Filter_setConfig+0x70>
 80049a0:	e8df f003 	tbb	[pc, r3]
 80049a4:	89868380 	.word	0x89868380
 80049a8:	8f8c      	.short	0x8f8c
 80049aa:	7d          	.byte	0x7d
 80049ab:	00          	.byte	0x00
 80049ac:	2004      	movs	r0, #4
 80049ae:	4770      	bx	lr
 80049b0:	4b53      	ldr	r3, [pc, #332]	@ (8004b00 <PDM_Filter_setConfig+0x1bc>)
 80049b2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80049b4:	2000      	movs	r0, #0
 80049b6:	f117 0f0c 	cmn.w	r7, #12
 80049ba:	da0a      	bge.n	80049d2 <PDM_Filter_setConfig+0x8e>
 80049bc:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80049c0:	3040      	adds	r0, #64	@ 0x40
 80049c2:	80ab      	strh	r3, [r5, #4]
 80049c4:	886b      	ldrh	r3, [r5, #2]
 80049c6:	8663      	strh	r3, [r4, #50]	@ 0x32
 80049c8:	8626      	strh	r6, [r4, #48]	@ 0x30
 80049ca:	b003      	add	sp, #12
 80049cc:	ecbd 8b02 	vpop	{d8}
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	2f33      	cmp	r7, #51	@ 0x33
 80049d4:	dc41      	bgt.n	8004a5a <PDM_Filter_setConfig+0x116>
 80049d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	3b01      	subs	r3, #1
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d858      	bhi.n	8004a94 <PDM_Filter_setConfig+0x150>
 80049e2:	4948      	ldr	r1, [pc, #288]	@ (8004b04 <PDM_Filter_setConfig+0x1c0>)
 80049e4:	4a48      	ldr	r2, [pc, #288]	@ (8004b08 <PDM_Filter_setConfig+0x1c4>)
 80049e6:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8004b0c <PDM_Filter_setConfig+0x1c8>
 80049ea:	9001      	str	r0, [sp, #4]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4419      	add	r1, r3
 80049f0:	edd1 7a00 	vldr	s15, [r1]
 80049f4:	4413      	add	r3, r2
 80049f6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80049fa:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80049fe:	ed93 8a00 	vldr	s16, [r3]
 8004a02:	f000 f8d7 	bl	8004bb4 <powf>
 8004a06:	9801      	ldr	r0, [sp, #4]
 8004a08:	eef0 8a40 	vmov.f32	s17, s0
 8004a0c:	ee07 7a10 	vmov	s14, r7
 8004a10:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8004b10 <PDM_Filter_setConfig+0x1cc>
 8004a14:	9001      	str	r0, [sp, #4]
 8004a16:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8004a1a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8004a1e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8004a22:	f000 f8c7 	bl	8004bb4 <powf>
 8004a26:	ee28 8a28 	vmul.f32	s16, s16, s17
 8004a2a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004a2e:	f000 f94b 	bl	8004cc8 <roundf>
 8004a32:	9801      	ldr	r0, [sp, #4]
 8004a34:	886b      	ldrh	r3, [r5, #2]
 8004a36:	8663      	strh	r3, [r4, #50]	@ 0x32
 8004a38:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8004a3c:	8727      	strh	r7, [r4, #56]	@ 0x38
 8004a3e:	8626      	strh	r6, [r4, #48]	@ 0x30
 8004a40:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1c0      	bne.n	80049ca <PDM_Filter_setConfig+0x86>
 8004a48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a50:	6423      	str	r3, [r4, #64]	@ 0x40
 8004a52:	b003      	add	sp, #12
 8004a54:	ecbd 8b02 	vpop	{d8}
 8004a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5a:	2333      	movs	r3, #51	@ 0x33
 8004a5c:	3040      	adds	r0, #64	@ 0x40
 8004a5e:	80ab      	strh	r3, [r5, #4]
 8004a60:	e7b0      	b.n	80049c4 <PDM_Filter_setConfig+0x80>
 8004a62:	42b8      	cmp	r0, r7
 8004a64:	d1a6      	bne.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004a66:	886b      	ldrh	r3, [r5, #2]
 8004a68:	8663      	strh	r3, [r4, #50]	@ 0x32
 8004a6a:	e7ed      	b.n	8004a48 <PDM_Filter_setConfig+0x104>
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d8a1      	bhi.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004a70:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <PDM_Filter_setConfig+0x134>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004ae7 	.word	0x08004ae7
 8004a7c:	08004ae1 	.word	0x08004ae1
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004acf 	.word	0x08004acf
 8004a88:	080049b1 	.word	0x080049b1
 8004a8c:	08004ac9 	.word	0x08004ac9
 8004a90:	08004adb 	.word	0x08004adb
 8004a94:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8004b14 <PDM_Filter_setConfig+0x1d0>
 8004a98:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8004b18 <PDM_Filter_setConfig+0x1d4>
 8004a9c:	e7b6      	b.n	8004a0c <PDM_Filter_setConfig+0xc8>
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <PDM_Filter_setConfig+0x1d8>)
 8004aa0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004aa2:	e787      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <PDM_Filter_setConfig+0x1dc>)
 8004aa6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004aa8:	e784      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8004b24 <PDM_Filter_setConfig+0x1e0>)
 8004aac:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004aae:	e781      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <PDM_Filter_setConfig+0x1e4>)
 8004ab2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ab4:	e77e      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <PDM_Filter_setConfig+0x1e8>)
 8004ab8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004aba:	e77b      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004abc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b30 <PDM_Filter_setConfig+0x1ec>)
 8004abe:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ac0:	e778      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <PDM_Filter_setConfig+0x1f0>)
 8004ac4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ac6:	e775      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <PDM_Filter_setConfig+0x1f4>)
 8004aca:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004acc:	e772      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ace:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <PDM_Filter_setConfig+0x1f8>)
 8004ad0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ad2:	e76f      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b40 <PDM_Filter_setConfig+0x1fc>)
 8004ad6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ad8:	e76c      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ada:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <PDM_Filter_setConfig+0x200>)
 8004adc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ade:	e769      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <PDM_Filter_setConfig+0x204>)
 8004ae2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004ae4:	e766      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004ae6:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <PDM_Filter_setConfig+0x208>)
 8004ae8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004aea:	e763      	b.n	80049b4 <PDM_Filter_setConfig+0x70>
 8004aec:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8004aee:	42b3      	cmp	r3, r6
 8004af0:	f47f af41 	bne.w	8004976 <PDM_Filter_setConfig+0x32>
 8004af4:	886b      	ldrh	r3, [r5, #2]
 8004af6:	8663      	strh	r3, [r4, #50]	@ 0x32
 8004af8:	2008      	movs	r0, #8
 8004afa:	e766      	b.n	80049ca <PDM_Filter_setConfig+0x86>
 8004afc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b00:	08003c25 	.word	0x08003c25
 8004b04:	080053b8 	.word	0x080053b8
 8004b08:	080053d4 	.word	0x080053d4
 8004b0c:	42000000 	.word	0x42000000
 8004b10:	3d4ccccd 	.word	0x3d4ccccd
 8004b14:	4f800000 	.word	0x4f800000
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	08003025 	.word	0x08003025
 8004b20:	080031ad 	.word	0x080031ad
 8004b24:	08003395 	.word	0x08003395
 8004b28:	080035b1 	.word	0x080035b1
 8004b2c:	08003845 	.word	0x08003845
 8004b30:	08002d85 	.word	0x08002d85
 8004b34:	08002e9d 	.word	0x08002e9d
 8004b38:	08003d0d 	.word	0x08003d0d
 8004b3c:	08004481 	.word	0x08004481
 8004b40:	08004279 	.word	0x08004279
 8004b44:	08003e51 	.word	0x08003e51
 8004b48:	080040d9 	.word	0x080040d9
 8004b4c:	08003f6d 	.word	0x08003f6d

08004b50 <memset>:
 8004b50:	4402      	add	r2, r0
 8004b52:	4603      	mov	r3, r0
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d100      	bne.n	8004b5a <memset+0xa>
 8004b58:	4770      	bx	lr
 8004b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5e:	e7f9      	b.n	8004b54 <memset+0x4>

08004b60 <__errno>:
 8004b60:	4b01      	ldr	r3, [pc, #4]	@ (8004b68 <__errno+0x8>)
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	2000040c 	.word	0x2000040c

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1b64      	subs	r4, r4, r5
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2600      	movs	r6, #0
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f000 fc02 	bl	8005388 <_init>
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2600      	movs	r6, #0
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08005410 	.word	0x08005410
 8004ba8:	08005410 	.word	0x08005410
 8004bac:	08005410 	.word	0x08005410
 8004bb0:	08005414 	.word	0x08005414

08004bb4 <powf>:
 8004bb4:	b508      	push	{r3, lr}
 8004bb6:	ed2d 8b04 	vpush	{d8-d9}
 8004bba:	eeb0 8a60 	vmov.f32	s16, s1
 8004bbe:	eeb0 9a40 	vmov.f32	s18, s0
 8004bc2:	f000 f8a5 	bl	8004d10 <__ieee754_powf>
 8004bc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	eef0 8a40 	vmov.f32	s17, s0
 8004bd2:	d63e      	bvs.n	8004c52 <powf+0x9e>
 8004bd4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	d112      	bne.n	8004c04 <powf+0x50>
 8004bde:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d039      	beq.n	8004c5c <powf+0xa8>
 8004be8:	eeb0 0a48 	vmov.f32	s0, s16
 8004bec:	f000 f839 	bl	8004c62 <finitef>
 8004bf0:	b378      	cbz	r0, 8004c52 <powf+0x9e>
 8004bf2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfa:	d52a      	bpl.n	8004c52 <powf+0x9e>
 8004bfc:	f7ff ffb0 	bl	8004b60 <__errno>
 8004c00:	2322      	movs	r3, #34	@ 0x22
 8004c02:	e014      	b.n	8004c2e <powf+0x7a>
 8004c04:	f000 f82d 	bl	8004c62 <finitef>
 8004c08:	b998      	cbnz	r0, 8004c32 <powf+0x7e>
 8004c0a:	eeb0 0a49 	vmov.f32	s0, s18
 8004c0e:	f000 f828 	bl	8004c62 <finitef>
 8004c12:	b170      	cbz	r0, 8004c32 <powf+0x7e>
 8004c14:	eeb0 0a48 	vmov.f32	s0, s16
 8004c18:	f000 f823 	bl	8004c62 <finitef>
 8004c1c:	b148      	cbz	r0, 8004c32 <powf+0x7e>
 8004c1e:	eef4 8a68 	vcmp.f32	s17, s17
 8004c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c26:	d7e9      	bvc.n	8004bfc <powf+0x48>
 8004c28:	f7ff ff9a 	bl	8004b60 <__errno>
 8004c2c:	2321      	movs	r3, #33	@ 0x21
 8004c2e:	6003      	str	r3, [r0, #0]
 8004c30:	e00f      	b.n	8004c52 <powf+0x9e>
 8004c32:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	d10a      	bne.n	8004c52 <powf+0x9e>
 8004c3c:	eeb0 0a49 	vmov.f32	s0, s18
 8004c40:	f000 f80f 	bl	8004c62 <finitef>
 8004c44:	b128      	cbz	r0, 8004c52 <powf+0x9e>
 8004c46:	eeb0 0a48 	vmov.f32	s0, s16
 8004c4a:	f000 f80a 	bl	8004c62 <finitef>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d1d4      	bne.n	8004bfc <powf+0x48>
 8004c52:	eeb0 0a68 	vmov.f32	s0, s17
 8004c56:	ecbd 8b04 	vpop	{d8-d9}
 8004c5a:	bd08      	pop	{r3, pc}
 8004c5c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8004c60:	e7f7      	b.n	8004c52 <powf+0x9e>

08004c62 <finitef>:
 8004c62:	ee10 3a10 	vmov	r3, s0
 8004c66:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8004c6a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004c6e:	bfac      	ite	ge
 8004c70:	2000      	movge	r0, #0
 8004c72:	2001      	movlt	r0, #1
 8004c74:	4770      	bx	lr

08004c76 <with_errnof>:
 8004c76:	b510      	push	{r4, lr}
 8004c78:	ed2d 8b02 	vpush	{d8}
 8004c7c:	eeb0 8a40 	vmov.f32	s16, s0
 8004c80:	4604      	mov	r4, r0
 8004c82:	f7ff ff6d 	bl	8004b60 <__errno>
 8004c86:	eeb0 0a48 	vmov.f32	s0, s16
 8004c8a:	ecbd 8b02 	vpop	{d8}
 8004c8e:	6004      	str	r4, [r0, #0]
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <xflowf>:
 8004c92:	b130      	cbz	r0, 8004ca2 <xflowf+0x10>
 8004c94:	eef1 7a40 	vneg.f32	s15, s0
 8004c98:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004c9c:	2022      	movs	r0, #34	@ 0x22
 8004c9e:	f7ff bfea 	b.w	8004c76 <with_errnof>
 8004ca2:	eef0 7a40 	vmov.f32	s15, s0
 8004ca6:	e7f7      	b.n	8004c98 <xflowf+0x6>

08004ca8 <__math_uflowf>:
 8004ca8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004cb0 <__math_uflowf+0x8>
 8004cac:	f7ff bff1 	b.w	8004c92 <xflowf>
 8004cb0:	10000000 	.word	0x10000000

08004cb4 <__math_oflowf>:
 8004cb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004cbc <__math_oflowf+0x8>
 8004cb8:	f7ff bfeb 	b.w	8004c92 <xflowf>
 8004cbc:	70000000 	.word	0x70000000

08004cc0 <__ieee754_sqrtf>:
 8004cc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004cc4:	4770      	bx	lr
	...

08004cc8 <roundf>:
 8004cc8:	ee10 0a10 	vmov	r0, s0
 8004ccc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004cd0:	3a7f      	subs	r2, #127	@ 0x7f
 8004cd2:	2a16      	cmp	r2, #22
 8004cd4:	dc15      	bgt.n	8004d02 <roundf+0x3a>
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	da08      	bge.n	8004cec <roundf+0x24>
 8004cda:	3201      	adds	r2, #1
 8004cdc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004ce0:	d101      	bne.n	8004ce6 <roundf+0x1e>
 8004ce2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8004ce6:	ee00 3a10 	vmov	s0, r3
 8004cea:	4770      	bx	lr
 8004cec:	4907      	ldr	r1, [pc, #28]	@ (8004d0c <roundf+0x44>)
 8004cee:	4111      	asrs	r1, r2
 8004cf0:	4201      	tst	r1, r0
 8004cf2:	d0fa      	beq.n	8004cea <roundf+0x22>
 8004cf4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cf8:	4113      	asrs	r3, r2
 8004cfa:	4403      	add	r3, r0
 8004cfc:	ea23 0301 	bic.w	r3, r3, r1
 8004d00:	e7f1      	b.n	8004ce6 <roundf+0x1e>
 8004d02:	2a80      	cmp	r2, #128	@ 0x80
 8004d04:	d1f1      	bne.n	8004cea <roundf+0x22>
 8004d06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004d0a:	4770      	bx	lr
 8004d0c:	007fffff 	.word	0x007fffff

08004d10 <__ieee754_powf>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	ee10 4a90 	vmov	r4, s1
 8004d18:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8004d1c:	ed2d 8b02 	vpush	{d8}
 8004d20:	ee10 6a10 	vmov	r6, s0
 8004d24:	eeb0 8a40 	vmov.f32	s16, s0
 8004d28:	eef0 8a60 	vmov.f32	s17, s1
 8004d2c:	d10c      	bne.n	8004d48 <__ieee754_powf+0x38>
 8004d2e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8004d32:	0076      	lsls	r6, r6, #1
 8004d34:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8004d38:	f240 8274 	bls.w	8005224 <__ieee754_powf+0x514>
 8004d3c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8004d40:	ecbd 8b02 	vpop	{d8}
 8004d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d48:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8004d4c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8004d50:	d802      	bhi.n	8004d58 <__ieee754_powf+0x48>
 8004d52:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8004d56:	d908      	bls.n	8004d6a <__ieee754_powf+0x5a>
 8004d58:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8004d5c:	d1ee      	bne.n	8004d3c <__ieee754_powf+0x2c>
 8004d5e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8004d62:	0064      	lsls	r4, r4, #1
 8004d64:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8004d68:	e7e6      	b.n	8004d38 <__ieee754_powf+0x28>
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	da1f      	bge.n	8004dae <__ieee754_powf+0x9e>
 8004d6e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8004d72:	f080 8260 	bcs.w	8005236 <__ieee754_powf+0x526>
 8004d76:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8004d7a:	d32f      	bcc.n	8004ddc <__ieee754_powf+0xcc>
 8004d7c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8004d80:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8004d84:	fa49 f503 	asr.w	r5, r9, r3
 8004d88:	fa05 f303 	lsl.w	r3, r5, r3
 8004d8c:	454b      	cmp	r3, r9
 8004d8e:	d123      	bne.n	8004dd8 <__ieee754_powf+0xc8>
 8004d90:	f005 0501 	and.w	r5, r5, #1
 8004d94:	f1c5 0502 	rsb	r5, r5, #2
 8004d98:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8004d9c:	d11f      	bne.n	8004dde <__ieee754_powf+0xce>
 8004d9e:	2c00      	cmp	r4, #0
 8004da0:	f280 8246 	bge.w	8005230 <__ieee754_powf+0x520>
 8004da4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004da8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004dac:	e7c8      	b.n	8004d40 <__ieee754_powf+0x30>
 8004dae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8004db2:	d111      	bne.n	8004dd8 <__ieee754_powf+0xc8>
 8004db4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8004db8:	f000 8234 	beq.w	8005224 <__ieee754_powf+0x514>
 8004dbc:	d906      	bls.n	8004dcc <__ieee754_powf+0xbc>
 8004dbe:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80050d4 <__ieee754_powf+0x3c4>
 8004dc2:	2c00      	cmp	r4, #0
 8004dc4:	bfa8      	it	ge
 8004dc6:	eeb0 0a68 	vmovge.f32	s0, s17
 8004dca:	e7b9      	b.n	8004d40 <__ieee754_powf+0x30>
 8004dcc:	2c00      	cmp	r4, #0
 8004dce:	f280 822c 	bge.w	800522a <__ieee754_powf+0x51a>
 8004dd2:	eeb1 0a68 	vneg.f32	s0, s17
 8004dd6:	e7b3      	b.n	8004d40 <__ieee754_powf+0x30>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	e7dd      	b.n	8004d98 <__ieee754_powf+0x88>
 8004ddc:	2500      	movs	r5, #0
 8004dde:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8004de2:	d102      	bne.n	8004dea <__ieee754_powf+0xda>
 8004de4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004de8:	e7aa      	b.n	8004d40 <__ieee754_powf+0x30>
 8004dea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8004dee:	f040 8227 	bne.w	8005240 <__ieee754_powf+0x530>
 8004df2:	2e00      	cmp	r6, #0
 8004df4:	f2c0 8224 	blt.w	8005240 <__ieee754_powf+0x530>
 8004df8:	eeb0 0a48 	vmov.f32	s0, s16
 8004dfc:	ecbd 8b02 	vpop	{d8}
 8004e00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	f7ff bf5c 	b.w	8004cc0 <__ieee754_sqrtf>
 8004e08:	2d01      	cmp	r5, #1
 8004e0a:	d199      	bne.n	8004d40 <__ieee754_powf+0x30>
 8004e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8004e10:	e796      	b.n	8004d40 <__ieee754_powf+0x30>
 8004e12:	0ff0      	lsrs	r0, r6, #31
 8004e14:	3801      	subs	r0, #1
 8004e16:	ea55 0300 	orrs.w	r3, r5, r0
 8004e1a:	d104      	bne.n	8004e26 <__ieee754_powf+0x116>
 8004e1c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004e20:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004e24:	e78c      	b.n	8004d40 <__ieee754_powf+0x30>
 8004e26:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8004e2a:	d96d      	bls.n	8004f08 <__ieee754_powf+0x1f8>
 8004e2c:	4baa      	ldr	r3, [pc, #680]	@ (80050d8 <__ieee754_powf+0x3c8>)
 8004e2e:	4598      	cmp	r8, r3
 8004e30:	d808      	bhi.n	8004e44 <__ieee754_powf+0x134>
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	da0b      	bge.n	8004e4e <__ieee754_powf+0x13e>
 8004e36:	2000      	movs	r0, #0
 8004e38:	ecbd 8b02 	vpop	{d8}
 8004e3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e40:	f7ff bf38 	b.w	8004cb4 <__math_oflowf>
 8004e44:	4ba5      	ldr	r3, [pc, #660]	@ (80050dc <__ieee754_powf+0x3cc>)
 8004e46:	4598      	cmp	r8, r3
 8004e48:	d908      	bls.n	8004e5c <__ieee754_powf+0x14c>
 8004e4a:	2c00      	cmp	r4, #0
 8004e4c:	dcf3      	bgt.n	8004e36 <__ieee754_powf+0x126>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	ecbd 8b02 	vpop	{d8}
 8004e54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e58:	f7ff bf26 	b.w	8004ca8 <__math_uflowf>
 8004e5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004e60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e64:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80050e0 <__ieee754_powf+0x3d0>
 8004e68:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8004e6c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8004e70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004e74:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004e78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004e7c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80050e4 <__ieee754_powf+0x3d4>
 8004e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e84:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80050e8 <__ieee754_powf+0x3d8>
 8004e88:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004e8c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80050ec <__ieee754_powf+0x3dc>
 8004e90:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004e94:	eeb0 7a67 	vmov.f32	s14, s15
 8004e98:	eea0 7a26 	vfma.f32	s14, s0, s13
 8004e9c:	ee17 3a10 	vmov	r3, s14
 8004ea0:	f36f 030b 	bfc	r3, #0, #12
 8004ea4:	ee07 3a10 	vmov	s14, r3
 8004ea8:	eeb0 6a47 	vmov.f32	s12, s14
 8004eac:	eea0 6a66 	vfms.f32	s12, s0, s13
 8004eb0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004eb4:	3d01      	subs	r5, #1
 8004eb6:	4305      	orrs	r5, r0
 8004eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ebc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8004ec0:	f36f 040b 	bfc	r4, #0, #12
 8004ec4:	bf18      	it	ne
 8004ec6:	eeb0 8a66 	vmovne.f32	s16, s13
 8004eca:	ee06 4a90 	vmov	s13, r4
 8004ece:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004ed2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8004ed6:	ee67 7a26 	vmul.f32	s15, s14, s13
 8004eda:	eee6 0a07 	vfma.f32	s1, s12, s14
 8004ede:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004ee2:	ee17 1a10 	vmov	r1, s14
 8004ee6:	2900      	cmp	r1, #0
 8004ee8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004eec:	f340 80dd 	ble.w	80050aa <__ieee754_powf+0x39a>
 8004ef0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8004ef4:	f240 80ca 	bls.w	800508c <__ieee754_powf+0x37c>
 8004ef8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	bf4c      	ite	mi
 8004f02:	2001      	movmi	r0, #1
 8004f04:	2000      	movpl	r0, #0
 8004f06:	e797      	b.n	8004e38 <__ieee754_powf+0x128>
 8004f08:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8004f0c:	bf01      	itttt	eq
 8004f0e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80050f0 <__ieee754_powf+0x3e0>
 8004f12:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004f16:	f06f 0317 	mvneq.w	r3, #23
 8004f1a:	ee17 7a90 	vmoveq	r7, s15
 8004f1e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8004f22:	bf18      	it	ne
 8004f24:	2300      	movne	r3, #0
 8004f26:	3a7f      	subs	r2, #127	@ 0x7f
 8004f28:	441a      	add	r2, r3
 8004f2a:	4b72      	ldr	r3, [pc, #456]	@ (80050f4 <__ieee754_powf+0x3e4>)
 8004f2c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8004f30:	429f      	cmp	r7, r3
 8004f32:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8004f36:	dd06      	ble.n	8004f46 <__ieee754_powf+0x236>
 8004f38:	4b6f      	ldr	r3, [pc, #444]	@ (80050f8 <__ieee754_powf+0x3e8>)
 8004f3a:	429f      	cmp	r7, r3
 8004f3c:	f340 80a4 	ble.w	8005088 <__ieee754_powf+0x378>
 8004f40:	3201      	adds	r2, #1
 8004f42:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8004f46:	2600      	movs	r6, #0
 8004f48:	4b6c      	ldr	r3, [pc, #432]	@ (80050fc <__ieee754_powf+0x3ec>)
 8004f4a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8004f4e:	ee07 1a10 	vmov	s14, r1
 8004f52:	edd3 5a00 	vldr	s11, [r3]
 8004f56:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <__ieee754_powf+0x3f0>)
 8004f58:	ee75 7a87 	vadd.f32	s15, s11, s14
 8004f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f60:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8004f64:	1049      	asrs	r1, r1, #1
 8004f66:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8004f6a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8004f6e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8004f72:	ee37 6a65 	vsub.f32	s12, s14, s11
 8004f76:	ee07 1a90 	vmov	s15, r1
 8004f7a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8004f7e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8004f82:	ee15 7a10 	vmov	r7, s10
 8004f86:	401f      	ands	r7, r3
 8004f88:	ee06 7a90 	vmov	s13, r7
 8004f8c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8004f90:	ee37 7a65 	vsub.f32	s14, s14, s11
 8004f94:	ee65 7a05 	vmul.f32	s15, s10, s10
 8004f98:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004f9c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005104 <__ieee754_powf+0x3f4>
 8004fa0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005108 <__ieee754_powf+0x3f8>
 8004fa4:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004fa8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800510c <__ieee754_powf+0x3fc>
 8004fac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004fb0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80050e0 <__ieee754_powf+0x3d0>
 8004fb4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004fb8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005110 <__ieee754_powf+0x400>
 8004fbc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004fc0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8005114 <__ieee754_powf+0x404>
 8004fc4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004fc8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004fcc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8004fd0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8004fd4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004fd8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8004fdc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8004fe0:	eef0 5a67 	vmov.f32	s11, s15
 8004fe4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8004fe8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004fec:	ee15 1a90 	vmov	r1, s11
 8004ff0:	4019      	ands	r1, r3
 8004ff2:	ee05 1a90 	vmov	s11, r1
 8004ff6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8004ffa:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8004ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005002:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005006:	eee6 7a25 	vfma.f32	s15, s12, s11
 800500a:	eeb0 6a67 	vmov.f32	s12, s15
 800500e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8005012:	ee16 1a10 	vmov	r1, s12
 8005016:	4019      	ands	r1, r3
 8005018:	ee06 1a10 	vmov	s12, r1
 800501c:	eeb0 7a46 	vmov.f32	s14, s12
 8005020:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8005024:	493c      	ldr	r1, [pc, #240]	@ (8005118 <__ieee754_powf+0x408>)
 8005026:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800502a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800502e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800511c <__ieee754_powf+0x40c>
 8005032:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8005120 <__ieee754_powf+0x410>
 8005036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800503a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005124 <__ieee754_powf+0x414>
 800503e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005042:	ed91 7a00 	vldr	s14, [r1]
 8005046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800504a:	ee07 2a10 	vmov	s14, r2
 800504e:	4a36      	ldr	r2, [pc, #216]	@ (8005128 <__ieee754_powf+0x418>)
 8005050:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005054:	eeb0 7a67 	vmov.f32	s14, s15
 8005058:	eea6 7a25 	vfma.f32	s14, s12, s11
 800505c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8005060:	ed92 5a00 	vldr	s10, [r2]
 8005064:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005068:	ee37 7a26 	vadd.f32	s14, s14, s13
 800506c:	ee17 2a10 	vmov	r2, s14
 8005070:	401a      	ands	r2, r3
 8005072:	ee07 2a10 	vmov	s14, r2
 8005076:	ee77 6a66 	vsub.f32	s13, s14, s13
 800507a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800507e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8005082:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005086:	e715      	b.n	8004eb4 <__ieee754_powf+0x1a4>
 8005088:	2601      	movs	r6, #1
 800508a:	e75d      	b.n	8004f48 <__ieee754_powf+0x238>
 800508c:	d152      	bne.n	8005134 <__ieee754_powf+0x424>
 800508e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800512c <__ieee754_powf+0x41c>
 8005092:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005096:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800509a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	f73f af29 	bgt.w	8004ef8 <__ieee754_powf+0x1e8>
 80050a6:	2386      	movs	r3, #134	@ 0x86
 80050a8:	e048      	b.n	800513c <__ieee754_powf+0x42c>
 80050aa:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <__ieee754_powf+0x420>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d907      	bls.n	80050c0 <__ieee754_powf+0x3b0>
 80050b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	bf4c      	ite	mi
 80050ba:	2001      	movmi	r0, #1
 80050bc:	2000      	movpl	r0, #0
 80050be:	e6c7      	b.n	8004e50 <__ieee754_powf+0x140>
 80050c0:	d138      	bne.n	8005134 <__ieee754_powf+0x424>
 80050c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050c6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80050ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ce:	dbea      	blt.n	80050a6 <__ieee754_powf+0x396>
 80050d0:	e7ee      	b.n	80050b0 <__ieee754_powf+0x3a0>
 80050d2:	bf00      	nop
 80050d4:	00000000 	.word	0x00000000
 80050d8:	3f7ffff3 	.word	0x3f7ffff3
 80050dc:	3f800007 	.word	0x3f800007
 80050e0:	3eaaaaab 	.word	0x3eaaaaab
 80050e4:	3fb8aa00 	.word	0x3fb8aa00
 80050e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80050ec:	36eca570 	.word	0x36eca570
 80050f0:	4b800000 	.word	0x4b800000
 80050f4:	001cc471 	.word	0x001cc471
 80050f8:	005db3d6 	.word	0x005db3d6
 80050fc:	08005400 	.word	0x08005400
 8005100:	fffff000 	.word	0xfffff000
 8005104:	3e6c3255 	.word	0x3e6c3255
 8005108:	3e53f142 	.word	0x3e53f142
 800510c:	3e8ba305 	.word	0x3e8ba305
 8005110:	3edb6db7 	.word	0x3edb6db7
 8005114:	3f19999a 	.word	0x3f19999a
 8005118:	080053f0 	.word	0x080053f0
 800511c:	3f76384f 	.word	0x3f76384f
 8005120:	3f763800 	.word	0x3f763800
 8005124:	369dc3a0 	.word	0x369dc3a0
 8005128:	080053f8 	.word	0x080053f8
 800512c:	3338aa3c 	.word	0x3338aa3c
 8005130:	43160000 	.word	0x43160000
 8005134:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005138:	d96f      	bls.n	800521a <__ieee754_powf+0x50a>
 800513a:	15db      	asrs	r3, r3, #23
 800513c:	3b7e      	subs	r3, #126	@ 0x7e
 800513e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005142:	4118      	asrs	r0, r3
 8005144:	4408      	add	r0, r1
 8005146:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800514a:	4a4e      	ldr	r2, [pc, #312]	@ (8005284 <__ieee754_powf+0x574>)
 800514c:	3b7f      	subs	r3, #127	@ 0x7f
 800514e:	411a      	asrs	r2, r3
 8005150:	4002      	ands	r2, r0
 8005152:	ee07 2a10 	vmov	s14, r2
 8005156:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800515a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800515e:	f1c3 0317 	rsb	r3, r3, #23
 8005162:	4118      	asrs	r0, r3
 8005164:	2900      	cmp	r1, #0
 8005166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800516a:	bfb8      	it	lt
 800516c:	4240      	neglt	r0, r0
 800516e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8005172:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005288 <__ieee754_powf+0x578>
 8005176:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800528c <__ieee754_powf+0x57c>
 800517a:	ee16 3a90 	vmov	r3, s13
 800517e:	f36f 030b 	bfc	r3, #0, #12
 8005182:	ee06 3a90 	vmov	s13, r3
 8005186:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800518a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800518e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005192:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8005290 <__ieee754_powf+0x580>
 8005196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800519a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800519e:	eeb0 7a67 	vmov.f32	s14, s15
 80051a2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80051a6:	eef0 5a47 	vmov.f32	s11, s14
 80051aa:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80051ae:	ee67 6a07 	vmul.f32	s13, s14, s14
 80051b2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80051b6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8005294 <__ieee754_powf+0x584>
 80051ba:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8005298 <__ieee754_powf+0x588>
 80051be:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80051c2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800529c <__ieee754_powf+0x58c>
 80051c6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80051ca:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80052a0 <__ieee754_powf+0x590>
 80051ce:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80051d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052a4 <__ieee754_powf+0x594>
 80051d6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80051da:	eeb0 6a47 	vmov.f32	s12, s14
 80051de:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80051e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80051e6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80051ea:	ee36 6a66 	vsub.f32	s12, s12, s13
 80051ee:	eee7 7a27 	vfma.f32	s15, s14, s15
 80051f2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80051f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80051fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005202:	ee10 3a10 	vmov	r3, s0
 8005206:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800520a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800520e:	da06      	bge.n	800521e <__ieee754_powf+0x50e>
 8005210:	f000 f854 	bl	80052bc <scalbnf>
 8005214:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005218:	e592      	b.n	8004d40 <__ieee754_powf+0x30>
 800521a:	2000      	movs	r0, #0
 800521c:	e7a7      	b.n	800516e <__ieee754_powf+0x45e>
 800521e:	ee00 3a10 	vmov	s0, r3
 8005222:	e7f7      	b.n	8005214 <__ieee754_powf+0x504>
 8005224:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005228:	e58a      	b.n	8004d40 <__ieee754_powf+0x30>
 800522a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80052a8 <__ieee754_powf+0x598>
 800522e:	e587      	b.n	8004d40 <__ieee754_powf+0x30>
 8005230:	eeb0 0a48 	vmov.f32	s0, s16
 8005234:	e584      	b.n	8004d40 <__ieee754_powf+0x30>
 8005236:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800523a:	f43f adbb 	beq.w	8004db4 <__ieee754_powf+0xa4>
 800523e:	2502      	movs	r5, #2
 8005240:	eeb0 0a48 	vmov.f32	s0, s16
 8005244:	f000 f832 	bl	80052ac <fabsf>
 8005248:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800524c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005250:	4647      	mov	r7, r8
 8005252:	d003      	beq.n	800525c <__ieee754_powf+0x54c>
 8005254:	f1b8 0f00 	cmp.w	r8, #0
 8005258:	f47f addb 	bne.w	8004e12 <__ieee754_powf+0x102>
 800525c:	2c00      	cmp	r4, #0
 800525e:	bfbc      	itt	lt
 8005260:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8005264:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005268:	2e00      	cmp	r6, #0
 800526a:	f6bf ad69 	bge.w	8004d40 <__ieee754_powf+0x30>
 800526e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005272:	ea58 0805 	orrs.w	r8, r8, r5
 8005276:	f47f adc7 	bne.w	8004e08 <__ieee754_powf+0xf8>
 800527a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800527e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005282:	e55d      	b.n	8004d40 <__ieee754_powf+0x30>
 8005284:	ff800000 	.word	0xff800000
 8005288:	3f317218 	.word	0x3f317218
 800528c:	3f317200 	.word	0x3f317200
 8005290:	35bfbe8c 	.word	0x35bfbe8c
 8005294:	b5ddea0e 	.word	0xb5ddea0e
 8005298:	3331bb4c 	.word	0x3331bb4c
 800529c:	388ab355 	.word	0x388ab355
 80052a0:	bb360b61 	.word	0xbb360b61
 80052a4:	3e2aaaab 	.word	0x3e2aaaab
 80052a8:	00000000 	.word	0x00000000

080052ac <fabsf>:
 80052ac:	ee10 3a10 	vmov	r3, s0
 80052b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052b4:	ee00 3a10 	vmov	s0, r3
 80052b8:	4770      	bx	lr
	...

080052bc <scalbnf>:
 80052bc:	ee10 3a10 	vmov	r3, s0
 80052c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80052c4:	d02b      	beq.n	800531e <scalbnf+0x62>
 80052c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80052ca:	d302      	bcc.n	80052d2 <scalbnf+0x16>
 80052cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80052d0:	4770      	bx	lr
 80052d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80052d6:	d123      	bne.n	8005320 <scalbnf+0x64>
 80052d8:	4b24      	ldr	r3, [pc, #144]	@ (800536c <scalbnf+0xb0>)
 80052da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005370 <scalbnf+0xb4>
 80052de:	4298      	cmp	r0, r3
 80052e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80052e4:	db17      	blt.n	8005316 <scalbnf+0x5a>
 80052e6:	ee10 3a10 	vmov	r3, s0
 80052ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80052ee:	3a19      	subs	r2, #25
 80052f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80052f4:	4288      	cmp	r0, r1
 80052f6:	dd15      	ble.n	8005324 <scalbnf+0x68>
 80052f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005374 <scalbnf+0xb8>
 80052fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005378 <scalbnf+0xbc>
 8005300:	ee10 3a10 	vmov	r3, s0
 8005304:	eeb0 7a67 	vmov.f32	s14, s15
 8005308:	2b00      	cmp	r3, #0
 800530a:	bfb8      	it	lt
 800530c:	eef0 7a66 	vmovlt.f32	s15, s13
 8005310:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005314:	4770      	bx	lr
 8005316:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800537c <scalbnf+0xc0>
 800531a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800531e:	4770      	bx	lr
 8005320:	0dd2      	lsrs	r2, r2, #23
 8005322:	e7e5      	b.n	80052f0 <scalbnf+0x34>
 8005324:	4410      	add	r0, r2
 8005326:	28fe      	cmp	r0, #254	@ 0xfe
 8005328:	dce6      	bgt.n	80052f8 <scalbnf+0x3c>
 800532a:	2800      	cmp	r0, #0
 800532c:	dd06      	ble.n	800533c <scalbnf+0x80>
 800532e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005332:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005336:	ee00 3a10 	vmov	s0, r3
 800533a:	4770      	bx	lr
 800533c:	f110 0f16 	cmn.w	r0, #22
 8005340:	da09      	bge.n	8005356 <scalbnf+0x9a>
 8005342:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800537c <scalbnf+0xc0>
 8005346:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005380 <scalbnf+0xc4>
 800534a:	ee10 3a10 	vmov	r3, s0
 800534e:	eeb0 7a67 	vmov.f32	s14, s15
 8005352:	2b00      	cmp	r3, #0
 8005354:	e7d9      	b.n	800530a <scalbnf+0x4e>
 8005356:	3019      	adds	r0, #25
 8005358:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800535c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005360:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005384 <scalbnf+0xc8>
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	e7d7      	b.n	800531a <scalbnf+0x5e>
 800536a:	bf00      	nop
 800536c:	ffff3cb0 	.word	0xffff3cb0
 8005370:	4c000000 	.word	0x4c000000
 8005374:	7149f2ca 	.word	0x7149f2ca
 8005378:	f149f2ca 	.word	0xf149f2ca
 800537c:	0da24260 	.word	0x0da24260
 8005380:	8da24260 	.word	0x8da24260
 8005384:	33000000 	.word	0x33000000

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
