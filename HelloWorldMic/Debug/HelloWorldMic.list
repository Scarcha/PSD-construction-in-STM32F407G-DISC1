
HelloWorldMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a214  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800a39c  0800a39c  0000b39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7dc  0800a7dc  0000c464  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a7dc  0800a7dc  0000b7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7e4  0800a7e4  0000c464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e4  0800a7e4  0000b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7e8  0800a7e8  0000b7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000464  20000000  0800a7ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c464  2**0
                  CONTENTS
 10 .bss          000008b4  20000464  20000464  0000c464  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d18  20000d18  0000c464  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c464  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131b2  00000000  00000000  0000c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003599  00000000  00000000  0001f646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00022be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8b  00000000  00000000  00023c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e16  00000000  00000000  000248c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017720  00000000  00000000  000476d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca926  00000000  00000000  0005edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0012971f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e0  00000000  00000000  001297e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0012ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000464 	.word	0x20000464
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a384 	.word	0x0800a384

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000468 	.word	0x20000468
 80001c4:	0800a384 	.word	0x0800a384

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_CRC_Init+0x20>)
 80004fa:	4a07      	ldr	r2, [pc, #28]	@ (8000518 <MX_CRC_Init+0x24>)
 80004fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_CRC_Init+0x20>)
 8000500:	f001 fb65 	bl	8001bce <HAL_CRC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050a:	f000 fc7d 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000480 	.word	0x20000480
 8000518:	40023000 	.word	0x40023000

0800051c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <HAL_CRC_MspInit+0x3c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <HAL_CRC_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023000 	.word	0x40023000
 800055c:	40023800 	.word	0x40023800

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_DMA_Init+0x5c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <MX_DMA_Init+0x5c>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_DMA_Init+0x5c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200e      	movs	r0, #14
 8000588:	f001 fadd 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800058c:	200e      	movs	r0, #14
 800058e:	f001 faf6 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f001 fad5 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f001 faee 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2011      	movs	r0, #17
 80005a8:	f001 facd 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f001 fae6 	bl	8001b7e <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a25      	ldr	r2, [pc, #148]	@ (8000690 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2110      	movs	r1, #16
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000668:	f002 f976 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RESET_Pin */
  GPIO_InitStruct.Pin = AUDIO_RESET_Pin;
 800066c:	2310      	movs	r3, #16
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RESET_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0xd4>)
 8000684:	f001 fed0 	bl	8002428 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020c00 	.word	0x40020c00

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f002 f959 	bl	800298c <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 fb92 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000488 	.word	0x20000488
 80006ec:	40005400 	.word	0x40005400
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <HAL_I2C_MspInit+0xa4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13c      	bne.n	8000790 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000732:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000744:	2304      	movs	r3, #4
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <HAL_I2C_MspInit+0xac>)
 8000750:	f001 fe6a 	bl	8002428 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 800075e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_I2C_MspInit+0xa8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	201f      	movs	r0, #31
 8000776:	f001 f9e6 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800077a:	201f      	movs	r0, #31
 800077c:	f001 f9ff 	bl	8001b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2020      	movs	r0, #32
 8000786:	f001 f9de 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800078a:	2020      	movs	r0, #32
 800078c:	f001 f9f7 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40005400 	.word	0x40005400
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400

080007a4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <HAL_I2C_MspDeInit+0x44>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d114      	bne.n	80007e0 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_I2C_MspDeInit+0x48>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <HAL_I2C_MspDeInit+0x48>)
 80007bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80007c2:	2140      	movs	r1, #64	@ 0x40
 80007c4:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <HAL_I2C_MspDeInit+0x4c>)
 80007c6:	f001 ffcb 	bl	8002760 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80007ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ce:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <HAL_I2C_MspDeInit+0x4c>)
 80007d0:	f001 ffc6 	bl	8002760 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80007d4:	201f      	movs	r0, #31
 80007d6:	f001 f9e0 	bl	8001b9a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80007da:	2020      	movs	r0, #32
 80007dc:	f001 f9dd 	bl	8001b9a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40005400 	.word	0x40005400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_I2S2_Init+0x54>)
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <MX_I2S2_Init+0x58>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000800:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000804:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2S2_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_I2S2_Init+0x54>)
 800081a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800081e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2S2_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_I2S2_Init+0x54>)
 8000834:	f004 faa4 	bl	8004d80 <HAL_I2S_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800083e:	f000 fae3 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200004dc 	.word	0x200004dc
 800084c:	40003800 	.word	0x40003800

08000850 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800087c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000892:	f004 fa75 	bl	8004d80 <HAL_I2S_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800089c:	f000 fab4 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000524 	.word	0x20000524
 80008a8:	40003c00 	.word	0x40003c00

080008ac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a8a      	ldr	r2, [pc, #552]	@ (8000af4 <HAL_I2S_MspInit+0x248>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f040 8084 	bne.w	80009d8 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
 80008d4:	4b88      	ldr	r3, [pc, #544]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a87      	ldr	r2, [pc, #540]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	4b85      	ldr	r3, [pc, #532]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	4b81      	ldr	r3, [pc, #516]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a80      	ldr	r2, [pc, #512]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fc:	4b7e      	ldr	r3, [pc, #504]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	4b7a      	ldr	r3, [pc, #488]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000910:	4a79      	ldr	r2, [pc, #484]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	6313      	str	r3, [r2, #48]	@ 0x30
 8000918:	4b77      	ldr	r3, [pc, #476]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000924:	2308      	movs	r3, #8
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000934:	2305      	movs	r3, #5
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	486f      	ldr	r0, [pc, #444]	@ (8000afc <HAL_I2S_MspInit+0x250>)
 8000940:	f001 fd72 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4867      	ldr	r0, [pc, #412]	@ (8000b00 <HAL_I2S_MspInit+0x254>)
 8000962:	f001 fd61 	bl	8002428 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000966:	4b67      	ldr	r3, [pc, #412]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000968:	4a67      	ldr	r2, [pc, #412]	@ (8000b08 <HAL_I2S_MspInit+0x25c>)
 800096a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800096c:	4b65      	ldr	r3, [pc, #404]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000972:	4b64      	ldr	r3, [pc, #400]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b62      	ldr	r3, [pc, #392]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b61      	ldr	r3, [pc, #388]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000984:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000986:	4b5f      	ldr	r3, [pc, #380]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800098c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800098e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000994:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000996:	4b5b      	ldr	r3, [pc, #364]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 8000998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800099c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a4:	4b57      	ldr	r3, [pc, #348]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80009aa:	4856      	ldr	r0, [pc, #344]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009ac:	f001 f92c 	bl	8001c08 <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 80009b6:	f000 fa27 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a51      	ldr	r2, [pc, #324]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009c0:	4a50      	ldr	r2, [pc, #320]	@ (8000b04 <HAL_I2S_MspInit+0x258>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2024      	movs	r0, #36	@ 0x24
 80009cc:	f001 f8bb 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009d0:	2024      	movs	r0, #36	@ 0x24
 80009d2:	f001 f8d4 	bl	8001b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009d6:	e088      	b.n	8000aea <HAL_I2S_MspInit+0x23e>
  else if(i2sHandle->Instance==SPI3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a4b      	ldr	r2, [pc, #300]	@ (8000b0c <HAL_I2S_MspInit+0x260>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	f040 8083 	bne.w	8000aea <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a42      	ldr	r2, [pc, #264]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a3b      	ldr	r2, [pc, #236]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a10:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	4a34      	ldr	r2, [pc, #208]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <HAL_I2S_MspInit+0x24c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	482f      	ldr	r0, [pc, #188]	@ (8000b10 <HAL_I2S_MspInit+0x264>)
 8000a54:	f001 fce8 	bl	8002428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000a58:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <HAL_I2S_MspInit+0x250>)
 8000a76:	f001 fcd7 	bl	8002428 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a7c:	4a26      	ldr	r2, [pc, #152]	@ (8000b18 <HAL_I2S_MspInit+0x26c>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a88:	2240      	movs	r2, #64	@ 0x40
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000abe:	4815      	ldr	r0, [pc, #84]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ac0:	f001 f8a2 	bl	8001c08 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_I2S_MspInit+0x222>
      Error_Handler();
 8000aca:	f000 f99d 	bl	8000e08 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <HAL_I2S_MspInit+0x268>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2033      	movs	r0, #51	@ 0x33
 8000ae0:	f001 f831 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ae4:	2033      	movs	r0, #51	@ 0x33
 8000ae6:	f001 f84a 	bl	8001b7e <HAL_NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3738      	adds	r7, #56	@ 0x38
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40003800 	.word	0x40003800
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	2000056c 	.word	0x2000056c
 8000b08:	40026058 	.word	0x40026058
 8000b0c:	40003c00 	.word	0x40003c00
 8000b10:	40020000 	.word	0x40020000
 8000b14:	200005cc 	.word	0x200005cc
 8000b18:	40026088 	.word	0x40026088

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fe7c 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f84e 	bl	8000bc4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b28:	f000 f8b6 	bl	8000c98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f7ff fd48 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b30:	f7ff fd16 	bl	8000560 <MX_DMA_Init>
  MX_CRC_Init();
 8000b34:	f7ff fcde 	bl	80004f4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000b38:	f006 fc34 	bl	80073a4 <MX_PDM2PCM_Init>
  MX_I2S2_Init();
 8000b3c:	f7ff fe5a 	bl	80007f4 <MX_I2S2_Init>
  MX_I2C1_Init();
 8000b40:	f7ff fdaa 	bl	8000698 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b44:	f7ff fe84 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b48:	f000 f964 	bl	8000e14 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b4c:	f000 fa9c 	bl	8001088 <MX_USART2_UART_Init>
    }
    cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 70);
   */
  // --- Inicializar el Códec CS43L22 ---
  // AUDIO_IO_Init(); // El driver cs43l22_Init ya llama a AUDIO_IO_Init y hace el reset HW
  if(cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 70, OUTPUT_SAMPLE_RATE) != 0) {
 8000b50:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8000b54:	2246      	movs	r2, #70	@ 0x46
 8000b56:	2102      	movs	r1, #2
 8000b58:	2094      	movs	r0, #148	@ 0x94
 8000b5a:	f000 fb6b 	bl	8001234 <cs43l22_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <main+0x4c>
      // El último argumento es la Fs que el codec debe esperar
      Error_Handler();
 8000b64:	f000 f950 	bl	8000e08 <Error_Handler>
  }

  // Ajustar volumen (opcional, empieza bajo/medio)
  cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 50); // Volumen entre 0 y 100
 8000b68:	2132      	movs	r1, #50	@ 0x32
 8000b6a:	2094      	movs	r0, #148	@ 0x94
 8000b6c:	f000 fc80 	bl	8001470 <cs43l22_SetVolume>

  // --- Llenar el buffer inicialmente (opcional, ej: con silencio o medio ciclo) ---
  // Podríamos pre-llenar las dos mitades para empezar sin glitches
   Fill_Sine_Buffer(&PlayBuffer[0], PLAY_BUFFER_HALF_SAMPLES);
 8000b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b74:	4810      	ldr	r0, [pc, #64]	@ (8000bb8 <main+0x9c>)
 8000b76:	f000 f8ad 	bl	8000cd4 <Fill_Sine_Buffer>
   Fill_Sine_Buffer(&PlayBuffer[PLAY_BUFFER_HALF_SAMPLES], PLAY_BUFFER_HALF_SAMPLES);
 8000b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b7e:	480f      	ldr	r0, [pc, #60]	@ (8000bbc <main+0xa0>)
 8000b80:	f000 f8a8 	bl	8000cd4 <Fill_Sine_Buffer>
  // O simplemente empezar con silencio:
  // memset(PlayBuffer, 0, DMA_BUFFER_SIZE_HWORDS * sizeof(int16_t));

  // --- Iniciar Codec Playback (enciende DAC, etc.) ---
   if(cs43l22_Play(AUDIO_I2C_ADDRESS, NULL, 0) != 0) {
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2094      	movs	r0, #148	@ 0x94
 8000b8a:	f000 fc37 	bl	80013fc <cs43l22_Play>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <main+0x7c>
       Error_Handler();
 8000b94:	f000 f938 	bl	8000e08 <Error_Handler>
   }

  // --- Iniciar Transmisión DMA I2S3 ---
  // La HAL espera un puntero uint16_t*, hacemos cast aunque nuestros datos son int16_t.
  // La transmisión es de bits, el signo lo interpreta el receptor (Codec).
  if(HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)PlayBuffer, DMA_BUFFER_SIZE_HWORDS) != HAL_OK) {
 8000b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b9c:	4906      	ldr	r1, [pc, #24]	@ (8000bb8 <main+0x9c>)
 8000b9e:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <main+0xa4>)
 8000ba0:	f004 fa2e 	bl	8005000 <HAL_I2S_Transmit_DMA>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <main+0x92>
      Error_Handler();
 8000baa:	f000 f92d 	bl	8000e08 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	/* El bucle principal no hace nada relacionado con el audio, todo es por DMA/interrupciones */
	HAL_Delay(500);
 8000bae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb2:	f000 fea5 	bl	8001900 <HAL_Delay>
 8000bb6:	e7fa      	b.n	8000bae <main+0x92>
 8000bb8:	2000062c 	.word	0x2000062c
 8000bbc:	2000082c 	.word	0x2000082c
 8000bc0:	20000524 	.word	0x20000524

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	@ 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 faf6 	bl	80091c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <SystemClock_Config+0xcc>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf8:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <SystemClock_Config+0xcc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <SystemClock_Config+0xd0>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <SystemClock_Config+0xd0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c42:	2307      	movs	r3, #7
 8000c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f004 fe28 	bl	80058a0 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c56:	f000 f8d7 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2105      	movs	r1, #5
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f005 f889 	bl	8005d90 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c84:	f000 f8c0 	bl	8000e08 <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3750      	adds	r7, #80	@ 0x50
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000caa:	2301      	movs	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 8000cae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cb2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 fa88 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000cc6:	f000 f89f 	bl	8000e08 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <Fill_Sine_Buffer>:

/* USER CODE BEGIN 4 */
void Fill_Sine_Buffer(int16_t *pBuffer, uint32_t num_samples) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < num_samples; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e04a      	b.n	8000d7a <Fill_Sine_Buffer+0xa6>
        // Calcular valor seno y escalar a int16_t
        pBuffer[i] = (int16_t)(SINE_AMPLITUDE * sinf(sine_phase_rad)); // sinf es para floats
 8000ce4:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	eeb0 0a67 	vmov.f32	s0, s15
 8000cee:	f008 faf3 	bl	80092d8 <sinf>
 8000cf2:	eef0 7a40 	vmov.f32	s15, s0
 8000cf6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000d90 <Fill_Sine_Buffer+0xbc>
 8000cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d0a:	ee17 2a90 	vmov	r2, s15
 8000d0e:	b212      	sxth	r2, r2
 8000d10:	801a      	strh	r2, [r3, #0]

        // Incrementar fase para la próxima muestra
        sine_phase_rad += phase_step_rad;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000d94 <Fill_Sine_Buffer+0xc0>
 8000d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d22:	edc3 7a00 	vstr	s15, [r3]

        // Mantener la fase dentro de 0 a 2*PI para evitar que crezca indefinidamente (opcional pero bueno)
        if (sine_phase_rad >= (2.0f * M_PI)) {
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000d98 <Fill_Sine_Buffer+0xc4>
 8000d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	db0a      	blt.n	8000d50 <Fill_Sine_Buffer+0x7c>
            sine_phase_rad -= (2.0f * M_PI);
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d3c:	edd3 7a00 	vldr	s15, [r3]
 8000d40:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000d98 <Fill_Sine_Buffer+0xc4>
 8000d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
 8000d4e:	e011      	b.n	8000d74 <Fill_Sine_Buffer+0xa0>
        } else if (sine_phase_rad < 0.0f) { // Por si acaso phase_step fuera negativo
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5e:	d509      	bpl.n	8000d74 <Fill_Sine_Buffer+0xa0>
             sine_phase_rad += (2.0f * M_PI);
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000d98 <Fill_Sine_Buffer+0xc4>
 8000d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <Fill_Sine_Buffer+0xb8>)
 8000d70:	edc3 7a00 	vstr	s15, [r3]
    for(uint32_t i = 0; i < num_samples; i++) {
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3b0      	bcc.n	8000ce4 <Fill_Sine_Buffer+0x10>
        }
    }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000a2c 	.word	0x20000a2c
 8000d90:	466a6000 	.word	0x466a6000
 8000d94:	3e30d845 	.word	0x3e30d845
 8000d98:	40c8f5c3 	.word	0x40c8f5c3

08000d9c <HAL_I2S_TxHalfCpltCallback>:
    ProcessNewPcmData();
  }
}
*/
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d104      	bne.n	8000db8 <HAL_I2S_TxHalfCpltCallback+0x1c>
      } else {
          memset(&PlayBuffer[0], 0, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));

      }
      */
      Fill_Sine_Buffer(&PlayBuffer[0], PLAY_BUFFER_HALF_SAMPLES);
 8000dae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000db4:	f7ff ff8e 	bl	8000cd4 <Fill_Sine_Buffer>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40003c00 	.word	0x40003c00
 8000dc4:	2000062c 	.word	0x2000062c

08000dc8 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == SPI3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <HAL_I2S_TxCpltCallback+0x24>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d104      	bne.n	8000de4 <HAL_I2S_TxCpltCallback+0x1c>
      } else {

          memset(&PlayBuffer[PLAY_BUFFER_SIZE_SAMPLES], 0, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));
      }
      */
      Fill_Sine_Buffer(&PlayBuffer[PLAY_BUFFER_HALF_SAMPLES], PLAY_BUFFER_HALF_SAMPLES);  }
 8000dda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dde:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <HAL_I2S_TxCpltCallback+0x28>)
 8000de0:	f7ff ff78 	bl	8000cd4 <Fill_Sine_Buffer>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	2000082c 	.word	0x2000082c

08000df4 <HAL_I2S_ErrorCallback>:


void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3) {
    // Error en transmisión PCM
	  //a = -2;
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e1a:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <MX_SPI1_Init+0x6c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e62:	220a      	movs	r2, #10
 8000e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_SPI1_Init+0x68>)
 8000e68:	f005 faf4 	bl	8006454 <HAL_SPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e72:	f7ff ffc9 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000a30 	.word	0x20000a30
 8000e80:	40013000 	.word	0x40013000

08000e84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_SPI_MspInit+0x84>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d12b      	bne.n	8000efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ede:	2360      	movs	r3, #96	@ 0x60
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000efa:	f001 fa95 	bl	8002428 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40013000 	.word	0x40013000
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f52:	2007      	movs	r0, #7
 8000f54:	f000 fdec 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 fc81 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA1_Stream3_IRQHandler+0x10>)
 8000fca:	f000 ffb5 	bl	8001f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000056c 	.word	0x2000056c

08000fd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fde:	f000 ffab 	bl	8001f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200005cc 	.word	0x200005cc

08000fec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <DMA1_Stream6_IRQHandler+0x10>)
 8000ff2:	f000 ffa1 	bl	8001f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000ad0 	.word	0x20000ad0

08001000 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <I2C1_EV_IRQHandler+0x10>)
 8001006:	f001 ff43 	bl	8002e90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000488 	.word	0x20000488

08001014 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <I2C1_ER_IRQHandler+0x10>)
 800101a:	f002 f8aa 	bl	8003172 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000488 	.word	0x20000488

08001028 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <SPI2_IRQHandler+0x10>)
 800102e:	f004 f88b 	bl	8005148 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200004dc 	.word	0x200004dc

0800103c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <USART2_IRQHandler+0x10>)
 8001042:	f005 fae1 	bl	8006608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000a88 	.word	0x20000a88

08001050 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <SPI3_IRQHandler+0x10>)
 8001056:	f004 f877 	bl	8005148 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000524 	.word	0x20000524

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f005 fa51 	bl	8006566 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f7ff fe9d 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000a88 	.word	0x20000a88
 80010d8:	40004400 	.word	0x40004400

080010dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <HAL_UART_MspInit+0xf0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d161      	bne.n	80011c2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <HAL_UART_MspInit+0xf4>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a32      	ldr	r2, [pc, #200]	@ (80011d0 <HAL_UART_MspInit+0xf4>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b30      	ldr	r3, [pc, #192]	@ (80011d0 <HAL_UART_MspInit+0xf4>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <HAL_UART_MspInit+0xf4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a2b      	ldr	r2, [pc, #172]	@ (80011d0 <HAL_UART_MspInit+0xf4>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b29      	ldr	r3, [pc, #164]	@ (80011d0 <HAL_UART_MspInit+0xf4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001136:	230c      	movs	r3, #12
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001146:	2307      	movs	r3, #7
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4820      	ldr	r0, [pc, #128]	@ (80011d4 <HAL_UART_MspInit+0xf8>)
 8001152:	f001 f969 	bl	8002428 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001158:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <HAL_UART_MspInit+0x100>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001162:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001166:	2240      	movs	r2, #64	@ 0x40
 8001168:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001176:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001196:	4810      	ldr	r0, [pc, #64]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 8001198:	f000 fd36 	bl	8001c08 <HAL_DMA_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80011a2:	f7ff fe31 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 80011aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_UART_MspInit+0xfc>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2026      	movs	r0, #38	@ 0x26
 80011b8:	f000 fcc5 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011bc:	2026      	movs	r0, #38	@ 0x26
 80011be:	f000 fcde 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	@ 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000ad0 	.word	0x20000ad0
 80011dc:	400260a0 	.word	0x400260a0

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001218 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011e4:	f7ff ff3e 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	@ (8001220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	@ (800122c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f007 ffe7 	bl	80091e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fc83 	bl	8000b1c <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000464 	.word	0x20000464
  ldr r2, =_sidata
 8001224:	0800a7ec 	.word	0x0800a7ec
  ldr r2, =_sbss
 8001228:	20000464 	.word	0x20000464
  ldr r4, =_ebss
 800122c:	20000d18 	.word	0x20000d18

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4603      	mov	r3, r0
 800123e:	81fb      	strh	r3, [r7, #14]
 8001240:	460b      	mov	r3, r1
 8001242:	81bb      	strh	r3, [r7, #12]
 8001244:	4613      	mov	r3, r2
 8001246:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 800124c:	f000 fa9a 	bl	8001784 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001250:	89fb      	ldrh	r3, [r7, #14]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2201      	movs	r2, #1
 8001256:	2102      	movs	r1, #2
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f9c5 	bl	80015e8 <CODEC_IO_Write>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4413      	add	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	3b01      	subs	r3, #1
 800126c:	2b03      	cmp	r3, #3
 800126e:	d81b      	bhi.n	80012a8 <cs43l22_Init+0x74>
 8001270:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <cs43l22_Init+0x44>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001289 	.word	0x08001289
 800127c:	08001291 	.word	0x08001291
 8001280:	08001299 	.word	0x08001299
 8001284:	080012a1 	.word	0x080012a1
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001288:	4b5b      	ldr	r3, [pc, #364]	@ (80013f8 <cs43l22_Init+0x1c4>)
 800128a:	22fa      	movs	r2, #250	@ 0xfa
 800128c:	701a      	strb	r2, [r3, #0]
    break;
 800128e:	e00f      	b.n	80012b0 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001290:	4b59      	ldr	r3, [pc, #356]	@ (80013f8 <cs43l22_Init+0x1c4>)
 8001292:	22af      	movs	r2, #175	@ 0xaf
 8001294:	701a      	strb	r2, [r3, #0]
    break;
 8001296:	e00b      	b.n	80012b0 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001298:	4b57      	ldr	r3, [pc, #348]	@ (80013f8 <cs43l22_Init+0x1c4>)
 800129a:	22aa      	movs	r2, #170	@ 0xaa
 800129c:	701a      	strb	r2, [r3, #0]
    break;
 800129e:	e007      	b.n	80012b0 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80012a0:	4b55      	ldr	r3, [pc, #340]	@ (80013f8 <cs43l22_Init+0x1c4>)
 80012a2:	2205      	movs	r2, #5
 80012a4:	701a      	strb	r2, [r3, #0]
    break;    
 80012a6:	e003      	b.n	80012b0 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 80012a8:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <cs43l22_Init+0x1c4>)
 80012aa:	2205      	movs	r2, #5
 80012ac:	701a      	strb	r2, [r3, #0]
    break;    
 80012ae:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4a50      	ldr	r2, [pc, #320]	@ (80013f8 <cs43l22_Init+0x1c4>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	2104      	movs	r1, #4
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f993 	bl	80015e8 <CODEC_IO_Write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2281      	movs	r2, #129	@ 0x81
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f987 	bl	80015e8 <CODEC_IO_Write>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	4413      	add	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2204      	movs	r2, #4
 80012ea:	2106      	movs	r1, #6
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f97b 	bl	80015e8 <CODEC_IO_Write>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4413      	add	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80012fc:	7afa      	ldrb	r2, [r7, #11]
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f8b4 	bl	8001470 <cs43l22_SetVolume>
 8001308:	4602      	mov	r2, r0
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001310:	89bb      	ldrh	r3, [r7, #12]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d023      	beq.n	800135e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2206      	movs	r2, #6
 800131c:	210f      	movs	r1, #15
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f962 	bl	80015e8 <CODEC_IO_Write>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800132e:	89fb      	ldrh	r3, [r7, #14]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2200      	movs	r2, #0
 8001334:	2124      	movs	r1, #36	@ 0x24
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f956 	bl	80015e8 <CODEC_IO_Write>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2200      	movs	r2, #0
 800134c:	2125      	movs	r1, #37	@ 0x25
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f94a 	bl	80015e8 <CODEC_IO_Write>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	210a      	movs	r1, #10
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f93e 	bl	80015e8 <CODEC_IO_Write>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4413      	add	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2204      	movs	r2, #4
 800137c:	210e      	movs	r1, #14
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f932 	bl	80015e8 <CODEC_IO_Write>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2200      	movs	r2, #0
 8001394:	2127      	movs	r1, #39	@ 0x27
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f926 	bl	80015e8 <CODEC_IO_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	220f      	movs	r2, #15
 80013ac:	211f      	movs	r1, #31
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f91a 	bl	80015e8 <CODEC_IO_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4413      	add	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	220a      	movs	r2, #10
 80013c4:	211a      	movs	r1, #26
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f90e 	bl	80015e8 <CODEC_IO_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4413      	add	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	220a      	movs	r2, #10
 80013dc:	211b      	movs	r1, #27
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f902 	bl	80015e8 <CODEC_IO_Write>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80013ee:	697b      	ldr	r3, [r7, #20]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000b30 	.word	0x20000b30

080013fc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	80fb      	strh	r3, [r7, #6]
 8001408:	4613      	mov	r3, r2
 800140a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <cs43l22_Play+0x70>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d123      	bne.n	8001460 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2206      	movs	r2, #6
 800141e:	210e      	movs	r1, #14
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f8e1 	bl	80015e8 <CODEC_IO_Write>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f879 	bl	800152c <cs43l22_SetMute>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	229e      	movs	r2, #158	@ 0x9e
 8001448:	2102      	movs	r1, #2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f8cc 	bl	80015e8 <CODEC_IO_Write>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800145a:	4b04      	ldr	r3, [pc, #16]	@ (800146c <cs43l22_Play+0x70>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001460:	68fb      	ldr	r3, [r7, #12]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000004 	.word	0x20000004

08001470 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	4613      	mov	r3, r2
 800147e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001484:	797b      	ldrb	r3, [r7, #5]
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d80b      	bhi.n	80014a2 <cs43l22_SetVolume+0x32>
 800148a:	797a      	ldrb	r2, [r7, #5]
 800148c:	4613      	mov	r3, r2
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	4a25      	ldr	r2, [pc, #148]	@ (8001528 <cs43l22_SetVolume+0xb8>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	1152      	asrs	r2, r2, #5
 800149a:	17db      	asrs	r3, r3, #31
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	e000      	b.n	80014a4 <cs43l22_SetVolume+0x34>
 80014a2:	23ff      	movs	r3, #255	@ 0xff
 80014a4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	2be6      	cmp	r3, #230	@ 0xe6
 80014aa:	d91c      	bls.n	80014e6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2d8      	uxtb	r0, r3
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	3319      	adds	r3, #25
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	2120      	movs	r1, #32
 80014ba:	f000 f895 	bl	80015e8 <CODEC_IO_Write>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	b2d8      	uxtb	r0, r3
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	3319      	adds	r3, #25
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	2121      	movs	r1, #33	@ 0x21
 80014d6:	f000 f887 	bl	80015e8 <CODEC_IO_Write>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e01b      	b.n	800151e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	b2d8      	uxtb	r0, r3
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	3319      	adds	r3, #25
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	2120      	movs	r1, #32
 80014f4:	f000 f878 	bl	80015e8 <CODEC_IO_Write>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	b2d8      	uxtb	r0, r3
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	3319      	adds	r3, #25
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	2121      	movs	r1, #33	@ 0x21
 8001510:	f000 f86a 	bl	80015e8 <CODEC_IO_Write>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	51eb851f 	.word	0x51eb851f

0800152c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d124      	bne.n	800158c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	22ff      	movs	r2, #255	@ 0xff
 8001548:	2104      	movs	r1, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f84c 	bl	80015e8 <CODEC_IO_Write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2201      	movs	r2, #1
 8001560:	2122      	movs	r1, #34	@ 0x22
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f840 	bl	80015e8 <CODEC_IO_Write>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2201      	movs	r2, #1
 8001578:	2123      	movs	r1, #35	@ 0x23
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f834 	bl	80015e8 <CODEC_IO_Write>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e025      	b.n	80015d8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2200      	movs	r2, #0
 8001592:	2122      	movs	r1, #34	@ 0x22
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f827 	bl	80015e8 <CODEC_IO_Write>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2200      	movs	r2, #0
 80015aa:	2123      	movs	r1, #35	@ 0x23
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f81b 	bl	80015e8 <CODEC_IO_Write>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <cs43l22_SetMute+0xb8>)
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	2104      	movs	r1, #4
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f80d 	bl	80015e8 <CODEC_IO_Write>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80015d8:	68fb      	ldr	r3, [r7, #12]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000b30 	.word	0x20000b30

080015e8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	460b      	mov	r3, r1
 80015f4:	71bb      	strb	r3, [r7, #6]
 80015f6:	4613      	mov	r3, r2
 80015f8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80015fe:	797a      	ldrb	r2, [r7, #5]
 8001600:	79b9      	ldrb	r1, [r7, #6]
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f8f5 	bl	80017f4 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	b2db      	uxtb	r3, r3
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800161c:	480e      	ldr	r0, [pc, #56]	@ (8001658 <I2Cx_Init+0x40>)
 800161e:	f001 feb7 	bl	8003390 <HAL_I2C_GetState>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d114      	bne.n	8001652 <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <I2Cx_Init+0x40>)
 800162a:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <I2Cx_Init+0x44>)
 800162c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <I2Cx_Init+0x40>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <I2Cx_Init+0x40>)
 8001636:	2233      	movs	r2, #51	@ 0x33
 8001638:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <I2Cx_Init+0x40>)
 800163c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001640:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <I2Cx_Init+0x40>)
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <I2Cx_Init+0x48>)
 8001646:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001648:	f000 f848 	bl	80016dc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <I2Cx_Init+0x40>)
 800164e:	f001 f99d 	bl	800298c <HAL_I2C_Init>
  }
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000b34 	.word	0x20000b34
 800165c:	000186a0 	.word	0x000186a0
 8001660:	40005400 	.word	0x40005400

08001664 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af04      	add	r7, sp, #16
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	460b      	mov	r3, r1
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	4613      	mov	r3, r2
 8001674:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	b299      	uxth	r1, r3
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <I2Cx_WriteData+0x50>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2301      	movs	r3, #1
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1d7b      	adds	r3, r7, #5
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	4809      	ldr	r0, [pc, #36]	@ (80016b8 <I2Cx_WriteData+0x54>)
 8001694:	f001 fb02 	bl	8002c9c <HAL_I2C_Mem_Write>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f809 	bl	80016bc <I2Cx_Error>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000b34 	.word	0x20000b34

080016bc <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 80016c6:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <I2Cx_Error+0x1c>)
 80016c8:	f001 faa4 	bl	8002c14 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 80016cc:	f7ff ffa4 	bl	8001618 <I2Cx_Init>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000b34 	.word	0x20000b34

080016dc <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <I2Cx_MspInit+0xa0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a24      	ldr	r2, [pc, #144]	@ (800177c <I2Cx_MspInit+0xa0>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b22      	ldr	r3, [pc, #136]	@ (800177c <I2Cx_MspInit+0xa0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 80016fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001704:	2312      	movs	r3, #18
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001710:	2304      	movs	r3, #4
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4819      	ldr	r0, [pc, #100]	@ (8001780 <I2Cx_MspInit+0xa4>)
 800171c:	f000 fe84 	bl	8002428 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <I2Cx_MspInit+0xa0>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	4a14      	ldr	r2, [pc, #80]	@ (800177c <I2Cx_MspInit+0xa0>)
 800172a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800172e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <I2Cx_MspInit+0xa0>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <I2Cx_MspInit+0xa0>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <I2Cx_MspInit+0xa0>)
 8001742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001746:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <I2Cx_MspInit+0xa0>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <I2Cx_MspInit+0xa0>)
 800174e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001752:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	201f      	movs	r0, #31
 800175a:	f000 f9f4 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800175e:	201f      	movs	r0, #31
 8001760:	f000 fa0d 	bl	8001b7e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2020      	movs	r0, #32
 800176a:	f000 f9ec 	bl	8001b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 800176e:	2020      	movs	r0, #32
 8001770:	f000 fa05 	bl	8001b7e <HAL_NVIC_EnableIRQ>
}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <AUDIO_IO_Init+0x68>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a16      	ldr	r2, [pc, #88]	@ (80017ec <AUDIO_IO_Init+0x68>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <AUDIO_IO_Init+0x68>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 80017a6:	2310      	movs	r3, #16
 80017a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017ae:	2302      	movs	r3, #2
 80017b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <AUDIO_IO_Init+0x6c>)
 80017bc:	f000 fe34 	bl	8002428 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80017c0:	f7ff ff2a 	bl	8001618 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2110      	movs	r1, #16
 80017c8:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <AUDIO_IO_Init+0x6c>)
 80017ca:	f001 f8c5 	bl	8002958 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80017ce:	2005      	movs	r0, #5
 80017d0:	f000 f896 	bl	8001900 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2110      	movs	r1, #16
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <AUDIO_IO_Init+0x6c>)
 80017da:	f001 f8bd 	bl	8002958 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80017de:	2005      	movs	r0, #5
 80017e0:	f000 f88e 	bl	8001900 <HAL_Delay>
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020c00 	.word	0x40020c00

080017f4 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	460b      	mov	r3, r1
 8001800:	71bb      	strb	r3, [r7, #6]
 8001802:	4613      	mov	r3, r2
 8001804:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001806:	797a      	ldrb	r2, [r7, #5]
 8001808:	79b9      	ldrb	r1, [r7, #6]
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff29 	bl	8001664 <I2Cx_WriteData>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f973 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fb60 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f999 	bl	8001bb6 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f953 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	@ (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000010 	.word	0x20000010
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	@ (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000b88 	.word	0x20000b88

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000b88 	.word	0x20000b88

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000010 	.word	0x20000010

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	@ (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db12      	blt.n	8001a20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	490a      	ldr	r1, [pc, #40]	@ (8001a2c <__NVIC_DisableIRQ+0x44>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	3320      	adds	r3, #32
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a14:	f3bf 8f4f 	dsb	sy
}
 8001a18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a1a:	f3bf 8f6f 	isb	sy
}
 8001a1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff05 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff1a 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff0d 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff1d 	bl	80019e8 <__NVIC_DisableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff94 	bl	8001aec <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e00e      	b.n	8001bfe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	795b      	ldrb	r3, [r3, #5]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fc93 	bl	800051c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff fe68 	bl	80018e8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e099      	b.n	8001d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c44:	e00f      	b.n	8001c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c46:	f7ff fe4f 	bl	80018e8 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d908      	bls.n	8001c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e078      	b.n	8001d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e8      	bne.n	8001c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_DMA_Init+0x158>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f023 0307 	bic.w	r3, r3, #7
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d117      	bne.n	8001d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00e      	beq.n	8001d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fb0f 	bl	8002330 <DMA_CheckFifoParam>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d26:	2301      	movs	r3, #1
 8001d28:	e016      	b.n	8001d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fac6 	bl	80022c4 <DMA_CalcBaseAndBitshift>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	223f      	movs	r2, #63	@ 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	f010803f 	.word	0xf010803f

08001d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_Start_IT+0x26>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e040      	b.n	8001e0c <HAL_DMA_Start_IT+0xa8>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d12f      	bne.n	8001dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fa58 	bl	8002268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	223f      	movs	r2, #63	@ 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0216 	orr.w	r2, r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0208 	orr.w	r2, r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e005      	b.n	8001e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e22:	f7ff fd61 	bl	80018e8 <HAL_GetTick>
 8001e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d008      	beq.n	8001e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2280      	movs	r2, #128	@ 0x80
 8001e38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e052      	b.n	8001eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0216 	bic.w	r2, r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_DMA_Abort+0x62>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e96:	e013      	b.n	8001ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e98:	f7ff fd26 	bl	80018e8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d90c      	bls.n	8001ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e015      	b.n	8001eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1e4      	bne.n	8001e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed2:	223f      	movs	r2, #63	@ 0x3f
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00c      	b.n	8001f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2205      	movs	r2, #5
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f44:	4b8e      	ldr	r3, [pc, #568]	@ (8002180 <HAL_DMA_IRQHandler+0x248>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a8e      	ldr	r2, [pc, #568]	@ (8002184 <HAL_DMA_IRQHandler+0x24c>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	2208      	movs	r2, #8
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01a      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0204 	bic.w	r2, r2, #4
 8001f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	2208      	movs	r2, #8
 8001f92:	409a      	lsls	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	2201      	movs	r2, #1
 8001faa:	409a      	lsls	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd2:	f043 0202 	orr.w	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	2204      	movs	r2, #4
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	409a      	lsls	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	2210      	movs	r2, #16
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d043      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03c      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	2210      	movs	r2, #16
 8002034:	409a      	lsls	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d018      	beq.n	800207a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d024      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
 8002066:	e01f      	b.n	80020a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
 8002078:	e016      	b.n	80020a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d107      	bne.n	8002098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0208 	bic.w	r2, r2, #8
 8002096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	2220      	movs	r2, #32
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 808f 	beq.w	80021d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8087 	beq.w	80021d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	2220      	movs	r2, #32
 80020d0:	409a      	lsls	r2, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d136      	bne.n	8002150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0216 	bic.w	r2, r2, #22
 80020f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <HAL_DMA_IRQHandler+0x1da>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0208 	bic.w	r2, r2, #8
 8002120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002126:	223f      	movs	r2, #63	@ 0x3f
 8002128:	409a      	lsls	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002142:	2b00      	cmp	r3, #0
 8002144:	d07e      	beq.n	8002244 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
        }
        return;
 800214e:	e079      	b.n	8002244 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01d      	beq.n	800219a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10d      	bne.n	8002188 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	2b00      	cmp	r3, #0
 8002172:	d031      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e02c      	b.n	80021d8 <HAL_DMA_IRQHandler+0x2a0>
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000
 8002184:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e01e      	b.n	80021d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0210 	bic.w	r2, r2, #16
 80021b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d032      	beq.n	8002246 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d022      	beq.n	8002232 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2205      	movs	r2, #5
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3301      	adds	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	d307      	bcc.n	8002220 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f2      	bne.n	8002204 <HAL_DMA_IRQHandler+0x2cc>
 800221e:	e000      	b.n	8002222 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002220:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
 8002242:	e000      	b.n	8002246 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002244:	bf00      	nop
    }
  }
}
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225a:	b2db      	uxtb	r3, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b40      	cmp	r3, #64	@ 0x40
 8002294:	d108      	bne.n	80022a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022a6:	e007      	b.n	80022b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3b10      	subs	r3, #16
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <DMA_CalcBaseAndBitshift+0x64>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022de:	4a13      	ldr	r2, [pc, #76]	@ (800232c <DMA_CalcBaseAndBitshift+0x68>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d909      	bls.n	8002306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	1d1a      	adds	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	@ 0x58
 8002304:	e007      	b.n	8002316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	aaaaaaab 	.word	0xaaaaaaab
 800232c:	0800a3b4 	.word	0x0800a3b4

08002330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11f      	bne.n	800238a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d856      	bhi.n	80023fe <DMA_CheckFifoParam+0xce>
 8002350:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <DMA_CheckFifoParam+0x28>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002369 	.word	0x08002369
 800235c:	0800237b 	.word	0x0800237b
 8002360:	08002369 	.word	0x08002369
 8002364:	080023ff 	.word	0x080023ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d046      	beq.n	8002402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e043      	b.n	8002402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002382:	d140      	bne.n	8002406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e03d      	b.n	8002406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002392:	d121      	bne.n	80023d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d837      	bhi.n	800240a <DMA_CheckFifoParam+0xda>
 800239a:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <DMA_CheckFifoParam+0x70>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023b7 	.word	0x080023b7
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	080023c9 	.word	0x080023c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      break;
 80023b4:	e030      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d025      	beq.n	800240e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c6:	e022      	b.n	800240e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d0:	d11f      	bne.n	8002412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023d6:	e01c      	b.n	8002412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d903      	bls.n	80023e6 <DMA_CheckFifoParam+0xb6>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d003      	beq.n	80023ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e4:	e018      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ea:	e015      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e00b      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 80023fe:	bf00      	nop
 8002400:	e00a      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
 8002404:	e008      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e006      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e004      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e002      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;   
 8002412:	bf00      	nop
 8002414:	e000      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
    }
  } 
  
  return status; 
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e16b      	b.n	800271c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	f040 815a 	bne.w	8002716 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d005      	beq.n	800247a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	2b02      	cmp	r3, #2
 8002478:	d130      	bne.n	80024dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 0201 	and.w	r2, r3, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d017      	beq.n	8002518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d123      	bne.n	800256c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80b4 	beq.w	8002716 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b60      	ldr	r3, [pc, #384]	@ (8002734 <HAL_GPIO_Init+0x30c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002734 <HAL_GPIO_Init+0x30c>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025be:	4b5d      	ldr	r3, [pc, #372]	@ (8002734 <HAL_GPIO_Init+0x30c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002738 <HAL_GPIO_Init+0x310>)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a52      	ldr	r2, [pc, #328]	@ (800273c <HAL_GPIO_Init+0x314>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02b      	beq.n	800264e <HAL_GPIO_Init+0x226>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a51      	ldr	r2, [pc, #324]	@ (8002740 <HAL_GPIO_Init+0x318>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x222>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a50      	ldr	r2, [pc, #320]	@ (8002744 <HAL_GPIO_Init+0x31c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x21e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4f      	ldr	r2, [pc, #316]	@ (8002748 <HAL_GPIO_Init+0x320>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x21a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	@ (800274c <HAL_GPIO_Init+0x324>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x216>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4d      	ldr	r2, [pc, #308]	@ (8002750 <HAL_GPIO_Init+0x328>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x212>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4c      	ldr	r2, [pc, #304]	@ (8002754 <HAL_GPIO_Init+0x32c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x20e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4b      	ldr	r2, [pc, #300]	@ (8002758 <HAL_GPIO_Init+0x330>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x20a>
 800262e:	2307      	movs	r3, #7
 8002630:	e00e      	b.n	8002650 <HAL_GPIO_Init+0x228>
 8002632:	2308      	movs	r3, #8
 8002634:	e00c      	b.n	8002650 <HAL_GPIO_Init+0x228>
 8002636:	2306      	movs	r3, #6
 8002638:	e00a      	b.n	8002650 <HAL_GPIO_Init+0x228>
 800263a:	2305      	movs	r3, #5
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x228>
 800263e:	2304      	movs	r3, #4
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x228>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x228>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x228>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x228>
 800264e:	2300      	movs	r3, #0
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002660:	4935      	ldr	r1, [pc, #212]	@ (8002738 <HAL_GPIO_Init+0x310>)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266e:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_GPIO_Init+0x334>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002692:	4a32      	ldr	r2, [pc, #200]	@ (800275c <HAL_GPIO_Init+0x334>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002698:	4b30      	ldr	r3, [pc, #192]	@ (800275c <HAL_GPIO_Init+0x334>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026bc:	4a27      	ldr	r2, [pc, #156]	@ (800275c <HAL_GPIO_Init+0x334>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c2:	4b26      	ldr	r3, [pc, #152]	@ (800275c <HAL_GPIO_Init+0x334>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e6:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_GPIO_Init+0x334>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <HAL_GPIO_Init+0x334>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002710:	4a12      	ldr	r2, [pc, #72]	@ (800275c <HAL_GPIO_Init+0x334>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	f67f ae90 	bls.w	8002444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40013800 	.word	0x40013800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40021400 	.word	0x40021400
 8002754:	40021800 	.word	0x40021800
 8002758:	40021c00 	.word	0x40021c00
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e0cd      	b.n	8002918 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800277c:	2201      	movs	r2, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	f040 80bd 	bne.w	8002912 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002798:	4a65      	ldr	r2, [pc, #404]	@ (8002930 <HAL_GPIO_DeInit+0x1d0>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_GPIO_DeInit+0x1d4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02b      	beq.n	800281a <HAL_GPIO_DeInit+0xba>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002938 <HAL_GPIO_DeInit+0x1d8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d025      	beq.n	8002816 <HAL_GPIO_DeInit+0xb6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a5b      	ldr	r2, [pc, #364]	@ (800293c <HAL_GPIO_DeInit+0x1dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <HAL_GPIO_DeInit+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002940 <HAL_GPIO_DeInit+0x1e0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d019      	beq.n	800280e <HAL_GPIO_DeInit+0xae>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a59      	ldr	r2, [pc, #356]	@ (8002944 <HAL_GPIO_DeInit+0x1e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_DeInit+0xaa>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	@ (8002948 <HAL_GPIO_DeInit+0x1e8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00d      	beq.n	8002806 <HAL_GPIO_DeInit+0xa6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a57      	ldr	r2, [pc, #348]	@ (800294c <HAL_GPIO_DeInit+0x1ec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_GPIO_DeInit+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a56      	ldr	r2, [pc, #344]	@ (8002950 <HAL_GPIO_DeInit+0x1f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_GPIO_DeInit+0x9e>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e00e      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 80027fe:	2308      	movs	r3, #8
 8002800:	e00c      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 8002802:	2306      	movs	r3, #6
 8002804:	e00a      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 8002806:	2305      	movs	r3, #5
 8002808:	e008      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 800280a:	2304      	movs	r3, #4
 800280c:	e006      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 800280e:	2303      	movs	r3, #3
 8002810:	e004      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_DeInit+0xbc>
 800281a:	2300      	movs	r3, #0
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	f002 0203 	and.w	r2, r2, #3
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	4093      	lsls	r3, r2
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	d132      	bne.n	8002892 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800282c:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	4947      	ldr	r1, [pc, #284]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 8002836:	4013      	ands	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	4944      	ldr	r1, [pc, #272]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 8002844:	4013      	ands	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002848:	4b42      	ldr	r3, [pc, #264]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43db      	mvns	r3, r3
 8002850:	4940      	ldr	r1, [pc, #256]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 8002852:	4013      	ands	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002856:	4b3f      	ldr	r3, [pc, #252]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	493d      	ldr	r1, [pc, #244]	@ (8002954 <HAL_GPIO_DeInit+0x1f4>)
 8002860:	4013      	ands	r3, r2
 8002862:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002874:	4a2e      	ldr	r2, [pc, #184]	@ (8002930 <HAL_GPIO_DeInit+0x1d0>)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	089b      	lsrs	r3, r3, #2
 800287a:	3302      	adds	r3, #2
 800287c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	43da      	mvns	r2, r3
 8002884:	482a      	ldr	r0, [pc, #168]	@ (8002930 <HAL_GPIO_DeInit+0x1d0>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	400a      	ands	r2, r1
 800288c:	3302      	adds	r3, #2
 800288e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2103      	movs	r1, #3
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	08d2      	lsrs	r2, r2, #3
 80028c8:	4019      	ands	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2103      	movs	r1, #3
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	2101      	movs	r1, #1
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2103      	movs	r1, #3
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	f67f af2e 	bls.w	800277c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd fe9e 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f003 fbc6 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	@ (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	@ (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e021      	b.n	8002c6a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2224      	movs	r2, #36	@ 0x24
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd fdb0 	bl	80007a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d103      	bne.n	8002c90 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb6:	f7fe fe17 	bl	80018e8 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	f040 80d9 	bne.w	8002e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2319      	movs	r3, #25
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	496d      	ldr	r1, [pc, #436]	@ (8002e88 <HAL_I2C_Mem_Write+0x1ec>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f001 fe2d 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0cc      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Mem_Write+0x56>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0c5      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d007      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2221      	movs	r2, #33	@ 0x21
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2240      	movs	r2, #64	@ 0x40
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a4d      	ldr	r2, [pc, #308]	@ (8002e8c <HAL_I2C_Mem_Write+0x1f0>)
 8002d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5a:	88f8      	ldrh	r0, [r7, #6]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	8979      	ldrh	r1, [r7, #10]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4603      	mov	r3, r0
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f001 fca4 	bl	80046b8 <I2C_RequestMemoryWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d052      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e081      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f001 fef2 	bl	8004b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e06b      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <HAL_I2C_Mem_Write+0x180>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1aa      	bne.n	8002d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f001 fee5 	bl	8004bf8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d107      	bne.n	8002e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e016      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	00100002 	.word	0x00100002
 8002e8c:	ffff0000 	.word	0xffff0000

08002e90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002eb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d003      	beq.n	8002ec8 <HAL_I2C_EV_IRQHandler+0x38>
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b40      	cmp	r3, #64	@ 0x40
 8002ec4:	f040 80c1 	bne.w	800304a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <HAL_I2C_EV_IRQHandler+0x6e>
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002ee8:	d003      	beq.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x62>
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f000 8132 	beq.w	8003162 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_I2C_EV_IRQHandler+0x92>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	0a5b      	lsrs	r3, r3, #9
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 ff18 	bl	8004d4a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fdad 	bl	8003a7a <I2C_Master_SB>
 8002f20:	e092      	b.n	8003048 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0xb2>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	0a5b      	lsrs	r3, r3, #9
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fe23 	bl	8003b86 <I2C_Master_ADD10>
 8002f40:	e082      	b.n	8003048 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_I2C_EV_IRQHandler+0xd2>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	0a5b      	lsrs	r3, r3, #9
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fe3d 	bl	8003bda <I2C_Master_ADDR>
 8002f60:	e072      	b.n	8003048 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03b      	beq.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f7c:	f000 80f3 	beq.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	09db      	lsrs	r3, r3, #7
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00f      	beq.n	8002fac <HAL_I2C_EV_IRQHandler+0x11c>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	0a9b      	lsrs	r3, r3, #10
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_I2C_EV_IRQHandler+0x11c>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fa01 	bl	80033ac <I2C_MasterTransmit_TXE>
 8002faa:	e04d      	b.n	8003048 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80d6 	beq.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	0a5b      	lsrs	r3, r3, #9
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80cf 	beq.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fc8:	7bbb      	ldrb	r3, [r7, #14]
 8002fca:	2b21      	cmp	r3, #33	@ 0x21
 8002fcc:	d103      	bne.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa88 	bl	80034e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd4:	e0c7      	b.n	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	f040 80c4 	bne.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 faf6 	bl	80035d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe4:	e0bf      	b.n	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff4:	f000 80b7 	beq.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00f      	beq.n	8003024 <HAL_I2C_EV_IRQHandler+0x194>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	0a9b      	lsrs	r3, r3, #10
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_I2C_EV_IRQHandler+0x194>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fb6f 	bl	8003700 <I2C_MasterReceive_RXNE>
 8003022:	e011      	b.n	8003048 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 809a 	beq.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	0a5b      	lsrs	r3, r3, #9
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8093 	beq.w	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc25 	bl	8003890 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003046:	e08e      	b.n	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003048:	e08d      	b.n	8003166 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e007      	b.n	800306c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x20e>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	0a5b      	lsrs	r3, r3, #9
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003094:	69b9      	ldr	r1, [r7, #24]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 ffee 	bl	8004078 <I2C_Slave_ADDR>
 800309c:	e066      	b.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0x22e>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	0a5b      	lsrs	r3, r3, #9
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 f828 	bl	800410c <I2C_Slave_STOPF>
 80030bc:	e056      	b.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030be:	7bbb      	ldrb	r3, [r7, #14]
 80030c0:	2b21      	cmp	r3, #33	@ 0x21
 80030c2:	d002      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0x23a>
 80030c4:	7bbb      	ldrb	r3, [r7, #14]
 80030c6:	2b29      	cmp	r3, #41	@ 0x29
 80030c8:	d125      	bne.n	8003116 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	09db      	lsrs	r3, r3, #7
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00f      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x266>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	0a9b      	lsrs	r3, r3, #10
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x266>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 ff04 	bl	8003efc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030f4:	e039      	b.n	800316a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d033      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x2da>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	0a5b      	lsrs	r3, r3, #9
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02d      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 ff31 	bl	8003f76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003114:	e029      	b.n	800316a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00f      	beq.n	8003142 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	0a9b      	lsrs	r3, r3, #10
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_I2C_EV_IRQHandler+0x2b2>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 ff3c 	bl	8003fb8 <I2C_SlaveReceive_RXNE>
 8003140:	e014      	b.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00e      	beq.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0a5b      	lsrs	r3, r3, #9
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 ff6a 	bl	8004034 <I2C_SlaveReceive_BTF>
 8003160:	e004      	b.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800316a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	@ 0x28
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003194:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00e      	beq.n	80031c0 <HAL_I2C_ER_IRQHandler+0x4e>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <HAL_I2C_ER_IRQHandler+0x78>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80031e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	0a9b      	lsrs	r3, r3, #10
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d03f      	beq.n	8003276 <HAL_I2C_ER_IRQHandler+0x104>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d039      	beq.n	8003276 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003202:	7efb      	ldrb	r3, [r7, #27]
 8003204:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003214:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800321c:	7ebb      	ldrb	r3, [r7, #26]
 800321e:	2b20      	cmp	r3, #32
 8003220:	d112      	bne.n	8003248 <HAL_I2C_ER_IRQHandler+0xd6>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10f      	bne.n	8003248 <HAL_I2C_ER_IRQHandler+0xd6>
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b21      	cmp	r3, #33	@ 0x21
 800322c:	d008      	beq.n	8003240 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b29      	cmp	r3, #41	@ 0x29
 8003232:	d005      	beq.n	8003240 <HAL_I2C_ER_IRQHandler+0xce>
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b28      	cmp	r3, #40	@ 0x28
 8003238:	d106      	bne.n	8003248 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b21      	cmp	r3, #33	@ 0x21
 800323e:	d103      	bne.n	8003248 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f001 f893 	bl	800436c <I2C_Slave_AF>
 8003246:	e016      	b.n	8003276 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003250:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800325a:	7efb      	ldrb	r3, [r7, #27]
 800325c:	2b10      	cmp	r3, #16
 800325e:	d002      	beq.n	8003266 <HAL_I2C_ER_IRQHandler+0xf4>
 8003260:	7efb      	ldrb	r3, [r7, #27]
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d107      	bne.n	8003276 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003274:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	0adb      	lsrs	r3, r3, #11
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_I2C_ER_IRQHandler+0x12e>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800329e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f001 f8ce 	bl	8004454 <I2C_ITError>
  }
}
 80032b8:	bf00      	nop
 80032ba:	3728      	adds	r7, #40	@ 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	b2db      	uxtb	r3, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d150      	bne.n	8003474 <I2C_MasterTransmit_TXE+0xc8>
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b21      	cmp	r3, #33	@ 0x21
 80033d6:	d14d      	bne.n	8003474 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d01d      	beq.n	800341a <I2C_MasterTransmit_TXE+0x6e>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d01a      	beq.n	800341a <I2C_MasterTransmit_TXE+0x6e>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ea:	d016      	beq.n	800341a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2211      	movs	r2, #17
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff54 	bl	80032c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003418:	e060      	b.n	80034dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003428:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003438:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b40      	cmp	r3, #64	@ 0x40
 8003452:	d107      	bne.n	8003464 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff6f 	bl	8003340 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003462:	e03b      	b.n	80034dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff27 	bl	80032c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003472:	e033      	b.n	80034dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b21      	cmp	r3, #33	@ 0x21
 8003478:	d005      	beq.n	8003486 <I2C_MasterTransmit_TXE+0xda>
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d12d      	bne.n	80034dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b22      	cmp	r3, #34	@ 0x22
 8003484:	d12a      	bne.n	80034dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d108      	bne.n	80034a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034a0:	e01c      	b.n	80034dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b40      	cmp	r3, #64	@ 0x40
 80034ac:	d103      	bne.n	80034b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f88e 	bl	80035d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80034b4:	e012      	b.n	80034dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034da:	e7ff      	b.n	80034dc <I2C_MasterTransmit_TXE+0x130>
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b21      	cmp	r3, #33	@ 0x21
 80034fc:	d164      	bne.n	80035c8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800352c:	e04c      	b.n	80035c8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d01d      	beq.n	8003570 <I2C_MasterTransmit_BTF+0x8c>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b20      	cmp	r3, #32
 8003538:	d01a      	beq.n	8003570 <I2C_MasterTransmit_BTF+0x8c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003540:	d016      	beq.n	8003570 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003550:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2211      	movs	r2, #17
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fea9 	bl	80032c0 <HAL_I2C_MasterTxCpltCallback>
}
 800356e:	e02b      	b.n	80035c8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800357e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b40      	cmp	r3, #64	@ 0x40
 80035a8:	d107      	bne.n	80035ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fec4 	bl	8003340 <HAL_I2C_MemTxCpltCallback>
}
 80035b8:	e006      	b.n	80035c8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fe7c 	bl	80032c0 <HAL_I2C_MasterTxCpltCallback>
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11d      	bne.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10b      	bne.n	8003608 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003606:	e077      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360c:	b29b      	uxth	r3, r3
 800360e:	121b      	asrs	r3, r3, #8
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003622:	e069      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10b      	bne.n	8003644 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	b2da      	uxtb	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003642:	e059      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003648:	2b02      	cmp	r3, #2
 800364a:	d152      	bne.n	80036f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b22      	cmp	r3, #34	@ 0x22
 8003650:	d10d      	bne.n	800366e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003660:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800366c:	e044      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b21      	cmp	r3, #33	@ 0x21
 800367c:	d112      	bne.n	80036a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036a2:	e029      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d124      	bne.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b21      	cmp	r3, #33	@ 0x21
 80036b2:	d121      	bne.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fe28 	bl	8003340 <HAL_I2C_MemTxCpltCallback>
}
 80036f0:	e002      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fabd 	bl	8002c72 <I2C_Flush_DR>
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b22      	cmp	r3, #34	@ 0x22
 8003712:	f040 80b9 	bne.w	8003888 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d921      	bls.n	800376e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b03      	cmp	r3, #3
 8003758:	f040 8096 	bne.w	8003888 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800376c:	e08c      	b.n	8003888 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	2b02      	cmp	r3, #2
 8003774:	d07f      	beq.n	8003876 <I2C_MasterReceive_RXNE+0x176>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d002      	beq.n	8003782 <I2C_MasterReceive_RXNE+0x82>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d179      	bne.n	8003876 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f001 fa80 	bl	8004c88 <I2C_WaitOnSTOPRequestThroughIT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d14c      	bne.n	8003828 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d10a      	bne.n	80037fe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fdac 	bl	8003354 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037fc:	e044      	b.n	8003888 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d002      	beq.n	8003812 <I2C_MasterReceive_RXNE+0x112>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b20      	cmp	r3, #32
 8003810:	d103      	bne.n	800381a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
 8003818:	e002      	b.n	8003820 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2212      	movs	r2, #18
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fd57 	bl	80032d4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003826:	e02f      	b.n	8003888 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003836:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fd7a 	bl	8003368 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003874:	e008      	b.n	8003888 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	605a      	str	r2, [r3, #4]
}
 8003886:	e7ff      	b.n	8003888 <I2C_MasterReceive_RXNE+0x188>
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038de:	e0c8      	b.n	8003a72 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d129      	bne.n	800393e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d00a      	beq.n	8003916 <I2C_MasterReceive_BTF+0x86>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d007      	beq.n	8003916 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800393c:	e099      	b.n	8003a72 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	f040 8081 	bne.w	8003a4c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d002      	beq.n	8003956 <I2C_MasterReceive_BTF+0xc6>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b10      	cmp	r3, #16
 8003954:	d108      	bne.n	8003968 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e019      	b.n	800399c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d002      	beq.n	8003974 <I2C_MasterReceive_BTF+0xe4>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d108      	bne.n	8003986 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e00a      	b.n	800399c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b10      	cmp	r3, #16
 800398a:	d007      	beq.n	800399c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80039f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b40      	cmp	r3, #64	@ 0x40
 8003a0a:	d10a      	bne.n	8003a22 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fc9a 	bl	8003354 <HAL_I2C_MemRxCpltCallback>
}
 8003a20:	e027      	b.n	8003a72 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d002      	beq.n	8003a36 <I2C_MasterReceive_BTF+0x1a6>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d103      	bne.n	8003a3e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a3c:	e002      	b.n	8003a44 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2212      	movs	r2, #18
 8003a42:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fc45 	bl	80032d4 <HAL_I2C_MasterRxCpltCallback>
}
 8003a4a:	e012      	b.n	8003a72 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b40      	cmp	r3, #64	@ 0x40
 8003a8c:	d117      	bne.n	8003abe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003aa6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003aa8:	e067      	b.n	8003b7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]
}
 8003abc:	e05d      	b.n	8003b7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac6:	d133      	bne.n	8003b30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b21      	cmp	r3, #33	@ 0x21
 8003ad2:	d109      	bne.n	8003ae8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	e008      	b.n	8003afa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <I2C_Master_SB+0x92>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d108      	bne.n	8003b1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d032      	beq.n	8003b7a <I2C_Master_SB+0x100>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02d      	beq.n	8003b7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2c:	605a      	str	r2, [r3, #4]
}
 8003b2e:	e024      	b.n	8003b7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10e      	bne.n	8003b56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	11db      	asrs	r3, r3, #7
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f003 0306 	and.w	r3, r3, #6
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f063 030f 	orn	r3, r3, #15
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
}
 8003b54:	e011      	b.n	8003b7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10d      	bne.n	8003b7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	11db      	asrs	r3, r3, #7
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f003 0306 	and.w	r3, r3, #6
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f063 030e 	orn	r3, r3, #14
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	611a      	str	r2, [r3, #16]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <I2C_Master_ADD10+0x26>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00c      	beq.n	8003bce <I2C_Master_ADD10+0x48>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bcc:	605a      	str	r2, [r3, #4]
  }
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b091      	sub	sp, #68	@ 0x44
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b22      	cmp	r3, #34	@ 0x22
 8003c02:	f040 8169 	bne.w	8003ed8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <I2C_Master_ADDR+0x54>
 8003c0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d10b      	bne.n	8003c2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	e160      	b.n	8003ef0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11d      	bne.n	8003c72 <I2C_Master_ADDR+0x98>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c3e:	d118      	bne.n	8003c72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c70:	e13e      	b.n	8003ef0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d113      	bne.n	8003ca4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e115      	b.n	8003ed0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 808a 	bne.w	8003dc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cb6:	d137      	bne.n	8003d28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd6:	d113      	bne.n	8003d00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	e0e7      	b.n	8003ed0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e0d3      	b.n	8003ed0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d02e      	beq.n	8003d8c <I2C_Master_ADDR+0x1b2>
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d02b      	beq.n	8003d8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d36:	2b12      	cmp	r3, #18
 8003d38:	d102      	bne.n	8003d40 <I2C_Master_ADDR+0x166>
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d125      	bne.n	8003d8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d00e      	beq.n	8003d64 <I2C_Master_ADDR+0x18a>
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d00b      	beq.n	8003d64 <I2C_Master_ADDR+0x18a>
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d008      	beq.n	8003d64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	e0a1      	b.n	8003ed0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e085      	b.n	8003ed0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d14d      	bne.n	8003e6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d016      	beq.n	8003e02 <I2C_Master_ADDR+0x228>
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d013      	beq.n	8003e02 <I2C_Master_ADDR+0x228>
 8003dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d010      	beq.n	8003e02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e007      	b.n	8003e12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e20:	d117      	bne.n	8003e52 <I2C_Master_ADDR+0x278>
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e28:	d00b      	beq.n	8003e42 <I2C_Master_ADDR+0x268>
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d008      	beq.n	8003e42 <I2C_Master_ADDR+0x268>
 8003e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d005      	beq.n	8003e42 <I2C_Master_ADDR+0x268>
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d002      	beq.n	8003e42 <I2C_Master_ADDR+0x268>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d107      	bne.n	8003e52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	e032      	b.n	8003ed0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e88:	d117      	bne.n	8003eba <I2C_Master_ADDR+0x2e0>
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e90:	d00b      	beq.n	8003eaa <I2C_Master_ADDR+0x2d0>
 8003e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d008      	beq.n	8003eaa <I2C_Master_ADDR+0x2d0>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d005      	beq.n	8003eaa <I2C_Master_ADDR+0x2d0>
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d002      	beq.n	8003eaa <I2C_Master_ADDR+0x2d0>
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d107      	bne.n	8003eba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003eb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ed6:	e00b      	b.n	8003ef0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
}
 8003eee:	e7ff      	b.n	8003ef0 <I2C_Master_ADDR+0x316>
 8003ef0:	bf00      	nop
 8003ef2:	3744      	adds	r7, #68	@ 0x44
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02b      	beq.n	8003f6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d114      	bne.n	8003f6e <I2C_SlaveTransmit_TXE+0x72>
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b29      	cmp	r3, #41	@ 0x29
 8003f48:	d111      	bne.n	8003f6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2221      	movs	r2, #33	@ 0x21
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2228      	movs	r2, #40	@ 0x28
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff f9bd 	bl	80032e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d011      	beq.n	8003fac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02c      	beq.n	800402c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d114      	bne.n	800402c <I2C_SlaveReceive_RXNE+0x74>
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b2a      	cmp	r3, #42	@ 0x2a
 8004006:	d111      	bne.n	800402c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004016:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2222      	movs	r2, #34	@ 0x22
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2228      	movs	r2, #40	@ 0x28
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff f968 	bl	80032fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004092:	2b28      	cmp	r3, #40	@ 0x28
 8004094:	d127      	bne.n	80040e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	09db      	lsrs	r3, r3, #7
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	81bb      	strh	r3, [r7, #12]
 80040c8:	e002      	b.n	80040d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040d8:	89ba      	ldrh	r2, [r7, #12]
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff f916 	bl	8003310 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040e4:	e00e      	b.n	8004104 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800412a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004158:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004168:	d172      	bne.n	8004250 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b22      	cmp	r3, #34	@ 0x22
 800416e:	d002      	beq.n	8004176 <I2C_Slave_STOPF+0x6a>
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b2a      	cmp	r3, #42	@ 0x2a
 8004174:	d135      	bne.n	80041e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f043 0204 	orr.w	r2, r3, #4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe f84c 	bl	800224c <HAL_DMA_GetState>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d049      	beq.n	800424e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041be:	4a69      	ldr	r2, [pc, #420]	@ (8004364 <I2C_Slave_STOPF+0x258>)
 80041c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd fe94 	bl	8001ef4 <HAL_DMA_Abort_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d03d      	beq.n	800424e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041dc:	4610      	mov	r0, r2
 80041de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041e0:	e035      	b.n	800424e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f043 0204 	orr.w	r2, r3, #4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004214:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe f816 	bl	800224c <HAL_DMA_GetState>
 8004220:	4603      	mov	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d014      	beq.n	8004250 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	4a4e      	ldr	r2, [pc, #312]	@ (8004364 <I2C_Slave_STOPF+0x258>)
 800422c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd fe5e 	bl	8001ef4 <HAL_DMA_Abort_IT>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004248:	4610      	mov	r0, r2
 800424a:	4798      	blx	r3
 800424c:	e000      	b.n	8004250 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800424e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d03e      	beq.n	80042d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d112      	bne.n	800428e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b40      	cmp	r3, #64	@ 0x40
 800429a:	d112      	bne.n	80042c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f8b7 	bl	8004454 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042e6:	e039      	b.n	800435c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ec:	d109      	bne.n	8004302 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2228      	movs	r2, #40	@ 0x28
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fe fffd 	bl	80032fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b28      	cmp	r3, #40	@ 0x28
 800430c:	d111      	bne.n	8004332 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a15      	ldr	r2, [pc, #84]	@ (8004368 <I2C_Slave_STOPF+0x25c>)
 8004312:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe fffe 	bl	800332c <HAL_I2C_ListenCpltCallback>
}
 8004330:	e014      	b.n	800435c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	2b22      	cmp	r3, #34	@ 0x22
 8004338:	d002      	beq.n	8004340 <I2C_Slave_STOPF+0x234>
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b22      	cmp	r3, #34	@ 0x22
 800433e:	d10d      	bne.n	800435c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fe ffd0 	bl	80032fc <HAL_I2C_SlaveRxCpltCallback>
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	080047e5 	.word	0x080047e5
 8004368:	ffff0000 	.word	0xffff0000

0800436c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d002      	beq.n	800438e <I2C_Slave_AF+0x22>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b20      	cmp	r3, #32
 800438c:	d129      	bne.n	80043e2 <I2C_Slave_AF+0x76>
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b28      	cmp	r3, #40	@ 0x28
 8004392:	d126      	bne.n	80043e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a2e      	ldr	r2, [pc, #184]	@ (8004450 <I2C_Slave_AF+0xe4>)
 8004398:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe ffa6 	bl	800332c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043e0:	e031      	b.n	8004446 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b21      	cmp	r3, #33	@ 0x21
 80043e6:	d129      	bne.n	800443c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a19      	ldr	r2, [pc, #100]	@ (8004450 <I2C_Slave_AF+0xe4>)
 80043ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2221      	movs	r2, #33	@ 0x21
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004412:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800441c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fc1f 	bl	8002c72 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fe ff57 	bl	80032e8 <HAL_I2C_SlaveTxCpltCallback>
}
 800443a:	e004      	b.n	8004446 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004444:	615a      	str	r2, [r3, #20]
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	ffff0000 	.word	0xffff0000

08004454 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004462:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800446a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800446c:	7bbb      	ldrb	r3, [r7, #14]
 800446e:	2b10      	cmp	r3, #16
 8004470:	d002      	beq.n	8004478 <I2C_ITError+0x24>
 8004472:	7bbb      	ldrb	r3, [r7, #14]
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d10a      	bne.n	800448e <I2C_ITError+0x3a>
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b22      	cmp	r3, #34	@ 0x22
 800447c:	d107      	bne.n	800448e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800448c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004494:	2b28      	cmp	r3, #40	@ 0x28
 8004496:	d107      	bne.n	80044a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2228      	movs	r2, #40	@ 0x28
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80044a6:	e015      	b.n	80044d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b6:	d00a      	beq.n	80044ce <I2C_ITError+0x7a>
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b60      	cmp	r3, #96	@ 0x60
 80044bc:	d007      	beq.n	80044ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e2:	d162      	bne.n	80045aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d020      	beq.n	8004544 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004506:	4a6a      	ldr	r2, [pc, #424]	@ (80046b0 <I2C_ITError+0x25c>)
 8004508:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	4618      	mov	r0, r3
 8004510:	f7fd fcf0 	bl	8001ef4 <HAL_DMA_Abort_IT>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8089 	beq.w	800462e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800453e:	4610      	mov	r0, r2
 8004540:	4798      	blx	r3
 8004542:	e074      	b.n	800462e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004548:	4a59      	ldr	r2, [pc, #356]	@ (80046b0 <I2C_ITError+0x25c>)
 800454a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fccf 	bl	8001ef4 <HAL_DMA_Abort_IT>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d068      	beq.n	800462e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004566:	2b40      	cmp	r3, #64	@ 0x40
 8004568:	d10b      	bne.n	8004582 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
 80045a8:	e041      	b.n	800462e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b60      	cmp	r3, #96	@ 0x60
 80045b4:	d125      	bne.n	8004602 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d10b      	bne.n	80045ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fe febe 	bl	800337c <HAL_I2C_AbortCpltCallback>
 8004600:	e015      	b.n	800462e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b40      	cmp	r3, #64	@ 0x40
 800460e:	d10b      	bne.n	8004628 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fe fe9d 	bl	8003368 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10e      	bne.n	800465c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004672:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d113      	bne.n	80046a8 <I2C_ITError+0x254>
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b28      	cmp	r3, #40	@ 0x28
 8004684:	d110      	bne.n	80046a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <I2C_ITError+0x260>)
 800468a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fe42 	bl	800332c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	080047e5 	.word	0x080047e5
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	4608      	mov	r0, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	461a      	mov	r2, r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	817b      	strh	r3, [r7, #10]
 80046ca:	460b      	mov	r3, r1
 80046cc:	813b      	strh	r3, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f920 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004708:	d103      	bne.n	8004712 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004710:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e05f      	b.n	80047d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	6a3a      	ldr	r2, [r7, #32]
 800472a:	492d      	ldr	r1, [pc, #180]	@ (80047e0 <I2C_RequestMemoryWrite+0x128>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f97b 	bl	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04c      	b.n	80047d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004754:	6a39      	ldr	r1, [r7, #32]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fa06 	bl	8004b68 <I2C_WaitOnTXEFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	2b04      	cmp	r3, #4
 8004768:	d107      	bne.n	800477a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e02b      	b.n	80047d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004784:	893b      	ldrh	r3, [r7, #8]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	611a      	str	r2, [r3, #16]
 800478e:	e021      	b.n	80047d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004790:	893b      	ldrh	r3, [r7, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b29b      	uxth	r3, r3
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a0:	6a39      	ldr	r1, [r7, #32]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f9e0 	bl	8004b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d107      	bne.n	80047c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e005      	b.n	80047d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ca:	893b      	ldrh	r3, [r7, #8]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	00010002 	.word	0x00010002

080047e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047fe:	4b4b      	ldr	r3, [pc, #300]	@ (800492c <I2C_DMAAbort+0x148>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	4a4a      	ldr	r2, [pc, #296]	@ (8004930 <I2C_DMAAbort+0x14c>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0a1a      	lsrs	r2, r3, #8
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	00da      	lsls	r2, r3, #3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800482a:	e00a      	b.n	8004842 <I2C_DMAAbort+0x5e>
    }
    count--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004840:	d0ea      	beq.n	8004818 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484e:	2200      	movs	r2, #0
 8004850:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	2200      	movs	r2, #0
 8004860:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004884:	2200      	movs	r2, #0
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	2200      	movs	r2, #0
 8004896:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b60      	cmp	r3, #96	@ 0x60
 80048b2:	d10e      	bne.n	80048d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048ca:	6978      	ldr	r0, [r7, #20]
 80048cc:	f7fe fd56 	bl	800337c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048d0:	e027      	b.n	8004922 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048d8:	2b28      	cmp	r3, #40	@ 0x28
 80048da:	d117      	bne.n	800490c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2228      	movs	r2, #40	@ 0x28
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800490a:	e007      	b.n	800491c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f7fe fd23 	bl	8003368 <HAL_I2C_ErrorCallback>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000000 	.word	0x20000000
 8004930:	14f8b589 	.word	0x14f8b589

08004934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004944:	e048      	b.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d044      	beq.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fc ffcb 	bl	80018e8 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d139      	bne.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d10d      	bne.n	800498a <I2C_WaitOnFlagUntilTimeout+0x56>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	43da      	mvns	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	e00c      	b.n	80049a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	43da      	mvns	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d116      	bne.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e023      	b.n	8004a20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10d      	bne.n	80049fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	43da      	mvns	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	e00c      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d093      	beq.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a36:	e071      	b.n	8004b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a46:	d123      	bne.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	f043 0204 	orr.w	r2, r3, #4
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e067      	b.n	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d041      	beq.n	8004b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a98:	f7fc ff26 	bl	80018e8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d136      	bne.n	8004b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d10c      	bne.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bf14      	ite	ne
 8004aca:	2301      	movne	r3, #1
 8004acc:	2300      	moveq	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	e00b      	b.n	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e021      	b.n	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	0c1b      	lsrs	r3, r3, #16
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10c      	bne.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4013      	ands	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e00b      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f47f af6d 	bne.w	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b74:	e034      	b.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f8b8 	bl	8004cec <I2C_IsAcknowledgeFailed>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e034      	b.n	8004bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d028      	beq.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fc feab 	bl	80018e8 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11d      	bne.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bae:	2b80      	cmp	r3, #128	@ 0x80
 8004bb0:	d016      	beq.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e007      	b.n	8004bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bea:	2b80      	cmp	r3, #128	@ 0x80
 8004bec:	d1c3      	bne.n	8004b76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c04:	e034      	b.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f870 	bl	8004cec <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e034      	b.n	8004c80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d028      	beq.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fc fe63 	bl	80018e8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11d      	bne.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d016      	beq.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e007      	b.n	8004c80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d1c3      	bne.n	8004c06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	08db      	lsrs	r3, r3, #3
 8004c9a:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	0a1a      	lsrs	r2, r3, #8
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e008      	b.n	8004cd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd4:	d0e9      	beq.n	8004caa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	14f8b589 	.word	0x14f8b589

08004cec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d02:	d11b      	bne.n	8004d3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004d5a:	d103      	bne.n	8004d64 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d62:	e007      	b.n	8004d74 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004d6c:	d102      	bne.n	8004d74 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e128      	b.n	8004fe4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a90      	ldr	r2, [pc, #576]	@ (8004fec <HAL_I2S_Init+0x26c>)
 8004daa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fb fd7d 	bl	80008ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004dc8:	f023 030f 	bic.w	r3, r3, #15
 8004dcc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d060      	beq.n	8004ea0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004de6:	2310      	movs	r3, #16
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e001      	b.n	8004df0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004dec:	2320      	movs	r3, #32
 8004dee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d802      	bhi.n	8004dfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004dfe:	2001      	movs	r0, #1
 8004e00:	f001 fac8 	bl	8006394 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0e:	d125      	bne.n	8004e5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	3305      	adds	r3, #5
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e01f      	b.n	8004e7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	3305      	adds	r3, #5
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e00e      	b.n	8004e7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	3305      	adds	r3, #5
 8004e78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff0 <HAL_I2S_Init+0x270>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	08db      	lsrs	r3, r3, #3
 8004e84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e003      	b.n	8004ea8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d902      	bls.n	8004eb4 <HAL_I2S_Init+0x134>
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2bff      	cmp	r3, #255	@ 0xff
 8004eb2:	d907      	bls.n	8004ec4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb8:	f043 0210 	orr.w	r2, r3, #16
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e08f      	b.n	8004fe4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	ea42 0103 	orr.w	r1, r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ee2:	f023 030f 	bic.w	r3, r3, #15
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6851      	ldr	r1, [r2, #4]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6892      	ldr	r2, [r2, #8]
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68d2      	ldr	r2, [r2, #12]
 8004ef4:	4311      	orrs	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6992      	ldr	r2, [r2, #24]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d161      	bne.n	8004fd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <HAL_I2S_Init+0x274>)
 8004f14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a37      	ldr	r2, [pc, #220]	@ (8004ff8 <HAL_I2S_Init+0x278>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_I2S_Init+0x1a4>
 8004f20:	4b36      	ldr	r3, [pc, #216]	@ (8004ffc <HAL_I2S_Init+0x27c>)
 8004f22:	e001      	b.n	8004f28 <HAL_I2S_Init+0x1a8>
 8004f24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	4932      	ldr	r1, [pc, #200]	@ (8004ff8 <HAL_I2S_Init+0x278>)
 8004f30:	428a      	cmp	r2, r1
 8004f32:	d101      	bne.n	8004f38 <HAL_I2S_Init+0x1b8>
 8004f34:	4a31      	ldr	r2, [pc, #196]	@ (8004ffc <HAL_I2S_Init+0x27c>)
 8004f36:	e001      	b.n	8004f3c <HAL_I2S_Init+0x1bc>
 8004f38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004f3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004f40:	f023 030f 	bic.w	r3, r3, #15
 8004f44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff8 <HAL_I2S_Init+0x278>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2S_Init+0x1d4>
 8004f50:	4b2a      	ldr	r3, [pc, #168]	@ (8004ffc <HAL_I2S_Init+0x27c>)
 8004f52:	e001      	b.n	8004f58 <HAL_I2S_Init+0x1d8>
 8004f54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f58:	2202      	movs	r2, #2
 8004f5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a25      	ldr	r2, [pc, #148]	@ (8004ff8 <HAL_I2S_Init+0x278>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_I2S_Init+0x1ea>
 8004f66:	4b25      	ldr	r3, [pc, #148]	@ (8004ffc <HAL_I2S_Init+0x27c>)
 8004f68:	e001      	b.n	8004f6e <HAL_I2S_Init+0x1ee>
 8004f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7a:	d003      	beq.n	8004f84 <HAL_I2S_Init+0x204>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e001      	b.n	8004f90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff8 <HAL_I2S_Init+0x278>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_I2S_Init+0x24c>
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <HAL_I2S_Init+0x27c>)
 8004fca:	e001      	b.n	8004fd0 <HAL_I2S_Init+0x250>
 8004fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fd0:	897a      	ldrh	r2, [r7, #10]
 8004fd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	080052d9 	.word	0x080052d9
 8004ff0:	cccccccd 	.word	0xcccccccd
 8004ff4:	080053ed 	.word	0x080053ed
 8004ff8:	40003800 	.word	0x40003800
 8004ffc:	40003400 	.word	0x40003400

08005000 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_I2S_Transmit_DMA+0x1a>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e08a      	b.n	8005134 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800502a:	2302      	movs	r3, #2
 800502c:	e082      	b.n	8005134 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_I2S_Transmit_DMA+0x3e>
 800503a:	2302      	movs	r3, #2
 800503c:	e07a      	b.n	8005134 <HAL_I2S_Transmit_DMA+0x134>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2203      	movs	r2, #3
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d002      	beq.n	8005072 <HAL_I2S_Transmit_DMA+0x72>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b05      	cmp	r3, #5
 8005070:	d10a      	bne.n	8005088 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005086:	e005      	b.n	8005094 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	4a28      	ldr	r2, [pc, #160]	@ (800513c <HAL_I2S_Transmit_DMA+0x13c>)
 800509a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <HAL_I2S_Transmit_DMA+0x140>)
 80050a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	4a26      	ldr	r2, [pc, #152]	@ (8005144 <HAL_I2S_Transmit_DMA+0x144>)
 80050aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80050b4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80050bc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80050c4:	f7fc fe4e 	bl	8001d64 <HAL_DMA_Start_IT>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00f      	beq.n	80050ee <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	f043 0208 	orr.w	r2, r3, #8
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e022      	b.n	8005134 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d107      	bne.n	8005114 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0202 	orr.w	r2, r2, #2
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511e:	2b00      	cmp	r3, #0
 8005120:	d107      	bne.n	8005132 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005130:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	080051b7 	.word	0x080051b7
 8005140:	08005175 	.word	0x08005175
 8005144:	080051d3 	.word	0x080051d3

08005148 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10e      	bne.n	80051a8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0202 	bic.w	r2, r2, #2
 8005198:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7fb fe0d 	bl	8000dc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7fb fde9 	bl	8000d9c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051de:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0203 	bic.w	r2, r2, #3
 80051ee:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005208:	f043 0208 	orr.w	r2, r3, #8
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7fb fdef 	bl	8000df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10e      	bne.n	8005272 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005262:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fb fdab 	bl	8000dc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	b292      	uxth	r2, r2
 800528e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10e      	bne.n	80052d0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ff48 	bl	8005160 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d13a      	bne.n	800536a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d109      	bne.n	8005312 <I2S_IRQHandler+0x3a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d102      	bne.n	8005312 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ffb4 	bl	800527a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d126      	bne.n	800536a <I2S_IRQHandler+0x92>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b20      	cmp	r3, #32
 8005328:	d11f      	bne.n	800536a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005338:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535c:	f043 0202 	orr.w	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fb fd45 	bl	8000df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d136      	bne.n	80053e4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d109      	bne.n	8005394 <I2S_IRQHandler+0xbc>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538a:	2b80      	cmp	r3, #128	@ 0x80
 800538c:	d102      	bne.n	8005394 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ff45 	bl	800521e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b08      	cmp	r3, #8
 800539c:	d122      	bne.n	80053e4 <I2S_IRQHandler+0x10c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d11b      	bne.n	80053e4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053ba:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fb fd08 	bl	8000df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a92      	ldr	r2, [pc, #584]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005406:	4b92      	ldr	r3, [pc, #584]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005408:	e001      	b.n	800540e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800540a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a8b      	ldr	r2, [pc, #556]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005424:	4b8a      	ldr	r3, [pc, #552]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005426:	e001      	b.n	800542c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005438:	d004      	beq.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 8099 	bne.w	8005576 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b02      	cmp	r3, #2
 800544c:	d107      	bne.n	800545e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f925 	bl	80056a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9c8 	bl	8005808 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547e:	2b40      	cmp	r3, #64	@ 0x40
 8005480:	d13a      	bne.n	80054f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d035      	beq.n	80054f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6e      	ldr	r2, [pc, #440]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005496:	4b6e      	ldr	r3, [pc, #440]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005498:	e001      	b.n	800549e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800549a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4969      	ldr	r1, [pc, #420]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054a6:	428b      	cmp	r3, r1
 80054a8:	d101      	bne.n	80054ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80054aa:	4b69      	ldr	r3, [pc, #420]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054ac:	e001      	b.n	80054b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80054ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0202 	orr.w	r2, r3, #2
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fb fc7e 	bl	8000df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b08      	cmp	r3, #8
 8005500:	f040 80c3 	bne.w	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80bd 	beq.w	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800551e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a49      	ldr	r2, [pc, #292]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d101      	bne.n	800552e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800552a:	4b49      	ldr	r3, [pc, #292]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800552c:	e001      	b.n	8005532 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800552e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4944      	ldr	r1, [pc, #272]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800553a:	428b      	cmp	r3, r1
 800553c:	d101      	bne.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800553e:	4b44      	ldr	r3, [pc, #272]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005540:	e001      	b.n	8005546 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005542:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005546:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800554a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800554c:	2300      	movs	r3, #0
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fb fc40 	bl	8000df4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005574:	e089      	b.n	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b02      	cmp	r3, #2
 800557e:	d107      	bne.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f8be 	bl	800570c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f8fd 	bl	80057a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d12f      	bne.n	8005614 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02a      	beq.n	8005614 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d101      	bne.n	80055dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80055d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055da:	e001      	b.n	80055e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80055dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4919      	ldr	r1, [pc, #100]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d101      	bne.n	80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80055ec:	4b18      	ldr	r3, [pc, #96]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055ee:	e001      	b.n	80055f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80055f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fb fbf0 	bl	8000df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b08      	cmp	r3, #8
 800561c:	d136      	bne.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d031      	beq.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a07      	ldr	r2, [pc, #28]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005632:	4b07      	ldr	r3, [pc, #28]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005634:	e001      	b.n	800563a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005636:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4902      	ldr	r1, [pc, #8]	@ (800564c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005642:	428b      	cmp	r3, r1
 8005644:	d106      	bne.n	8005654 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005646:	4b02      	ldr	r3, [pc, #8]	@ (8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005648:	e006      	b.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800564a:	bf00      	nop
 800564c:	40003800 	.word	0x40003800
 8005650:	40003400 	.word	0x40003400
 8005654:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005658:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800565c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800566c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f043 0204 	orr.w	r2, r3, #4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb fbb6 	bl	8000df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005688:	e000      	b.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800568a:	bf00      	nop
}
 800568c:	bf00      	nop
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	1c99      	adds	r1, r3, #2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6251      	str	r1, [r2, #36]	@ 0x24
 80056ba:	881a      	ldrh	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d113      	bne.n	8005702 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ffc9 	bl	8005694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	1c99      	adds	r1, r3, #2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6251      	str	r1, [r2, #36]	@ 0x24
 800571e:	8819      	ldrh	r1, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1d      	ldr	r2, [pc, #116]	@ (800579c <I2SEx_TxISR_I2SExt+0x90>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <I2SEx_TxISR_I2SExt+0x22>
 800572a:	4b1d      	ldr	r3, [pc, #116]	@ (80057a0 <I2SEx_TxISR_I2SExt+0x94>)
 800572c:	e001      	b.n	8005732 <I2SEx_TxISR_I2SExt+0x26>
 800572e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005732:	460a      	mov	r2, r1
 8005734:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d121      	bne.n	8005792 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a12      	ldr	r2, [pc, #72]	@ (800579c <I2SEx_TxISR_I2SExt+0x90>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <I2SEx_TxISR_I2SExt+0x50>
 8005758:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <I2SEx_TxISR_I2SExt+0x94>)
 800575a:	e001      	b.n	8005760 <I2SEx_TxISR_I2SExt+0x54>
 800575c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	490d      	ldr	r1, [pc, #52]	@ (800579c <I2SEx_TxISR_I2SExt+0x90>)
 8005768:	428b      	cmp	r3, r1
 800576a:	d101      	bne.n	8005770 <I2SEx_TxISR_I2SExt+0x64>
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <I2SEx_TxISR_I2SExt+0x94>)
 800576e:	e001      	b.n	8005774 <I2SEx_TxISR_I2SExt+0x68>
 8005770:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005774:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005778:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff81 	bl	8005694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40003800 	.word	0x40003800
 80057a0:	40003400 	.word	0x40003400

080057a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68d8      	ldr	r0, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	1c99      	adds	r1, r3, #2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80057bc:	b282      	uxth	r2, r0
 80057be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d113      	bne.n	8005800 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff ff4a 	bl	8005694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a20      	ldr	r2, [pc, #128]	@ (8005898 <I2SEx_RxISR_I2SExt+0x90>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <I2SEx_RxISR_I2SExt+0x16>
 800581a:	4b20      	ldr	r3, [pc, #128]	@ (800589c <I2SEx_RxISR_I2SExt+0x94>)
 800581c:	e001      	b.n	8005822 <I2SEx_RxISR_I2SExt+0x1a>
 800581e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005822:	68d8      	ldr	r0, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	1c99      	adds	r1, r3, #2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800582e:	b282      	uxth	r2, r0
 8005830:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d121      	bne.n	800588e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a12      	ldr	r2, [pc, #72]	@ (8005898 <I2SEx_RxISR_I2SExt+0x90>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <I2SEx_RxISR_I2SExt+0x50>
 8005854:	4b11      	ldr	r3, [pc, #68]	@ (800589c <I2SEx_RxISR_I2SExt+0x94>)
 8005856:	e001      	b.n	800585c <I2SEx_RxISR_I2SExt+0x54>
 8005858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	490d      	ldr	r1, [pc, #52]	@ (8005898 <I2SEx_RxISR_I2SExt+0x90>)
 8005864:	428b      	cmp	r3, r1
 8005866:	d101      	bne.n	800586c <I2SEx_RxISR_I2SExt+0x64>
 8005868:	4b0c      	ldr	r3, [pc, #48]	@ (800589c <I2SEx_RxISR_I2SExt+0x94>)
 800586a:	e001      	b.n	8005870 <I2SEx_RxISR_I2SExt+0x68>
 800586c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005870:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005874:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ff03 	bl	8005694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40003800 	.word	0x40003800
 800589c:	40003400 	.word	0x40003400

080058a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e267      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d075      	beq.n	80059aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058be:	4b88      	ldr	r3, [pc, #544]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d00c      	beq.n	80058e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ca:	4b85      	ldr	r3, [pc, #532]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d112      	bne.n	80058fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d6:	4b82      	ldr	r3, [pc, #520]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e2:	d10b      	bne.n	80058fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05b      	beq.n	80059a8 <HAL_RCC_OscConfig+0x108>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d157      	bne.n	80059a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e242      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005904:	d106      	bne.n	8005914 <HAL_RCC_OscConfig+0x74>
 8005906:	4b76      	ldr	r3, [pc, #472]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a75      	ldr	r2, [pc, #468]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 800590c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e01d      	b.n	8005950 <HAL_RCC_OscConfig+0xb0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x98>
 800591e:	4b70      	ldr	r3, [pc, #448]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a6f      	ldr	r2, [pc, #444]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e00b      	b.n	8005950 <HAL_RCC_OscConfig+0xb0>
 8005938:	4b69      	ldr	r3, [pc, #420]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a68      	ldr	r2, [pc, #416]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 800593e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b66      	ldr	r3, [pc, #408]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a65      	ldr	r2, [pc, #404]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 800594a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800594e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005958:	f7fb ffc6 	bl	80018e8 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005960:	f7fb ffc2 	bl	80018e8 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	@ 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e207      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	4b5b      	ldr	r3, [pc, #364]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0xc0>
 800597e:	e014      	b.n	80059aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fb ffb2 	bl	80018e8 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fb ffae 	bl	80018e8 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e1f3      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599a:	4b51      	ldr	r3, [pc, #324]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0xe8>
 80059a6:	e000      	b.n	80059aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d063      	beq.n	8005a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059b6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059c2:	4b47      	ldr	r3, [pc, #284]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d11c      	bne.n	8005a08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ce:	4b44      	ldr	r3, [pc, #272]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d116      	bne.n	8005a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059da:	4b41      	ldr	r3, [pc, #260]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_RCC_OscConfig+0x152>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d001      	beq.n	80059f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e1c7      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4937      	ldr	r1, [pc, #220]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a06:	e03a      	b.n	8005a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a10:	4b34      	ldr	r3, [pc, #208]	@ (8005ae4 <HAL_RCC_OscConfig+0x244>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fb ff67 	bl	80018e8 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1e:	f7fb ff63 	bl	80018e8 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1a8      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a30:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4925      	ldr	r1, [pc, #148]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	600b      	str	r3, [r1, #0]
 8005a50:	e015      	b.n	8005a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a52:	4b24      	ldr	r3, [pc, #144]	@ (8005ae4 <HAL_RCC_OscConfig+0x244>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7fb ff46 	bl	80018e8 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a60:	f7fb ff42 	bl	80018e8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e187      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d036      	beq.n	8005af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a92:	4b15      	ldr	r3, [pc, #84]	@ (8005ae8 <HAL_RCC_OscConfig+0x248>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fb ff26 	bl	80018e8 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fb ff22 	bl	80018e8 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e167      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae0 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x200>
 8005abe:	e01b      	b.n	8005af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac0:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <HAL_RCC_OscConfig+0x248>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac6:	f7fb ff0f 	bl	80018e8 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005acc:	e00e      	b.n	8005aec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ace:	f7fb ff0b 	bl	80018e8 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d907      	bls.n	8005aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e150      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	42470000 	.word	0x42470000
 8005ae8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aec:	4b88      	ldr	r3, [pc, #544]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1ea      	bne.n	8005ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8097 	beq.w	8005c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0a:	4b81      	ldr	r3, [pc, #516]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10f      	bne.n	8005b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b26:	4b7a      	ldr	r3, [pc, #488]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b36:	4b77      	ldr	r3, [pc, #476]	@ (8005d14 <HAL_RCC_OscConfig+0x474>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d118      	bne.n	8005b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b42:	4b74      	ldr	r3, [pc, #464]	@ (8005d14 <HAL_RCC_OscConfig+0x474>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a73      	ldr	r2, [pc, #460]	@ (8005d14 <HAL_RCC_OscConfig+0x474>)
 8005b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b4e:	f7fb fecb 	bl	80018e8 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b56:	f7fb fec7 	bl	80018e8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e10c      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b68:	4b6a      	ldr	r3, [pc, #424]	@ (8005d14 <HAL_RCC_OscConfig+0x474>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d106      	bne.n	8005b8a <HAL_RCC_OscConfig+0x2ea>
 8005b7c:	4b64      	ldr	r3, [pc, #400]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b80:	4a63      	ldr	r2, [pc, #396]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b88:	e01c      	b.n	8005bc4 <HAL_RCC_OscConfig+0x324>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d10c      	bne.n	8005bac <HAL_RCC_OscConfig+0x30c>
 8005b92:	4b5f      	ldr	r3, [pc, #380]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	4a5e      	ldr	r2, [pc, #376]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005b98:	f043 0304 	orr.w	r3, r3, #4
 8005b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005baa:	e00b      	b.n	8005bc4 <HAL_RCC_OscConfig+0x324>
 8005bac:	4b58      	ldr	r3, [pc, #352]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb0:	4a57      	ldr	r2, [pc, #348]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb8:	4b55      	ldr	r3, [pc, #340]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbc:	4a54      	ldr	r2, [pc, #336]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005bbe:	f023 0304 	bic.w	r3, r3, #4
 8005bc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d015      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fb fe8c 	bl	80018e8 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fb fe88 	bl	80018e8 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e0cb      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bea:	4b49      	ldr	r3, [pc, #292]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0ee      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x334>
 8005bf6:	e014      	b.n	8005c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf8:	f7fb fe76 	bl	80018e8 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fb fe72 	bl	80018e8 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e0b5      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c16:	4b3e      	ldr	r3, [pc, #248]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1ee      	bne.n	8005c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d105      	bne.n	8005c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c28:	4b39      	ldr	r3, [pc, #228]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	4a38      	ldr	r2, [pc, #224]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80a1 	beq.w	8005d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c3e:	4b34      	ldr	r3, [pc, #208]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d05c      	beq.n	8005d04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d141      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c52:	4b31      	ldr	r3, [pc, #196]	@ (8005d18 <HAL_RCC_OscConfig+0x478>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fb fe46 	bl	80018e8 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c60:	f7fb fe42 	bl	80018e8 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e087      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c72:	4b27      	ldr	r3, [pc, #156]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8c:	019b      	lsls	r3, r3, #6
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	3b01      	subs	r3, #1
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	061b      	lsls	r3, r3, #24
 8005ca2:	491b      	ldr	r1, [pc, #108]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <HAL_RCC_OscConfig+0x478>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cae:	f7fb fe1b 	bl	80018e8 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb6:	f7fb fe17 	bl	80018e8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e05c      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x416>
 8005cd4:	e054      	b.n	8005d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd6:	4b10      	ldr	r3, [pc, #64]	@ (8005d18 <HAL_RCC_OscConfig+0x478>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cdc:	f7fb fe04 	bl	80018e8 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce4:	f7fb fe00 	bl	80018e8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e045      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf6:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f0      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x444>
 8005d02:	e03d      	b.n	8005d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e038      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
 8005d10:	40023800 	.word	0x40023800
 8005d14:	40007000 	.word	0x40007000
 8005d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <HAL_RCC_OscConfig+0x4ec>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d028      	beq.n	8005d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d121      	bne.n	8005d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d11a      	bne.n	8005d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d111      	bne.n	8005d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	3b01      	subs	r3, #1
 8005d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800

08005d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0cc      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da4:	4b68      	ldr	r3, [pc, #416]	@ (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d90c      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b65      	ldr	r3, [pc, #404]	@ (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b63      	ldr	r3, [pc, #396]	@ (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0b8      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005de4:	4b59      	ldr	r3, [pc, #356]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4a58      	ldr	r2, [pc, #352]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dfc:	4b53      	ldr	r3, [pc, #332]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a52      	ldr	r2, [pc, #328]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b50      	ldr	r3, [pc, #320]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	494d      	ldr	r1, [pc, #308]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d044      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b47      	ldr	r3, [pc, #284]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d119      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e07f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e06f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e067      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e6e:	4b37      	ldr	r3, [pc, #220]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f023 0203 	bic.w	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4934      	ldr	r1, [pc, #208]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e80:	f7fb fd32 	bl	80018e8 <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e86:	e00a      	b.n	8005e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e88:	f7fb fd2e 	bl	80018e8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e04f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 020c 	and.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d1eb      	bne.n	8005e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eb0:	4b25      	ldr	r3, [pc, #148]	@ (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d20c      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b20      	ldr	r3, [pc, #128]	@ (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e032      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee4:	4b19      	ldr	r3, [pc, #100]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4916      	ldr	r1, [pc, #88]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f02:	4b12      	ldr	r3, [pc, #72]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	490e      	ldr	r1, [pc, #56]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f16:	f000 f821 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	490a      	ldr	r1, [pc, #40]	@ (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	5ccb      	ldrb	r3, [r1, r3]
 8005f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2e:	4a09      	ldr	r2, [pc, #36]	@ (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f32:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fb fc92 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40023c00 	.word	0x40023c00
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800a39c 	.word	0x0800a39c
 8005f54:	20000000 	.word	0x20000000
 8005f58:	2000000c 	.word	0x2000000c

08005f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f60:	b094      	sub	sp, #80	@ 0x50
 8005f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f74:	4b79      	ldr	r3, [pc, #484]	@ (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 030c 	and.w	r3, r3, #12
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d00d      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0x40>
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	f200 80e1 	bhi.w	8006148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0x34>
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d003      	beq.n	8005f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f8e:	e0db      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f90:	4b73      	ldr	r3, [pc, #460]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f94:	e0db      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f96:	4b73      	ldr	r3, [pc, #460]	@ (8006164 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f9a:	e0d8      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fa4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d063      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	2200      	movs	r2, #0
 8005fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	0159      	lsls	r1, r3, #5
 8005fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fe0:	0150      	lsls	r0, r2, #5
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	1a51      	subs	r1, r2, r1
 8005fea:	6139      	str	r1, [r7, #16]
 8005fec:	4629      	mov	r1, r5
 8005fee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006000:	4659      	mov	r1, fp
 8006002:	018b      	lsls	r3, r1, #6
 8006004:	4651      	mov	r1, sl
 8006006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800600a:	4651      	mov	r1, sl
 800600c:	018a      	lsls	r2, r1, #6
 800600e:	4651      	mov	r1, sl
 8006010:	ebb2 0801 	subs.w	r8, r2, r1
 8006014:	4659      	mov	r1, fp
 8006016:	eb63 0901 	sbc.w	r9, r3, r1
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800602a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800602e:	4690      	mov	r8, r2
 8006030:	4699      	mov	r9, r3
 8006032:	4623      	mov	r3, r4
 8006034:	eb18 0303 	adds.w	r3, r8, r3
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	462b      	mov	r3, r5
 800603c:	eb49 0303 	adc.w	r3, r9, r3
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800604e:	4629      	mov	r1, r5
 8006050:	024b      	lsls	r3, r1, #9
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006058:	4621      	mov	r1, r4
 800605a:	024a      	lsls	r2, r1, #9
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006062:	2200      	movs	r2, #0
 8006064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800606c:	f7fa f8ac 	bl	80001c8 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006078:	e058      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607a:	4b38      	ldr	r3, [pc, #224]	@ (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	099b      	lsrs	r3, r3, #6
 8006080:	2200      	movs	r2, #0
 8006082:	4618      	mov	r0, r3
 8006084:	4611      	mov	r1, r2
 8006086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	f04f 0000 	mov.w	r0, #0
 800609c:	f04f 0100 	mov.w	r1, #0
 80060a0:	0159      	lsls	r1, r3, #5
 80060a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a6:	0150      	lsls	r0, r2, #5
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4641      	mov	r1, r8
 80060ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80060b2:	4649      	mov	r1, r9
 80060b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060cc:	ebb2 040a 	subs.w	r4, r2, sl
 80060d0:	eb63 050b 	sbc.w	r5, r3, fp
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	00eb      	lsls	r3, r5, #3
 80060de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060e2:	00e2      	lsls	r2, r4, #3
 80060e4:	4614      	mov	r4, r2
 80060e6:	461d      	mov	r5, r3
 80060e8:	4643      	mov	r3, r8
 80060ea:	18e3      	adds	r3, r4, r3
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	464b      	mov	r3, r9
 80060f0:	eb45 0303 	adc.w	r3, r5, r3
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006102:	4629      	mov	r1, r5
 8006104:	028b      	lsls	r3, r1, #10
 8006106:	4621      	mov	r1, r4
 8006108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800610c:	4621      	mov	r1, r4
 800610e:	028a      	lsls	r2, r1, #10
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006116:	2200      	movs	r2, #0
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	61fa      	str	r2, [r7, #28]
 800611c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006120:	f7fa f852 	bl	80001c8 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4613      	mov	r3, r2
 800612a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800612c:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	3301      	adds	r3, #1
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800613c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800613e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x204>)
 800614a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006150:	4618      	mov	r0, r3
 8006152:	3750      	adds	r7, #80	@ 0x50
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800
 8006160:	00f42400 	.word	0x00f42400
 8006164:	007a1200 	.word	0x007a1200

08006168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800616c:	4b03      	ldr	r3, [pc, #12]	@ (800617c <HAL_RCC_GetHCLKFreq+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000000 	.word	0x20000000

08006180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006184:	f7ff fff0 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b05      	ldr	r3, [pc, #20]	@ (80061a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0a9b      	lsrs	r3, r3, #10
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4903      	ldr	r1, [pc, #12]	@ (80061a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40023800 	.word	0x40023800
 80061a4:	0800a3ac 	.word	0x0800a3ac

080061a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061ac:	f7ff ffdc 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0b5b      	lsrs	r3, r3, #13
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	@ (80061cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800a3ac 	.word	0x0800a3ac

080061d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d105      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d035      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061f8:	4b62      	ldr	r3, [pc, #392]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061fe:	f7fb fb73 	bl	80018e8 <HAL_GetTick>
 8006202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006204:	e008      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006206:	f7fb fb6f 	bl	80018e8 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e0b0      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006218:	4b5b      	ldr	r3, [pc, #364]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	019a      	lsls	r2, r3, #6
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	071b      	lsls	r3, r3, #28
 8006230:	4955      	ldr	r1, [pc, #340]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006238:	4b52      	ldr	r3, [pc, #328]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800623e:	f7fb fb53 	bl	80018e8 <HAL_GetTick>
 8006242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006246:	f7fb fb4f 	bl	80018e8 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e090      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006258:	4b4b      	ldr	r3, [pc, #300]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8083 	beq.w	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	4b44      	ldr	r3, [pc, #272]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	4a43      	ldr	r2, [pc, #268]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800627c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006280:	6413      	str	r3, [r2, #64]	@ 0x40
 8006282:	4b41      	ldr	r3, [pc, #260]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800628e:	4b3f      	ldr	r3, [pc, #252]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3e      	ldr	r2, [pc, #248]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006298:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800629a:	f7fb fb25 	bl	80018e8 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a2:	f7fb fb21 	bl	80018e8 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e062      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062b4:	4b35      	ldr	r3, [pc, #212]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062c0:	4b31      	ldr	r3, [pc, #196]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d02f      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d028      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062de:	4b2a      	ldr	r3, [pc, #168]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062e8:	4b29      	ldr	r3, [pc, #164]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062ee:	4b28      	ldr	r3, [pc, #160]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062f4:	4a24      	ldr	r2, [pc, #144]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062fa:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d114      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006306:	f7fb faef 	bl	80018e8 <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	e00a      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f7fb faeb 	bl	80018e8 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e02a      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006324:	4b18      	ldr	r3, [pc, #96]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ee      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800633c:	d10d      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800633e:	4b12      	ldr	r3, [pc, #72]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800634e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006352:	490d      	ldr	r1, [pc, #52]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006354:	4313      	orrs	r3, r2
 8006356:	608b      	str	r3, [r1, #8]
 8006358:	e005      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800635a:	4b0b      	ldr	r3, [pc, #44]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4a0a      	ldr	r2, [pc, #40]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006360:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006364:	6093      	str	r3, [r2, #8]
 8006366:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006368:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006372:	4905      	ldr	r1, [pc, #20]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006374:	4313      	orrs	r3, r2
 8006376:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	42470068 	.word	0x42470068
 8006388:	40023800 	.word	0x40023800
 800638c:	40007000 	.word	0x40007000
 8006390:	42470e40 	.word	0x42470e40

08006394 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d13f      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80063b2:	4b24      	ldr	r3, [pc, #144]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d006      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063c8:	d12f      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80063ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80063cc:	617b      	str	r3, [r7, #20]
          break;
 80063ce:	e02f      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80063d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063dc:	d108      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063de:	4b19      	ldr	r3, [pc, #100]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063e6:	4a19      	ldr	r2, [pc, #100]	@ (800644c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	e007      	b.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063f0:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063f8:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006400:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006414:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800641a:	0f1b      	lsrs	r3, r3, #28
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	617b      	str	r3, [r7, #20]
          break;
 8006428:	e002      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
          break;
 800642e:	bf00      	nop
        }
      }
      break;
 8006430:	e000      	b.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006432:	bf00      	nop
    }
  }
  return frequency;
 8006434:	697b      	ldr	r3, [r7, #20]
}
 8006436:	4618      	mov	r0, r3
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	00bb8000 	.word	0x00bb8000
 800644c:	007a1200 	.word	0x007a1200
 8006450:	00f42400 	.word	0x00f42400

08006454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e07b      	b.n	800655e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d108      	bne.n	8006480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006476:	d009      	beq.n	800648c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	61da      	str	r2, [r3, #28]
 800647e:	e005      	b.n	800648c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fa fcec 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006510:	ea42 0103 	orr.w	r1, r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 0104 	and.w	r1, r3, #4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	f003 0210 	and.w	r2, r3, #16
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800654c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e042      	b.n	80065fe <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d106      	bne.n	8006592 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fa fda5 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2224      	movs	r2, #36	@ 0x24
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc86 	bl	8006ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b0ba      	sub	sp, #232	@ 0xe8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800662e:	2300      	movs	r3, #0
 8006630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006634:	2300      	movs	r3, #0
 8006636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10f      	bne.n	800666e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_UART_IRQHandler+0x66>
 800665a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fb69 	bl	8006d3e <UART_Receive_IT>
      return;
 800666c:	e25b      	b.n	8006b26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800666e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80de 	beq.w	8006834 <HAL_UART_IRQHandler+0x22c>
 8006678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006688:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80d1 	beq.w	8006834 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_UART_IRQHandler+0xae>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	f043 0201 	orr.w	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_UART_IRQHandler+0xd2>
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f043 0202 	orr.w	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_UART_IRQHandler+0xf6>
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f6:	f043 0204 	orr.w	r2, r3, #4
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d011      	beq.n	800672e <HAL_UART_IRQHandler+0x126>
 800670a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d105      	bne.n	8006722 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	f043 0208 	orr.w	r2, r3, #8
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 81f2 	beq.w	8006b1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_UART_IRQHandler+0x14e>
 8006744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 faf4 	bl	8006d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006760:	2b40      	cmp	r3, #64	@ 0x40
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <HAL_UART_IRQHandler+0x17a>
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d04f      	beq.n	8006822 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9fc 	bl	8006b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006792:	2b40      	cmp	r3, #64	@ 0x40
 8006794:	d141      	bne.n	800681a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3314      	adds	r3, #20
 80067be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1d9      	bne.n	8006796 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d013      	beq.n	8006812 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ee:	4a7e      	ldr	r2, [pc, #504]	@ (80069e8 <HAL_UART_IRQHandler+0x3e0>)
 80067f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fb fb7c 	bl	8001ef4 <HAL_DMA_Abort_IT>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d016      	beq.n	8006830 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800680c:	4610      	mov	r0, r2
 800680e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	e00e      	b.n	8006830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f99e 	bl	8006b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e00a      	b.n	8006830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f99a 	bl	8006b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	e006      	b.n	8006830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f996 	bl	8006b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800682e:	e175      	b.n	8006b1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	bf00      	nop
    return;
 8006832:	e173      	b.n	8006b1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006838:	2b01      	cmp	r3, #1
 800683a:	f040 814f 	bne.w	8006adc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800683e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8148 	beq.w	8006adc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8141 	beq.w	8006adc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800685a:	2300      	movs	r3, #0
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687a:	2b40      	cmp	r3, #64	@ 0x40
 800687c:	f040 80b6 	bne.w	80069ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800688c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8145 	beq.w	8006b20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800689a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800689e:	429a      	cmp	r2, r3
 80068a0:	f080 813e 	bcs.w	8006b20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b6:	f000 8088 	beq.w	80069ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	330c      	adds	r3, #12
 80068c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80068e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1d9      	bne.n	80068ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3314      	adds	r3, #20
 800690c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800692a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800692e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006932:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800693c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e1      	bne.n	8006906 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3314      	adds	r3, #20
 8006948:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3314      	adds	r3, #20
 8006962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006966:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006968:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800696c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e3      	bne.n	8006942 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800699a:	f023 0310 	bic.w	r3, r3, #16
 800699e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e3      	bne.n	8006988 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fb fa25 	bl	8001e14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	b29b      	uxth	r3, r3
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8c1 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069e6:	e09b      	b.n	8006b20 <HAL_UART_IRQHandler+0x518>
 80069e8:	08006c47 	.word	0x08006c47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 808e 	beq.w	8006b24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8089 	beq.w	8006b24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a36:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e3      	bne.n	8006a12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3314      	adds	r3, #20
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	623b      	str	r3, [r7, #32]
   return(result);
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e3      	bne.n	8006a4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0310 	bic.w	r3, r3, #16
 8006aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ab4:	61fa      	str	r2, [r7, #28]
 8006ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e3      	bne.n	8006a90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f847 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ada:	e023      	b.n	8006b24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <HAL_UART_IRQHandler+0x4f4>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8ba 	bl	8006c6e <UART_Transmit_IT>
    return;
 8006afa:	e014      	b.n	8006b26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00e      	beq.n	8006b26 <HAL_UART_IRQHandler+0x51e>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f8fa 	bl	8006d0e <UART_EndTransmit_IT>
    return;
 8006b1a:	e004      	b.n	8006b26 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b24:	bf00      	nop
  }
}
 8006b26:	37e8      	adds	r7, #232	@ 0xe8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b095      	sub	sp, #84	@ 0x54
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e5      	bne.n	8006b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3314      	adds	r3, #20
 8006bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3314      	adds	r3, #20
 8006bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e5      	bne.n	8006bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d119      	bne.n	8006c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0310 	bic.w	r3, r3, #16
 8006c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c18:	61ba      	str	r2, [r7, #24]
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6979      	ldr	r1, [r7, #20]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	613b      	str	r3, [r7, #16]
   return(result);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c3a:	bf00      	nop
 8006c3c:	3754      	adds	r7, #84	@ 0x54
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff ff77 	bl	8006b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b21      	cmp	r3, #33	@ 0x21
 8006c80:	d13e      	bne.n	8006d00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8a:	d114      	bne.n	8006cb6 <UART_Transmit_IT+0x48>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d110      	bne.n	8006cb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	1c9a      	adds	r2, r3, #2
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	621a      	str	r2, [r3, #32]
 8006cb4:	e008      	b.n	8006cc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	1c59      	adds	r1, r3, #1
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6211      	str	r1, [r2, #32]
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10f      	bne.n	8006cfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e000      	b.n	8006d02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d00:	2302      	movs	r3, #2
  }
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fefc 	bl	8006b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b08c      	sub	sp, #48	@ 0x30
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b22      	cmp	r3, #34	@ 0x22
 8006d50:	f040 80ae 	bne.w	8006eb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5c:	d117      	bne.n	8006d8e <UART_Receive_IT+0x50>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d113      	bne.n	8006d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	1c9a      	adds	r2, r3, #2
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d8c:	e026      	b.n	8006ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da0:	d007      	beq.n	8006db2 <UART_Receive_IT+0x74>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <UART_Receive_IT+0x82>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e008      	b.n	8006dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4619      	mov	r1, r3
 8006dea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d15d      	bne.n	8006eac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0220 	bic.w	r2, r2, #32
 8006dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d135      	bne.n	8006ea2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f023 0310 	bic.w	r3, r3, #16
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e5c:	623a      	str	r2, [r7, #32]
 8006e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	69f9      	ldr	r1, [r7, #28]
 8006e62:	6a3a      	ldr	r2, [r7, #32]
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	2b10      	cmp	r3, #16
 8006e7c:	d10a      	bne.n	8006e94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fe64 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
 8006ea0:	e002      	b.n	8006ea8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff fe4c 	bl	8006b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e002      	b.n	8006eb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3730      	adds	r7, #48	@ 0x30
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec0:	b0c0      	sub	sp, #256	@ 0x100
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed8:	68d9      	ldr	r1, [r3, #12]
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	ea40 0301 	orr.w	r3, r0, r1
 8006ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f14:	f021 010c 	bic.w	r1, r1, #12
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f22:	430b      	orrs	r3, r1
 8006f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f36:	6999      	ldr	r1, [r3, #24]
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	ea40 0301 	orr.w	r3, r0, r1
 8006f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8007188 <UART_SetConfig+0x2cc>)
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d005      	beq.n	8006f5c <UART_SetConfig+0xa0>
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8d      	ldr	r3, [pc, #564]	@ (800718c <UART_SetConfig+0x2d0>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d104      	bne.n	8006f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7ff f924 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 8006f60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f64:	e003      	b.n	8006f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7ff f90b 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8006f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f78:	f040 810c 	bne.w	8007194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f8e:	4622      	mov	r2, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f96:	415b      	adcs	r3, r3
 8006f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	eb12 0801 	adds.w	r8, r2, r1
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eb43 0901 	adc.w	r9, r3, r1
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fbe:	4690      	mov	r8, r2
 8006fc0:	4699      	mov	r9, r3
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	eb18 0303 	adds.w	r3, r8, r3
 8006fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	462b      	mov	r3, r5
 8006fce:	eb49 0303 	adc.w	r3, r9, r3
 8006fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fea:	460b      	mov	r3, r1
 8006fec:	18db      	adds	r3, r3, r3
 8006fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	eb42 0303 	adc.w	r3, r2, r3
 8006ff6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007000:	f7f9 f8e2 	bl	80001c8 <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4b61      	ldr	r3, [pc, #388]	@ (8007190 <UART_SetConfig+0x2d4>)
 800700a:	fba3 2302 	umull	r2, r3, r3, r2
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	011c      	lsls	r4, r3, #4
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800701c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800702c:	415b      	adcs	r3, r3
 800702e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007034:	4641      	mov	r1, r8
 8007036:	eb12 0a01 	adds.w	sl, r2, r1
 800703a:	4649      	mov	r1, r9
 800703c:	eb43 0b01 	adc.w	fp, r3, r1
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800704c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007054:	4692      	mov	sl, r2
 8007056:	469b      	mov	fp, r3
 8007058:	4643      	mov	r3, r8
 800705a:	eb1a 0303 	adds.w	r3, sl, r3
 800705e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007062:	464b      	mov	r3, r9
 8007064:	eb4b 0303 	adc.w	r3, fp, r3
 8007068:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007078:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800707c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007080:	460b      	mov	r3, r1
 8007082:	18db      	adds	r3, r3, r3
 8007084:	643b      	str	r3, [r7, #64]	@ 0x40
 8007086:	4613      	mov	r3, r2
 8007088:	eb42 0303 	adc.w	r3, r2, r3
 800708c:	647b      	str	r3, [r7, #68]	@ 0x44
 800708e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007096:	f7f9 f897 	bl	80001c8 <__aeabi_uldivmod>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007190 <UART_SetConfig+0x2d4>)
 80070a2:	fba3 2301 	umull	r2, r3, r3, r1
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2264      	movs	r2, #100	@ 0x64
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	1acb      	subs	r3, r1, r3
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070b6:	4b36      	ldr	r3, [pc, #216]	@ (8007190 <UART_SetConfig+0x2d4>)
 80070b8:	fba3 2302 	umull	r2, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070c4:	441c      	add	r4, r3
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070e0:	415b      	adcs	r3, r3
 80070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070e8:	4641      	mov	r1, r8
 80070ea:	1851      	adds	r1, r2, r1
 80070ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80070ee:	4649      	mov	r1, r9
 80070f0:	414b      	adcs	r3, r1
 80070f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007100:	4659      	mov	r1, fp
 8007102:	00cb      	lsls	r3, r1, #3
 8007104:	4651      	mov	r1, sl
 8007106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710a:	4651      	mov	r1, sl
 800710c:	00ca      	lsls	r2, r1, #3
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	4603      	mov	r3, r0
 8007114:	4642      	mov	r2, r8
 8007116:	189b      	adds	r3, r3, r2
 8007118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800711c:	464b      	mov	r3, r9
 800711e:	460a      	mov	r2, r1
 8007120:	eb42 0303 	adc.w	r3, r2, r3
 8007124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007134:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800713c:	460b      	mov	r3, r1
 800713e:	18db      	adds	r3, r3, r3
 8007140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007142:	4613      	mov	r3, r2
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800714a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800714e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007152:	f7f9 f839 	bl	80001c8 <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b0d      	ldr	r3, [pc, #52]	@ (8007190 <UART_SetConfig+0x2d4>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	@ 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	3332      	adds	r3, #50	@ 0x32
 800716e:	4a08      	ldr	r2, [pc, #32]	@ (8007190 <UART_SetConfig+0x2d4>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 0207 	and.w	r2, r3, #7
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4422      	add	r2, r4
 8007182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007184:	e106      	b.n	8007394 <UART_SetConfig+0x4d8>
 8007186:	bf00      	nop
 8007188:	40011000 	.word	0x40011000
 800718c:	40011400 	.word	0x40011400
 8007190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800719e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	6239      	str	r1, [r7, #32]
 80071ae:	415b      	adcs	r3, r3
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071b6:	4641      	mov	r1, r8
 80071b8:	1854      	adds	r4, r2, r1
 80071ba:	4649      	mov	r1, r9
 80071bc:	eb43 0501 	adc.w	r5, r3, r1
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	00eb      	lsls	r3, r5, #3
 80071ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ce:	00e2      	lsls	r2, r4, #3
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	4643      	mov	r3, r8
 80071d6:	18e3      	adds	r3, r4, r3
 80071d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071dc:	464b      	mov	r3, r9
 80071de:	eb45 0303 	adc.w	r3, r5, r3
 80071e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007202:	4629      	mov	r1, r5
 8007204:	008b      	lsls	r3, r1, #2
 8007206:	4621      	mov	r1, r4
 8007208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720c:	4621      	mov	r1, r4
 800720e:	008a      	lsls	r2, r1, #2
 8007210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007214:	f7f8 ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4b60      	ldr	r3, [pc, #384]	@ (80073a0 <UART_SetConfig+0x4e4>)
 800721e:	fba3 2302 	umull	r2, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	011c      	lsls	r4, r3, #4
 8007226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722a:	2200      	movs	r2, #0
 800722c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007230:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	1891      	adds	r1, r2, r2
 800723e:	61b9      	str	r1, [r7, #24]
 8007240:	415b      	adcs	r3, r3
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007248:	4641      	mov	r1, r8
 800724a:	1851      	adds	r1, r2, r1
 800724c:	6139      	str	r1, [r7, #16]
 800724e:	4649      	mov	r1, r9
 8007250:	414b      	adcs	r3, r1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007260:	4659      	mov	r1, fp
 8007262:	00cb      	lsls	r3, r1, #3
 8007264:	4651      	mov	r1, sl
 8007266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726a:	4651      	mov	r1, sl
 800726c:	00ca      	lsls	r2, r1, #3
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	4603      	mov	r3, r0
 8007274:	4642      	mov	r2, r8
 8007276:	189b      	adds	r3, r3, r2
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800727c:	464b      	mov	r3, r9
 800727e:	460a      	mov	r2, r1
 8007280:	eb42 0303 	adc.w	r3, r2, r3
 8007284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007292:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072a0:	4649      	mov	r1, r9
 80072a2:	008b      	lsls	r3, r1, #2
 80072a4:	4641      	mov	r1, r8
 80072a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072aa:	4641      	mov	r1, r8
 80072ac:	008a      	lsls	r2, r1, #2
 80072ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072b2:	f7f8 ff89 	bl	80001c8 <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	4b38      	ldr	r3, [pc, #224]	@ (80073a0 <UART_SetConfig+0x4e4>)
 80072be:	fba3 2301 	umull	r2, r3, r3, r1
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	2264      	movs	r2, #100	@ 0x64
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	1acb      	subs	r3, r1, r3
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	3332      	adds	r3, #50	@ 0x32
 80072d0:	4a33      	ldr	r2, [pc, #204]	@ (80073a0 <UART_SetConfig+0x4e4>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072dc:	441c      	add	r4, r3
 80072de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e2:	2200      	movs	r2, #0
 80072e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80072e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80072e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072ec:	4642      	mov	r2, r8
 80072ee:	464b      	mov	r3, r9
 80072f0:	1891      	adds	r1, r2, r2
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	415b      	adcs	r3, r3
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fc:	4641      	mov	r1, r8
 80072fe:	1851      	adds	r1, r2, r1
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	4649      	mov	r1, r9
 8007304:	414b      	adcs	r3, r1
 8007306:	607b      	str	r3, [r7, #4]
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007314:	4659      	mov	r1, fp
 8007316:	00cb      	lsls	r3, r1, #3
 8007318:	4651      	mov	r1, sl
 800731a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731e:	4651      	mov	r1, sl
 8007320:	00ca      	lsls	r2, r1, #3
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	4603      	mov	r3, r0
 8007328:	4642      	mov	r2, r8
 800732a:	189b      	adds	r3, r3, r2
 800732c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800732e:	464b      	mov	r3, r9
 8007330:	460a      	mov	r2, r1
 8007332:	eb42 0303 	adc.w	r3, r2, r3
 8007336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	663b      	str	r3, [r7, #96]	@ 0x60
 8007342:	667a      	str	r2, [r7, #100]	@ 0x64
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007350:	4649      	mov	r1, r9
 8007352:	008b      	lsls	r3, r1, #2
 8007354:	4641      	mov	r1, r8
 8007356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735a:	4641      	mov	r1, r8
 800735c:	008a      	lsls	r2, r1, #2
 800735e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007362:	f7f8 ff31 	bl	80001c8 <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <UART_SetConfig+0x4e4>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	@ 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	3332      	adds	r3, #50	@ 0x32
 800737e:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <UART_SetConfig+0x4e4>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 020f 	and.w	r2, r3, #15
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4422      	add	r2, r4
 8007392:	609a      	str	r2, [r3, #8]
}
 8007394:	bf00      	nop
 8007396:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a0:	51eb851f 	.word	0x51eb851f

080073a4 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80073a8:	4b10      	ldr	r3, [pc, #64]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80073b4:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073b6:	4a0e      	ldr	r2, [pc, #56]	@ (80073f0 <MX_PDM2PCM_Init+0x4c>)
 80073b8:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 80073ba:	4b0c      	ldr	r3, [pc, #48]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073bc:	2202      	movs	r2, #2
 80073be:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 80073c0:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073c2:	2202      	movs	r2, #2
 80073c4:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80073c6:	4809      	ldr	r0, [pc, #36]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073c8:	f001 fd26 	bl	8008e18 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80073cc:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <MX_PDM2PCM_Init+0x50>)
 80073ce:	2202      	movs	r2, #2
 80073d0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80073d2:	4b08      	ldr	r3, [pc, #32]	@ (80073f4 <MX_PDM2PCM_Init+0x50>)
 80073d4:	2210      	movs	r2, #16
 80073d6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 80073d8:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <MX_PDM2PCM_Init+0x50>)
 80073da:	2200      	movs	r2, #0
 80073dc:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80073de:	4905      	ldr	r1, [pc, #20]	@ (80073f4 <MX_PDM2PCM_Init+0x50>)
 80073e0:	4802      	ldr	r0, [pc, #8]	@ (80073ec <MX_PDM2PCM_Init+0x48>)
 80073e2:	f001 fde9 	bl	8008fb8 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80073e6:	bf00      	nop
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000b8c 	.word	0x20000b8c
 80073f0:	7d70a3d6 	.word	0x7d70a3d6
 80073f4:	20000bd8 	.word	0x20000bd8

080073f8 <D16_GENERIC>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8007400:	b089      	sub	sp, #36	@ 0x24
 8007402:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007404:	6993      	ldr	r3, [r2, #24]
 8007406:	9406      	str	r4, [sp, #24]
 8007408:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800740a:	9307      	str	r3, [sp, #28]
 800740c:	9402      	str	r4, [sp, #8]
 800740e:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8007412:	69d3      	ldr	r3, [r2, #28]
 8007414:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	2d00      	cmp	r5, #0
 800741a:	d066      	beq.n	80074ea <D16_GENERIC+0xf2>
 800741c:	f004 0520 	and.w	r5, r4, #32
 8007420:	f004 0410 	and.w	r4, r4, #16
 8007424:	9505      	str	r5, [sp, #20]
 8007426:	4937      	ldr	r1, [pc, #220]	@ (8007504 <D16_GENERIC+0x10c>)
 8007428:	9404      	str	r4, [sp, #16]
 800742a:	f04f 0c00 	mov.w	ip, #0
 800742e:	4635      	mov	r5, r6
 8007430:	e04f      	b.n	80074d2 <D16_GENERIC+0xda>
 8007432:	5d87      	ldrb	r7, [r0, r6]
 8007434:	7804      	ldrb	r4, [r0, #0]
 8007436:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800743a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800743e:	b2e6      	uxtb	r6, r4
 8007440:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007444:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007448:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800744c:	4433      	add	r3, r6
 800744e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8007452:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8007456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800745a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800745e:	0aa3      	lsrs	r3, r4, #10
 8007460:	4c29      	ldr	r4, [pc, #164]	@ (8007508 <D16_GENERIC+0x110>)
 8007462:	fb26 5404 	smlad	r4, r6, r4, r5
 8007466:	4d29      	ldr	r5, [pc, #164]	@ (800750c <D16_GENERIC+0x114>)
 8007468:	fb26 f505 	smuad	r5, r6, r5
 800746c:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8007470:	eb04 080a 	add.w	r8, r4, sl
 8007474:	eba8 080b 	sub.w	r8, r8, fp
 8007478:	4646      	mov	r6, r8
 800747a:	17f7      	asrs	r7, r6, #31
 800747c:	e9cd 6700 	strd	r6, r7, [sp]
 8007480:	9e04      	ldr	r6, [sp, #16]
 8007482:	f10c 0e01 	add.w	lr, ip, #1
 8007486:	b16e      	cbz	r6, 80074a4 <D16_GENERIC+0xac>
 8007488:	6a16      	ldr	r6, [r2, #32]
 800748a:	9f01      	ldr	r7, [sp, #4]
 800748c:	fba8 ab06 	umull	sl, fp, r8, r6
 8007490:	fb06 bb07 	mla	fp, r6, r7, fp
 8007494:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8007498:	f14b 0900 	adc.w	r9, fp, #0
 800749c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80074a0:	46a3      	mov	fp, r4
 80074a2:	4654      	mov	r4, sl
 80074a4:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80074a6:	9f02      	ldr	r7, [sp, #8]
 80074a8:	0424      	lsls	r4, r4, #16
 80074aa:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80074ae:	f04f 0900 	mov.w	r9, #0
 80074b2:	fb0c fc06 	mul.w	ip, ip, r6
 80074b6:	fbc7 8904 	smlal	r8, r9, r7, r4
 80074ba:	9e03      	ldr	r6, [sp, #12]
 80074bc:	464f      	mov	r7, r9
 80074be:	10bc      	asrs	r4, r7, #2
 80074c0:	f304 040f 	ssat	r4, #16, r4
 80074c4:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 80074c8:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80074ca:	fa1f fc8e 	uxth.w	ip, lr
 80074ce:	4564      	cmp	r4, ip
 80074d0:	d90a      	bls.n	80074e8 <D16_GENERIC+0xf0>
 80074d2:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80074d4:	2c01      	cmp	r4, #1
 80074d6:	b2e6      	uxtb	r6, r4
 80074d8:	d1ab      	bne.n	8007432 <D16_GENERIC+0x3a>
 80074da:	9e05      	ldr	r6, [sp, #20]
 80074dc:	f850 4b02 	ldr.w	r4, [r0], #2
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	d0ac      	beq.n	800743e <D16_GENERIC+0x46>
 80074e4:	ba64      	rev16	r4, r4
 80074e6:	e7aa      	b.n	800743e <D16_GENERIC+0x46>
 80074e8:	462e      	mov	r6, r5
 80074ea:	9906      	ldr	r1, [sp, #24]
 80074ec:	61d3      	str	r3, [r2, #28]
 80074ee:	9b07      	ldr	r3, [sp, #28]
 80074f0:	6096      	str	r6, [r2, #8]
 80074f2:	2000      	movs	r0, #0
 80074f4:	60d1      	str	r1, [r2, #12]
 80074f6:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 80074fa:	6193      	str	r3, [r2, #24]
 80074fc:	b009      	add	sp, #36	@ 0x24
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	bf00      	nop
 8007504:	20000014 	.word	0x20000014
 8007508:	00030001 	.word	0x00030001
 800750c:	00010003 	.word	0x00010003

08007510 <D24_GENERIC>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8007516:	6993      	ldr	r3, [r2, #24]
 8007518:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 800751a:	b089      	sub	sp, #36	@ 0x24
 800751c:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	9503      	str	r5, [sp, #12]
 8007524:	69d3      	ldr	r3, [r2, #28]
 8007526:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007528:	9104      	str	r1, [sp, #16]
 800752a:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 800752e:	2e00      	cmp	r6, #0
 8007530:	f000 808f 	beq.w	8007652 <D24_GENERIC+0x142>
 8007534:	f005 0620 	and.w	r6, r5, #32
 8007538:	f005 0510 	and.w	r5, r5, #16
 800753c:	4953      	ldr	r1, [pc, #332]	@ (800768c <D24_GENERIC+0x17c>)
 800753e:	9606      	str	r6, [sp, #24]
 8007540:	9505      	str	r5, [sp, #20]
 8007542:	f04f 0c00 	mov.w	ip, #0
 8007546:	f8cd 9008 	str.w	r9, [sp, #8]
 800754a:	e068      	b.n	800761e <D24_GENERIC+0x10e>
 800754c:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007550:	f810 8007 	ldrb.w	r8, [r0, r7]
 8007554:	042d      	lsls	r5, r5, #16
 8007556:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800755a:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800755e:	44ae      	add	lr, r5
 8007560:	4438      	add	r0, r7
 8007562:	fa5f f68e 	uxtb.w	r6, lr
 8007566:	f3ce 2507 	ubfx	r5, lr, #8, #8
 800756a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800756e:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8007572:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8007576:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800757a:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800757e:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8007582:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007586:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800758a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800758e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007592:	4d3f      	ldr	r5, [pc, #252]	@ (8007690 <D24_GENERIC+0x180>)
 8007594:	fb26 b705 	smlad	r7, r6, r5, fp
 8007598:	4d3e      	ldr	r5, [pc, #248]	@ (8007694 <D24_GENERIC+0x184>)
 800759a:	fb26 4b05 	smlad	fp, r6, r5, r4
 800759e:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80075a2:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80075a6:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80075aa:	2401      	movs	r4, #1
 80075ac:	fb26 f604 	smuad	r6, r6, r4
 80075b0:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 80075b4:	9f02      	ldr	r7, [sp, #8]
 80075b6:	eb0c 0e04 	add.w	lr, ip, r4
 80075ba:	eb08 0406 	add.w	r4, r8, r6
 80075be:	eb05 060a 	add.w	r6, r5, sl
 80075c2:	1bf6      	subs	r6, r6, r7
 80075c4:	4637      	mov	r7, r6
 80075c6:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80075ca:	e9cd 7800 	strd	r7, r8, [sp]
 80075ce:	9f05      	ldr	r7, [sp, #20]
 80075d0:	b177      	cbz	r7, 80075f0 <D24_GENERIC+0xe0>
 80075d2:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80075d6:	9502      	str	r5, [sp, #8]
 80075d8:	fba6 9a08 	umull	r9, sl, r6, r8
 80075dc:	9e01      	ldr	r6, [sp, #4]
 80075de:	fb08 aa06 	mla	sl, r8, r6, sl
 80075e2:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80075e6:	f14a 0700 	adc.w	r7, sl, #0
 80075ea:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80075ee:	4655      	mov	r5, sl
 80075f0:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80075f2:	9f03      	ldr	r7, [sp, #12]
 80075f4:	03ad      	lsls	r5, r5, #14
 80075f6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80075fa:	f04f 0900 	mov.w	r9, #0
 80075fe:	fb0c fc06 	mul.w	ip, ip, r6
 8007602:	fbc7 8905 	smlal	r8, r9, r7, r5
 8007606:	9e04      	ldr	r6, [sp, #16]
 8007608:	464f      	mov	r7, r9
 800760a:	10bd      	asrs	r5, r7, #2
 800760c:	f305 050f 	ssat	r5, #16, r5
 8007610:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8007614:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007616:	fa1f fc8e 	uxth.w	ip, lr
 800761a:	4565      	cmp	r5, ip
 800761c:	d917      	bls.n	800764e <D24_GENERIC+0x13e>
 800761e:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8007620:	f890 e000 	ldrb.w	lr, [r0]
 8007624:	b2ef      	uxtb	r7, r5
 8007626:	2d01      	cmp	r5, #1
 8007628:	b23e      	sxth	r6, r7
 800762a:	d18f      	bne.n	800754c <D24_GENERIC+0x3c>
 800762c:	9d06      	ldr	r5, [sp, #24]
 800762e:	b1dd      	cbz	r5, 8007668 <D24_GENERIC+0x158>
 8007630:	78c5      	ldrb	r5, [r0, #3]
 8007632:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8007636:	f01c 0f01 	tst.w	ip, #1
 800763a:	ea4f 2605 	mov.w	r6, r5, lsl #8
 800763e:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8007642:	d11b      	bne.n	800767c <D24_GENERIC+0x16c>
 8007644:	f890 e001 	ldrb.w	lr, [r0, #1]
 8007648:	3002      	adds	r0, #2
 800764a:	44c6      	add	lr, r8
 800764c:	e789      	b.n	8007562 <D24_GENERIC+0x52>
 800764e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007652:	61d3      	str	r3, [r2, #28]
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	6193      	str	r3, [r2, #24]
 8007658:	2000      	movs	r0, #0
 800765a:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 800765e:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8007662:	b009      	add	sp, #36	@ 0x24
 8007664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007668:	f890 8001 	ldrb.w	r8, [r0, #1]
 800766c:	7885      	ldrb	r5, [r0, #2]
 800766e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8007672:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8007676:	44c6      	add	lr, r8
 8007678:	3003      	adds	r0, #3
 800767a:	e772      	b.n	8007562 <D24_GENERIC+0x52>
 800767c:	f890 8002 	ldrb.w	r8, [r0, #2]
 8007680:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8007684:	44c6      	add	lr, r8
 8007686:	3004      	adds	r0, #4
 8007688:	e76b      	b.n	8007562 <D24_GENERIC+0x52>
 800768a:	bf00      	nop
 800768c:	20000014 	.word	0x20000014
 8007690:	00030001 	.word	0x00030001
 8007694:	00060007 	.word	0x00060007

08007698 <D32_GENERIC>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800769e:	6993      	ldr	r3, [r2, #24]
 80076a0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80076a2:	69d6      	ldr	r6, [r2, #28]
 80076a4:	b089      	sub	sp, #36	@ 0x24
 80076a6:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	9403      	str	r4, [sp, #12]
 80076ae:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 80076b2:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80076b4:	9104      	str	r1, [sp, #16]
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	f000 809a 	beq.w	80077f0 <D32_GENERIC+0x158>
 80076bc:	f004 0520 	and.w	r5, r4, #32
 80076c0:	f004 0410 	and.w	r4, r4, #16
 80076c4:	9506      	str	r5, [sp, #24]
 80076c6:	4951      	ldr	r1, [pc, #324]	@ (800780c <D32_GENERIC+0x174>)
 80076c8:	9405      	str	r4, [sp, #20]
 80076ca:	f04f 0e00 	mov.w	lr, #0
 80076ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80076d2:	461d      	mov	r5, r3
 80076d4:	4617      	mov	r7, r2
 80076d6:	e077      	b.n	80077c8 <D32_GENERIC+0x130>
 80076d8:	7823      	ldrb	r3, [r4, #0]
 80076da:	f810 800c 	ldrb.w	r8, [r0, ip]
 80076de:	f810 c002 	ldrb.w	ip, [r0, r2]
 80076e2:	7800      	ldrb	r0, [r0, #0]
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80076ea:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80076ee:	4403      	add	r3, r0
 80076f0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80076f4:	b2dc      	uxtb	r4, r3
 80076f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80076fa:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80076fe:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007706:	0e1b      	lsrs	r3, r3, #24
 8007708:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800770c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8007710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007714:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8007718:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 800771c:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8007720:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8007724:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007728:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800772c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007730:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8007734:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007738:	4b35      	ldr	r3, [pc, #212]	@ (8007810 <D32_GENERIC+0x178>)
 800773a:	fb22 b403 	smlad	r4, r2, r3, fp
 800773e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007742:	fb2c 4803 	smlad	r8, ip, r3, r4
 8007746:	4b33      	ldr	r3, [pc, #204]	@ (8007814 <D32_GENERIC+0x17c>)
 8007748:	fb22 5503 	smlad	r5, r2, r3, r5
 800774c:	4b32      	ldr	r3, [pc, #200]	@ (8007818 <D32_GENERIC+0x180>)
 800774e:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8007752:	2301      	movs	r3, #1
 8007754:	fb22 f203 	smuad	r2, r2, r3
 8007758:	4b30      	ldr	r3, [pc, #192]	@ (800781c <D32_GENERIC+0x184>)
 800775a:	fb2c 2503 	smlad	r5, ip, r3, r2
 800775e:	9b02      	ldr	r3, [sp, #8]
 8007760:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8007764:	eb04 080a 	add.w	r8, r4, sl
 8007768:	eba8 0803 	sub.w	r8, r8, r3
 800776c:	4642      	mov	r2, r8
 800776e:	17d3      	asrs	r3, r2, #31
 8007770:	e9cd 2300 	strd	r2, r3, [sp]
 8007774:	9b05      	ldr	r3, [sp, #20]
 8007776:	f10e 0c01 	add.w	ip, lr, #1
 800777a:	b173      	cbz	r3, 800779a <D32_GENERIC+0x102>
 800777c:	6a3a      	ldr	r2, [r7, #32]
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	9402      	str	r4, [sp, #8]
 8007782:	fba8 8902 	umull	r8, r9, r8, r2
 8007786:	469a      	mov	sl, r3
 8007788:	fb02 930a 	mla	r3, r2, sl, r9
 800778c:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8007790:	f143 0900 	adc.w	r9, r3, #0
 8007794:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007798:	4654      	mov	r4, sl
 800779a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	fb0e fe03 	mul.w	lr, lr, r3
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	0364      	lsls	r4, r4, #13
 80077a6:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80077aa:	f04f 0900 	mov.w	r9, #0
 80077ae:	fbc3 8904 	smlal	r8, r9, r3, r4
 80077b2:	464b      	mov	r3, r9
 80077b4:	109b      	asrs	r3, r3, #2
 80077b6:	f303 030f 	ssat	r3, #16, r3
 80077ba:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 80077be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077c0:	fa1f fe8c 	uxth.w	lr, ip
 80077c4:	4573      	cmp	r3, lr
 80077c6:	d90f      	bls.n	80077e8 <D32_GENERIC+0x150>
 80077c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 80077d2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80077d6:	f47f af7f 	bne.w	80076d8 <D32_GENERIC+0x40>
 80077da:	1d02      	adds	r2, r0, #4
 80077dc:	6803      	ldr	r3, [r0, #0]
 80077de:	9806      	ldr	r0, [sp, #24]
 80077e0:	b188      	cbz	r0, 8007806 <D32_GENERIC+0x16e>
 80077e2:	ba5b      	rev16	r3, r3
 80077e4:	4610      	mov	r0, r2
 80077e6:	e785      	b.n	80076f4 <D32_GENERIC+0x5c>
 80077e8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80077ec:	462b      	mov	r3, r5
 80077ee:	463a      	mov	r2, r7
 80077f0:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	61d6      	str	r6, [r2, #28]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e9c2 a904 	strd	sl, r9, [r2, #16]
 80077fe:	6193      	str	r3, [r2, #24]
 8007800:	b009      	add	sp, #36	@ 0x24
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	4610      	mov	r0, r2
 8007808:	e774      	b.n	80076f4 <D32_GENERIC+0x5c>
 800780a:	bf00      	nop
 800780c:	20000014 	.word	0x20000014
 8007810:	00060003 	.word	0x00060003
 8007814:	000a000c 	.word	0x000a000c
 8007818:	000c000a 	.word	0x000c000a
 800781c:	00030006 	.word	0x00030006

08007820 <D48_GENERIC>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8007828:	b08b      	sub	sp, #44	@ 0x2c
 800782a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	6993      	ldr	r3, [r2, #24]
 8007830:	9309      	str	r3, [sp, #36]	@ 0x24
 8007832:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8007836:	9401      	str	r4, [sp, #4]
 8007838:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800783a:	9405      	str	r4, [sp, #20]
 800783c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007840:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007842:	9106      	str	r1, [sp, #24]
 8007844:	2d00      	cmp	r5, #0
 8007846:	f000 80c2 	beq.w	80079ce <D48_GENERIC+0x1ae>
 800784a:	f004 0520 	and.w	r5, r4, #32
 800784e:	f04f 0900 	mov.w	r9, #0
 8007852:	f004 0410 	and.w	r4, r4, #16
 8007856:	9508      	str	r5, [sp, #32]
 8007858:	4964      	ldr	r1, [pc, #400]	@ (80079ec <D48_GENERIC+0x1cc>)
 800785a:	9407      	str	r4, [sp, #28]
 800785c:	464d      	mov	r5, r9
 800785e:	e09e      	b.n	800799e <D48_GENERIC+0x17e>
 8007860:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8007864:	f810 b008 	ldrb.w	fp, [r0, r8]
 8007868:	f819 8008 	ldrb.w	r8, [r9, r8]
 800786c:	f810 9006 	ldrb.w	r9, [r0, r6]
 8007870:	7800      	ldrb	r0, [r0, #0]
 8007872:	0424      	lsls	r4, r4, #16
 8007874:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007878:	f81e 4007 	ldrb.w	r4, [lr, r7]
 800787c:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8007880:	44be      	add	lr, r7
 8007882:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8007886:	eb0b 0700 	add.w	r7, fp, r0
 800788a:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 800788e:	fa5f fe87 	uxtb.w	lr, r7
 8007892:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8007896:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800789a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800789e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80078a2:	0e3f      	lsrs	r7, r7, #24
 80078a4:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 80078a8:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 80078ac:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 80078b0:	b2e7      	uxtb	r7, r4
 80078b2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80078b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80078ba:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80078be:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80078c2:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 80078c6:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 80078ca:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80078ce:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80078d2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80078d6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80078da:	f3cc 0809 	ubfx	r8, ip, #0, #10
 80078de:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80078e2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80078e6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80078ea:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80078ee:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80078f2:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80078f6:	4c3e      	ldr	r4, [pc, #248]	@ (80079f0 <D48_GENERIC+0x1d0>)
 80078f8:	9e01      	ldr	r6, [sp, #4]
 80078fa:	fb29 6404 	smlad	r4, r9, r4, r6
 80078fe:	4e3d      	ldr	r6, [pc, #244]	@ (80079f4 <D48_GENERIC+0x1d4>)
 8007900:	fb2e 4406 	smlad	r4, lr, r6, r4
 8007904:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007908:	fb27 4b06 	smlad	fp, r7, r6, r4
 800790c:	4c3a      	ldr	r4, [pc, #232]	@ (80079f8 <D48_GENERIC+0x1d8>)
 800790e:	fb29 3304 	smlad	r3, r9, r4, r3
 8007912:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8007916:	fb2e 3304 	smlad	r3, lr, r4, r3
 800791a:	4c38      	ldr	r4, [pc, #224]	@ (80079fc <D48_GENERIC+0x1dc>)
 800791c:	fb27 3304 	smlad	r3, r7, r4, r3
 8007920:	2601      	movs	r6, #1
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	fb29 f906 	smuad	r9, r9, r6
 8007928:	4b35      	ldr	r3, [pc, #212]	@ (8007a00 <D48_GENERIC+0x1e0>)
 800792a:	fb2e 9e03 	smlad	lr, lr, r3, r9
 800792e:	4b35      	ldr	r3, [pc, #212]	@ (8007a04 <D48_GENERIC+0x1e4>)
 8007930:	fb27 e303 	smlad	r3, r7, r3, lr
 8007934:	9f04      	ldr	r7, [sp, #16]
 8007936:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 800793a:	eb05 0e06 	add.w	lr, r5, r6
 800793e:	eb04 060a 	add.w	r6, r4, sl
 8007942:	1bf6      	subs	r6, r6, r7
 8007944:	4637      	mov	r7, r6
 8007946:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800794a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800794e:	9f07      	ldr	r7, [sp, #28]
 8007950:	b177      	cbz	r7, 8007970 <D48_GENERIC+0x150>
 8007952:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007956:	9404      	str	r4, [sp, #16]
 8007958:	fba6 9a08 	umull	r9, sl, r6, r8
 800795c:	9e03      	ldr	r6, [sp, #12]
 800795e:	fb08 aa06 	mla	sl, r8, r6, sl
 8007962:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007966:	f14a 0700 	adc.w	r7, sl, #0
 800796a:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800796e:	4654      	mov	r4, sl
 8007970:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007972:	fb05 f606 	mul.w	r6, r5, r6
 8007976:	9d05      	ldr	r5, [sp, #20]
 8007978:	02e4      	lsls	r4, r4, #11
 800797a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	fbc5 7804 	smlal	r7, r8, r5, r4
 8007986:	4645      	mov	r5, r8
 8007988:	10ac      	asrs	r4, r5, #2
 800798a:	9d06      	ldr	r5, [sp, #24]
 800798c:	f304 040f 	ssat	r4, #16, r4
 8007990:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007994:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007996:	fa1f f58e 	uxth.w	r5, lr
 800799a:	42ac      	cmp	r4, r5
 800799c:	d917      	bls.n	80079ce <D48_GENERIC+0x1ae>
 800799e:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80079a0:	b2e6      	uxtb	r6, r4
 80079a2:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80079a6:	4277      	negs	r7, r6
 80079a8:	eb00 0b08 	add.w	fp, r0, r8
 80079ac:	eb0b 0907 	add.w	r9, fp, r7
 80079b0:	2c01      	cmp	r4, #1
 80079b2:	eb09 0e08 	add.w	lr, r9, r8
 80079b6:	f47f af53 	bne.w	8007860 <D48_GENERIC+0x40>
 80079ba:	9e08      	ldr	r6, [sp, #32]
 80079bc:	e9d0 7400 	ldrd	r7, r4, [r0]
 80079c0:	3006      	adds	r0, #6
 80079c2:	2e00      	cmp	r6, #0
 80079c4:	f43f af63 	beq.w	800788e <D48_GENERIC+0x6e>
 80079c8:	ba7f      	rev16	r7, r7
 80079ca:	ba64      	rev16	r4, r4
 80079cc:	e75f      	b.n	800788e <D48_GENERIC+0x6e>
 80079ce:	6093      	str	r3, [r2, #8]
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	60d3      	str	r3, [r2, #12]
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	6153      	str	r3, [r2, #20]
 80079d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079da:	f8c2 c01c 	str.w	ip, [r2, #28]
 80079de:	2000      	movs	r0, #0
 80079e0:	f8c2 a010 	str.w	sl, [r2, #16]
 80079e4:	6193      	str	r3, [r2, #24]
 80079e6:	b00b      	add	sp, #44	@ 0x2c
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	20000014 	.word	0x20000014
 80079f0:	000f000a 	.word	0x000f000a
 80079f4:	00060003 	.word	0x00060003
 80079f8:	00150019 	.word	0x00150019
 80079fc:	00190015 	.word	0x00190015
 8007a00:	00030006 	.word	0x00030006
 8007a04:	000a000f 	.word	0x000a000f

08007a08 <D64_GENERIC>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	b089      	sub	sp, #36	@ 0x24
 8007a0e:	6895      	ldr	r5, [r2, #8]
 8007a10:	6913      	ldr	r3, [r2, #16]
 8007a12:	9501      	str	r5, [sp, #4]
 8007a14:	68d5      	ldr	r5, [r2, #12]
 8007a16:	9302      	str	r3, [sp, #8]
 8007a18:	9500      	str	r5, [sp, #0]
 8007a1a:	6953      	ldr	r3, [r2, #20]
 8007a1c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8007a1e:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	6993      	ldr	r3, [r2, #24]
 8007a24:	9307      	str	r3, [sp, #28]
 8007a26:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8007a2a:	69d3      	ldr	r3, [r2, #28]
 8007a2c:	2c00      	cmp	r4, #0
 8007a2e:	f000 80d7 	beq.w	8007be0 <D64_GENERIC+0x1d8>
 8007a32:	6a11      	ldr	r1, [r2, #32]
 8007a34:	9106      	str	r1, [sp, #24]
 8007a36:	f04f 0e00 	mov.w	lr, #0
 8007a3a:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8007c20 <D64_GENERIC+0x218>
 8007a3e:	4681      	mov	r9, r0
 8007a40:	e0bf      	b.n	8007bc2 <D64_GENERIC+0x1ba>
 8007a42:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007a46:	426c      	negs	r4, r5
 8007a48:	eb09 0708 	add.w	r7, r9, r8
 8007a4c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007a50:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8007a54:	5d38      	ldrb	r0, [r7, r4]
 8007a56:	5d31      	ldrb	r1, [r6, r4]
 8007a58:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007a5c:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007a60:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007a64:	f899 7000 	ldrb.w	r7, [r9]
 8007a68:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8007a6c:	4426      	add	r6, r4
 8007a6e:	0409      	lsls	r1, r1, #16
 8007a70:	0400      	lsls	r0, r0, #16
 8007a72:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8007a76:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007a7a:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8007a7e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8007a82:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8007a86:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8007a8a:	4459      	add	r1, fp
 8007a8c:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8007a90:	4438      	add	r0, r7
 8007a92:	b2c5      	uxtb	r5, r0
 8007a94:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8007a98:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8007a9c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8007aa0:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8007aa4:	0e00      	lsrs	r0, r0, #24
 8007aa6:	eb03 0806 	add.w	r8, r3, r6
 8007aaa:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007aae:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8007ab2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007ab6:	b2c8      	uxtb	r0, r1
 8007ab8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007abc:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007ac0:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8007ac4:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8007ac8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007acc:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007ad0:	0e09      	lsrs	r1, r1, #24
 8007ad2:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8007ad6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8007ada:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007ade:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8007ae2:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8007ae6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007aea:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8007aee:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007af2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007af6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007afa:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8007afe:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007b02:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007b06:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007b0a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007b0e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8007b12:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8007b16:	0a8b      	lsrs	r3, r1, #10
 8007b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007b1c:	4938      	ldr	r1, [pc, #224]	@ (8007c00 <D64_GENERIC+0x1f8>)
 8007b1e:	9c00      	ldr	r4, [sp, #0]
 8007b20:	fb28 4101 	smlad	r1, r8, r1, r4
 8007b24:	4c37      	ldr	r4, [pc, #220]	@ (8007c04 <D64_GENERIC+0x1fc>)
 8007b26:	fb27 1104 	smlad	r1, r7, r4, r1
 8007b2a:	4c37      	ldr	r4, [pc, #220]	@ (8007c08 <D64_GENERIC+0x200>)
 8007b2c:	fb20 1104 	smlad	r1, r0, r4, r1
 8007b30:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007b34:	fb2a 1106 	smlad	r1, sl, r6, r1
 8007b38:	4d34      	ldr	r5, [pc, #208]	@ (8007c0c <D64_GENERIC+0x204>)
 8007b3a:	9c01      	ldr	r4, [sp, #4]
 8007b3c:	fb28 4405 	smlad	r4, r8, r5, r4
 8007b40:	fb2a 4415 	smladx	r4, sl, r5, r4
 8007b44:	4d32      	ldr	r5, [pc, #200]	@ (8007c10 <D64_GENERIC+0x208>)
 8007b46:	fb27 4405 	smlad	r4, r7, r5, r4
 8007b4a:	fb20 4415 	smladx	r4, r0, r5, r4
 8007b4e:	2501      	movs	r5, #1
 8007b50:	9400      	str	r4, [sp, #0]
 8007b52:	fb28 f805 	smuad	r8, r8, r5
 8007b56:	4c2f      	ldr	r4, [pc, #188]	@ (8007c14 <D64_GENERIC+0x20c>)
 8007b58:	fb27 8704 	smlad	r7, r7, r4, r8
 8007b5c:	4c2e      	ldr	r4, [pc, #184]	@ (8007c18 <D64_GENERIC+0x210>)
 8007b5e:	fb20 7004 	smlad	r0, r0, r4, r7
 8007b62:	4c2e      	ldr	r4, [pc, #184]	@ (8007c1c <D64_GENERIC+0x214>)
 8007b64:	fb2a 0004 	smlad	r0, sl, r4, r0
 8007b68:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8007b6c:	9906      	ldr	r1, [sp, #24]
 8007b6e:	9001      	str	r0, [sp, #4]
 8007b70:	b181      	cbz	r1, 8007b94 <D64_GENERIC+0x18c>
 8007b72:	9802      	ldr	r0, [sp, #8]
 8007b74:	9c03      	ldr	r4, [sp, #12]
 8007b76:	4430      	add	r0, r6
 8007b78:	1b00      	subs	r0, r0, r4
 8007b7a:	fba0 7801 	umull	r7, r8, r0, r1
 8007b7e:	17c5      	asrs	r5, r0, #31
 8007b80:	fb01 8805 	mla	r8, r1, r5, r8
 8007b84:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8007b88:	f148 0100 	adc.w	r1, r8, #0
 8007b8c:	0049      	lsls	r1, r1, #1
 8007b8e:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8007b92:	460e      	mov	r6, r1
 8007b94:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8007b96:	9904      	ldr	r1, [sp, #16]
 8007b98:	9805      	ldr	r0, [sp, #20]
 8007b9a:	02b6      	lsls	r6, r6, #10
 8007b9c:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007ba0:	f04f 0800 	mov.w	r8, #0
 8007ba4:	fb0e f404 	mul.w	r4, lr, r4
 8007ba8:	fbc1 7806 	smlal	r7, r8, r1, r6
 8007bac:	4641      	mov	r1, r8
 8007bae:	1089      	asrs	r1, r1, #2
 8007bb0:	f301 010f 	ssat	r1, #16, r1
 8007bb4:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8007bb8:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8007bba:	f10e 0e01 	add.w	lr, lr, #1
 8007bbe:	4571      	cmp	r1, lr
 8007bc0:	dd0e      	ble.n	8007be0 <D64_GENERIC+0x1d8>
 8007bc2:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8007bc4:	2d01      	cmp	r5, #1
 8007bc6:	f47f af3c 	bne.w	8007a42 <D64_GENERIC+0x3a>
 8007bca:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007bcc:	06ac      	lsls	r4, r5, #26
 8007bce:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007bd2:	f109 0908 	add.w	r9, r9, #8
 8007bd6:	f57f af5c 	bpl.w	8007a92 <D64_GENERIC+0x8a>
 8007bda:	ba40      	rev16	r0, r0
 8007bdc:	ba49      	rev16	r1, r1
 8007bde:	e758      	b.n	8007a92 <D64_GENERIC+0x8a>
 8007be0:	61d3      	str	r3, [r2, #28]
 8007be2:	9b02      	ldr	r3, [sp, #8]
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	6113      	str	r3, [r2, #16]
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	6091      	str	r1, [r2, #8]
 8007bec:	6153      	str	r3, [r2, #20]
 8007bee:	9900      	ldr	r1, [sp, #0]
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	60d1      	str	r1, [r2, #12]
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	6193      	str	r3, [r2, #24]
 8007bf8:	b009      	add	sp, #36	@ 0x24
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfe:	bf00      	nop
 8007c00:	001c0015 	.word	0x001c0015
 8007c04:	000f000a 	.word	0x000f000a
 8007c08:	00060003 	.word	0x00060003
 8007c0c:	0024002a 	.word	0x0024002a
 8007c10:	002e0030 	.word	0x002e0030
 8007c14:	00030006 	.word	0x00030006
 8007c18:	000a000f 	.word	0x000a000f
 8007c1c:	0015001c 	.word	0x0015001c
 8007c20:	20000014 	.word	0x20000014

08007c24 <D80_GENERIC>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	b08b      	sub	sp, #44	@ 0x2c
 8007c2a:	6914      	ldr	r4, [r2, #16]
 8007c2c:	9405      	str	r4, [sp, #20]
 8007c2e:	6954      	ldr	r4, [r2, #20]
 8007c30:	9406      	str	r4, [sp, #24]
 8007c32:	6994      	ldr	r4, [r2, #24]
 8007c34:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c36:	6894      	ldr	r4, [r2, #8]
 8007c38:	9402      	str	r4, [sp, #8]
 8007c3a:	68d4      	ldr	r4, [r2, #12]
 8007c3c:	9401      	str	r4, [sp, #4]
 8007c3e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007c40:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007c42:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8007c46:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 810a 	beq.w	8007e64 <D80_GENERIC+0x240>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8007eb4 <D80_GENERIC+0x290>
 8007c56:	e9cd b303 	strd	fp, r3, [sp, #12]
 8007c5a:	e0ee      	b.n	8007e3a <D80_GENERIC+0x216>
 8007c5c:	fa5f fe8e 	uxtb.w	lr, lr
 8007c60:	fa0f f48e 	sxth.w	r4, lr
 8007c64:	0066      	lsls	r6, r4, #1
 8007c66:	eb06 0804 	add.w	r8, r6, r4
 8007c6a:	f1ce 0500 	rsb	r5, lr, #0
 8007c6e:	eb00 0108 	add.w	r1, r0, r8
 8007c72:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007c76:	194b      	adds	r3, r1, r5
 8007c78:	5d49      	ldrb	r1, [r1, r5]
 8007c7a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8007c7e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8007c82:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8007c86:	f890 8000 	ldrb.w	r8, [r0]
 8007c8a:	eb03 0c04 	add.w	ip, r3, r4
 8007c8e:	eb0c 0705 	add.w	r7, ip, r5
 8007c92:	0409      	lsls	r1, r1, #16
 8007c94:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8007c98:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8007c9c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007ca0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8007ca4:	eb0a 0004 	add.w	r0, sl, r4
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f81a a004 	ldrb.w	sl, [sl, r4]
 8007cae:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8007cb2:	5d44      	ldrb	r4, [r0, r5]
 8007cb4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007cb8:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8007cbc:	4428      	add	r0, r5
 8007cbe:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8007cc2:	4441      	add	r1, r8
 8007cc4:	4430      	add	r0, r6
 8007cc6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8007cca:	441f      	add	r7, r3
 8007ccc:	b2cd      	uxtb	r5, r1
 8007cce:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007cd2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8007cd6:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007ce0:	0e09      	lsrs	r1, r1, #24
 8007ce2:	4433      	add	r3, r6
 8007ce4:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8007ce8:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8007cec:	b2fd      	uxtb	r5, r7
 8007cee:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8007cf2:	469b      	mov	fp, r3
 8007cf4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8007cf8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8007cfc:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8007d00:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8007d04:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8007d08:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8007d0c:	0e3b      	lsrs	r3, r7, #24
 8007d0e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007d12:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8007d16:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d1a:	fa5f fc84 	uxtb.w	ip, r4
 8007d1e:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8007d22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007d26:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007d2a:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8007d2e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8007d32:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007d36:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8007d3a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8007d3e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d46:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007d4a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007d4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007d52:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007d56:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8007d5a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8007d5e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8007d62:	0aa3      	lsrs	r3, r4, #10
 8007d64:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007d68:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007d6c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007d70:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8007d74:	9303      	str	r3, [sp, #12]
 8007d76:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8007d7a:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8007d7e:	4b41      	ldr	r3, [pc, #260]	@ (8007e84 <D80_GENERIC+0x260>)
 8007d80:	9901      	ldr	r1, [sp, #4]
 8007d82:	fb2b 1303 	smlad	r3, fp, r3, r1
 8007d86:	4940      	ldr	r1, [pc, #256]	@ (8007e88 <D80_GENERIC+0x264>)
 8007d88:	fb28 3301 	smlad	r3, r8, r1, r3
 8007d8c:	493f      	ldr	r1, [pc, #252]	@ (8007e8c <D80_GENERIC+0x268>)
 8007d8e:	fb2e 3301 	smlad	r3, lr, r1, r3
 8007d92:	493f      	ldr	r1, [pc, #252]	@ (8007e90 <D80_GENERIC+0x26c>)
 8007d94:	fb27 3301 	smlad	r3, r7, r1, r3
 8007d98:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8007d9c:	fb2c 3404 	smlad	r4, ip, r4, r3
 8007da0:	4b3c      	ldr	r3, [pc, #240]	@ (8007e94 <D80_GENERIC+0x270>)
 8007da2:	9902      	ldr	r1, [sp, #8]
 8007da4:	fb2b 1303 	smlad	r3, fp, r3, r1
 8007da8:	493b      	ldr	r1, [pc, #236]	@ (8007e98 <D80_GENERIC+0x274>)
 8007daa:	fb28 3301 	smlad	r3, r8, r1, r3
 8007dae:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8007db2:	fb2e 3101 	smlad	r1, lr, r1, r3
 8007db6:	4b39      	ldr	r3, [pc, #228]	@ (8007e9c <D80_GENERIC+0x278>)
 8007db8:	fb27 1103 	smlad	r1, r7, r3, r1
 8007dbc:	4b38      	ldr	r3, [pc, #224]	@ (8007ea0 <D80_GENERIC+0x27c>)
 8007dbe:	fb2c 1303 	smlad	r3, ip, r3, r1
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	fb2b fb01 	smuad	fp, fp, r1
 8007dca:	4b36      	ldr	r3, [pc, #216]	@ (8007ea4 <D80_GENERIC+0x280>)
 8007dcc:	fb28 b803 	smlad	r8, r8, r3, fp
 8007dd0:	4d35      	ldr	r5, [pc, #212]	@ (8007ea8 <D80_GENERIC+0x284>)
 8007dd2:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8007dd6:	4d35      	ldr	r5, [pc, #212]	@ (8007eac <D80_GENERIC+0x288>)
 8007dd8:	fb27 e705 	smlad	r7, r7, r5, lr
 8007ddc:	4b34      	ldr	r3, [pc, #208]	@ (8007eb0 <D80_GENERIC+0x28c>)
 8007dde:	fb2c 7303 	smlad	r3, ip, r3, r7
 8007de2:	6a11      	ldr	r1, [r2, #32]
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 8007dea:	b181      	cbz	r1, 8007e0e <D80_GENERIC+0x1ea>
 8007dec:	9c05      	ldr	r4, [sp, #20]
 8007dee:	9d06      	ldr	r5, [sp, #24]
 8007df0:	441c      	add	r4, r3
 8007df2:	1b64      	subs	r4, r4, r5
 8007df4:	fba4 ab01 	umull	sl, fp, r4, r1
 8007df8:	17e7      	asrs	r7, r4, #31
 8007dfa:	fb01 bb07 	mla	fp, r1, r7, fp
 8007dfe:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8007e02:	f14b 0500 	adc.w	r5, fp, #0
 8007e06:	0069      	lsls	r1, r5, #1
 8007e08:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	9e04      	ldr	r6, [sp, #16]
 8007e10:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8007e12:	9f07      	ldr	r7, [sp, #28]
 8007e14:	025b      	lsls	r3, r3, #9
 8007e16:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8007e1a:	2500      	movs	r5, #0
 8007e1c:	fb06 f101 	mul.w	r1, r6, r1
 8007e20:	fbc7 4503 	smlal	r4, r5, r7, r3
 8007e24:	9c08      	ldr	r4, [sp, #32]
 8007e26:	10ab      	asrs	r3, r5, #2
 8007e28:	f303 030f 	ssat	r3, #16, r3
 8007e2c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8007e30:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007e32:	1c71      	adds	r1, r6, #1
 8007e34:	428b      	cmp	r3, r1
 8007e36:	9104      	str	r1, [sp, #16]
 8007e38:	dd12      	ble.n	8007e60 <D80_GENERIC+0x23c>
 8007e3a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8007e3e:	f1be 0f01 	cmp.w	lr, #1
 8007e42:	f47f af0b 	bne.w	8007c5c <D80_GENERIC+0x38>
 8007e46:	6801      	ldr	r1, [r0, #0]
 8007e48:	6847      	ldr	r7, [r0, #4]
 8007e4a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007e4c:	6884      	ldr	r4, [r0, #8]
 8007e4e:	069b      	lsls	r3, r3, #26
 8007e50:	f100 000a 	add.w	r0, r0, #10
 8007e54:	f57f af3a 	bpl.w	8007ccc <D80_GENERIC+0xa8>
 8007e58:	ba49      	rev16	r1, r1
 8007e5a:	ba7f      	rev16	r7, r7
 8007e5c:	ba64      	rev16	r4, r4
 8007e5e:	e735      	b.n	8007ccc <D80_GENERIC+0xa8>
 8007e60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	6093      	str	r3, [r2, #8]
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	60d3      	str	r3, [r2, #12]
 8007e6c:	9b05      	ldr	r3, [sp, #20]
 8007e6e:	6113      	str	r3, [r2, #16]
 8007e70:	9b06      	ldr	r3, [sp, #24]
 8007e72:	6153      	str	r3, [r2, #20]
 8007e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e76:	f8c2 b01c 	str.w	fp, [r2, #28]
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	6193      	str	r3, [r2, #24]
 8007e7e:	b00b      	add	sp, #44	@ 0x2c
 8007e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e84:	002d0024 	.word	0x002d0024
 8007e88:	001c0015 	.word	0x001c0015
 8007e8c:	000f000a 	.word	0x000f000a
 8007e90:	00060003 	.word	0x00060003
 8007e94:	0037003f 	.word	0x0037003f
 8007e98:	00450049 	.word	0x00450049
 8007e9c:	00490045 	.word	0x00490045
 8007ea0:	003f0037 	.word	0x003f0037
 8007ea4:	00030006 	.word	0x00030006
 8007ea8:	000a000f 	.word	0x000a000f
 8007eac:	0015001c 	.word	0x0015001c
 8007eb0:	0024002d 	.word	0x0024002d
 8007eb4:	20000014 	.word	0x20000014

08007eb8 <D128_GENERIC>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	b091      	sub	sp, #68	@ 0x44
 8007ebe:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8007ec0:	9004      	str	r0, [sp, #16]
 8007ec2:	6910      	ldr	r0, [r2, #16]
 8007ec4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ec6:	6950      	ldr	r0, [r2, #20]
 8007ec8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007eca:	6990      	ldr	r0, [r2, #24]
 8007ecc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007ece:	69d0      	ldr	r0, [r2, #28]
 8007ed0:	9002      	str	r0, [sp, #8]
 8007ed2:	6890      	ldr	r0, [r2, #8]
 8007ed4:	9003      	str	r0, [sp, #12]
 8007ed6:	68d0      	ldr	r0, [r2, #12]
 8007ed8:	9001      	str	r0, [sp, #4]
 8007eda:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007edc:	9200      	str	r2, [sp, #0]
 8007ede:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 8196 	beq.w	8008214 <D128_GENERIC+0x35c>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6a12      	ldr	r2, [r2, #32]
 8007eec:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eee:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8008290 <D128_GENERIC+0x3d8>
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	e177      	b.n	80081e6 <D128_GENERIC+0x32e>
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	9d04      	ldr	r5, [sp, #16]
 8007efa:	b214      	sxth	r4, r2
 8007efc:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8007f00:	4250      	negs	r0, r2
 8007f02:	eb05 010a 	add.w	r1, r5, sl
 8007f06:	00a6      	lsls	r6, r4, #2
 8007f08:	eb01 0800 	add.w	r8, r1, r0
 8007f0c:	eb06 0e04 	add.w	lr, r6, r4
 8007f10:	eb08 070e 	add.w	r7, r8, lr
 8007f14:	183b      	adds	r3, r7, r0
 8007f16:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007f1a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8007f1e:	9608      	str	r6, [sp, #32]
 8007f20:	eb0c 0604 	add.w	r6, ip, r4
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	1833      	adds	r3, r6, r0
 8007f28:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8007f2c:	9306      	str	r3, [sp, #24]
 8007f2e:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	f815 e002 	ldrb.w	lr, [r5, r2]
 8007f38:	782d      	ldrb	r5, [r5, #0]
 8007f3a:	5c3a      	ldrb	r2, [r7, r0]
 8007f3c:	9507      	str	r5, [sp, #28]
 8007f3e:	9d06      	ldr	r5, [sp, #24]
 8007f40:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8007f44:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8007f4e:	5c33      	ldrb	r3, [r6, r0]
 8007f50:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8007f54:	5c09      	ldrb	r1, [r1, r0]
 8007f56:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8007f5a:	0412      	lsls	r2, r2, #16
 8007f5c:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8007f60:	eb06 0a04 	add.w	sl, r6, r4
 8007f64:	5d36      	ldrb	r6, [r6, r4]
 8007f66:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8007f6a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8007f6e:	042d      	lsls	r5, r5, #16
 8007f70:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8007f74:	0409      	lsls	r1, r1, #16
 8007f76:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8007f7a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8007f84:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8007f88:	eb0a 0e00 	add.w	lr, sl, r0
 8007f8c:	9d07      	ldr	r5, [sp, #28]
 8007f8e:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 8007f92:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007f96:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8007f9a:	9f08      	ldr	r7, [sp, #32]
 8007f9c:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8007fa0:	4429      	add	r1, r5
 8007fa2:	9d04      	ldr	r5, [sp, #16]
 8007fa4:	4438      	add	r0, r7
 8007fa6:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8007faa:	9004      	str	r0, [sp, #16]
 8007fac:	442a      	add	r2, r5
 8007fae:	eb06 0a0b 	add.w	sl, r6, fp
 8007fb2:	1918      	adds	r0, r3, r4
 8007fb4:	b2cb      	uxtb	r3, r1
 8007fb6:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007fba:	9e02      	ldr	r6, [sp, #8]
 8007fbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007fc0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8007fc4:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8007fc8:	441e      	add	r6, r3
 8007fca:	0e09      	lsrs	r1, r1, #24
 8007fcc:	4633      	mov	r3, r6
 8007fce:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007fd2:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8007fd6:	b2d4      	uxtb	r4, r2
 8007fd8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007fdc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007fe0:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8007fe4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007fe8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007fec:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007ff0:	0e12      	lsrs	r2, r2, #24
 8007ff2:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8007ff6:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8007ffa:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007ffe:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008002:	9702      	str	r7, [sp, #8]
 8008004:	b2c2      	uxtb	r2, r0
 8008006:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800800a:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 800800e:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8008012:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008016:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800801a:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 800801e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8008022:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008026:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800802a:	0e00      	lsrs	r0, r0, #24
 800802c:	fa5f f68a 	uxtb.w	r6, sl
 8008030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008034:	9308      	str	r3, [sp, #32]
 8008036:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800803a:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800803e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008042:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8008046:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800804a:	9509      	str	r5, [sp, #36]	@ 0x24
 800804c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008050:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008054:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008058:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800805c:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008060:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008064:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008068:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800806c:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008070:	9306      	str	r3, [sp, #24]
 8008072:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008076:	9b02      	ldr	r3, [sp, #8]
 8008078:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800807c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008080:	f8cd a01c 	str.w	sl, [sp, #28]
 8008084:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	9506      	str	r5, [sp, #24]
 800808c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800808e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008092:	f8cd e008 	str.w	lr, [sp, #8]
 8008096:	46ae      	mov	lr, r5
 8008098:	9d08      	ldr	r5, [sp, #32]
 800809a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800809e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80080a2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80080a6:	9d02      	ldr	r5, [sp, #8]
 80080a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80080ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80080b0:	9f07      	ldr	r7, [sp, #28]
 80080b2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80080b6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80080ba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80080be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80080c2:	9d06      	ldr	r5, [sp, #24]
 80080c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080c8:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80080cc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80080d0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80080d4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80080d8:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 80080dc:	0abe      	lsrs	r6, r7, #10
 80080de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80080e2:	9602      	str	r6, [sp, #8]
 80080e4:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80080e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80080ec:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 80080f0:	4e52      	ldr	r6, [pc, #328]	@ (800823c <D128_GENERIC+0x384>)
 80080f2:	9f01      	ldr	r7, [sp, #4]
 80080f4:	fb2e 7606 	smlad	r6, lr, r6, r7
 80080f8:	4f51      	ldr	r7, [pc, #324]	@ (8008240 <D128_GENERIC+0x388>)
 80080fa:	fb2a 6607 	smlad	r6, sl, r7, r6
 80080fe:	4f51      	ldr	r7, [pc, #324]	@ (8008244 <D128_GENERIC+0x38c>)
 8008100:	fb21 6607 	smlad	r6, r1, r7, r6
 8008104:	4f50      	ldr	r7, [pc, #320]	@ (8008248 <D128_GENERIC+0x390>)
 8008106:	fb24 6607 	smlad	r6, r4, r7, r6
 800810a:	4f50      	ldr	r7, [pc, #320]	@ (800824c <D128_GENERIC+0x394>)
 800810c:	fb22 6607 	smlad	r6, r2, r7, r6
 8008110:	4f4f      	ldr	r7, [pc, #316]	@ (8008250 <D128_GENERIC+0x398>)
 8008112:	fb20 6607 	smlad	r6, r0, r7, r6
 8008116:	4f4f      	ldr	r7, [pc, #316]	@ (8008254 <D128_GENERIC+0x39c>)
 8008118:	fb23 6607 	smlad	r6, r3, r7, r6
 800811c:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8008120:	fb25 6807 	smlad	r8, r5, r7, r6
 8008124:	4f4c      	ldr	r7, [pc, #304]	@ (8008258 <D128_GENERIC+0x3a0>)
 8008126:	9e03      	ldr	r6, [sp, #12]
 8008128:	fb2e 6c07 	smlad	ip, lr, r7, r6
 800812c:	4e4b      	ldr	r6, [pc, #300]	@ (800825c <D128_GENERIC+0x3a4>)
 800812e:	fb2a cc06 	smlad	ip, sl, r6, ip
 8008132:	4f4b      	ldr	r7, [pc, #300]	@ (8008260 <D128_GENERIC+0x3a8>)
 8008134:	fb21 cc07 	smlad	ip, r1, r7, ip
 8008138:	4f4a      	ldr	r7, [pc, #296]	@ (8008264 <D128_GENERIC+0x3ac>)
 800813a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800813e:	4f4a      	ldr	r7, [pc, #296]	@ (8008268 <D128_GENERIC+0x3b0>)
 8008140:	fb22 cc07 	smlad	ip, r2, r7, ip
 8008144:	4f49      	ldr	r7, [pc, #292]	@ (800826c <D128_GENERIC+0x3b4>)
 8008146:	fb20 cc07 	smlad	ip, r0, r7, ip
 800814a:	4f49      	ldr	r7, [pc, #292]	@ (8008270 <D128_GENERIC+0x3b8>)
 800814c:	fb23 c707 	smlad	r7, r3, r7, ip
 8008150:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8008294 <D128_GENERIC+0x3dc>
 8008154:	fb25 760c 	smlad	r6, r5, ip, r7
 8008158:	f04f 0b01 	mov.w	fp, #1
 800815c:	9601      	str	r6, [sp, #4]
 800815e:	fb2e fb0b 	smuad	fp, lr, fp
 8008162:	4f44      	ldr	r7, [pc, #272]	@ (8008274 <D128_GENERIC+0x3bc>)
 8008164:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008168:	4f43      	ldr	r7, [pc, #268]	@ (8008278 <D128_GENERIC+0x3c0>)
 800816a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800816e:	4f43      	ldr	r7, [pc, #268]	@ (800827c <D128_GENERIC+0x3c4>)
 8008170:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008174:	4f42      	ldr	r7, [pc, #264]	@ (8008280 <D128_GENERIC+0x3c8>)
 8008176:	fb22 a707 	smlad	r7, r2, r7, sl
 800817a:	4a42      	ldr	r2, [pc, #264]	@ (8008284 <D128_GENERIC+0x3cc>)
 800817c:	fb20 7702 	smlad	r7, r0, r2, r7
 8008180:	4a41      	ldr	r2, [pc, #260]	@ (8008288 <D128_GENERIC+0x3d0>)
 8008182:	fb23 7702 	smlad	r7, r3, r2, r7
 8008186:	4b41      	ldr	r3, [pc, #260]	@ (800828c <D128_GENERIC+0x3d4>)
 8008188:	fb25 7303 	smlad	r3, r5, r3, r7
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008190:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8008194:	b183      	cbz	r3, 80081b8 <D128_GENERIC+0x300>
 8008196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800819a:	4432      	add	r2, r6
 800819c:	1a52      	subs	r2, r2, r1
 800819e:	fba2 4503 	umull	r4, r5, r2, r3
 80081a2:	17d1      	asrs	r1, r2, #31
 80081a4:	fb03 5501 	mla	r5, r3, r1, r5
 80081a8:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 80081ac:	f145 0300 	adc.w	r3, r5, #0
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 80081b6:	461e      	mov	r6, r3
 80081b8:	9800      	ldr	r0, [sp, #0]
 80081ba:	9c05      	ldr	r4, [sp, #20]
 80081bc:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 80081be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80081c0:	01f6      	lsls	r6, r6, #7
 80081c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081c6:	2300      	movs	r3, #0
 80081c8:	fbc5 2306 	smlal	r2, r3, r5, r6
 80081cc:	fb04 f101 	mul.w	r1, r4, r1
 80081d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081d2:	109b      	asrs	r3, r3, #2
 80081d4:	f303 030f 	ssat	r3, #16, r3
 80081d8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80081dc:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80081de:	1c62      	adds	r2, r4, #1
 80081e0:	4293      	cmp	r3, r2
 80081e2:	9205      	str	r2, [sp, #20]
 80081e4:	dd16      	ble.n	8008214 <D128_GENERIC+0x35c>
 80081e6:	9b00      	ldr	r3, [sp, #0]
 80081e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80081ea:	2a01      	cmp	r2, #1
 80081ec:	f47f ae83 	bne.w	8007ef6 <D128_GENERIC+0x3e>
 80081f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f2:	9c04      	ldr	r4, [sp, #16]
 80081f4:	069b      	lsls	r3, r3, #26
 80081f6:	e9d4 1200 	ldrd	r1, r2, [r4]
 80081fa:	68a0      	ldr	r0, [r4, #8]
 80081fc:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008200:	f104 0410 	add.w	r4, r4, #16
 8008204:	d517      	bpl.n	8008236 <D128_GENERIC+0x37e>
 8008206:	ba49      	rev16	r1, r1
 8008208:	ba52      	rev16	r2, r2
 800820a:	ba40      	rev16	r0, r0
 800820c:	fa9a fa9a 	rev16.w	sl, sl
 8008210:	9404      	str	r4, [sp, #16]
 8008212:	e6cf      	b.n	8007fb4 <D128_GENERIC+0xfc>
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	9903      	ldr	r1, [sp, #12]
 8008218:	6099      	str	r1, [r3, #8]
 800821a:	9901      	ldr	r1, [sp, #4]
 800821c:	60d9      	str	r1, [r3, #12]
 800821e:	9902      	ldr	r1, [sp, #8]
 8008220:	61d9      	str	r1, [r3, #28]
 8008222:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008224:	6119      	str	r1, [r3, #16]
 8008226:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800822a:	6159      	str	r1, [r3, #20]
 800822c:	2000      	movs	r0, #0
 800822e:	619a      	str	r2, [r3, #24]
 8008230:	b011      	add	sp, #68	@ 0x44
 8008232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008236:	9404      	str	r4, [sp, #16]
 8008238:	e6bc      	b.n	8007fb4 <D128_GENERIC+0xfc>
 800823a:	bf00      	nop
 800823c:	00780069 	.word	0x00780069
 8008240:	005b004e 	.word	0x005b004e
 8008244:	00420037 	.word	0x00420037
 8008248:	002d0024 	.word	0x002d0024
 800824c:	001c0015 	.word	0x001c0015
 8008250:	000f000a 	.word	0x000f000a
 8008254:	00060003 	.word	0x00060003
 8008258:	00880096 	.word	0x00880096
 800825c:	00a200ac 	.word	0x00a200ac
 8008260:	00b400ba 	.word	0x00b400ba
 8008264:	00be00c0 	.word	0x00be00c0
 8008268:	00c000be 	.word	0x00c000be
 800826c:	00ba00b4 	.word	0x00ba00b4
 8008270:	00ac00a2 	.word	0x00ac00a2
 8008274:	00030006 	.word	0x00030006
 8008278:	000a000f 	.word	0x000a000f
 800827c:	0015001c 	.word	0x0015001c
 8008280:	0024002d 	.word	0x0024002d
 8008284:	00370042 	.word	0x00370042
 8008288:	004e005b 	.word	0x004e005b
 800828c:	00690078 	.word	0x00690078
 8008290:	20000014 	.word	0x20000014
 8008294:	00960088 	.word	0x00960088

08008298 <D16_1CH_HTONS_VOL_HP>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80082a0:	b085      	sub	sp, #20
 80082a2:	4681      	mov	r9, r0
 80082a4:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80082a6:	6993      	ldr	r3, [r2, #24]
 80082a8:	9303      	str	r3, [sp, #12]
 80082aa:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80082ae:	69d3      	ldr	r3, [r2, #28]
 80082b0:	9402      	str	r4, [sp, #8]
 80082b2:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 80082b6:	f8d2 c020 	ldr.w	ip, [r2, #32]
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d057      	beq.n	800836e <D16_1CH_HTONS_VOL_HP+0xd6>
 80082be:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 80082c2:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 800837c <D16_1CH_HTONS_VOL_HP+0xe4>
 80082c6:	f1a1 0802 	sub.w	r8, r1, #2
 80082ca:	4639      	mov	r1, r7
 80082cc:	465f      	mov	r7, fp
 80082ce:	46d3      	mov	fp, sl
 80082d0:	46ca      	mov	sl, r9
 80082d2:	4699      	mov	r9, r3
 80082d4:	4633      	mov	r3, r6
 80082d6:	4616      	mov	r6, r2
 80082d8:	f85a 2b02 	ldr.w	r2, [sl], #2
 80082dc:	ba52      	rev16	r2, r2
 80082de:	b2d4      	uxtb	r4, r2
 80082e0:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80082e4:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 80082e8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80082ec:	4491      	add	r9, r2
 80082ee:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 80082f2:	f3c0 0209 	ubfx	r2, r0, #0, #10
 80082f6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80082fa:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80082fe:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8008302:	481c      	ldr	r0, [pc, #112]	@ (8008374 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8008304:	fb22 5400 	smlad	r4, r2, r0, r5
 8008308:	481b      	ldr	r0, [pc, #108]	@ (8008378 <D16_1CH_HTONS_VOL_HP+0xe0>)
 800830a:	fb22 f500 	smuad	r5, r2, r0
 800830e:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8008312:	18e2      	adds	r2, r4, r3
 8008314:	1a52      	subs	r2, r2, r1
 8008316:	17d1      	asrs	r1, r2, #31
 8008318:	fba2 230c 	umull	r2, r3, r2, ip
 800831c:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8008320:	fb0c 3301 	mla	r3, ip, r1, r3
 8008324:	f143 0100 	adc.w	r1, r3, #0
 8008328:	e9cd 0100 	strd	r0, r1, [sp]
 800832c:	044a      	lsls	r2, r1, #17
 800832e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008332:	2100      	movs	r1, #0
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	fbcb 0102 	smlal	r0, r1, fp, r2
 800833a:	45ba      	cmp	sl, r7
 800833c:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8008340:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008344:	f302 020f 	ssat	r2, #16, r2
 8008348:	4621      	mov	r1, r4
 800834a:	f828 2f02 	strh.w	r2, [r8, #2]!
 800834e:	d1c3      	bne.n	80082d8 <D16_1CH_HTONS_VOL_HP+0x40>
 8008350:	4632      	mov	r2, r6
 8008352:	461e      	mov	r6, r3
 8008354:	464b      	mov	r3, r9
 8008356:	9902      	ldr	r1, [sp, #8]
 8008358:	61d3      	str	r3, [r2, #28]
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	6095      	str	r5, [r2, #8]
 800835e:	2000      	movs	r0, #0
 8008360:	60d1      	str	r1, [r2, #12]
 8008362:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008366:	6193      	str	r3, [r2, #24]
 8008368:	b005      	add	sp, #20
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	463c      	mov	r4, r7
 8008370:	e7f1      	b.n	8008356 <D16_1CH_HTONS_VOL_HP+0xbe>
 8008372:	bf00      	nop
 8008374:	00030001 	.word	0x00030001
 8008378:	00010003 	.word	0x00010003
 800837c:	20000014 	.word	0x20000014

08008380 <D24_1CH_HTONS_VOL_HP>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	4696      	mov	lr, r2
 8008386:	b089      	sub	sp, #36	@ 0x24
 8008388:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 800838c:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 800838e:	f8de 3018 	ldr.w	r3, [lr, #24]
 8008392:	9703      	str	r7, [sp, #12]
 8008394:	f8de 7020 	ldr.w	r7, [lr, #32]
 8008398:	9306      	str	r3, [sp, #24]
 800839a:	9205      	str	r2, [sp, #20]
 800839c:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 80083a0:	f8de 601c 	ldr.w	r6, [lr, #28]
 80083a4:	9704      	str	r7, [sp, #16]
 80083a6:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	f000 8081 	beq.w	80084b2 <D24_1CH_HTONS_VOL_HP+0x132>
 80083b0:	f1a1 0b02 	sub.w	fp, r1, #2
 80083b4:	2700      	movs	r7, #0
 80083b6:	46d9      	mov	r9, fp
 80083b8:	f8cd e01c 	str.w	lr, [sp, #28]
 80083bc:	46d3      	mov	fp, sl
 80083be:	f8df c100 	ldr.w	ip, [pc, #256]	@ 80084c0 <D24_1CH_HTONS_VOL_HP+0x140>
 80083c2:	46a8      	mov	r8, r5
 80083c4:	46ba      	mov	sl, r7
 80083c6:	469e      	mov	lr, r3
 80083c8:	e052      	b.n	8008470 <D24_1CH_HTONS_VOL_HP+0xf0>
 80083ca:	7842      	ldrb	r2, [r0, #1]
 80083cc:	3002      	adds	r0, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	b2d9      	uxtb	r1, r3
 80083d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083d6:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80083da:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80083de:	0c1b      	lsrs	r3, r3, #16
 80083e0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80083e4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80083e8:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 80083ec:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80083f0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80083f4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80083f8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80083fc:	4a2e      	ldr	r2, [pc, #184]	@ (80084b8 <D24_1CH_HTONS_VOL_HP+0x138>)
 80083fe:	fb23 b102 	smlad	r1, r3, r2, fp
 8008402:	4a2e      	ldr	r2, [pc, #184]	@ (80084bc <D24_1CH_HTONS_VOL_HP+0x13c>)
 8008404:	fb23 eb02 	smlad	fp, r3, r2, lr
 8008408:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 800840c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8008410:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8008414:	2201      	movs	r2, #1
 8008416:	fb23 f702 	smuad	r7, r3, r2
 800841a:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 800841e:	eb01 0208 	add.w	r2, r1, r8
 8008422:	1b12      	subs	r2, r2, r4
 8008424:	17d4      	asrs	r4, r2, #31
 8008426:	4613      	mov	r3, r2
 8008428:	e9cd 3400 	strd	r3, r4, [sp]
 800842c:	9c04      	ldr	r4, [sp, #16]
 800842e:	9d01      	ldr	r5, [sp, #4]
 8008430:	fba2 2304 	umull	r2, r3, r2, r4
 8008434:	fb04 3305 	mla	r3, r4, r5, r3
 8008438:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 800843c:	f143 0500 	adc.w	r5, r3, #0
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	e9cd 4500 	strd	r4, r5, [sp]
 8008446:	03ea      	lsls	r2, r5, #15
 8008448:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800844c:	2500      	movs	r5, #0
 800844e:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008452:	9b01      	ldr	r3, [sp, #4]
 8008454:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008458:	10ab      	asrs	r3, r5, #2
 800845a:	f303 030f 	ssat	r3, #16, r3
 800845e:	f829 3f02 	strh.w	r3, [r9, #2]!
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	f10a 0a01 	add.w	sl, sl, #1
 8008468:	459a      	cmp	sl, r3
 800846a:	44be      	add	lr, r7
 800846c:	460c      	mov	r4, r1
 800846e:	d00e      	beq.n	800848e <D24_1CH_HTONS_VOL_HP+0x10e>
 8008470:	7801      	ldrb	r1, [r0, #0]
 8008472:	78c2      	ldrb	r2, [r0, #3]
 8008474:	020b      	lsls	r3, r1, #8
 8008476:	f01a 0f01 	tst.w	sl, #1
 800847a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800847e:	d0a4      	beq.n	80083ca <D24_1CH_HTONS_VOL_HP+0x4a>
 8008480:	7885      	ldrb	r5, [r0, #2]
 8008482:	0212      	lsls	r2, r2, #8
 8008484:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8008488:	440b      	add	r3, r1
 800848a:	3004      	adds	r0, #4
 800848c:	e7a0      	b.n	80083d0 <D24_1CH_HTONS_VOL_HP+0x50>
 800848e:	4673      	mov	r3, lr
 8008490:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008494:	46da      	mov	sl, fp
 8008496:	4645      	mov	r5, r8
 8008498:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 800849c:	9b06      	ldr	r3, [sp, #24]
 800849e:	f8ce 601c 	str.w	r6, [lr, #28]
 80084a2:	2000      	movs	r0, #0
 80084a4:	e9ce 5104 	strd	r5, r1, [lr, #16]
 80084a8:	f8ce 3018 	str.w	r3, [lr, #24]
 80084ac:	b009      	add	sp, #36	@ 0x24
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	4621      	mov	r1, r4
 80084b4:	e7f0      	b.n	8008498 <D24_1CH_HTONS_VOL_HP+0x118>
 80084b6:	bf00      	nop
 80084b8:	00030001 	.word	0x00030001
 80084bc:	00060007 	.word	0x00060007
 80084c0:	20000014 	.word	0x20000014

080084c4 <D32_1CH_HTONS_VOL_HP>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	4682      	mov	sl, r0
 80084ca:	b087      	sub	sp, #28
 80084cc:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80084ce:	6993      	ldr	r3, [r2, #24]
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80084d6:	69d5      	ldr	r5, [r2, #28]
 80084d8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80084da:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80084de:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d070      	beq.n	80085c8 <D32_1CH_HTONS_VOL_HP+0x104>
 80084e6:	468e      	mov	lr, r1
 80084e8:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 80085dc <D32_1CH_HTONS_VOL_HP+0x118>
 80084ec:	9205      	str	r2, [sp, #20]
 80084ee:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80084f2:	46d3      	mov	fp, sl
 80084f4:	4638      	mov	r0, r7
 80084f6:	46ca      	mov	sl, r9
 80084f8:	9103      	str	r1, [sp, #12]
 80084fa:	4627      	mov	r7, r4
 80084fc:	4699      	mov	r9, r3
 80084fe:	f85b 1b04 	ldr.w	r1, [fp], #4
 8008502:	ba49      	rev16	r1, r1
 8008504:	b2ca      	uxtb	r2, r1
 8008506:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800850a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800850e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8008512:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8008516:	0e09      	lsrs	r1, r1, #24
 8008518:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800851c:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8008520:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8008524:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8008528:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800852c:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8008530:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008534:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8008538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800853c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008544:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8008548:	4a20      	ldr	r2, [pc, #128]	@ (80085cc <D32_1CH_HTONS_VOL_HP+0x108>)
 800854a:	fb23 8802 	smlad	r8, r3, r2, r8
 800854e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008552:	fb24 8102 	smlad	r1, r4, r2, r8
 8008556:	4a1e      	ldr	r2, [pc, #120]	@ (80085d0 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8008558:	fb23 9802 	smlad	r8, r3, r2, r9
 800855c:	4a1d      	ldr	r2, [pc, #116]	@ (80085d4 <D32_1CH_HTONS_VOL_HP+0x110>)
 800855e:	fb24 8802 	smlad	r8, r4, r2, r8
 8008562:	2201      	movs	r2, #1
 8008564:	fb23 f302 	smuad	r3, r3, r2
 8008568:	4a1b      	ldr	r2, [pc, #108]	@ (80085d8 <D32_1CH_HTONS_VOL_HP+0x114>)
 800856a:	fb24 3902 	smlad	r9, r4, r2, r3
 800856e:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8008572:	19a2      	adds	r2, r4, r6
 8008574:	1a12      	subs	r2, r2, r0
 8008576:	17d1      	asrs	r1, r2, #31
 8008578:	fba2 230a 	umull	r2, r3, r2, sl
 800857c:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8008580:	fb0a 3301 	mla	r3, sl, r1, r3
 8008584:	f143 0100 	adc.w	r1, r3, #0
 8008588:	e9cd 0100 	strd	r0, r1, [sp]
 800858c:	038a      	lsls	r2, r1, #14
 800858e:	9b01      	ldr	r3, [sp, #4]
 8008590:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008594:	2100      	movs	r1, #0
 8008596:	fbc7 0102 	smlal	r0, r1, r7, r2
 800859a:	108a      	asrs	r2, r1, #2
 800859c:	005e      	lsls	r6, r3, #1
 800859e:	f302 020f 	ssat	r2, #16, r2
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	f82e 2b02 	strh.w	r2, [lr], #2
 80085a8:	459e      	cmp	lr, r3
 80085aa:	4620      	mov	r0, r4
 80085ac:	d1a7      	bne.n	80084fe <D32_1CH_HTONS_VOL_HP+0x3a>
 80085ae:	9a05      	ldr	r2, [sp, #20]
 80085b0:	464b      	mov	r3, r9
 80085b2:	e9c2 3802 	strd	r3, r8, [r2, #8]
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	61d5      	str	r5, [r2, #28]
 80085ba:	2000      	movs	r0, #0
 80085bc:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80085c0:	6193      	str	r3, [r2, #24]
 80085c2:	b007      	add	sp, #28
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	463c      	mov	r4, r7
 80085ca:	e7f2      	b.n	80085b2 <D32_1CH_HTONS_VOL_HP+0xee>
 80085cc:	00060003 	.word	0x00060003
 80085d0:	000a000c 	.word	0x000a000c
 80085d4:	000c000a 	.word	0x000c000a
 80085d8:	00030006 	.word	0x00030006
 80085dc:	20000014 	.word	0x20000014

080085e0 <D48_1CH_HTONS_VOL_HP>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	b087      	sub	sp, #28
 80085e6:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 80085e8:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80085ea:	6993      	ldr	r3, [r2, #24]
 80085ec:	9702      	str	r7, [sp, #8]
 80085ee:	6a17      	ldr	r7, [r2, #32]
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 80085f6:	69d6      	ldr	r6, [r2, #28]
 80085f8:	9705      	str	r7, [sp, #20]
 80085fa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80085fe:	2d00      	cmp	r5, #0
 8008600:	f000 8093 	beq.w	800872a <D48_1CH_HTONS_VOL_HP+0x14a>
 8008604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008608:	46ba      	mov	sl, r7
 800860a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800860e:	3902      	subs	r1, #2
 8008610:	4f47      	ldr	r7, [pc, #284]	@ (8008730 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008612:	9503      	str	r5, [sp, #12]
 8008614:	9101      	str	r1, [sp, #4]
 8008616:	469e      	mov	lr, r3
 8008618:	9205      	str	r2, [sp, #20]
 800861a:	e9d0 3500 	ldrd	r3, r5, [r0]
 800861e:	3006      	adds	r0, #6
 8008620:	ba5b      	rev16	r3, r3
 8008622:	ba6d      	rev16	r5, r5
 8008624:	b2da      	uxtb	r2, r3
 8008626:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800862a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800862e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008632:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8008636:	0e1b      	lsrs	r3, r3, #24
 8008638:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800863c:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8008640:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008644:	fa5f fb85 	uxtb.w	fp, r5
 8008648:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 800864c:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8008650:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8008654:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8008658:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800865c:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8008660:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008664:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008668:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800866c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008670:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8008674:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008678:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800867c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008680:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8008684:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008688:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 800868c:	4b29      	ldr	r3, [pc, #164]	@ (8008734 <D48_1CH_HTONS_VOL_HP+0x154>)
 800868e:	fb22 c103 	smlad	r1, r2, r3, ip
 8008692:	4b29      	ldr	r3, [pc, #164]	@ (8008738 <D48_1CH_HTONS_VOL_HP+0x158>)
 8008694:	fb28 1103 	smlad	r1, r8, r3, r1
 8008698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800869c:	fb25 1103 	smlad	r1, r5, r3, r1
 80086a0:	4b26      	ldr	r3, [pc, #152]	@ (800873c <D48_1CH_HTONS_VOL_HP+0x15c>)
 80086a2:	fb22 ec03 	smlad	ip, r2, r3, lr
 80086a6:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 80086aa:	fb28 cc03 	smlad	ip, r8, r3, ip
 80086ae:	4b24      	ldr	r3, [pc, #144]	@ (8008740 <D48_1CH_HTONS_VOL_HP+0x160>)
 80086b0:	fb25 cc03 	smlad	ip, r5, r3, ip
 80086b4:	f04f 0e01 	mov.w	lr, #1
 80086b8:	fb22 f20e 	smuad	r2, r2, lr
 80086bc:	4b21      	ldr	r3, [pc, #132]	@ (8008744 <D48_1CH_HTONS_VOL_HP+0x164>)
 80086be:	fb28 2803 	smlad	r8, r8, r3, r2
 80086c2:	4b21      	ldr	r3, [pc, #132]	@ (8008748 <D48_1CH_HTONS_VOL_HP+0x168>)
 80086c4:	fb25 8e03 	smlad	lr, r5, r3, r8
 80086c8:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 80086cc:	190a      	adds	r2, r1, r4
 80086ce:	eba2 0209 	sub.w	r2, r2, r9
 80086d2:	17d5      	asrs	r5, r2, #31
 80086d4:	fba2 230a 	umull	r2, r3, r2, sl
 80086d8:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80086dc:	fb0a 3305 	mla	r3, sl, r5, r3
 80086e0:	f143 0500 	adc.w	r5, r3, #0
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	032a      	lsls	r2, r5, #12
 80086e8:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80086ec:	f04f 0900 	mov.w	r9, #0
 80086f0:	fbc3 8902 	smlal	r8, r9, r3, r2
 80086f4:	9a01      	ldr	r2, [sp, #4]
 80086f6:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80086fa:	f303 030f 	ssat	r3, #16, r3
 80086fe:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	9201      	str	r2, [sp, #4]
 8008706:	4283      	cmp	r3, r0
 8008708:	ea4f 0445 	mov.w	r4, r5, lsl #1
 800870c:	4689      	mov	r9, r1
 800870e:	d184      	bne.n	800861a <D48_1CH_HTONS_VOL_HP+0x3a>
 8008710:	9a05      	ldr	r2, [sp, #20]
 8008712:	4673      	mov	r3, lr
 8008714:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	61d6      	str	r6, [r2, #28]
 800871c:	2000      	movs	r0, #0
 800871e:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008722:	6193      	str	r3, [r2, #24]
 8008724:	b007      	add	sp, #28
 8008726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872a:	4649      	mov	r1, r9
 800872c:	e7f2      	b.n	8008714 <D48_1CH_HTONS_VOL_HP+0x134>
 800872e:	bf00      	nop
 8008730:	20000014 	.word	0x20000014
 8008734:	000f000a 	.word	0x000f000a
 8008738:	00060003 	.word	0x00060003
 800873c:	00150019 	.word	0x00150019
 8008740:	00190015 	.word	0x00190015
 8008744:	00030006 	.word	0x00030006
 8008748:	000a000f 	.word	0x000a000f

0800874c <D64_1CH_HTONS_VOL_HP>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	b087      	sub	sp, #28
 8008752:	6913      	ldr	r3, [r2, #16]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 800875a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 800875c:	9601      	str	r6, [sp, #4]
 800875e:	4681      	mov	r9, r0
 8008760:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8008762:	6a16      	ldr	r6, [r2, #32]
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 800876a:	69d3      	ldr	r3, [r2, #28]
 800876c:	9602      	str	r6, [sp, #8]
 800876e:	2800      	cmp	r0, #0
 8008770:	f000 809d 	beq.w	80088ae <D64_1CH_HTONS_VOL_HP+0x162>
 8008774:	468e      	mov	lr, r1
 8008776:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80088e8 <D64_1CH_HTONS_VOL_HP+0x19c>
 800877a:	9205      	str	r2, [sp, #20]
 800877c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008780:	9103      	str	r1, [sp, #12]
 8008782:	4622      	mov	r2, r4
 8008784:	4619      	mov	r1, r3
 8008786:	f859 3b08 	ldr.w	r3, [r9], #8
 800878a:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800878e:	ba5b      	rev16	r3, r3
 8008790:	ba76      	rev16	r6, r6
 8008792:	b2dc      	uxtb	r4, r3
 8008794:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008798:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800879c:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 80087a0:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80087a4:	0e1b      	lsrs	r3, r3, #24
 80087a6:	eb01 0b07 	add.w	fp, r1, r7
 80087aa:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 80087ae:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 80087b2:	b2f1      	uxtb	r1, r6
 80087b4:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 80087b8:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80087bc:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 80087c0:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80087c4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80087c8:	f3c6 4107 	ubfx	r1, r6, #16, #8
 80087cc:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 80087d0:	0e36      	lsrs	r6, r6, #24
 80087d2:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 80087d6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80087da:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80087de:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80087e2:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80087e6:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80087ea:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80087ee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80087f2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80087f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80087fe:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8008802:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008806:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800880a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800880e:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8008812:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008816:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800881a:	4b2b      	ldr	r3, [pc, #172]	@ (80088c8 <D64_1CH_HTONS_VOL_HP+0x17c>)
 800881c:	0ab1      	lsrs	r1, r6, #10
 800881e:	fb2b 8803 	smlad	r8, fp, r3, r8
 8008822:	4b2a      	ldr	r3, [pc, #168]	@ (80088cc <D64_1CH_HTONS_VOL_HP+0x180>)
 8008824:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008828:	4b29      	ldr	r3, [pc, #164]	@ (80088d0 <D64_1CH_HTONS_VOL_HP+0x184>)
 800882a:	fb27 8803 	smlad	r8, r7, r3, r8
 800882e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008832:	fb20 8604 	smlad	r6, r0, r4, r8
 8008836:	4b27      	ldr	r3, [pc, #156]	@ (80088d4 <D64_1CH_HTONS_VOL_HP+0x188>)
 8008838:	fb2b 5803 	smlad	r8, fp, r3, r5
 800883c:	fb20 8813 	smladx	r8, r0, r3, r8
 8008840:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008842:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008846:	fb27 8813 	smladx	r8, r7, r3, r8
 800884a:	2401      	movs	r4, #1
 800884c:	fb2b fb04 	smuad	fp, fp, r4
 8008850:	4b22      	ldr	r3, [pc, #136]	@ (80088dc <D64_1CH_HTONS_VOL_HP+0x190>)
 8008852:	fb2a ba03 	smlad	sl, sl, r3, fp
 8008856:	4b22      	ldr	r3, [pc, #136]	@ (80088e0 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008858:	fb27 a703 	smlad	r7, r7, r3, sl
 800885c:	4b21      	ldr	r3, [pc, #132]	@ (80088e4 <D64_1CH_HTONS_VOL_HP+0x198>)
 800885e:	fb20 7503 	smlad	r5, r0, r3, r7
 8008862:	9b00      	ldr	r3, [sp, #0]
 8008864:	9802      	ldr	r0, [sp, #8]
 8008866:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 800886a:	4423      	add	r3, r4
 800886c:	1a9a      	subs	r2, r3, r2
 800886e:	17d7      	asrs	r7, r2, #31
 8008870:	fba2 2300 	umull	r2, r3, r2, r0
 8008874:	fb00 3307 	mla	r3, r0, r7, r3
 8008878:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 800887c:	f143 0b00 	adc.w	fp, r3, #0
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8008886:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 800888a:	2700      	movs	r7, #0
 800888c:	fbc3 6702 	smlal	r6, r7, r3, r2
 8008890:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008894:	10ba      	asrs	r2, r7, #2
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	f302 020f 	ssat	r2, #16, r2
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	f82e 2b02 	strh.w	r2, [lr], #2
 80088a2:	459e      	cmp	lr, r3
 80088a4:	4622      	mov	r2, r4
 80088a6:	f47f af6e 	bne.w	8008786 <D64_1CH_HTONS_VOL_HP+0x3a>
 80088aa:	9a05      	ldr	r2, [sp, #20]
 80088ac:	460b      	mov	r3, r1
 80088ae:	61d3      	str	r3, [r2, #28]
 80088b0:	9b00      	ldr	r3, [sp, #0]
 80088b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	6193      	str	r3, [r2, #24]
 80088ba:	2000      	movs	r0, #0
 80088bc:	e9c2 5802 	strd	r5, r8, [r2, #8]
 80088c0:	b007      	add	sp, #28
 80088c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c6:	bf00      	nop
 80088c8:	001c0015 	.word	0x001c0015
 80088cc:	000f000a 	.word	0x000f000a
 80088d0:	00060003 	.word	0x00060003
 80088d4:	0024002a 	.word	0x0024002a
 80088d8:	002e0030 	.word	0x002e0030
 80088dc:	00030006 	.word	0x00030006
 80088e0:	000a000f 	.word	0x000a000f
 80088e4:	0015001c 	.word	0x0015001c
 80088e8:	20000014 	.word	0x20000014

080088ec <D80_1CH_HTONS_VOL_HP>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	4615      	mov	r5, r2
 80088f2:	b089      	sub	sp, #36	@ 0x24
 80088f4:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 80088f8:	692b      	ldr	r3, [r5, #16]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8008900:	9400      	str	r4, [sp, #0]
 8008902:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008904:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8008906:	9403      	str	r4, [sp, #12]
 8008908:	6a2c      	ldr	r4, [r5, #32]
 800890a:	9306      	str	r3, [sp, #24]
 800890c:	9404      	str	r4, [sp, #16]
 800890e:	69eb      	ldr	r3, [r5, #28]
 8008910:	2a00      	cmp	r2, #0
 8008912:	f000 80d3 	beq.w	8008abc <D80_1CH_HTONS_VOL_HP+0x1d0>
 8008916:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800891a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800891e:	9205      	str	r2, [sp, #20]
 8008920:	4c67      	ldr	r4, [pc, #412]	@ (8008ac0 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008922:	9507      	str	r5, [sp, #28]
 8008924:	1e8a      	subs	r2, r1, #2
 8008926:	9202      	str	r2, [sp, #8]
 8008928:	469b      	mov	fp, r3
 800892a:	6807      	ldr	r7, [r0, #0]
 800892c:	6842      	ldr	r2, [r0, #4]
 800892e:	6883      	ldr	r3, [r0, #8]
 8008930:	300a      	adds	r0, #10
 8008932:	ba7f      	rev16	r7, r7
 8008934:	ba52      	rev16	r2, r2
 8008936:	ba5b      	rev16	r3, r3
 8008938:	b2fd      	uxtb	r5, r7
 800893a:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800893e:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8008942:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008946:	f3c7 4507 	ubfx	r5, r7, #16, #8
 800894a:	44f3      	add	fp, lr
 800894c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008950:	0e3f      	lsrs	r7, r7, #24
 8008952:	fa5f fe82 	uxtb.w	lr, r2
 8008956:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 800895a:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 800895e:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8008962:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8008966:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800896a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 800896e:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8008972:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008976:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 800897a:	0e12      	lsrs	r2, r2, #24
 800897c:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008980:	fa5f fe83 	uxtb.w	lr, r3
 8008984:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8008988:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800898c:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8008990:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008994:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8008998:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800899c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80089a0:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 80089a4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 80089a8:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80089ac:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80089b0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80089b4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80089b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80089bc:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 80089c0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80089c4:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 80089c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80089cc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80089d0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80089d4:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 80089d8:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 80089dc:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 80089e0:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 80089e4:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80089e8:	4b36      	ldr	r3, [pc, #216]	@ (8008ac4 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80089ea:	9a00      	ldr	r2, [sp, #0]
 80089ec:	fb21 2303 	smlad	r3, r1, r3, r2
 80089f0:	4a35      	ldr	r2, [pc, #212]	@ (8008ac8 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 80089f2:	fb27 3302 	smlad	r3, r7, r2, r3
 80089f6:	4a35      	ldr	r2, [pc, #212]	@ (8008acc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80089f8:	fb25 3302 	smlad	r3, r5, r2, r3
 80089fc:	4a34      	ldr	r2, [pc, #208]	@ (8008ad0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80089fe:	fb28 3302 	smlad	r3, r8, r2, r3
 8008a02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008a06:	fb2e 3302 	smlad	r3, lr, r2, r3
 8008a0a:	4a32      	ldr	r2, [pc, #200]	@ (8008ad4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008a0c:	fb21 cc02 	smlad	ip, r1, r2, ip
 8008a10:	4a31      	ldr	r2, [pc, #196]	@ (8008ad8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008a12:	fb27 cc02 	smlad	ip, r7, r2, ip
 8008a16:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8008a1a:	fb25 c909 	smlad	r9, r5, r9, ip
 8008a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8008adc <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008a20:	fb28 9902 	smlad	r9, r8, r2, r9
 8008a24:	4a2e      	ldr	r2, [pc, #184]	@ (8008ae0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008a26:	fb2e 9202 	smlad	r2, lr, r2, r9
 8008a2a:	f04f 0a01 	mov.w	sl, #1
 8008a2e:	9200      	str	r2, [sp, #0]
 8008a30:	fb21 fa0a 	smuad	sl, r1, sl
 8008a34:	4a2b      	ldr	r2, [pc, #172]	@ (8008ae4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008a36:	fb27 a702 	smlad	r7, r7, r2, sl
 8008a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ae8 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8008a3c:	fb25 7702 	smlad	r7, r5, r2, r7
 8008a40:	4a2a      	ldr	r2, [pc, #168]	@ (8008aec <D80_1CH_HTONS_VOL_HP+0x200>)
 8008a42:	fb28 7202 	smlad	r2, r8, r2, r7
 8008a46:	4d2a      	ldr	r5, [pc, #168]	@ (8008af0 <D80_1CH_HTONS_VOL_HP+0x204>)
 8008a48:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8008a4c:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	9903      	ldr	r1, [sp, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	1b9e      	subs	r6, r3, r6
 8008a58:	9b04      	ldr	r3, [sp, #16]
 8008a5a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008a5e:	fba6 5603 	umull	r5, r6, r6, r3
 8008a62:	fb03 6309 	mla	r3, r3, r9, r6
 8008a66:	462e      	mov	r6, r5
 8008a68:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8008a6c:	f143 0700 	adc.w	r7, r3, #0
 8008a70:	02bb      	lsls	r3, r7, #10
 8008a72:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008a76:	f04f 0900 	mov.w	r9, #0
 8008a7a:	fbc1 8903 	smlal	r8, r9, r1, r3
 8008a7e:	9902      	ldr	r1, [sp, #8]
 8008a80:	007b      	lsls	r3, r7, #1
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008a88:	f303 030f 	ssat	r3, #16, r3
 8008a8c:	f821 3f02 	strh.w	r3, [r1, #2]!
 8008a90:	9b05      	ldr	r3, [sp, #20]
 8008a92:	9102      	str	r1, [sp, #8]
 8008a94:	4283      	cmp	r3, r0
 8008a96:	4616      	mov	r6, r2
 8008a98:	f47f af47 	bne.w	800892a <D80_1CH_HTONS_VOL_HP+0x3e>
 8008a9c:	9d07      	ldr	r5, [sp, #28]
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	61eb      	str	r3, [r5, #28]
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	9900      	ldr	r1, [sp, #0]
 8008aa6:	f8c5 c008 	str.w	ip, [r5, #8]
 8008aaa:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8008aae:	9b06      	ldr	r3, [sp, #24]
 8008ab0:	60e9      	str	r1, [r5, #12]
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	61ab      	str	r3, [r5, #24]
 8008ab6:	b009      	add	sp, #36	@ 0x24
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	4632      	mov	r2, r6
 8008abe:	e7ef      	b.n	8008aa0 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8008ac0:	20000014 	.word	0x20000014
 8008ac4:	002d0024 	.word	0x002d0024
 8008ac8:	001c0015 	.word	0x001c0015
 8008acc:	000f000a 	.word	0x000f000a
 8008ad0:	00060003 	.word	0x00060003
 8008ad4:	0037003f 	.word	0x0037003f
 8008ad8:	00450049 	.word	0x00450049
 8008adc:	00490045 	.word	0x00490045
 8008ae0:	003f0037 	.word	0x003f0037
 8008ae4:	00030006 	.word	0x00030006
 8008ae8:	000a000f 	.word	0x000a000f
 8008aec:	0015001c 	.word	0x0015001c
 8008af0:	0024002d 	.word	0x0024002d

08008af4 <D128_1CH_HTONS_VOL_HP>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	b093      	sub	sp, #76	@ 0x4c
 8008afa:	6914      	ldr	r4, [r2, #16]
 8008afc:	9404      	str	r4, [sp, #16]
 8008afe:	6954      	ldr	r4, [r2, #20]
 8008b00:	9406      	str	r4, [sp, #24]
 8008b02:	6994      	ldr	r4, [r2, #24]
 8008b04:	9410      	str	r4, [sp, #64]	@ 0x40
 8008b06:	6894      	ldr	r4, [r2, #8]
 8008b08:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008b0a:	9403      	str	r4, [sp, #12]
 8008b0c:	68d4      	ldr	r4, [r2, #12]
 8008b0e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008b10:	69d6      	ldr	r6, [r2, #28]
 8008b12:	9402      	str	r4, [sp, #8]
 8008b14:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008b16:	6a12      	ldr	r2, [r2, #32]
 8008b18:	940d      	str	r4, [sp, #52]	@ 0x34
 8008b1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 814a 	beq.w	8008db6 <D128_1CH_HTONS_VOL_HP+0x2c2>
 8008b22:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008b26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b28:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8008df4 <D128_1CH_HTONS_VOL_HP+0x300>
 8008b2c:	9107      	str	r1, [sp, #28]
 8008b2e:	f100 0310 	add.w	r3, r0, #16
 8008b32:	469b      	mov	fp, r3
 8008b34:	9605      	str	r6, [sp, #20]
 8008b36:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 8008b3a:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8008b3e:	ba49      	rev16	r1, r1
 8008b40:	ba52      	rev16	r2, r2
 8008b42:	ba5b      	rev16	r3, r3
 8008b44:	fa90 fa90 	rev16.w	sl, r0
 8008b48:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8008b4c:	b2cc      	uxtb	r4, r1
 8008b4e:	9e05      	ldr	r6, [sp, #20]
 8008b50:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8008b54:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8008b58:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008b5c:	0e09      	lsrs	r1, r1, #24
 8008b5e:	4426      	add	r6, r4
 8008b60:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8008b64:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8008b68:	b2d0      	uxtb	r0, r2
 8008b6a:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008b6e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008b72:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8008b76:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8008b7a:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8008b7e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008b82:	0e12      	lsrs	r2, r2, #24
 8008b84:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008b88:	9401      	str	r4, [sp, #4]
 8008b8a:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8008b8e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8008b92:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008b96:	9705      	str	r7, [sp, #20]
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8008b9e:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8008ba2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8008ba6:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008baa:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8008bae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008bb2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008bb6:	0e1b      	lsrs	r3, r3, #24
 8008bb8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8008bbc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8008bc0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8008bc4:	fa5f f38a 	uxtb.w	r3, sl
 8008bc8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008bcc:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bce:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008bd2:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8008bd6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008bda:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8008bde:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008be0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008be4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008be8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008bec:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8008bf0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8008bf4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008bf8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8008bfc:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008c00:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8008c04:	9308      	str	r3, [sp, #32]
 8008c06:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008c0a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c10:	9b01      	ldr	r3, [sp, #4]
 8008c12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c14:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008c18:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008c1c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008c20:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008c24:	9b05      	ldr	r3, [sp, #20]
 8008c26:	f8cd 9014 	str.w	r9, [sp, #20]
 8008c2a:	4691      	mov	r9, r2
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c2e:	f8cd a004 	str.w	sl, [sp, #4]
 8008c32:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8008c36:	9a01      	ldr	r2, [sp, #4]
 8008c38:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8008c3c:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c4e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008c52:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8008c56:	9201      	str	r2, [sp, #4]
 8008c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c5a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c5e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008c62:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c66:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008c6a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008c6e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008c72:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008c76:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8008c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c7e:	0a92      	lsrs	r2, r2, #10
 8008c80:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8008c84:	9205      	str	r2, [sp, #20]
 8008c86:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008c8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008c8e:	4d4b      	ldr	r5, [pc, #300]	@ (8008dbc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008c90:	9a02      	ldr	r2, [sp, #8]
 8008c92:	fb29 2505 	smlad	r5, r9, r5, r2
 8008c96:	4a4a      	ldr	r2, [pc, #296]	@ (8008dc0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8008c98:	fb2a 5502 	smlad	r5, sl, r2, r5
 8008c9c:	4a49      	ldr	r2, [pc, #292]	@ (8008dc4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8008c9e:	fb21 5502 	smlad	r5, r1, r2, r5
 8008ca2:	4a49      	ldr	r2, [pc, #292]	@ (8008dc8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8008ca4:	fb24 5502 	smlad	r5, r4, r2, r5
 8008ca8:	4a48      	ldr	r2, [pc, #288]	@ (8008dcc <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8008caa:	9e01      	ldr	r6, [sp, #4]
 8008cac:	fb26 5502 	smlad	r5, r6, r2, r5
 8008cb0:	4a47      	ldr	r2, [pc, #284]	@ (8008dd0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8008cb2:	fb20 5502 	smlad	r5, r0, r2, r5
 8008cb6:	4a47      	ldr	r2, [pc, #284]	@ (8008dd4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8008cb8:	fb23 5502 	smlad	r5, r3, r2, r5
 8008cbc:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8008cc0:	fb27 520c 	smlad	r2, r7, ip, r5
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	9d03      	ldr	r5, [sp, #12]
 8008cc8:	4a43      	ldr	r2, [pc, #268]	@ (8008dd8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8008cca:	fb29 5c02 	smlad	ip, r9, r2, r5
 8008cce:	4a43      	ldr	r2, [pc, #268]	@ (8008ddc <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8008cd0:	fb2a ce02 	smlad	lr, sl, r2, ip
 8008cd4:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8008df8 <D128_1CH_HTONS_VOL_HP+0x304>
 8008cd8:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8008cdc:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 8008dfc <D128_1CH_HTONS_VOL_HP+0x308>
 8008ce0:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8008ce4:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8008e00 <D128_1CH_HTONS_VOL_HP+0x30c>
 8008ce8:	9d01      	ldr	r5, [sp, #4]
 8008cea:	fb25 ce0e 	smlad	lr, r5, lr, ip
 8008cee:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8008e04 <D128_1CH_HTONS_VOL_HP+0x310>
 8008cf2:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8008cf6:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8008e08 <D128_1CH_HTONS_VOL_HP+0x314>
 8008cfa:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8008cfe:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 8008e0c <D128_1CH_HTONS_VOL_HP+0x318>
 8008d02:	fb27 c20e 	smlad	r2, r7, lr, ip
 8008d06:	f04f 0c01 	mov.w	ip, #1
 8008d0a:	9202      	str	r2, [sp, #8]
 8008d0c:	fb29 fc0c 	smuad	ip, r9, ip
 8008d10:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8008e10 <D128_1CH_HTONS_VOL_HP+0x31c>
 8008d14:	fb2a ca09 	smlad	sl, sl, r9, ip
 8008d18:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8008e14 <D128_1CH_HTONS_VOL_HP+0x320>
 8008d1c:	fb21 a909 	smlad	r9, r1, r9, sl
 8008d20:	492f      	ldr	r1, [pc, #188]	@ (8008de0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8008d22:	fb24 9901 	smlad	r9, r4, r1, r9
 8008d26:	492f      	ldr	r1, [pc, #188]	@ (8008de4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8008d28:	fb25 9901 	smlad	r9, r5, r1, r9
 8008d2c:	492e      	ldr	r1, [pc, #184]	@ (8008de8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8008d2e:	fb20 9901 	smlad	r9, r0, r1, r9
 8008d32:	492e      	ldr	r1, [pc, #184]	@ (8008dec <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8008d34:	fb23 9301 	smlad	r3, r3, r1, r9
 8008d38:	482d      	ldr	r0, [pc, #180]	@ (8008df0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8008d3a:	fb27 3300 	smlad	r3, r7, r0, r3
 8008d3e:	9303      	str	r3, [sp, #12]
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8008d44:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8008d48:	442b      	add	r3, r5
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	9506      	str	r5, [sp, #24]
 8008d50:	1ad2      	subs	r2, r2, r3
 8008d52:	17d1      	asrs	r1, r2, #31
 8008d54:	fba2 2304 	umull	r2, r3, r2, r4
 8008d58:	fb04 3301 	mla	r3, r4, r1, r3
 8008d5c:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8008d60:	f143 0a00 	adc.w	sl, r3, #0
 8008d64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d66:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8008d6a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008d6e:	2100      	movs	r1, #0
 8008d70:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	108a      	asrs	r2, r1, #2
 8008d78:	f302 020f 	ssat	r2, #16, r2
 8008d7c:	f823 2b02 	strh.w	r2, [r3], #2
 8008d80:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8008d84:	9204      	str	r2, [sp, #16]
 8008d86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	f10b 0b10 	add.w	fp, fp, #16
 8008d90:	f47f aed1 	bne.w	8008b36 <D128_1CH_HTONS_VOL_HP+0x42>
 8008d94:	9e05      	ldr	r6, [sp, #20]
 8008d96:	4629      	mov	r1, r5
 8008d98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d9a:	9803      	ldr	r0, [sp, #12]
 8008d9c:	6098      	str	r0, [r3, #8]
 8008d9e:	9802      	ldr	r0, [sp, #8]
 8008da0:	60d8      	str	r0, [r3, #12]
 8008da2:	9804      	ldr	r0, [sp, #16]
 8008da4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008da6:	61de      	str	r6, [r3, #28]
 8008da8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008dac:	2000      	movs	r0, #0
 8008dae:	619a      	str	r2, [r3, #24]
 8008db0:	b013      	add	sp, #76	@ 0x4c
 8008db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db6:	9906      	ldr	r1, [sp, #24]
 8008db8:	e7ee      	b.n	8008d98 <D128_1CH_HTONS_VOL_HP+0x2a4>
 8008dba:	bf00      	nop
 8008dbc:	00780069 	.word	0x00780069
 8008dc0:	005b004e 	.word	0x005b004e
 8008dc4:	00420037 	.word	0x00420037
 8008dc8:	002d0024 	.word	0x002d0024
 8008dcc:	001c0015 	.word	0x001c0015
 8008dd0:	000f000a 	.word	0x000f000a
 8008dd4:	00060003 	.word	0x00060003
 8008dd8:	00880096 	.word	0x00880096
 8008ddc:	00a200ac 	.word	0x00a200ac
 8008de0:	0015001c 	.word	0x0015001c
 8008de4:	0024002d 	.word	0x0024002d
 8008de8:	00370042 	.word	0x00370042
 8008dec:	004e005b 	.word	0x004e005b
 8008df0:	00690078 	.word	0x00690078
 8008df4:	20000014 	.word	0x20000014
 8008df8:	00b400ba 	.word	0x00b400ba
 8008dfc:	00be00c0 	.word	0x00be00c0
 8008e00:	00c000be 	.word	0x00c000be
 8008e04:	00ba00b4 	.word	0x00ba00b4
 8008e08:	00ac00a2 	.word	0x00ac00a2
 8008e0c:	00960088 	.word	0x00960088
 8008e10:	00030006 	.word	0x00030006
 8008e14:	000a000f 	.word	0x000a000f

08008e18 <PDM_Filter_Init>:
 8008e18:	4a59      	ldr	r2, [pc, #356]	@ (8008f80 <PDM_Filter_Init+0x168>)
 8008e1a:	495a      	ldr	r1, [pc, #360]	@ (8008f84 <PDM_Filter_Init+0x16c>)
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	680b      	ldr	r3, [r1, #0]
 8008e28:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8008e32:	42ab      	cmp	r3, r5
 8008e34:	4604      	mov	r4, r0
 8008e36:	d044      	beq.n	8008ec2 <PDM_Filter_Init+0xaa>
 8008e38:	680b      	ldr	r3, [r1, #0]
 8008e3a:	f24c 2170 	movw	r1, #49776	@ 0xc270
 8008e3e:	401a      	ands	r2, r3
 8008e40:	428a      	cmp	r2, r1
 8008e42:	d03e      	beq.n	8008ec2 <PDM_Filter_Init+0xaa>
 8008e44:	4b50      	ldr	r3, [pc, #320]	@ (8008f88 <PDM_Filter_Init+0x170>)
 8008e46:	2201      	movs	r2, #1
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	6819      	ldr	r1, [r3, #0]
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	d1fc      	bne.n	8008e4a <PDM_Filter_Init+0x32>
 8008e50:	4b4e      	ldr	r3, [pc, #312]	@ (8008f8c <PDM_Filter_Init+0x174>)
 8008e52:	4a4f      	ldr	r2, [pc, #316]	@ (8008f90 <PDM_Filter_Init+0x178>)
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	4b4e      	ldr	r3, [pc, #312]	@ (8008f94 <PDM_Filter_Init+0x17c>)
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	f104 000c 	add.w	r0, r4, #12
 8008e60:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8008e64:	d047      	beq.n	8008ef6 <PDM_Filter_Init+0xde>
 8008e66:	f000 f9ad 	bl	80091c4 <memset>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6463      	str	r3, [r4, #68]	@ 0x44
 8008e6e:	8820      	ldrh	r0, [r4, #0]
 8008e70:	8963      	ldrh	r3, [r4, #10]
 8008e72:	8922      	ldrh	r2, [r4, #8]
 8008e74:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8008e76:	2801      	cmp	r0, #1
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	61a3      	str	r3, [r4, #24]
 8008e7e:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008e82:	60e3      	str	r3, [r4, #12]
 8008e84:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e86:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008e8a:	6423      	str	r3, [r4, #64]	@ 0x40
 8008e8c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8008e8e:	d93a      	bls.n	8008f06 <PDM_Filter_Init+0xee>
 8008e90:	2003      	movs	r0, #3
 8008e92:	2302      	movs	r3, #2
 8008e94:	8862      	ldrh	r2, [r4, #2]
 8008e96:	2a01      	cmp	r2, #1
 8008e98:	d932      	bls.n	8008f00 <PDM_Filter_Init+0xe8>
 8008e9a:	2140      	movs	r1, #64	@ 0x40
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008ea0:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8008ea4:	6862      	ldr	r2, [r4, #4]
 8008ea6:	bf04      	itt	eq
 8008ea8:	6421      	streq	r1, [r4, #64]	@ 0x40
 8008eaa:	460b      	moveq	r3, r1
 8008eac:	b11a      	cbz	r2, 8008eb6 <PDM_Filter_Init+0x9e>
 8008eae:	f043 0310 	orr.w	r3, r3, #16
 8008eb2:	6423      	str	r3, [r4, #64]	@ 0x40
 8008eb4:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	8722      	strh	r2, [r4, #56]	@ 0x38
 8008eba:	b908      	cbnz	r0, 8008ec0 <PDM_Filter_Init+0xa8>
 8008ebc:	3380      	adds	r3, #128	@ 0x80
 8008ebe:	6423      	str	r3, [r4, #64]	@ 0x40
 8008ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec2:	4b35      	ldr	r3, [pc, #212]	@ (8008f98 <PDM_Filter_Init+0x180>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1bc      	bne.n	8008e44 <PDM_Filter_Init+0x2c>
 8008eca:	4a34      	ldr	r2, [pc, #208]	@ (8008f9c <PDM_Filter_Init+0x184>)
 8008ecc:	6813      	ldr	r3, [r2, #0]
 8008ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed2:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8008ed6:	d006      	beq.n	8008ee6 <PDM_Filter_Init+0xce>
 8008ed8:	6813      	ldr	r3, [r2, #0]
 8008eda:	f240 4283 	movw	r2, #1155	@ 0x483
 8008ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d1ae      	bne.n	8008e44 <PDM_Filter_Init+0x2c>
 8008ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8008fa0 <PDM_Filter_Init+0x188>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	6819      	ldr	r1, [r3, #0]
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d1fc      	bne.n	8008eec <PDM_Filter_Init+0xd4>
 8008ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8008fa4 <PDM_Filter_Init+0x18c>)
 8008ef4:	e7ad      	b.n	8008e52 <PDM_Filter_Init+0x3a>
 8008ef6:	f000 f965 	bl	80091c4 <memset>
 8008efa:	4b26      	ldr	r3, [pc, #152]	@ (8008f94 <PDM_Filter_Init+0x17c>)
 8008efc:	6463      	str	r3, [r4, #68]	@ 0x44
 8008efe:	e7b6      	b.n	8008e6e <PDM_Filter_Init+0x56>
 8008f00:	d038      	beq.n	8008f74 <PDM_Filter_Init+0x15c>
 8008f02:	4618      	mov	r0, r3
 8008f04:	e7c9      	b.n	8008e9a <PDM_Filter_Init+0x82>
 8008f06:	4d28      	ldr	r5, [pc, #160]	@ (8008fa8 <PDM_Filter_Init+0x190>)
 8008f08:	782a      	ldrb	r2, [r5, #0]
 8008f0a:	d01a      	beq.n	8008f42 <PDM_Filter_Init+0x12a>
 8008f0c:	2a01      	cmp	r2, #1
 8008f0e:	d001      	beq.n	8008f14 <PDM_Filter_Init+0xfc>
 8008f10:	2001      	movs	r0, #1
 8008f12:	e7bf      	b.n	8008e94 <PDM_Filter_Init+0x7c>
 8008f14:	4925      	ldr	r1, [pc, #148]	@ (8008fac <PDM_Filter_Init+0x194>)
 8008f16:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8008fb4 <PDM_Filter_Init+0x19c>
 8008f1a:	4f25      	ldr	r7, [pc, #148]	@ (8008fb0 <PDM_Filter_Init+0x198>)
 8008f1c:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8008f20:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008f24:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8008f28:	ea02 0007 	and.w	r0, r2, r7
 8008f2c:	4303      	orrs	r3, r0
 8008f2e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008f32:	4413      	add	r3, r2
 8008f34:	428e      	cmp	r6, r1
 8008f36:	600b      	str	r3, [r1, #0]
 8008f38:	d1f2      	bne.n	8008f20 <PDM_Filter_Init+0x108>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	702b      	strb	r3, [r5, #0]
 8008f3e:	2001      	movs	r0, #1
 8008f40:	e7a8      	b.n	8008e94 <PDM_Filter_Init+0x7c>
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	d1a6      	bne.n	8008e94 <PDM_Filter_Init+0x7c>
 8008f46:	4919      	ldr	r1, [pc, #100]	@ (8008fac <PDM_Filter_Init+0x194>)
 8008f48:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8008fb4 <PDM_Filter_Init+0x19c>
 8008f4c:	4f18      	ldr	r7, [pc, #96]	@ (8008fb0 <PDM_Filter_Init+0x198>)
 8008f4e:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8008f52:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008f56:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8008f5a:	ea02 0007 	and.w	r0, r2, r7
 8008f5e:	4303      	orrs	r3, r0
 8008f60:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008f64:	4413      	add	r3, r2
 8008f66:	428e      	cmp	r6, r1
 8008f68:	600b      	str	r3, [r1, #0]
 8008f6a:	d1f2      	bne.n	8008f52 <PDM_Filter_Init+0x13a>
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	7028      	strb	r0, [r5, #0]
 8008f70:	2300      	movs	r3, #0
 8008f72:	e78f      	b.n	8008e94 <PDM_Filter_Init+0x7c>
 8008f74:	2220      	movs	r2, #32
 8008f76:	4618      	mov	r0, r3
 8008f78:	6422      	str	r2, [r4, #64]	@ 0x40
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	2160      	movs	r1, #96	@ 0x60
 8008f7e:	e78e      	b.n	8008e9e <PDM_Filter_Init+0x86>
 8008f80:	e0002000 	.word	0xe0002000
 8008f84:	e000ed00 	.word	0xe000ed00
 8008f88:	40023008 	.word	0x40023008
 8008f8c:	40023000 	.word	0x40023000
 8008f90:	f407a5c2 	.word	0xf407a5c2
 8008f94:	b5e8b5cd 	.word	0xb5e8b5cd
 8008f98:	e0042000 	.word	0xe0042000
 8008f9c:	5c001000 	.word	0x5c001000
 8008fa0:	58024c08 	.word	0x58024c08
 8008fa4:	58024c00 	.word	0x58024c00
 8008fa8:	20000bde 	.word	0x20000bde
 8008fac:	20000010 	.word	0x20000010
 8008fb0:	000ffc00 	.word	0x000ffc00
 8008fb4:	3ff00000 	.word	0x3ff00000

08008fb8 <PDM_Filter_setConfig>:
 8008fb8:	4b6d      	ldr	r3, [pc, #436]	@ (8009170 <PDM_Filter_setConfig+0x1b8>)
 8008fba:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d12f      	bne.n	8009020 <PDM_Filter_setConfig+0x68>
 8008fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc2:	880e      	ldrh	r6, [r1, #0]
 8008fc4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008fc6:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8008fca:	ed2d 8b02 	vpush	{d8}
 8008fce:	4604      	mov	r4, r0
 8008fd0:	1e72      	subs	r2, r6, #1
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	2a06      	cmp	r2, #6
 8008fd6:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008fda:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 8008fde:	6421      	str	r1, [r4, #64]	@ 0x40
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	d904      	bls.n	8008fee <PDM_Filter_setConfig+0x36>
 8008fe4:	42b8      	cmp	r0, r7
 8008fe6:	f000 80bb 	beq.w	8009160 <PDM_Filter_setConfig+0x1a8>
 8008fea:	2008      	movs	r0, #8
 8008fec:	e01d      	b.n	800902a <PDM_Filter_setConfig+0x72>
 8008fee:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8008ff0:	42b2      	cmp	r2, r6
 8008ff2:	d070      	beq.n	80090d6 <PDM_Filter_setConfig+0x11e>
 8008ff4:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8008ff8:	f023 0301 	bic.w	r3, r3, #1
 8008ffc:	4333      	orrs	r3, r6
 8008ffe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009002:	6423      	str	r3, [r4, #64]	@ 0x40
 8009004:	2a70      	cmp	r2, #112	@ 0x70
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	f103 33ff 	add.w	r3, r3, #4294967295
 800900e:	d067      	beq.n	80090e0 <PDM_Filter_setConfig+0x128>
 8009010:	2b06      	cmp	r3, #6
 8009012:	d809      	bhi.n	8009028 <PDM_Filter_setConfig+0x70>
 8009014:	e8df f003 	tbb	[pc, r3]
 8009018:	89868380 	.word	0x89868380
 800901c:	8f8c      	.short	0x8f8c
 800901e:	7d          	.byte	0x7d
 800901f:	00          	.byte	0x00
 8009020:	2004      	movs	r0, #4
 8009022:	4770      	bx	lr
 8009024:	4b53      	ldr	r3, [pc, #332]	@ (8009174 <PDM_Filter_setConfig+0x1bc>)
 8009026:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009028:	2000      	movs	r0, #0
 800902a:	f117 0f0c 	cmn.w	r7, #12
 800902e:	da0a      	bge.n	8009046 <PDM_Filter_setConfig+0x8e>
 8009030:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8009034:	3040      	adds	r0, #64	@ 0x40
 8009036:	80ab      	strh	r3, [r5, #4]
 8009038:	886b      	ldrh	r3, [r5, #2]
 800903a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800903c:	8626      	strh	r6, [r4, #48]	@ 0x30
 800903e:	b003      	add	sp, #12
 8009040:	ecbd 8b02 	vpop	{d8}
 8009044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009046:	2f33      	cmp	r7, #51	@ 0x33
 8009048:	dc41      	bgt.n	80090ce <PDM_Filter_setConfig+0x116>
 800904a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	3b01      	subs	r3, #1
 8009052:	2b06      	cmp	r3, #6
 8009054:	d858      	bhi.n	8009108 <PDM_Filter_setConfig+0x150>
 8009056:	4948      	ldr	r1, [pc, #288]	@ (8009178 <PDM_Filter_setConfig+0x1c0>)
 8009058:	4a48      	ldr	r2, [pc, #288]	@ (800917c <PDM_Filter_setConfig+0x1c4>)
 800905a:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8009180 <PDM_Filter_setConfig+0x1c8>
 800905e:	9001      	str	r0, [sp, #4]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4419      	add	r1, r3
 8009064:	edd1 7a00 	vldr	s15, [r1]
 8009068:	4413      	add	r3, r2
 800906a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800906e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8009072:	ed93 8a00 	vldr	s16, [r3]
 8009076:	f000 f8d7 	bl	8009228 <powf>
 800907a:	9801      	ldr	r0, [sp, #4]
 800907c:	eef0 8a40 	vmov.f32	s17, s0
 8009080:	ee07 7a10 	vmov	s14, r7
 8009084:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009184 <PDM_Filter_setConfig+0x1cc>
 8009088:	9001      	str	r0, [sp, #4]
 800908a:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 800908e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009092:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009096:	f000 f8c7 	bl	8009228 <powf>
 800909a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800909e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80090a2:	f000 f993 	bl	80093cc <roundf>
 80090a6:	9801      	ldr	r0, [sp, #4]
 80090a8:	886b      	ldrh	r3, [r5, #2]
 80090aa:	8663      	strh	r3, [r4, #50]	@ 0x32
 80090ac:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80090b0:	8727      	strh	r7, [r4, #56]	@ 0x38
 80090b2:	8626      	strh	r6, [r4, #48]	@ 0x30
 80090b4:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d1c0      	bne.n	800903e <PDM_Filter_setConfig+0x86>
 80090bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090be:	2000      	movs	r0, #0
 80090c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090c4:	6423      	str	r3, [r4, #64]	@ 0x40
 80090c6:	b003      	add	sp, #12
 80090c8:	ecbd 8b02 	vpop	{d8}
 80090cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ce:	2333      	movs	r3, #51	@ 0x33
 80090d0:	3040      	adds	r0, #64	@ 0x40
 80090d2:	80ab      	strh	r3, [r5, #4]
 80090d4:	e7b0      	b.n	8009038 <PDM_Filter_setConfig+0x80>
 80090d6:	42b8      	cmp	r0, r7
 80090d8:	d1a6      	bne.n	8009028 <PDM_Filter_setConfig+0x70>
 80090da:	886b      	ldrh	r3, [r5, #2]
 80090dc:	8663      	strh	r3, [r4, #50]	@ 0x32
 80090de:	e7ed      	b.n	80090bc <PDM_Filter_setConfig+0x104>
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d8a1      	bhi.n	8009028 <PDM_Filter_setConfig+0x70>
 80090e4:	a201      	add	r2, pc, #4	@ (adr r2, 80090ec <PDM_Filter_setConfig+0x134>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	0800915b 	.word	0x0800915b
 80090f0:	08009155 	.word	0x08009155
 80090f4:	08009149 	.word	0x08009149
 80090f8:	08009143 	.word	0x08009143
 80090fc:	08009025 	.word	0x08009025
 8009100:	0800913d 	.word	0x0800913d
 8009104:	0800914f 	.word	0x0800914f
 8009108:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8009188 <PDM_Filter_setConfig+0x1d0>
 800910c:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 800918c <PDM_Filter_setConfig+0x1d4>
 8009110:	e7b6      	b.n	8009080 <PDM_Filter_setConfig+0xc8>
 8009112:	4b1f      	ldr	r3, [pc, #124]	@ (8009190 <PDM_Filter_setConfig+0x1d8>)
 8009114:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009116:	e787      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009118:	4b1e      	ldr	r3, [pc, #120]	@ (8009194 <PDM_Filter_setConfig+0x1dc>)
 800911a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800911c:	e784      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 800911e:	4b1e      	ldr	r3, [pc, #120]	@ (8009198 <PDM_Filter_setConfig+0x1e0>)
 8009120:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009122:	e781      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009124:	4b1d      	ldr	r3, [pc, #116]	@ (800919c <PDM_Filter_setConfig+0x1e4>)
 8009126:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009128:	e77e      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 800912a:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <PDM_Filter_setConfig+0x1e8>)
 800912c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800912e:	e77b      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009130:	4b1c      	ldr	r3, [pc, #112]	@ (80091a4 <PDM_Filter_setConfig+0x1ec>)
 8009132:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009134:	e778      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009136:	4b1c      	ldr	r3, [pc, #112]	@ (80091a8 <PDM_Filter_setConfig+0x1f0>)
 8009138:	64a3      	str	r3, [r4, #72]	@ 0x48
 800913a:	e775      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 800913c:	4b1b      	ldr	r3, [pc, #108]	@ (80091ac <PDM_Filter_setConfig+0x1f4>)
 800913e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009140:	e772      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009142:	4b1b      	ldr	r3, [pc, #108]	@ (80091b0 <PDM_Filter_setConfig+0x1f8>)
 8009144:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009146:	e76f      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009148:	4b1a      	ldr	r3, [pc, #104]	@ (80091b4 <PDM_Filter_setConfig+0x1fc>)
 800914a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800914c:	e76c      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 800914e:	4b1a      	ldr	r3, [pc, #104]	@ (80091b8 <PDM_Filter_setConfig+0x200>)
 8009150:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009152:	e769      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009154:	4b19      	ldr	r3, [pc, #100]	@ (80091bc <PDM_Filter_setConfig+0x204>)
 8009156:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009158:	e766      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 800915a:	4b19      	ldr	r3, [pc, #100]	@ (80091c0 <PDM_Filter_setConfig+0x208>)
 800915c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800915e:	e763      	b.n	8009028 <PDM_Filter_setConfig+0x70>
 8009160:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009162:	42b3      	cmp	r3, r6
 8009164:	f47f af41 	bne.w	8008fea <PDM_Filter_setConfig+0x32>
 8009168:	886b      	ldrh	r3, [r5, #2]
 800916a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800916c:	2008      	movs	r0, #8
 800916e:	e766      	b.n	800903e <PDM_Filter_setConfig+0x86>
 8009170:	b5e8b5cd 	.word	0xb5e8b5cd
 8009174:	08008299 	.word	0x08008299
 8009178:	0800a3bc 	.word	0x0800a3bc
 800917c:	0800a3d8 	.word	0x0800a3d8
 8009180:	42000000 	.word	0x42000000
 8009184:	3d4ccccd 	.word	0x3d4ccccd
 8009188:	4f800000 	.word	0x4f800000
 800918c:	00000000 	.word	0x00000000
 8009190:	08007699 	.word	0x08007699
 8009194:	08007821 	.word	0x08007821
 8009198:	08007a09 	.word	0x08007a09
 800919c:	08007c25 	.word	0x08007c25
 80091a0:	08007eb9 	.word	0x08007eb9
 80091a4:	080073f9 	.word	0x080073f9
 80091a8:	08007511 	.word	0x08007511
 80091ac:	08008381 	.word	0x08008381
 80091b0:	08008af5 	.word	0x08008af5
 80091b4:	080088ed 	.word	0x080088ed
 80091b8:	080084c5 	.word	0x080084c5
 80091bc:	0800874d 	.word	0x0800874d
 80091c0:	080085e1 	.word	0x080085e1

080091c4 <memset>:
 80091c4:	4402      	add	r2, r0
 80091c6:	4603      	mov	r3, r0
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d100      	bne.n	80091ce <memset+0xa>
 80091cc:	4770      	bx	lr
 80091ce:	f803 1b01 	strb.w	r1, [r3], #1
 80091d2:	e7f9      	b.n	80091c8 <memset+0x4>

080091d4 <__errno>:
 80091d4:	4b01      	ldr	r3, [pc, #4]	@ (80091dc <__errno+0x8>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000414 	.word	0x20000414

080091e0 <__libc_init_array>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009218 <__libc_init_array+0x38>)
 80091e4:	4c0d      	ldr	r4, [pc, #52]	@ (800921c <__libc_init_array+0x3c>)
 80091e6:	1b64      	subs	r4, r4, r5
 80091e8:	10a4      	asrs	r4, r4, #2
 80091ea:	2600      	movs	r6, #0
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d109      	bne.n	8009204 <__libc_init_array+0x24>
 80091f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009220 <__libc_init_array+0x40>)
 80091f2:	4c0c      	ldr	r4, [pc, #48]	@ (8009224 <__libc_init_array+0x44>)
 80091f4:	f001 f8c6 	bl	800a384 <_init>
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	2600      	movs	r6, #0
 80091fe:	42a6      	cmp	r6, r4
 8009200:	d105      	bne.n	800920e <__libc_init_array+0x2e>
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	f855 3b04 	ldr.w	r3, [r5], #4
 8009208:	4798      	blx	r3
 800920a:	3601      	adds	r6, #1
 800920c:	e7ee      	b.n	80091ec <__libc_init_array+0xc>
 800920e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009212:	4798      	blx	r3
 8009214:	3601      	adds	r6, #1
 8009216:	e7f2      	b.n	80091fe <__libc_init_array+0x1e>
 8009218:	0800a7e4 	.word	0x0800a7e4
 800921c:	0800a7e4 	.word	0x0800a7e4
 8009220:	0800a7e4 	.word	0x0800a7e4
 8009224:	0800a7e8 	.word	0x0800a7e8

08009228 <powf>:
 8009228:	b508      	push	{r3, lr}
 800922a:	ed2d 8b04 	vpush	{d8-d9}
 800922e:	eeb0 8a60 	vmov.f32	s16, s1
 8009232:	eeb0 9a40 	vmov.f32	s18, s0
 8009236:	f000 f98d 	bl	8009554 <__ieee754_powf>
 800923a:	eeb4 8a48 	vcmp.f32	s16, s16
 800923e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009242:	eef0 8a40 	vmov.f32	s17, s0
 8009246:	d63e      	bvs.n	80092c6 <powf+0x9e>
 8009248:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800924c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009250:	d112      	bne.n	8009278 <powf+0x50>
 8009252:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925a:	d039      	beq.n	80092d0 <powf+0xa8>
 800925c:	eeb0 0a48 	vmov.f32	s0, s16
 8009260:	f000 f880 	bl	8009364 <finitef>
 8009264:	b378      	cbz	r0, 80092c6 <powf+0x9e>
 8009266:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	d52a      	bpl.n	80092c6 <powf+0x9e>
 8009270:	f7ff ffb0 	bl	80091d4 <__errno>
 8009274:	2322      	movs	r3, #34	@ 0x22
 8009276:	e014      	b.n	80092a2 <powf+0x7a>
 8009278:	f000 f874 	bl	8009364 <finitef>
 800927c:	b998      	cbnz	r0, 80092a6 <powf+0x7e>
 800927e:	eeb0 0a49 	vmov.f32	s0, s18
 8009282:	f000 f86f 	bl	8009364 <finitef>
 8009286:	b170      	cbz	r0, 80092a6 <powf+0x7e>
 8009288:	eeb0 0a48 	vmov.f32	s0, s16
 800928c:	f000 f86a 	bl	8009364 <finitef>
 8009290:	b148      	cbz	r0, 80092a6 <powf+0x7e>
 8009292:	eef4 8a68 	vcmp.f32	s17, s17
 8009296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929a:	d7e9      	bvc.n	8009270 <powf+0x48>
 800929c:	f7ff ff9a 	bl	80091d4 <__errno>
 80092a0:	2321      	movs	r3, #33	@ 0x21
 80092a2:	6003      	str	r3, [r0, #0]
 80092a4:	e00f      	b.n	80092c6 <powf+0x9e>
 80092a6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80092aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ae:	d10a      	bne.n	80092c6 <powf+0x9e>
 80092b0:	eeb0 0a49 	vmov.f32	s0, s18
 80092b4:	f000 f856 	bl	8009364 <finitef>
 80092b8:	b128      	cbz	r0, 80092c6 <powf+0x9e>
 80092ba:	eeb0 0a48 	vmov.f32	s0, s16
 80092be:	f000 f851 	bl	8009364 <finitef>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d1d4      	bne.n	8009270 <powf+0x48>
 80092c6:	eeb0 0a68 	vmov.f32	s0, s17
 80092ca:	ecbd 8b04 	vpop	{d8-d9}
 80092ce:	bd08      	pop	{r3, pc}
 80092d0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80092d4:	e7f7      	b.n	80092c6 <powf+0x9e>
	...

080092d8 <sinf>:
 80092d8:	ee10 3a10 	vmov	r3, s0
 80092dc:	b507      	push	{r0, r1, r2, lr}
 80092de:	4a1f      	ldr	r2, [pc, #124]	@ (800935c <sinf+0x84>)
 80092e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d807      	bhi.n	80092f8 <sinf+0x20>
 80092e8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009360 <sinf+0x88>
 80092ec:	2000      	movs	r0, #0
 80092ee:	b003      	add	sp, #12
 80092f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f4:	f000 b8e6 	b.w	80094c4 <__kernel_sinf>
 80092f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80092fc:	d304      	bcc.n	8009308 <sinf+0x30>
 80092fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009302:	b003      	add	sp, #12
 8009304:	f85d fb04 	ldr.w	pc, [sp], #4
 8009308:	4668      	mov	r0, sp
 800930a:	f000 fbf1 	bl	8009af0 <__ieee754_rem_pio2f>
 800930e:	f000 0003 	and.w	r0, r0, #3
 8009312:	2801      	cmp	r0, #1
 8009314:	d00a      	beq.n	800932c <sinf+0x54>
 8009316:	2802      	cmp	r0, #2
 8009318:	d00f      	beq.n	800933a <sinf+0x62>
 800931a:	b9c0      	cbnz	r0, 800934e <sinf+0x76>
 800931c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009320:	ed9d 0a00 	vldr	s0, [sp]
 8009324:	2001      	movs	r0, #1
 8009326:	f000 f8cd 	bl	80094c4 <__kernel_sinf>
 800932a:	e7ea      	b.n	8009302 <sinf+0x2a>
 800932c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009330:	ed9d 0a00 	vldr	s0, [sp]
 8009334:	f000 f86e 	bl	8009414 <__kernel_cosf>
 8009338:	e7e3      	b.n	8009302 <sinf+0x2a>
 800933a:	eddd 0a01 	vldr	s1, [sp, #4]
 800933e:	ed9d 0a00 	vldr	s0, [sp]
 8009342:	2001      	movs	r0, #1
 8009344:	f000 f8be 	bl	80094c4 <__kernel_sinf>
 8009348:	eeb1 0a40 	vneg.f32	s0, s0
 800934c:	e7d9      	b.n	8009302 <sinf+0x2a>
 800934e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009352:	ed9d 0a00 	vldr	s0, [sp]
 8009356:	f000 f85d 	bl	8009414 <__kernel_cosf>
 800935a:	e7f5      	b.n	8009348 <sinf+0x70>
 800935c:	3f490fd8 	.word	0x3f490fd8
 8009360:	00000000 	.word	0x00000000

08009364 <finitef>:
 8009364:	ee10 3a10 	vmov	r3, s0
 8009368:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800936c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009370:	bfac      	ite	ge
 8009372:	2000      	movge	r0, #0
 8009374:	2001      	movlt	r0, #1
 8009376:	4770      	bx	lr

08009378 <with_errnof>:
 8009378:	b510      	push	{r4, lr}
 800937a:	ed2d 8b02 	vpush	{d8}
 800937e:	eeb0 8a40 	vmov.f32	s16, s0
 8009382:	4604      	mov	r4, r0
 8009384:	f7ff ff26 	bl	80091d4 <__errno>
 8009388:	eeb0 0a48 	vmov.f32	s0, s16
 800938c:	ecbd 8b02 	vpop	{d8}
 8009390:	6004      	str	r4, [r0, #0]
 8009392:	bd10      	pop	{r4, pc}

08009394 <xflowf>:
 8009394:	b130      	cbz	r0, 80093a4 <xflowf+0x10>
 8009396:	eef1 7a40 	vneg.f32	s15, s0
 800939a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800939e:	2022      	movs	r0, #34	@ 0x22
 80093a0:	f7ff bfea 	b.w	8009378 <with_errnof>
 80093a4:	eef0 7a40 	vmov.f32	s15, s0
 80093a8:	e7f7      	b.n	800939a <xflowf+0x6>
	...

080093ac <__math_uflowf>:
 80093ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80093b4 <__math_uflowf+0x8>
 80093b0:	f7ff bff0 	b.w	8009394 <xflowf>
 80093b4:	10000000 	.word	0x10000000

080093b8 <__math_oflowf>:
 80093b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80093c0 <__math_oflowf+0x8>
 80093bc:	f7ff bfea 	b.w	8009394 <xflowf>
 80093c0:	70000000 	.word	0x70000000

080093c4 <__ieee754_sqrtf>:
 80093c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80093c8:	4770      	bx	lr
	...

080093cc <roundf>:
 80093cc:	ee10 0a10 	vmov	r0, s0
 80093d0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80093d4:	3a7f      	subs	r2, #127	@ 0x7f
 80093d6:	2a16      	cmp	r2, #22
 80093d8:	dc15      	bgt.n	8009406 <roundf+0x3a>
 80093da:	2a00      	cmp	r2, #0
 80093dc:	da08      	bge.n	80093f0 <roundf+0x24>
 80093de:	3201      	adds	r2, #1
 80093e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80093e4:	d101      	bne.n	80093ea <roundf+0x1e>
 80093e6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80093ea:	ee00 3a10 	vmov	s0, r3
 80093ee:	4770      	bx	lr
 80093f0:	4907      	ldr	r1, [pc, #28]	@ (8009410 <roundf+0x44>)
 80093f2:	4111      	asrs	r1, r2
 80093f4:	4201      	tst	r1, r0
 80093f6:	d0fa      	beq.n	80093ee <roundf+0x22>
 80093f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80093fc:	4113      	asrs	r3, r2
 80093fe:	4403      	add	r3, r0
 8009400:	ea23 0301 	bic.w	r3, r3, r1
 8009404:	e7f1      	b.n	80093ea <roundf+0x1e>
 8009406:	2a80      	cmp	r2, #128	@ 0x80
 8009408:	d1f1      	bne.n	80093ee <roundf+0x22>
 800940a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800940e:	4770      	bx	lr
 8009410:	007fffff 	.word	0x007fffff

08009414 <__kernel_cosf>:
 8009414:	ee10 3a10 	vmov	r3, s0
 8009418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800941c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009420:	eef0 6a40 	vmov.f32	s13, s0
 8009424:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009428:	d204      	bcs.n	8009434 <__kernel_cosf+0x20>
 800942a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800942e:	ee17 2a90 	vmov	r2, s15
 8009432:	b342      	cbz	r2, 8009486 <__kernel_cosf+0x72>
 8009434:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009438:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80094a4 <__kernel_cosf+0x90>
 800943c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80094a8 <__kernel_cosf+0x94>
 8009440:	4a1a      	ldr	r2, [pc, #104]	@ (80094ac <__kernel_cosf+0x98>)
 8009442:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009446:	4293      	cmp	r3, r2
 8009448:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80094b0 <__kernel_cosf+0x9c>
 800944c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009450:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80094b4 <__kernel_cosf+0xa0>
 8009454:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009458:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80094b8 <__kernel_cosf+0xa4>
 800945c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009460:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80094bc <__kernel_cosf+0xa8>
 8009464:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009468:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800946c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009470:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009474:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947c:	d804      	bhi.n	8009488 <__kernel_cosf+0x74>
 800947e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009482:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009486:	4770      	bx	lr
 8009488:	4a0d      	ldr	r2, [pc, #52]	@ (80094c0 <__kernel_cosf+0xac>)
 800948a:	4293      	cmp	r3, r2
 800948c:	bf9a      	itte	ls
 800948e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8009492:	ee07 3a10 	vmovls	s14, r3
 8009496:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800949a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800949e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094a2:	e7ec      	b.n	800947e <__kernel_cosf+0x6a>
 80094a4:	ad47d74e 	.word	0xad47d74e
 80094a8:	310f74f6 	.word	0x310f74f6
 80094ac:	3e999999 	.word	0x3e999999
 80094b0:	b493f27c 	.word	0xb493f27c
 80094b4:	37d00d01 	.word	0x37d00d01
 80094b8:	bab60b61 	.word	0xbab60b61
 80094bc:	3d2aaaab 	.word	0x3d2aaaab
 80094c0:	3f480000 	.word	0x3f480000

080094c4 <__kernel_sinf>:
 80094c4:	ee10 3a10 	vmov	r3, s0
 80094c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80094d0:	d204      	bcs.n	80094dc <__kernel_sinf+0x18>
 80094d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80094d6:	ee17 3a90 	vmov	r3, s15
 80094da:	b35b      	cbz	r3, 8009534 <__kernel_sinf+0x70>
 80094dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80094e0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009538 <__kernel_sinf+0x74>
 80094e4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800953c <__kernel_sinf+0x78>
 80094e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80094ec:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009540 <__kernel_sinf+0x7c>
 80094f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80094f4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009544 <__kernel_sinf+0x80>
 80094f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80094fc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009548 <__kernel_sinf+0x84>
 8009500:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009504:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009508:	b930      	cbnz	r0, 8009518 <__kernel_sinf+0x54>
 800950a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800954c <__kernel_sinf+0x88>
 800950e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009512:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009516:	4770      	bx	lr
 8009518:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800951c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009520:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009524:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009528:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009550 <__kernel_sinf+0x8c>
 800952c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009530:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	2f2ec9d3 	.word	0x2f2ec9d3
 800953c:	b2d72f34 	.word	0xb2d72f34
 8009540:	3638ef1b 	.word	0x3638ef1b
 8009544:	b9500d01 	.word	0xb9500d01
 8009548:	3c088889 	.word	0x3c088889
 800954c:	be2aaaab 	.word	0xbe2aaaab
 8009550:	3e2aaaab 	.word	0x3e2aaaab

08009554 <__ieee754_powf>:
 8009554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009558:	ee10 4a90 	vmov	r4, s1
 800955c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8009560:	ed2d 8b02 	vpush	{d8}
 8009564:	ee10 6a10 	vmov	r6, s0
 8009568:	eeb0 8a40 	vmov.f32	s16, s0
 800956c:	eef0 8a60 	vmov.f32	s17, s1
 8009570:	d10c      	bne.n	800958c <__ieee754_powf+0x38>
 8009572:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8009576:	0076      	lsls	r6, r6, #1
 8009578:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800957c:	f240 8274 	bls.w	8009a68 <__ieee754_powf+0x514>
 8009580:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009584:	ecbd 8b02 	vpop	{d8}
 8009588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009590:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009594:	d802      	bhi.n	800959c <__ieee754_powf+0x48>
 8009596:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800959a:	d908      	bls.n	80095ae <__ieee754_powf+0x5a>
 800959c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80095a0:	d1ee      	bne.n	8009580 <__ieee754_powf+0x2c>
 80095a2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80095a6:	0064      	lsls	r4, r4, #1
 80095a8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80095ac:	e7e6      	b.n	800957c <__ieee754_powf+0x28>
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	da1f      	bge.n	80095f2 <__ieee754_powf+0x9e>
 80095b2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80095b6:	f080 8260 	bcs.w	8009a7a <__ieee754_powf+0x526>
 80095ba:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80095be:	d32f      	bcc.n	8009620 <__ieee754_powf+0xcc>
 80095c0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80095c4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80095c8:	fa49 f503 	asr.w	r5, r9, r3
 80095cc:	fa05 f303 	lsl.w	r3, r5, r3
 80095d0:	454b      	cmp	r3, r9
 80095d2:	d123      	bne.n	800961c <__ieee754_powf+0xc8>
 80095d4:	f005 0501 	and.w	r5, r5, #1
 80095d8:	f1c5 0502 	rsb	r5, r5, #2
 80095dc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80095e0:	d11f      	bne.n	8009622 <__ieee754_powf+0xce>
 80095e2:	2c00      	cmp	r4, #0
 80095e4:	f280 8246 	bge.w	8009a74 <__ieee754_powf+0x520>
 80095e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80095ec:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80095f0:	e7c8      	b.n	8009584 <__ieee754_powf+0x30>
 80095f2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80095f6:	d111      	bne.n	800961c <__ieee754_powf+0xc8>
 80095f8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80095fc:	f000 8234 	beq.w	8009a68 <__ieee754_powf+0x514>
 8009600:	d906      	bls.n	8009610 <__ieee754_powf+0xbc>
 8009602:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009918 <__ieee754_powf+0x3c4>
 8009606:	2c00      	cmp	r4, #0
 8009608:	bfa8      	it	ge
 800960a:	eeb0 0a68 	vmovge.f32	s0, s17
 800960e:	e7b9      	b.n	8009584 <__ieee754_powf+0x30>
 8009610:	2c00      	cmp	r4, #0
 8009612:	f280 822c 	bge.w	8009a6e <__ieee754_powf+0x51a>
 8009616:	eeb1 0a68 	vneg.f32	s0, s17
 800961a:	e7b3      	b.n	8009584 <__ieee754_powf+0x30>
 800961c:	2500      	movs	r5, #0
 800961e:	e7dd      	b.n	80095dc <__ieee754_powf+0x88>
 8009620:	2500      	movs	r5, #0
 8009622:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009626:	d102      	bne.n	800962e <__ieee754_powf+0xda>
 8009628:	ee28 0a08 	vmul.f32	s0, s16, s16
 800962c:	e7aa      	b.n	8009584 <__ieee754_powf+0x30>
 800962e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009632:	f040 8227 	bne.w	8009a84 <__ieee754_powf+0x530>
 8009636:	2e00      	cmp	r6, #0
 8009638:	f2c0 8224 	blt.w	8009a84 <__ieee754_powf+0x530>
 800963c:	eeb0 0a48 	vmov.f32	s0, s16
 8009640:	ecbd 8b02 	vpop	{d8}
 8009644:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009648:	f7ff bebc 	b.w	80093c4 <__ieee754_sqrtf>
 800964c:	2d01      	cmp	r5, #1
 800964e:	d199      	bne.n	8009584 <__ieee754_powf+0x30>
 8009650:	eeb1 0a40 	vneg.f32	s0, s0
 8009654:	e796      	b.n	8009584 <__ieee754_powf+0x30>
 8009656:	0ff0      	lsrs	r0, r6, #31
 8009658:	3801      	subs	r0, #1
 800965a:	ea55 0300 	orrs.w	r3, r5, r0
 800965e:	d104      	bne.n	800966a <__ieee754_powf+0x116>
 8009660:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009664:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009668:	e78c      	b.n	8009584 <__ieee754_powf+0x30>
 800966a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800966e:	d96d      	bls.n	800974c <__ieee754_powf+0x1f8>
 8009670:	4baa      	ldr	r3, [pc, #680]	@ (800991c <__ieee754_powf+0x3c8>)
 8009672:	4598      	cmp	r8, r3
 8009674:	d808      	bhi.n	8009688 <__ieee754_powf+0x134>
 8009676:	2c00      	cmp	r4, #0
 8009678:	da0b      	bge.n	8009692 <__ieee754_powf+0x13e>
 800967a:	2000      	movs	r0, #0
 800967c:	ecbd 8b02 	vpop	{d8}
 8009680:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009684:	f7ff be98 	b.w	80093b8 <__math_oflowf>
 8009688:	4ba5      	ldr	r3, [pc, #660]	@ (8009920 <__ieee754_powf+0x3cc>)
 800968a:	4598      	cmp	r8, r3
 800968c:	d908      	bls.n	80096a0 <__ieee754_powf+0x14c>
 800968e:	2c00      	cmp	r4, #0
 8009690:	dcf3      	bgt.n	800967a <__ieee754_powf+0x126>
 8009692:	2000      	movs	r0, #0
 8009694:	ecbd 8b02 	vpop	{d8}
 8009698:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800969c:	f7ff be86 	b.w	80093ac <__math_uflowf>
 80096a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80096a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096a8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009924 <__ieee754_powf+0x3d0>
 80096ac:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80096b0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80096b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80096b8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80096bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80096c0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009928 <__ieee754_powf+0x3d4>
 80096c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096c8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800992c <__ieee754_powf+0x3d8>
 80096cc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80096d0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009930 <__ieee754_powf+0x3dc>
 80096d4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80096d8:	eeb0 7a67 	vmov.f32	s14, s15
 80096dc:	eea0 7a26 	vfma.f32	s14, s0, s13
 80096e0:	ee17 3a10 	vmov	r3, s14
 80096e4:	f36f 030b 	bfc	r3, #0, #12
 80096e8:	ee07 3a10 	vmov	s14, r3
 80096ec:	eeb0 6a47 	vmov.f32	s12, s14
 80096f0:	eea0 6a66 	vfms.f32	s12, s0, s13
 80096f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80096f8:	3d01      	subs	r5, #1
 80096fa:	4305      	orrs	r5, r0
 80096fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009700:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009704:	f36f 040b 	bfc	r4, #0, #12
 8009708:	bf18      	it	ne
 800970a:	eeb0 8a66 	vmovne.f32	s16, s13
 800970e:	ee06 4a90 	vmov	s13, r4
 8009712:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009716:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800971a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800971e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8009722:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009726:	ee17 1a10 	vmov	r1, s14
 800972a:	2900      	cmp	r1, #0
 800972c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009730:	f340 80dd 	ble.w	80098ee <__ieee754_powf+0x39a>
 8009734:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009738:	f240 80ca 	bls.w	80098d0 <__ieee754_powf+0x37c>
 800973c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009744:	bf4c      	ite	mi
 8009746:	2001      	movmi	r0, #1
 8009748:	2000      	movpl	r0, #0
 800974a:	e797      	b.n	800967c <__ieee754_powf+0x128>
 800974c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009750:	bf01      	itttt	eq
 8009752:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009934 <__ieee754_powf+0x3e0>
 8009756:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800975a:	f06f 0317 	mvneq.w	r3, #23
 800975e:	ee17 7a90 	vmoveq	r7, s15
 8009762:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8009766:	bf18      	it	ne
 8009768:	2300      	movne	r3, #0
 800976a:	3a7f      	subs	r2, #127	@ 0x7f
 800976c:	441a      	add	r2, r3
 800976e:	4b72      	ldr	r3, [pc, #456]	@ (8009938 <__ieee754_powf+0x3e4>)
 8009770:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009774:	429f      	cmp	r7, r3
 8009776:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800977a:	dd06      	ble.n	800978a <__ieee754_powf+0x236>
 800977c:	4b6f      	ldr	r3, [pc, #444]	@ (800993c <__ieee754_powf+0x3e8>)
 800977e:	429f      	cmp	r7, r3
 8009780:	f340 80a4 	ble.w	80098cc <__ieee754_powf+0x378>
 8009784:	3201      	adds	r2, #1
 8009786:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800978a:	2600      	movs	r6, #0
 800978c:	4b6c      	ldr	r3, [pc, #432]	@ (8009940 <__ieee754_powf+0x3ec>)
 800978e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009792:	ee07 1a10 	vmov	s14, r1
 8009796:	edd3 5a00 	vldr	s11, [r3]
 800979a:	4b6a      	ldr	r3, [pc, #424]	@ (8009944 <__ieee754_powf+0x3f0>)
 800979c:	ee75 7a87 	vadd.f32	s15, s11, s14
 80097a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80097a8:	1049      	asrs	r1, r1, #1
 80097aa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80097ae:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80097b2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80097b6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80097ba:	ee07 1a90 	vmov	s15, r1
 80097be:	ee26 5a24 	vmul.f32	s10, s12, s9
 80097c2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80097c6:	ee15 7a10 	vmov	r7, s10
 80097ca:	401f      	ands	r7, r3
 80097cc:	ee06 7a90 	vmov	s13, r7
 80097d0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80097d4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80097d8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80097dc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80097e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009948 <__ieee754_powf+0x3f4>
 80097e4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800994c <__ieee754_powf+0x3f8>
 80097e8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80097ec:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009950 <__ieee754_powf+0x3fc>
 80097f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80097f4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009924 <__ieee754_powf+0x3d0>
 80097f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80097fc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009954 <__ieee754_powf+0x400>
 8009800:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009804:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009958 <__ieee754_powf+0x404>
 8009808:	ee26 6a24 	vmul.f32	s12, s12, s9
 800980c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009810:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009814:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009818:	ee27 7a06 	vmul.f32	s14, s14, s12
 800981c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009820:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009824:	eef0 5a67 	vmov.f32	s11, s15
 8009828:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800982c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009830:	ee15 1a90 	vmov	r1, s11
 8009834:	4019      	ands	r1, r3
 8009836:	ee05 1a90 	vmov	s11, r1
 800983a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800983e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009846:	ee67 7a85 	vmul.f32	s15, s15, s10
 800984a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800984e:	eeb0 6a67 	vmov.f32	s12, s15
 8009852:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009856:	ee16 1a10 	vmov	r1, s12
 800985a:	4019      	ands	r1, r3
 800985c:	ee06 1a10 	vmov	s12, r1
 8009860:	eeb0 7a46 	vmov.f32	s14, s12
 8009864:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009868:	493c      	ldr	r1, [pc, #240]	@ (800995c <__ieee754_powf+0x408>)
 800986a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800986e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009872:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009960 <__ieee754_powf+0x40c>
 8009876:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009964 <__ieee754_powf+0x410>
 800987a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800987e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009968 <__ieee754_powf+0x414>
 8009882:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009886:	ed91 7a00 	vldr	s14, [r1]
 800988a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800988e:	ee07 2a10 	vmov	s14, r2
 8009892:	4a36      	ldr	r2, [pc, #216]	@ (800996c <__ieee754_powf+0x418>)
 8009894:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009898:	eeb0 7a67 	vmov.f32	s14, s15
 800989c:	eea6 7a25 	vfma.f32	s14, s12, s11
 80098a0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80098a4:	ed92 5a00 	vldr	s10, [r2]
 80098a8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80098ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80098b0:	ee17 2a10 	vmov	r2, s14
 80098b4:	401a      	ands	r2, r3
 80098b6:	ee07 2a10 	vmov	s14, r2
 80098ba:	ee77 6a66 	vsub.f32	s13, s14, s13
 80098be:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80098c2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80098c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80098ca:	e715      	b.n	80096f8 <__ieee754_powf+0x1a4>
 80098cc:	2601      	movs	r6, #1
 80098ce:	e75d      	b.n	800978c <__ieee754_powf+0x238>
 80098d0:	d152      	bne.n	8009978 <__ieee754_powf+0x424>
 80098d2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009970 <__ieee754_powf+0x41c>
 80098d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098da:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80098de:	eef4 6ac7 	vcmpe.f32	s13, s14
 80098e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e6:	f73f af29 	bgt.w	800973c <__ieee754_powf+0x1e8>
 80098ea:	2386      	movs	r3, #134	@ 0x86
 80098ec:	e048      	b.n	8009980 <__ieee754_powf+0x42c>
 80098ee:	4a21      	ldr	r2, [pc, #132]	@ (8009974 <__ieee754_powf+0x420>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d907      	bls.n	8009904 <__ieee754_powf+0x3b0>
 80098f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80098f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fc:	bf4c      	ite	mi
 80098fe:	2001      	movmi	r0, #1
 8009900:	2000      	movpl	r0, #0
 8009902:	e6c7      	b.n	8009694 <__ieee754_powf+0x140>
 8009904:	d138      	bne.n	8009978 <__ieee754_powf+0x424>
 8009906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800990a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009912:	dbea      	blt.n	80098ea <__ieee754_powf+0x396>
 8009914:	e7ee      	b.n	80098f4 <__ieee754_powf+0x3a0>
 8009916:	bf00      	nop
 8009918:	00000000 	.word	0x00000000
 800991c:	3f7ffff3 	.word	0x3f7ffff3
 8009920:	3f800007 	.word	0x3f800007
 8009924:	3eaaaaab 	.word	0x3eaaaaab
 8009928:	3fb8aa00 	.word	0x3fb8aa00
 800992c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009930:	36eca570 	.word	0x36eca570
 8009934:	4b800000 	.word	0x4b800000
 8009938:	001cc471 	.word	0x001cc471
 800993c:	005db3d6 	.word	0x005db3d6
 8009940:	0800a404 	.word	0x0800a404
 8009944:	fffff000 	.word	0xfffff000
 8009948:	3e6c3255 	.word	0x3e6c3255
 800994c:	3e53f142 	.word	0x3e53f142
 8009950:	3e8ba305 	.word	0x3e8ba305
 8009954:	3edb6db7 	.word	0x3edb6db7
 8009958:	3f19999a 	.word	0x3f19999a
 800995c:	0800a3f4 	.word	0x0800a3f4
 8009960:	3f76384f 	.word	0x3f76384f
 8009964:	3f763800 	.word	0x3f763800
 8009968:	369dc3a0 	.word	0x369dc3a0
 800996c:	0800a3fc 	.word	0x0800a3fc
 8009970:	3338aa3c 	.word	0x3338aa3c
 8009974:	43160000 	.word	0x43160000
 8009978:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800997c:	d96f      	bls.n	8009a5e <__ieee754_powf+0x50a>
 800997e:	15db      	asrs	r3, r3, #23
 8009980:	3b7e      	subs	r3, #126	@ 0x7e
 8009982:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009986:	4118      	asrs	r0, r3
 8009988:	4408      	add	r0, r1
 800998a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800998e:	4a4e      	ldr	r2, [pc, #312]	@ (8009ac8 <__ieee754_powf+0x574>)
 8009990:	3b7f      	subs	r3, #127	@ 0x7f
 8009992:	411a      	asrs	r2, r3
 8009994:	4002      	ands	r2, r0
 8009996:	ee07 2a10 	vmov	s14, r2
 800999a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800999e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80099a2:	f1c3 0317 	rsb	r3, r3, #23
 80099a6:	4118      	asrs	r0, r3
 80099a8:	2900      	cmp	r1, #0
 80099aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099ae:	bfb8      	it	lt
 80099b0:	4240      	neglt	r0, r0
 80099b2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80099b6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009acc <__ieee754_powf+0x578>
 80099ba:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009ad0 <__ieee754_powf+0x57c>
 80099be:	ee16 3a90 	vmov	r3, s13
 80099c2:	f36f 030b 	bfc	r3, #0, #12
 80099c6:	ee06 3a90 	vmov	s13, r3
 80099ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80099ce:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80099d2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80099d6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009ad4 <__ieee754_powf+0x580>
 80099da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099de:	eee0 7a87 	vfma.f32	s15, s1, s14
 80099e2:	eeb0 7a67 	vmov.f32	s14, s15
 80099e6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80099ea:	eef0 5a47 	vmov.f32	s11, s14
 80099ee:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80099f2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80099f6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80099fa:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009ad8 <__ieee754_powf+0x584>
 80099fe:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009adc <__ieee754_powf+0x588>
 8009a02:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009a06:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009ae0 <__ieee754_powf+0x58c>
 8009a0a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009a0e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009ae4 <__ieee754_powf+0x590>
 8009a12:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009a16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ae8 <__ieee754_powf+0x594>
 8009a1a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009a1e:	eeb0 6a47 	vmov.f32	s12, s14
 8009a22:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009a26:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009a2a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8009a2e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009a32:	eee7 7a27 	vfma.f32	s15, s14, s15
 8009a36:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009a3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a46:	ee10 3a10 	vmov	r3, s0
 8009a4a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009a4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a52:	da06      	bge.n	8009a62 <__ieee754_powf+0x50e>
 8009a54:	f000 f984 	bl	8009d60 <scalbnf>
 8009a58:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009a5c:	e592      	b.n	8009584 <__ieee754_powf+0x30>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	e7a7      	b.n	80099b2 <__ieee754_powf+0x45e>
 8009a62:	ee00 3a10 	vmov	s0, r3
 8009a66:	e7f7      	b.n	8009a58 <__ieee754_powf+0x504>
 8009a68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009a6c:	e58a      	b.n	8009584 <__ieee754_powf+0x30>
 8009a6e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009aec <__ieee754_powf+0x598>
 8009a72:	e587      	b.n	8009584 <__ieee754_powf+0x30>
 8009a74:	eeb0 0a48 	vmov.f32	s0, s16
 8009a78:	e584      	b.n	8009584 <__ieee754_powf+0x30>
 8009a7a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009a7e:	f43f adbb 	beq.w	80095f8 <__ieee754_powf+0xa4>
 8009a82:	2502      	movs	r5, #2
 8009a84:	eeb0 0a48 	vmov.f32	s0, s16
 8009a88:	f000 f962 	bl	8009d50 <fabsf>
 8009a8c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009a90:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009a94:	4647      	mov	r7, r8
 8009a96:	d003      	beq.n	8009aa0 <__ieee754_powf+0x54c>
 8009a98:	f1b8 0f00 	cmp.w	r8, #0
 8009a9c:	f47f addb 	bne.w	8009656 <__ieee754_powf+0x102>
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	bfbc      	itt	lt
 8009aa4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009aa8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009aac:	2e00      	cmp	r6, #0
 8009aae:	f6bf ad69 	bge.w	8009584 <__ieee754_powf+0x30>
 8009ab2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009ab6:	ea58 0805 	orrs.w	r8, r8, r5
 8009aba:	f47f adc7 	bne.w	800964c <__ieee754_powf+0xf8>
 8009abe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009ac2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009ac6:	e55d      	b.n	8009584 <__ieee754_powf+0x30>
 8009ac8:	ff800000 	.word	0xff800000
 8009acc:	3f317218 	.word	0x3f317218
 8009ad0:	3f317200 	.word	0x3f317200
 8009ad4:	35bfbe8c 	.word	0x35bfbe8c
 8009ad8:	b5ddea0e 	.word	0xb5ddea0e
 8009adc:	3331bb4c 	.word	0x3331bb4c
 8009ae0:	388ab355 	.word	0x388ab355
 8009ae4:	bb360b61 	.word	0xbb360b61
 8009ae8:	3e2aaaab 	.word	0x3e2aaaab
 8009aec:	00000000 	.word	0x00000000

08009af0 <__ieee754_rem_pio2f>:
 8009af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af2:	ee10 6a10 	vmov	r6, s0
 8009af6:	4b88      	ldr	r3, [pc, #544]	@ (8009d18 <__ieee754_rem_pio2f+0x228>)
 8009af8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009afc:	429d      	cmp	r5, r3
 8009afe:	b087      	sub	sp, #28
 8009b00:	4604      	mov	r4, r0
 8009b02:	d805      	bhi.n	8009b10 <__ieee754_rem_pio2f+0x20>
 8009b04:	2300      	movs	r3, #0
 8009b06:	ed80 0a00 	vstr	s0, [r0]
 8009b0a:	6043      	str	r3, [r0, #4]
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e022      	b.n	8009b56 <__ieee754_rem_pio2f+0x66>
 8009b10:	4b82      	ldr	r3, [pc, #520]	@ (8009d1c <__ieee754_rem_pio2f+0x22c>)
 8009b12:	429d      	cmp	r5, r3
 8009b14:	d83a      	bhi.n	8009b8c <__ieee754_rem_pio2f+0x9c>
 8009b16:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009d20 <__ieee754_rem_pio2f+0x230>
 8009b20:	4a80      	ldr	r2, [pc, #512]	@ (8009d24 <__ieee754_rem_pio2f+0x234>)
 8009b22:	f023 030f 	bic.w	r3, r3, #15
 8009b26:	dd18      	ble.n	8009b5a <__ieee754_rem_pio2f+0x6a>
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009b2e:	bf09      	itett	eq
 8009b30:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009d28 <__ieee754_rem_pio2f+0x238>
 8009b34:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009d2c <__ieee754_rem_pio2f+0x23c>
 8009b38:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009d30 <__ieee754_rem_pio2f+0x240>
 8009b3c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009b40:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b48:	ed80 7a00 	vstr	s14, [r0]
 8009b4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b50:	edc0 7a01 	vstr	s15, [r0, #4]
 8009b54:	2001      	movs	r0, #1
 8009b56:	b007      	add	sp, #28
 8009b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009b60:	bf09      	itett	eq
 8009b62:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009d28 <__ieee754_rem_pio2f+0x238>
 8009b66:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009d2c <__ieee754_rem_pio2f+0x23c>
 8009b6a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009d30 <__ieee754_rem_pio2f+0x240>
 8009b6e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009b72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009b76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b7a:	ed80 7a00 	vstr	s14, [r0]
 8009b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b82:	edc0 7a01 	vstr	s15, [r0, #4]
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8a:	e7e4      	b.n	8009b56 <__ieee754_rem_pio2f+0x66>
 8009b8c:	4b69      	ldr	r3, [pc, #420]	@ (8009d34 <__ieee754_rem_pio2f+0x244>)
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	d873      	bhi.n	8009c7a <__ieee754_rem_pio2f+0x18a>
 8009b92:	f000 f8dd 	bl	8009d50 <fabsf>
 8009b96:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009d38 <__ieee754_rem_pio2f+0x248>
 8009b9a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009b9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009baa:	ee17 0a90 	vmov	r0, s15
 8009bae:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009d20 <__ieee754_rem_pio2f+0x230>
 8009bb2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009bb6:	281f      	cmp	r0, #31
 8009bb8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009d2c <__ieee754_rem_pio2f+0x23c>
 8009bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc0:	eeb1 6a47 	vneg.f32	s12, s14
 8009bc4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009bc8:	ee16 1a90 	vmov	r1, s13
 8009bcc:	dc09      	bgt.n	8009be2 <__ieee754_rem_pio2f+0xf2>
 8009bce:	4a5b      	ldr	r2, [pc, #364]	@ (8009d3c <__ieee754_rem_pio2f+0x24c>)
 8009bd0:	1e47      	subs	r7, r0, #1
 8009bd2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009bd6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009bda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d107      	bne.n	8009bf2 <__ieee754_rem_pio2f+0x102>
 8009be2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009be6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009bea:	2a08      	cmp	r2, #8
 8009bec:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009bf0:	dc14      	bgt.n	8009c1c <__ieee754_rem_pio2f+0x12c>
 8009bf2:	6021      	str	r1, [r4, #0]
 8009bf4:	ed94 7a00 	vldr	s14, [r4]
 8009bf8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009bfc:	2e00      	cmp	r6, #0
 8009bfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c02:	ed84 0a01 	vstr	s0, [r4, #4]
 8009c06:	daa6      	bge.n	8009b56 <__ieee754_rem_pio2f+0x66>
 8009c08:	eeb1 7a47 	vneg.f32	s14, s14
 8009c0c:	eeb1 0a40 	vneg.f32	s0, s0
 8009c10:	ed84 7a00 	vstr	s14, [r4]
 8009c14:	ed84 0a01 	vstr	s0, [r4, #4]
 8009c18:	4240      	negs	r0, r0
 8009c1a:	e79c      	b.n	8009b56 <__ieee754_rem_pio2f+0x66>
 8009c1c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009d28 <__ieee754_rem_pio2f+0x238>
 8009c20:	eef0 6a40 	vmov.f32	s13, s0
 8009c24:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009c28:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009c2c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009c30:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009d30 <__ieee754_rem_pio2f+0x240>
 8009c34:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009c38:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009c3c:	ee15 2a90 	vmov	r2, s11
 8009c40:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009c44:	1a5b      	subs	r3, r3, r1
 8009c46:	2b19      	cmp	r3, #25
 8009c48:	dc04      	bgt.n	8009c54 <__ieee754_rem_pio2f+0x164>
 8009c4a:	edc4 5a00 	vstr	s11, [r4]
 8009c4e:	eeb0 0a66 	vmov.f32	s0, s13
 8009c52:	e7cf      	b.n	8009bf4 <__ieee754_rem_pio2f+0x104>
 8009c54:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009d40 <__ieee754_rem_pio2f+0x250>
 8009c58:	eeb0 0a66 	vmov.f32	s0, s13
 8009c5c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009c60:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009c64:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009d44 <__ieee754_rem_pio2f+0x254>
 8009c68:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009c6c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009c70:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009c74:	ed84 7a00 	vstr	s14, [r4]
 8009c78:	e7bc      	b.n	8009bf4 <__ieee754_rem_pio2f+0x104>
 8009c7a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009c7e:	d306      	bcc.n	8009c8e <__ieee754_rem_pio2f+0x19e>
 8009c80:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009c84:	edc0 7a01 	vstr	s15, [r0, #4]
 8009c88:	edc0 7a00 	vstr	s15, [r0]
 8009c8c:	e73e      	b.n	8009b0c <__ieee754_rem_pio2f+0x1c>
 8009c8e:	15ea      	asrs	r2, r5, #23
 8009c90:	3a86      	subs	r2, #134	@ 0x86
 8009c92:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009c9e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009d48 <__ieee754_rem_pio2f+0x258>
 8009ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009caa:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009cae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009cb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009cb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009cbe:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009cc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009cc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cce:	edcd 7a05 	vstr	s15, [sp, #20]
 8009cd2:	d11e      	bne.n	8009d12 <__ieee754_rem_pio2f+0x222>
 8009cd4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	bf0c      	ite	eq
 8009cde:	2301      	moveq	r3, #1
 8009ce0:	2302      	movne	r3, #2
 8009ce2:	491a      	ldr	r1, [pc, #104]	@ (8009d4c <__ieee754_rem_pio2f+0x25c>)
 8009ce4:	9101      	str	r1, [sp, #4]
 8009ce6:	2102      	movs	r1, #2
 8009ce8:	9100      	str	r1, [sp, #0]
 8009cea:	a803      	add	r0, sp, #12
 8009cec:	4621      	mov	r1, r4
 8009cee:	f000 f89d 	bl	8009e2c <__kernel_rem_pio2f>
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	f6bf af2f 	bge.w	8009b56 <__ieee754_rem_pio2f+0x66>
 8009cf8:	edd4 7a00 	vldr	s15, [r4]
 8009cfc:	eef1 7a67 	vneg.f32	s15, s15
 8009d00:	edc4 7a00 	vstr	s15, [r4]
 8009d04:	edd4 7a01 	vldr	s15, [r4, #4]
 8009d08:	eef1 7a67 	vneg.f32	s15, s15
 8009d0c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009d10:	e782      	b.n	8009c18 <__ieee754_rem_pio2f+0x128>
 8009d12:	2303      	movs	r3, #3
 8009d14:	e7e5      	b.n	8009ce2 <__ieee754_rem_pio2f+0x1f2>
 8009d16:	bf00      	nop
 8009d18:	3f490fd8 	.word	0x3f490fd8
 8009d1c:	4016cbe3 	.word	0x4016cbe3
 8009d20:	3fc90f80 	.word	0x3fc90f80
 8009d24:	3fc90fd0 	.word	0x3fc90fd0
 8009d28:	37354400 	.word	0x37354400
 8009d2c:	37354443 	.word	0x37354443
 8009d30:	2e85a308 	.word	0x2e85a308
 8009d34:	43490f80 	.word	0x43490f80
 8009d38:	3f22f984 	.word	0x3f22f984
 8009d3c:	0800a40c 	.word	0x0800a40c
 8009d40:	2e85a300 	.word	0x2e85a300
 8009d44:	248d3132 	.word	0x248d3132
 8009d48:	43800000 	.word	0x43800000
 8009d4c:	0800a48c 	.word	0x0800a48c

08009d50 <fabsf>:
 8009d50:	ee10 3a10 	vmov	r3, s0
 8009d54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d58:	ee00 3a10 	vmov	s0, r3
 8009d5c:	4770      	bx	lr
	...

08009d60 <scalbnf>:
 8009d60:	ee10 3a10 	vmov	r3, s0
 8009d64:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009d68:	d02b      	beq.n	8009dc2 <scalbnf+0x62>
 8009d6a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009d6e:	d302      	bcc.n	8009d76 <scalbnf+0x16>
 8009d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d74:	4770      	bx	lr
 8009d76:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009d7a:	d123      	bne.n	8009dc4 <scalbnf+0x64>
 8009d7c:	4b24      	ldr	r3, [pc, #144]	@ (8009e10 <scalbnf+0xb0>)
 8009d7e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009e14 <scalbnf+0xb4>
 8009d82:	4298      	cmp	r0, r3
 8009d84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d88:	db17      	blt.n	8009dba <scalbnf+0x5a>
 8009d8a:	ee10 3a10 	vmov	r3, s0
 8009d8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d92:	3a19      	subs	r2, #25
 8009d94:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009d98:	4288      	cmp	r0, r1
 8009d9a:	dd15      	ble.n	8009dc8 <scalbnf+0x68>
 8009d9c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009e18 <scalbnf+0xb8>
 8009da0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009e1c <scalbnf+0xbc>
 8009da4:	ee10 3a10 	vmov	r3, s0
 8009da8:	eeb0 7a67 	vmov.f32	s14, s15
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfb8      	it	lt
 8009db0:	eef0 7a66 	vmovlt.f32	s15, s13
 8009db4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009db8:	4770      	bx	lr
 8009dba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009e20 <scalbnf+0xc0>
 8009dbe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009dc2:	4770      	bx	lr
 8009dc4:	0dd2      	lsrs	r2, r2, #23
 8009dc6:	e7e5      	b.n	8009d94 <scalbnf+0x34>
 8009dc8:	4410      	add	r0, r2
 8009dca:	28fe      	cmp	r0, #254	@ 0xfe
 8009dcc:	dce6      	bgt.n	8009d9c <scalbnf+0x3c>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dd06      	ble.n	8009de0 <scalbnf+0x80>
 8009dd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009dd6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009dda:	ee00 3a10 	vmov	s0, r3
 8009dde:	4770      	bx	lr
 8009de0:	f110 0f16 	cmn.w	r0, #22
 8009de4:	da09      	bge.n	8009dfa <scalbnf+0x9a>
 8009de6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009e20 <scalbnf+0xc0>
 8009dea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009e24 <scalbnf+0xc4>
 8009dee:	ee10 3a10 	vmov	r3, s0
 8009df2:	eeb0 7a67 	vmov.f32	s14, s15
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	e7d9      	b.n	8009dae <scalbnf+0x4e>
 8009dfa:	3019      	adds	r0, #25
 8009dfc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009e00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009e04:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009e28 <scalbnf+0xc8>
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	e7d7      	b.n	8009dbe <scalbnf+0x5e>
 8009e0e:	bf00      	nop
 8009e10:	ffff3cb0 	.word	0xffff3cb0
 8009e14:	4c000000 	.word	0x4c000000
 8009e18:	7149f2ca 	.word	0x7149f2ca
 8009e1c:	f149f2ca 	.word	0xf149f2ca
 8009e20:	0da24260 	.word	0x0da24260
 8009e24:	8da24260 	.word	0x8da24260
 8009e28:	33000000 	.word	0x33000000

08009e2c <__kernel_rem_pio2f>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	ed2d 8b04 	vpush	{d8-d9}
 8009e34:	b0d9      	sub	sp, #356	@ 0x164
 8009e36:	4690      	mov	r8, r2
 8009e38:	9001      	str	r0, [sp, #4]
 8009e3a:	4ab6      	ldr	r2, [pc, #728]	@ (800a114 <__kernel_rem_pio2f+0x2e8>)
 8009e3c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009e3e:	f118 0f04 	cmn.w	r8, #4
 8009e42:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009e46:	460f      	mov	r7, r1
 8009e48:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e4c:	db26      	blt.n	8009e9c <__kernel_rem_pio2f+0x70>
 8009e4e:	f1b8 0203 	subs.w	r2, r8, #3
 8009e52:	bf48      	it	mi
 8009e54:	f108 0204 	addmi.w	r2, r8, #4
 8009e58:	10d2      	asrs	r2, r2, #3
 8009e5a:	1c55      	adds	r5, r2, #1
 8009e5c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009e5e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 8009e62:	00e8      	lsls	r0, r5, #3
 8009e64:	eba2 060b 	sub.w	r6, r2, fp
 8009e68:	9002      	str	r0, [sp, #8]
 8009e6a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009e6e:	eb0a 0c0b 	add.w	ip, sl, fp
 8009e72:	ac1c      	add	r4, sp, #112	@ 0x70
 8009e74:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009e78:	2000      	movs	r0, #0
 8009e7a:	4560      	cmp	r0, ip
 8009e7c:	dd10      	ble.n	8009ea0 <__kernel_rem_pio2f+0x74>
 8009e7e:	a91c      	add	r1, sp, #112	@ 0x70
 8009e80:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009e84:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009e88:	2600      	movs	r6, #0
 8009e8a:	4556      	cmp	r6, sl
 8009e8c:	dc24      	bgt.n	8009ed8 <__kernel_rem_pio2f+0xac>
 8009e8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009e92:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 8009e96:	4684      	mov	ip, r0
 8009e98:	2400      	movs	r4, #0
 8009e9a:	e016      	b.n	8009eca <__kernel_rem_pio2f+0x9e>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	e7dc      	b.n	8009e5a <__kernel_rem_pio2f+0x2e>
 8009ea0:	42c6      	cmn	r6, r0
 8009ea2:	bf5d      	ittte	pl
 8009ea4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009ea8:	ee07 1a90 	vmovpl	s15, r1
 8009eac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009eb0:	eef0 7a47 	vmovmi.f32	s15, s14
 8009eb4:	ece4 7a01 	vstmia	r4!, {s15}
 8009eb8:	3001      	adds	r0, #1
 8009eba:	e7de      	b.n	8009e7a <__kernel_rem_pio2f+0x4e>
 8009ebc:	ecfe 6a01 	vldmia	lr!, {s13}
 8009ec0:	ed3c 7a01 	vldmdb	ip!, {s14}
 8009ec4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ec8:	3401      	adds	r4, #1
 8009eca:	455c      	cmp	r4, fp
 8009ecc:	ddf6      	ble.n	8009ebc <__kernel_rem_pio2f+0x90>
 8009ece:	ece9 7a01 	vstmia	r9!, {s15}
 8009ed2:	3601      	adds	r6, #1
 8009ed4:	3004      	adds	r0, #4
 8009ed6:	e7d8      	b.n	8009e8a <__kernel_rem_pio2f+0x5e>
 8009ed8:	a908      	add	r1, sp, #32
 8009eda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ede:	9104      	str	r1, [sp, #16]
 8009ee0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009ee2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800a120 <__kernel_rem_pio2f+0x2f4>
 8009ee6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800a11c <__kernel_rem_pio2f+0x2f0>
 8009eea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009eee:	9203      	str	r2, [sp, #12]
 8009ef0:	4654      	mov	r4, sl
 8009ef2:	00a2      	lsls	r2, r4, #2
 8009ef4:	9205      	str	r2, [sp, #20]
 8009ef6:	aa58      	add	r2, sp, #352	@ 0x160
 8009ef8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009efc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009f00:	a944      	add	r1, sp, #272	@ 0x110
 8009f02:	aa08      	add	r2, sp, #32
 8009f04:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009f08:	4694      	mov	ip, r2
 8009f0a:	4626      	mov	r6, r4
 8009f0c:	2e00      	cmp	r6, #0
 8009f0e:	dc4c      	bgt.n	8009faa <__kernel_rem_pio2f+0x17e>
 8009f10:	4628      	mov	r0, r5
 8009f12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f16:	f7ff ff23 	bl	8009d60 <scalbnf>
 8009f1a:	eeb0 8a40 	vmov.f32	s16, s0
 8009f1e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009f22:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009f26:	f000 f9e9 	bl	800a2fc <floorf>
 8009f2a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8009f2e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009f32:	2d00      	cmp	r5, #0
 8009f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f38:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009f3c:	ee17 9a90 	vmov	r9, s15
 8009f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f44:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009f48:	dd41      	ble.n	8009fce <__kernel_rem_pio2f+0x1a2>
 8009f4a:	f104 3cff 	add.w	ip, r4, #4294967295
 8009f4e:	a908      	add	r1, sp, #32
 8009f50:	f1c5 0e08 	rsb	lr, r5, #8
 8009f54:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009f58:	fa46 f00e 	asr.w	r0, r6, lr
 8009f5c:	4481      	add	r9, r0
 8009f5e:	fa00 f00e 	lsl.w	r0, r0, lr
 8009f62:	1a36      	subs	r6, r6, r0
 8009f64:	f1c5 0007 	rsb	r0, r5, #7
 8009f68:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009f6c:	4106      	asrs	r6, r0
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	dd3c      	ble.n	8009fec <__kernel_rem_pio2f+0x1c0>
 8009f72:	f04f 0e00 	mov.w	lr, #0
 8009f76:	f109 0901 	add.w	r9, r9, #1
 8009f7a:	4670      	mov	r0, lr
 8009f7c:	4574      	cmp	r4, lr
 8009f7e:	dc68      	bgt.n	800a052 <__kernel_rem_pio2f+0x226>
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	dd03      	ble.n	8009f8c <__kernel_rem_pio2f+0x160>
 8009f84:	2d01      	cmp	r5, #1
 8009f86:	d074      	beq.n	800a072 <__kernel_rem_pio2f+0x246>
 8009f88:	2d02      	cmp	r5, #2
 8009f8a:	d07d      	beq.n	800a088 <__kernel_rem_pio2f+0x25c>
 8009f8c:	2e02      	cmp	r6, #2
 8009f8e:	d12d      	bne.n	8009fec <__kernel_rem_pio2f+0x1c0>
 8009f90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009f94:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009f98:	b340      	cbz	r0, 8009fec <__kernel_rem_pio2f+0x1c0>
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	f7ff fedf 	bl	8009d60 <scalbnf>
 8009fa2:	9b06      	ldr	r3, [sp, #24]
 8009fa4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009fa8:	e020      	b.n	8009fec <__kernel_rem_pio2f+0x1c0>
 8009faa:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009fae:	3e01      	subs	r6, #1
 8009fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fb8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009fbc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009fc0:	ecac 0a01 	vstmia	ip!, {s0}
 8009fc4:	ed30 0a01 	vldmdb	r0!, {s0}
 8009fc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009fcc:	e79e      	b.n	8009f0c <__kernel_rem_pio2f+0xe0>
 8009fce:	d105      	bne.n	8009fdc <__kernel_rem_pio2f+0x1b0>
 8009fd0:	1e60      	subs	r0, r4, #1
 8009fd2:	a908      	add	r1, sp, #32
 8009fd4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009fd8:	11f6      	asrs	r6, r6, #7
 8009fda:	e7c8      	b.n	8009f6e <__kernel_rem_pio2f+0x142>
 8009fdc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009fe0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe8:	da31      	bge.n	800a04e <__kernel_rem_pio2f+0x222>
 8009fea:	2600      	movs	r6, #0
 8009fec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff4:	f040 8098 	bne.w	800a128 <__kernel_rem_pio2f+0x2fc>
 8009ff8:	1e60      	subs	r0, r4, #1
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4550      	cmp	r0, sl
 8009ffe:	da4b      	bge.n	800a098 <__kernel_rem_pio2f+0x26c>
 800a000:	2a00      	cmp	r2, #0
 800a002:	d065      	beq.n	800a0d0 <__kernel_rem_pio2f+0x2a4>
 800a004:	3c01      	subs	r4, #1
 800a006:	ab08      	add	r3, sp, #32
 800a008:	3d08      	subs	r5, #8
 800a00a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0f8      	beq.n	800a004 <__kernel_rem_pio2f+0x1d8>
 800a012:	4628      	mov	r0, r5
 800a014:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a018:	f7ff fea2 	bl	8009d60 <scalbnf>
 800a01c:	1c63      	adds	r3, r4, #1
 800a01e:	aa44      	add	r2, sp, #272	@ 0x110
 800a020:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800a120 <__kernel_rem_pio2f+0x2f4>
 800a024:	0099      	lsls	r1, r3, #2
 800a026:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a02a:	4623      	mov	r3, r4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f280 80a9 	bge.w	800a184 <__kernel_rem_pio2f+0x358>
 800a032:	4623      	mov	r3, r4
 800a034:	2b00      	cmp	r3, #0
 800a036:	f2c0 80c7 	blt.w	800a1c8 <__kernel_rem_pio2f+0x39c>
 800a03a:	aa44      	add	r2, sp, #272	@ 0x110
 800a03c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a040:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800a118 <__kernel_rem_pio2f+0x2ec>
 800a044:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 800a048:	2000      	movs	r0, #0
 800a04a:	1ae2      	subs	r2, r4, r3
 800a04c:	e0b1      	b.n	800a1b2 <__kernel_rem_pio2f+0x386>
 800a04e:	2602      	movs	r6, #2
 800a050:	e78f      	b.n	8009f72 <__kernel_rem_pio2f+0x146>
 800a052:	f852 1b04 	ldr.w	r1, [r2], #4
 800a056:	b948      	cbnz	r0, 800a06c <__kernel_rem_pio2f+0x240>
 800a058:	b121      	cbz	r1, 800a064 <__kernel_rem_pio2f+0x238>
 800a05a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800a05e:	f842 1c04 	str.w	r1, [r2, #-4]
 800a062:	2101      	movs	r1, #1
 800a064:	f10e 0e01 	add.w	lr, lr, #1
 800a068:	4608      	mov	r0, r1
 800a06a:	e787      	b.n	8009f7c <__kernel_rem_pio2f+0x150>
 800a06c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800a070:	e7f5      	b.n	800a05e <__kernel_rem_pio2f+0x232>
 800a072:	f104 3cff 	add.w	ip, r4, #4294967295
 800a076:	aa08      	add	r2, sp, #32
 800a078:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a07c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a080:	a908      	add	r1, sp, #32
 800a082:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800a086:	e781      	b.n	8009f8c <__kernel_rem_pio2f+0x160>
 800a088:	f104 3cff 	add.w	ip, r4, #4294967295
 800a08c:	aa08      	add	r2, sp, #32
 800a08e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a092:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a096:	e7f3      	b.n	800a080 <__kernel_rem_pio2f+0x254>
 800a098:	a908      	add	r1, sp, #32
 800a09a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a09e:	3801      	subs	r0, #1
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	e7ab      	b.n	8009ffc <__kernel_rem_pio2f+0x1d0>
 800a0a4:	3201      	adds	r2, #1
 800a0a6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800a0aa:	2e00      	cmp	r6, #0
 800a0ac:	d0fa      	beq.n	800a0a4 <__kernel_rem_pio2f+0x278>
 800a0ae:	9905      	ldr	r1, [sp, #20]
 800a0b0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800a0b4:	eb0d 0001 	add.w	r0, sp, r1
 800a0b8:	18e6      	adds	r6, r4, r3
 800a0ba:	a91c      	add	r1, sp, #112	@ 0x70
 800a0bc:	f104 0c01 	add.w	ip, r4, #1
 800a0c0:	384c      	subs	r0, #76	@ 0x4c
 800a0c2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800a0c6:	4422      	add	r2, r4
 800a0c8:	4562      	cmp	r2, ip
 800a0ca:	da04      	bge.n	800a0d6 <__kernel_rem_pio2f+0x2aa>
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	e710      	b.n	8009ef2 <__kernel_rem_pio2f+0xc6>
 800a0d0:	9804      	ldr	r0, [sp, #16]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	e7e7      	b.n	800a0a6 <__kernel_rem_pio2f+0x27a>
 800a0d6:	9903      	ldr	r1, [sp, #12]
 800a0d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a0dc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800a0e0:	9105      	str	r1, [sp, #20]
 800a0e2:	ee07 1a90 	vmov	s15, r1
 800a0e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ea:	2400      	movs	r4, #0
 800a0ec:	ece6 7a01 	vstmia	r6!, {s15}
 800a0f0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 800a0f4:	46b1      	mov	r9, r6
 800a0f6:	455c      	cmp	r4, fp
 800a0f8:	dd04      	ble.n	800a104 <__kernel_rem_pio2f+0x2d8>
 800a0fa:	ece0 7a01 	vstmia	r0!, {s15}
 800a0fe:	f10c 0c01 	add.w	ip, ip, #1
 800a102:	e7e1      	b.n	800a0c8 <__kernel_rem_pio2f+0x29c>
 800a104:	ecfe 6a01 	vldmia	lr!, {s13}
 800a108:	ed39 7a01 	vldmdb	r9!, {s14}
 800a10c:	3401      	adds	r4, #1
 800a10e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a112:	e7f0      	b.n	800a0f6 <__kernel_rem_pio2f+0x2ca>
 800a114:	0800a7d0 	.word	0x0800a7d0
 800a118:	0800a7a4 	.word	0x0800a7a4
 800a11c:	43800000 	.word	0x43800000
 800a120:	3b800000 	.word	0x3b800000
 800a124:	00000000 	.word	0x00000000
 800a128:	9b02      	ldr	r3, [sp, #8]
 800a12a:	eeb0 0a48 	vmov.f32	s0, s16
 800a12e:	eba3 0008 	sub.w	r0, r3, r8
 800a132:	f7ff fe15 	bl	8009d60 <scalbnf>
 800a136:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800a11c <__kernel_rem_pio2f+0x2f0>
 800a13a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a142:	db19      	blt.n	800a178 <__kernel_rem_pio2f+0x34c>
 800a144:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800a120 <__kernel_rem_pio2f+0x2f4>
 800a148:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a14c:	aa08      	add	r2, sp, #32
 800a14e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a152:	3508      	adds	r5, #8
 800a154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a158:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a15c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a160:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a164:	ee10 3a10 	vmov	r3, s0
 800a168:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a16c:	ee17 3a90 	vmov	r3, s15
 800a170:	3401      	adds	r4, #1
 800a172:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a176:	e74c      	b.n	800a012 <__kernel_rem_pio2f+0x1e6>
 800a178:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a17c:	aa08      	add	r2, sp, #32
 800a17e:	ee10 3a10 	vmov	r3, s0
 800a182:	e7f6      	b.n	800a172 <__kernel_rem_pio2f+0x346>
 800a184:	a808      	add	r0, sp, #32
 800a186:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a18a:	9001      	str	r0, [sp, #4]
 800a18c:	ee07 0a90 	vmov	s15, r0
 800a190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a194:	3b01      	subs	r3, #1
 800a196:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a19a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a19e:	ed62 7a01 	vstmdb	r2!, {s15}
 800a1a2:	e743      	b.n	800a02c <__kernel_rem_pio2f+0x200>
 800a1a4:	ecfc 6a01 	vldmia	ip!, {s13}
 800a1a8:	ecb5 7a01 	vldmia	r5!, {s14}
 800a1ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	4550      	cmp	r0, sl
 800a1b4:	dc01      	bgt.n	800a1ba <__kernel_rem_pio2f+0x38e>
 800a1b6:	4290      	cmp	r0, r2
 800a1b8:	ddf4      	ble.n	800a1a4 <__kernel_rem_pio2f+0x378>
 800a1ba:	a858      	add	r0, sp, #352	@ 0x160
 800a1bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a1c0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	e735      	b.n	800a034 <__kernel_rem_pio2f+0x208>
 800a1c8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	dc09      	bgt.n	800a1e2 <__kernel_rem_pio2f+0x3b6>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dc27      	bgt.n	800a222 <__kernel_rem_pio2f+0x3f6>
 800a1d2:	d040      	beq.n	800a256 <__kernel_rem_pio2f+0x42a>
 800a1d4:	f009 0007 	and.w	r0, r9, #7
 800a1d8:	b059      	add	sp, #356	@ 0x164
 800a1da:	ecbd 8b04 	vpop	{d8-d9}
 800a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d1f5      	bne.n	800a1d4 <__kernel_rem_pio2f+0x3a8>
 800a1e8:	aa30      	add	r2, sp, #192	@ 0xc0
 800a1ea:	1f0b      	subs	r3, r1, #4
 800a1ec:	4413      	add	r3, r2
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	dc50      	bgt.n	800a298 <__kernel_rem_pio2f+0x46c>
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	2a01      	cmp	r2, #1
 800a1fa:	dc5d      	bgt.n	800a2b8 <__kernel_rem_pio2f+0x48c>
 800a1fc:	ab30      	add	r3, sp, #192	@ 0xc0
 800a1fe:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 800a202:	440b      	add	r3, r1
 800a204:	2c01      	cmp	r4, #1
 800a206:	dc67      	bgt.n	800a2d8 <__kernel_rem_pio2f+0x4ac>
 800a208:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800a20c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800a210:	2e00      	cmp	r6, #0
 800a212:	d167      	bne.n	800a2e4 <__kernel_rem_pio2f+0x4b8>
 800a214:	edc7 6a00 	vstr	s13, [r7]
 800a218:	ed87 7a01 	vstr	s14, [r7, #4]
 800a21c:	edc7 7a02 	vstr	s15, [r7, #8]
 800a220:	e7d8      	b.n	800a1d4 <__kernel_rem_pio2f+0x3a8>
 800a222:	ab30      	add	r3, sp, #192	@ 0xc0
 800a224:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 800a228:	440b      	add	r3, r1
 800a22a:	4622      	mov	r2, r4
 800a22c:	2a00      	cmp	r2, #0
 800a22e:	da24      	bge.n	800a27a <__kernel_rem_pio2f+0x44e>
 800a230:	b34e      	cbz	r6, 800a286 <__kernel_rem_pio2f+0x45a>
 800a232:	eef1 7a47 	vneg.f32	s15, s14
 800a236:	edc7 7a00 	vstr	s15, [r7]
 800a23a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800a23e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a242:	aa31      	add	r2, sp, #196	@ 0xc4
 800a244:	2301      	movs	r3, #1
 800a246:	429c      	cmp	r4, r3
 800a248:	da20      	bge.n	800a28c <__kernel_rem_pio2f+0x460>
 800a24a:	b10e      	cbz	r6, 800a250 <__kernel_rem_pio2f+0x424>
 800a24c:	eef1 7a67 	vneg.f32	s15, s15
 800a250:	edc7 7a01 	vstr	s15, [r7, #4]
 800a254:	e7be      	b.n	800a1d4 <__kernel_rem_pio2f+0x3a8>
 800a256:	ab30      	add	r3, sp, #192	@ 0xc0
 800a258:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800a124 <__kernel_rem_pio2f+0x2f8>
 800a25c:	440b      	add	r3, r1
 800a25e:	2c00      	cmp	r4, #0
 800a260:	da05      	bge.n	800a26e <__kernel_rem_pio2f+0x442>
 800a262:	b10e      	cbz	r6, 800a268 <__kernel_rem_pio2f+0x43c>
 800a264:	eef1 7a67 	vneg.f32	s15, s15
 800a268:	edc7 7a00 	vstr	s15, [r7]
 800a26c:	e7b2      	b.n	800a1d4 <__kernel_rem_pio2f+0x3a8>
 800a26e:	ed33 7a01 	vldmdb	r3!, {s14}
 800a272:	3c01      	subs	r4, #1
 800a274:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a278:	e7f1      	b.n	800a25e <__kernel_rem_pio2f+0x432>
 800a27a:	ed73 7a01 	vldmdb	r3!, {s15}
 800a27e:	3a01      	subs	r2, #1
 800a280:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a284:	e7d2      	b.n	800a22c <__kernel_rem_pio2f+0x400>
 800a286:	eef0 7a47 	vmov.f32	s15, s14
 800a28a:	e7d4      	b.n	800a236 <__kernel_rem_pio2f+0x40a>
 800a28c:	ecb2 7a01 	vldmia	r2!, {s14}
 800a290:	3301      	adds	r3, #1
 800a292:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a296:	e7d6      	b.n	800a246 <__kernel_rem_pio2f+0x41a>
 800a298:	ed72 7a01 	vldmdb	r2!, {s15}
 800a29c:	edd2 6a01 	vldr	s13, [r2, #4]
 800a2a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a2a4:	3801      	subs	r0, #1
 800a2a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2aa:	ed82 7a00 	vstr	s14, [r2]
 800a2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b2:	edc2 7a01 	vstr	s15, [r2, #4]
 800a2b6:	e79c      	b.n	800a1f2 <__kernel_rem_pio2f+0x3c6>
 800a2b8:	ed73 7a01 	vldmdb	r3!, {s15}
 800a2bc:	edd3 6a01 	vldr	s13, [r3, #4]
 800a2c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a2c4:	3a01      	subs	r2, #1
 800a2c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2ca:	ed83 7a00 	vstr	s14, [r3]
 800a2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d2:	edc3 7a01 	vstr	s15, [r3, #4]
 800a2d6:	e78f      	b.n	800a1f8 <__kernel_rem_pio2f+0x3cc>
 800a2d8:	ed33 7a01 	vldmdb	r3!, {s14}
 800a2dc:	3c01      	subs	r4, #1
 800a2de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2e2:	e78f      	b.n	800a204 <__kernel_rem_pio2f+0x3d8>
 800a2e4:	eef1 6a66 	vneg.f32	s13, s13
 800a2e8:	eeb1 7a47 	vneg.f32	s14, s14
 800a2ec:	edc7 6a00 	vstr	s13, [r7]
 800a2f0:	ed87 7a01 	vstr	s14, [r7, #4]
 800a2f4:	eef1 7a67 	vneg.f32	s15, s15
 800a2f8:	e790      	b.n	800a21c <__kernel_rem_pio2f+0x3f0>
 800a2fa:	bf00      	nop

0800a2fc <floorf>:
 800a2fc:	ee10 3a10 	vmov	r3, s0
 800a300:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a304:	3a7f      	subs	r2, #127	@ 0x7f
 800a306:	2a16      	cmp	r2, #22
 800a308:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a30c:	dc2b      	bgt.n	800a366 <floorf+0x6a>
 800a30e:	2a00      	cmp	r2, #0
 800a310:	da12      	bge.n	800a338 <floorf+0x3c>
 800a312:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a378 <floorf+0x7c>
 800a316:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a31a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a322:	dd06      	ble.n	800a332 <floorf+0x36>
 800a324:	2b00      	cmp	r3, #0
 800a326:	da24      	bge.n	800a372 <floorf+0x76>
 800a328:	2900      	cmp	r1, #0
 800a32a:	4b14      	ldr	r3, [pc, #80]	@ (800a37c <floorf+0x80>)
 800a32c:	bf08      	it	eq
 800a32e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a332:	ee00 3a10 	vmov	s0, r3
 800a336:	4770      	bx	lr
 800a338:	4911      	ldr	r1, [pc, #68]	@ (800a380 <floorf+0x84>)
 800a33a:	4111      	asrs	r1, r2
 800a33c:	420b      	tst	r3, r1
 800a33e:	d0fa      	beq.n	800a336 <floorf+0x3a>
 800a340:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800a378 <floorf+0x7c>
 800a344:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a350:	ddef      	ble.n	800a332 <floorf+0x36>
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfbe      	ittt	lt
 800a356:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800a35a:	fa40 f202 	asrlt.w	r2, r0, r2
 800a35e:	189b      	addlt	r3, r3, r2
 800a360:	ea23 0301 	bic.w	r3, r3, r1
 800a364:	e7e5      	b.n	800a332 <floorf+0x36>
 800a366:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a36a:	d3e4      	bcc.n	800a336 <floorf+0x3a>
 800a36c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a370:	4770      	bx	lr
 800a372:	2300      	movs	r3, #0
 800a374:	e7dd      	b.n	800a332 <floorf+0x36>
 800a376:	bf00      	nop
 800a378:	7149f2ca 	.word	0x7149f2ca
 800a37c:	bf800000 	.word	0xbf800000
 800a380:	007fffff 	.word	0x007fffff

0800a384 <_init>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr

0800a390 <_fini>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	bf00      	nop
 800a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a396:	bc08      	pop	{r3}
 800a398:	469e      	mov	lr, r3
 800a39a:	4770      	bx	lr
