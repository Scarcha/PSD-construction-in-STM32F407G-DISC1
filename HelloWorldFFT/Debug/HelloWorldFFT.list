
HelloWorldFFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b70c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013cf8  0800b894  0800b894  0000c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f58c  0801f58c  00021084  2**0
                  CONTENTS
  4 .ARM          00000008  0801f58c  0801f58c  0002058c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f594  0801f594  00021084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f594  0801f594  00020594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f598  0801f598  00020598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0801f59c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00021084  2**0
                  CONTENTS
 10 .bss          00000bb4  20000084  20000084  00021084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c38  20000c38  00021084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190ff  00000000  00000000  000210b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004765  00000000  00000000  0003a1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6f  00000000  00000000  0003fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002614e  00000000  00000000  00040aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000213d2  00000000  00000000  00066c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5ec  00000000  00000000  0008800f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001575fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005004  00000000  00000000  00157640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0015c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b87c 	.word	0x0800b87c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	0800b87c 	.word	0x0800b87c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	4b72      	ldr	r3, [pc, #456]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a71      	ldr	r2, [pc, #452]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b6f      	ldr	r3, [pc, #444]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0310 	and.w	r3, r3, #16
 80004e6:	61bb      	str	r3, [r7, #24]
 80004e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	4b6b      	ldr	r3, [pc, #428]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a6a      	ldr	r2, [pc, #424]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b68      	ldr	r3, [pc, #416]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a63      	ldr	r2, [pc, #396]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b61      	ldr	r3, [pc, #388]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a5c      	ldr	r2, [pc, #368]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b5a      	ldr	r3, [pc, #360]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b56      	ldr	r3, [pc, #344]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a55      	ldr	r2, [pc, #340]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a4e      	ldr	r2, [pc, #312]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b4c      	ldr	r3, [pc, #304]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	4849      	ldr	r0, [pc, #292]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800057c:	f003 fdba 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4847      	ldr	r0, [pc, #284]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 8000586:	f003 fdb5 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000590:	4845      	ldr	r0, [pc, #276]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000592:	f003 fdaf 	bl	80040f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000596:	2308      	movs	r3, #8
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	483c      	ldr	r0, [pc, #240]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 80005ae:	f003 fc05 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4836      	ldr	r0, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ca:	f003 fbf7 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005de:	2305      	movs	r3, #5
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	482e      	ldr	r0, [pc, #184]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ea:	f003 fbe7 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	482a      	ldr	r0, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x1f4>)
 8000604:	f003 fbda 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000608:	2304      	movs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4825      	ldr	r0, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800061c:	f003 fbce 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000632:	2305      	movs	r3, #5
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800063e:	f003 fbbd 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000646:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 800065c:	f003 fbae 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000674:	f003 fba2 	bl	8003dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800068e:	f003 fb95 	bl	8003dbc <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3730      	adds	r7, #48	@ 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f005 fe4d 	bl	8006390 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 fa18 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000a0 	.word	0x200000a0
 8000708:	40005400 	.word	0x40005400
 800070c:	000186a0 	.word	0x000186a0

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <HAL_I2C_MspInit+0x84>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d12c      	bne.n	800078c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800074e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0x8c>)
 800076c:	f003 fb26 	bl	8003dbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_I2S3_Init+0x5c>)
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f005 ff1a 	bl	8006618 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f9a1 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f4 	.word	0x200000f4
 80007f8:	40003c00 	.word	0x40003c00
 80007fc:	00017700 	.word	0x00017700

08000800 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <HAL_I2S_MspInit+0xf0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d15a      	bne.n	80008e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000834:	23c0      	movs	r3, #192	@ 0xc0
 8000836:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f007 f80d 	bl	8007860 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800084c:	f000 f970 	bl	8000b30 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6313      	str	r3, [r2, #48]	@ 0x30
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <HAL_I2S_MspInit+0xf8>)
 80008c0:	f003 fa7c 	bl	8003dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <HAL_I2S_MspInit+0xfc>)
 80008e2:	f003 fa6b 	bl	8003dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3738      	adds	r7, #56	@ 0x38
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40003c00 	.word	0x40003c00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f003 f8b1 	bl	8003a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f8a7 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f7ff fdd3 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000912:	f7ff fecf 	bl	80006b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000916:	f7ff ff43 	bl	80007a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800091a:	f000 f90f 	bl	8000b3c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800091e:	f00a fb57 	bl	800afd0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  switch(signal){
 8000922:	4b47      	ldr	r3, [pc, #284]	@ (8000a40 <main+0x140>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d03d      	beq.n	80009a6 <main+0xa6>
 800092a:	2b02      	cmp	r3, #2
 800092c:	dc64      	bgt.n	80009f8 <main+0xf8>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <main+0x38>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d018      	beq.n	8000968 <main+0x68>
 8000936:	e05f      	b.n	80009f8 <main+0xf8>
  case ONES:
	  for(int i = 0; i < FFT_Length; i++){
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	e010      	b.n	8000960 <main+0x60>
  			  fft_input[i] = 1;
 800093e:	4a41      	ldr	r2, [pc, #260]	@ (8000a44 <main+0x144>)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800094a:	601a      	str	r2, [r3, #0]
  			  fft_keeper[i] = 1;
 800094c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a48 <main+0x148>)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000958:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < FFT_Length; i++){
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	2b1f      	cmp	r3, #31
 8000964:	ddeb      	ble.n	800093e <main+0x3e>
	  }
	  break;
 8000966:	e047      	b.n	80009f8 <main+0xf8>
  case DELTA:
	  for(int i = 0; i < FFT_Length; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	e010      	b.n	8000990 <main+0x90>
	  		  fft_input[i] = 0;
 800096e:	4a35      	ldr	r2, [pc, #212]	@ (8000a44 <main+0x144>)
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
	  		  fft_keeper[i] = 0;
 800097c:	4a32      	ldr	r2, [pc, #200]	@ (8000a48 <main+0x148>)
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < FFT_Length; i++){
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	3301      	adds	r3, #1
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	2b1f      	cmp	r3, #31
 8000994:	ddeb      	ble.n	800096e <main+0x6e>
	  	  }
	  	  fft_input[5] = 1;
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <main+0x144>)
 8000998:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800099c:	615a      	str	r2, [r3, #20]
	  	  fft_keeper[5] = 1;
 800099e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <main+0x148>)
 80009a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009a4:	615a      	str	r2, [r3, #20]
  case SIN:
	  for (uint32_t n = 0; n < FFT_Length; n++){
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e022      	b.n	80009f2 <main+0xf2>
	      float32_t angle = 2.0f * PI * SIGNAL_FREQ * ((float32_t)n / sampling_freq);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009b6:	4b25      	ldr	r3, [pc, #148]	@ (8000a4c <main+0x14c>)
 80009b8:	ed93 7a00 	vldr	s14, [r3]
 80009bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000a50 <main+0x150>
 80009c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c8:	edc7 7a01 	vstr	s15, [r7, #4]
	      fft_input[n] = AMPLITUDE * arm_sin_f32(angle);
 80009cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80009d0:	f000 fa06 	bl	8000de0 <arm_sin_f32>
 80009d4:	eef0 7a40 	vmov.f32	s15, s0
 80009d8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e0:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <main+0x144>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t n = 0; n < FFT_Length; n++){
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b1f      	cmp	r3, #31
 80009f6:	d9d9      	bls.n	80009ac <main+0xac>
	  }
  }
  arm_rfft_fast_init_f32(&fft_handler,FFT_Length);
 80009f8:	2120      	movs	r1, #32
 80009fa:	4816      	ldr	r0, [pc, #88]	@ (8000a54 <main+0x154>)
 80009fc:	f002 ffce 	bl	800399c <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  arm_rfft_fast_f32(&fft_handler, (float32_t *)&fft_input, (float32_t *)&fft_output,0);
 8000a00:	2300      	movs	r3, #0
 8000a02:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <main+0x158>)
 8000a04:	490f      	ldr	r1, [pc, #60]	@ (8000a44 <main+0x144>)
 8000a06:	4813      	ldr	r0, [pc, #76]	@ (8000a54 <main+0x154>)
 8000a08:	f002 fe77 	bl	80036fa <arm_rfft_fast_f32>
	  for(int i = 0; i < FFT_Length; i++){
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e00c      	b.n	8000a2c <main+0x12c>
		  fft_input[i] = fft_keeper[i];
 8000a12:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <main+0x148>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4909      	ldr	r1, [pc, #36]	@ (8000a44 <main+0x144>)
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < FFT_Length; i++){
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b1f      	cmp	r3, #31
 8000a30:	ddef      	ble.n	8000a12 <main+0x112>

	  }
	  HAL_Delay(500);
 8000a32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a36:	f003 f88b 	bl	8003b50 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a3a:	f00a faef 	bl	800b01c <MX_USB_HOST_Process>
	  arm_rfft_fast_f32(&fft_handler, (float32_t *)&fft_input, (float32_t *)&fft_output,0);
 8000a3e:	e7df      	b.n	8000a00 <main+0x100>
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000154 	.word	0x20000154
 8000a48:	200001d4 	.word	0x200001d4
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	427b53d2 	.word	0x427b53d2
 8000a54:	2000013c 	.word	0x2000013c
 8000a58:	20000254 	.word	0x20000254

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	@ 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00a fe78 	bl	800b760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a27      	ldr	r2, [pc, #156]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ada:	2307      	movs	r3, #7
 8000adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f006 fa38 	bl	8006f58 <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aee:	f000 f81f 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2105      	movs	r1, #5
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fc99 	bl	8007448 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b1c:	f000 f808 	bl	8000b30 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	@ 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <MX_SPI1_Init+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b88:	220a      	movs	r2, #10
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_SPI1_Init+0x64>)
 8000b8e:	f006 ffa9 	bl	8007ae4 <HAL_SPI_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b98:	f7ff ffca 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200002d4 	.word	0x200002d4
 8000ba4:	40013000 	.word	0x40013000

08000ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <HAL_SPI_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c02:	23e0      	movs	r3, #224	@ 0xe0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000c1e:	f003 f8cd 	bl	8003dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c76:	2007      	movs	r0, #7
 8000c78:	f003 f85e 	bl	8003d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f002 ff17 	bl	8003b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <OTG_FS_IRQHandler+0x10>)
 8000cee:	f003 fcfb 	bl	80046e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000710 	.word	0x20000710

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f00a fd30 	bl	800b790 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20020000 	.word	0x20020000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	2000032c 	.word	0x2000032c
 8000d64:	20000c38 	.word	0x20000c38

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f00a fcef 	bl	800b79c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fd9f 	bl	8000900 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000dd0:	0801f59c 	.word	0x0801f59c
  ldr r2, =_sbss
 8000dd4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000dd8:	20000c38 	.word	0x20000c38

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <arm_sin_f32>:
  @return        sin(x)
 */

ARM_DSP_ATTRIBUTE float32_t arm_sin_f32(
  float32_t x)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b08b      	sub	sp, #44	@ 0x2c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000dea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dee:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000ed8 <arm_sin_f32+0xf8>
 8000df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e02:	ee17 3a90 	vmov	r3, s15
 8000e06:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000e08:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	d502      	bpl.n	8000e1c <arm_sin_f32+0x3c>
  {
    n--;
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e26:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e2e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000e32:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e36:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000edc <arm_sin_f32+0xfc>
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8000e42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4a:	ee17 3a90 	vmov	r3, s15
 8000e4e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8000e50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e56:	d309      	bcc.n	8000e6c <arm_sin_f32+0x8c>
    index = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e60:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000edc <arm_sin_f32+0xfc>
 8000e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e68:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000e6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e76:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8000e82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e84:	4a16      	ldr	r2, [pc, #88]	@ (8000ee0 <arm_sin_f32+0x100>)
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000e8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a13      	ldr	r2, [pc, #76]	@ (8000ee0 <arm_sin_f32+0x100>)
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8000e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb0:	edd7 6a05 	vldr	s13, [r7, #20]
 8000eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	ee07 3a90 	vmov	s15, r3
}
 8000eca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ece:	372c      	adds	r7, #44	@ 0x2c
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	3e22f983 	.word	0x3e22f983
 8000edc:	44000000 	.word	0x44000000
 8000ee0:	0801ed08 	.word	0x0801ed08

08000ee4 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	460b      	mov	r3, r1
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e043      	b.n	8000f80 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	440b      	add	r3, r1
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	3301      	adds	r3, #1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	440b      	add	r3, r1
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

    i += 2;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d3b7      	bcc.n	8000ef8 <arm_bitreversal_32+0x14>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <arm_cfft_radix8by2_f32>:
  @par Size of buffers according to the target architecture and datatype:
       They are described on the page \ref transformbuffers "transform buffers".
 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b0a0      	sub	sp, #128	@ 0x80
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000fa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	4413      	add	r3, r2
 8000fae:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8000fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fbc:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 8000fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000fc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8000fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000fd4:	4413      	add	r3, r2
 8000fd6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000fde:	e1b6      	b.n	800134e <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 8000ff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8000ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8001004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 800100a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8001010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001016:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800101c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8001022:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 8001028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800102e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800103a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8001040:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001044:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	603a      	str	r2, [r7, #0]
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001052:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001056:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800105a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	1d1a      	adds	r2, r3, #4
 8001062:	603a      	str	r2, [r7, #0]
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800106c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001070:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	1d1a      	adds	r2, r3, #4
 8001078:	603a      	str	r2, [r7, #0]
 800107a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8001082:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001086:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	1d1a      	adds	r2, r3, #4
 800108e:	603a      	str	r2, [r7, #0]
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001098:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800109c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 80010a8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80010ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 80010b8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80010bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80010c8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80010cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 80010d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80010ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010f8:	1d1a      	adds	r2, r3, #4
 80010fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001104:	ed97 7a08 	vldr	s14, [r7, #32]
 8001108:	edd7 7a04 	vldr	s15, [r7, #16]
 800110c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800110e:	1d1a      	adds	r2, r3, #4
 8001110:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001116:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800111a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800111e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001124:	1d1a      	adds	r2, r3, #4
 8001126:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8001130:	ed97 7a02 	vldr	s14, [r7, #8]
 8001134:	edd7 7a06 	vldr	s15, [r7, #24]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8001140:	ed97 7a03 	vldr	s14, [r7, #12]
 8001144:	edd7 7a07 	vldr	s15, [r7, #28]
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8001150:	ed97 7a04 	vldr	s14, [r7, #16]
 8001154:	edd7 7a08 	vldr	s15, [r7, #32]
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8001160:	ed97 7a05 	vldr	s14, [r7, #20]
 8001164:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116c:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8001170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001172:	1d1a      	adds	r2, r3, #4
 8001174:	673a      	str	r2, [r7, #112]	@ 0x70
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 800117a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800117c:	1d1a      	adds	r2, r3, #4
 800117e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001184:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001188:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8001194:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001198:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 80011a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011a8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 80011b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011b8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80011c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011c6:	1d1a      	adds	r2, r3, #4
 80011c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80011ca:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80011ce:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80011da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011dc:	1d1a      	adds	r2, r3, #4
 80011de:	677a      	str	r2, [r7, #116]	@ 0x74
 80011e0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80011e4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80011f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8001200:	edd7 7a03 	vldr	s15, [r7, #12]
 8001204:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8001210:	edd7 7a03 	vldr	s15, [r7, #12]
 8001214:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8001220:	edd7 7a02 	vldr	s15, [r7, #8]
 8001224:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8001230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001236:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800123a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800123e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001242:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001248:	1d1a      	adds	r2, r3, #4
 800124a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800124c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001250:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800125c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	673a      	str	r2, [r7, #112]	@ 0x70
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8001266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001268:	1d1a      	adds	r2, r3, #4
 800126a:	673a      	str	r2, [r7, #112]	@ 0x70
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 8001270:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001274:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 8001280:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001284:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 8001290:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001294:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 80012a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012a4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 80012b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012b2:	1d1a      	adds	r2, r3, #4
 80012b4:	677a      	str	r2, [r7, #116]	@ 0x74
 80012b6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012ba:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c2:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80012c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012c8:	1d1a      	adds	r2, r3, #4
 80012ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80012cc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80012d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80012dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 80012ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 80012fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001300:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 800130c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001310:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001318:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 800131c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001322:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001326:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001332:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001334:	1d1a      	adds	r2, r3, #4
 8001336:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001338:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8001348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800134a:	3b01      	subs	r3, #1
 800134c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800134e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001350:	2b00      	cmp	r3, #0
 8001352:	f47f ae45 	bne.w	8000fe0 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001358:	b299      	uxth	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	2302      	movs	r3, #2
 8001360:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001362:	f001 f80f 	bl	8002384 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001366:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001368:	b299      	uxth	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2302      	movs	r3, #2
 8001370:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001372:	f001 f807 	bl	8002384 <arm_radix8_butterfly_f32>
}
 8001376:	bf00      	nop
 8001378:	3780      	adds	r7, #128	@ 0x80
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b0ac      	sub	sp, #176	@ 0xb0
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	b29b      	uxth	r3, r3
 8001390:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001394:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 80013a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80013ac:	4413      	add	r3, r2
 80013ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 80013b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80013bc:	4413      	add	r3, r2
 80013be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 80013c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 80013cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013d0:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 80013d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013d6:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80013d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013dc:	3b04      	subs	r3, #4
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 80013e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013e6:	3b04      	subs	r3, #4
 80013e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80013ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013f0:	3b04      	subs	r3, #4
 80013f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80013f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001400:	4413      	add	r3, r2
 8001402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800140e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001412:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001416:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800141a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 800141e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8001430:	2306      	movs	r3, #6
 8001432:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	ed93 7a00 	vldr	s14, [r3]
 800143a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800146c:	3304      	adds	r3, #4
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001476:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3304      	adds	r3, #4
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001486:	3304      	adds	r3, #4
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001494:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001498:	3304      	adds	r3, #4
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80014a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014aa:	3304      	adds	r3, #4
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80014b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80014d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80014e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80014f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014fc:	3304      	adds	r3, #4
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800150e:	3304      	adds	r3, #4
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800151c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001520:	3304      	adds	r3, #4
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800152a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001532:	3304      	adds	r3, #4
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001540:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001564:	ed93 7a00 	vldr	s14, [r3]
 8001568:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800156c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001570:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	1d1a      	adds	r2, r3, #4
 800157c:	603a      	str	r2, [r7, #0]
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800158a:	3304      	adds	r3, #4
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800159c:	3304      	adds	r3, #4
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	1d1a      	adds	r2, r3, #4
 80015a6:	603a      	str	r2, [r7, #0]
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80015b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015b4:	1d1a      	adds	r2, r3, #4
 80015b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80015ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015bc:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80015be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015c2:	1d1a      	adds	r2, r3, #4
 80015c4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80015c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015ca:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80015cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d0:	1d1a      	adds	r2, r3, #4
 80015d2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80015da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015de:	1d1a      	adds	r2, r3, #4
 80015e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80015e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015ec:	1d1a      	adds	r2, r3, #4
 80015ee:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80015f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015fa:	1d1a      	adds	r2, r3, #4
 80015fc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800160c:	4413      	add	r3, r2
 800160e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8001612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800161a:	4413      	add	r3, r2
 800161c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8001620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001628:	4413      	add	r3, r2
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800162e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001632:	3b02      	subs	r3, #2
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800163a:	e31c      	b.n	8001c76 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001664:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3304      	adds	r3, #4
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001674:	3304      	adds	r3, #4
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3304      	adds	r3, #4
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800168e:	3304      	adds	r3, #4
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800169c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016a0:	3304      	adds	r3, #4
 80016a2:	ed93 7a00 	vldr	s14, [r3]
 80016a6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80016aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016b2:	3304      	adds	r3, #4
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80016c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80016cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80016e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fc:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001700:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001704:	3304      	adds	r3, #4
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800170e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001712:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001716:	3304      	adds	r3, #4
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001720:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001724:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001728:	3304      	adds	r3, #4
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001732:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800173a:	3304      	adds	r3, #4
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001748:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001758:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001764:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	1d1a      	adds	r2, r3, #4
 8001784:	603a      	str	r2, [r7, #0]
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800178e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001792:	3304      	adds	r3, #4
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800179c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017a4:	3304      	adds	r3, #4
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	1d1a      	adds	r2, r3, #4
 80017ae:	603a      	str	r2, [r7, #0]
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80017b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017bc:	3b04      	subs	r3, #4
 80017be:	ed93 7a00 	vldr	s14, [r3]
 80017c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017c6:	3b04      	subs	r3, #4
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80017d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017d8:	3b04      	subs	r3, #4
 80017da:	ed93 7a00 	vldr	s14, [r3]
 80017de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017e2:	3b04      	subs	r3, #4
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ec:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80017f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800180c:	ed93 7a00 	vldr	s14, [r3]
 8001810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8001820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001834:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001844:	ed93 7a00 	vldr	s14, [r3]
 8001848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001858:	3b04      	subs	r3, #4
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001866:	3b04      	subs	r3, #4
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001878:	3b04      	subs	r3, #4
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001882:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800188a:	3b04      	subs	r3, #4
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001894:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80018a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80018b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018cc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d4:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80018d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018dc:	3b04      	subs	r3, #4
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018e6:	3b04      	subs	r3, #4
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80018f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f8:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80018fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001918:	1f1a      	subs	r2, r3, #4
 800191a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001922:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800192a:	3b04      	subs	r3, #4
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800193c:	3b04      	subs	r3, #4
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001946:	1f1a      	subs	r2, r3, #4
 8001948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8001954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001958:	1d1a      	adds	r2, r3, #4
 800195a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8001962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8001970:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001974:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8001980:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001984:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8001990:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001994:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 80019a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019a4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 80019b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019b4:	1d1a      	adds	r2, r3, #4
 80019b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80019ba:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80019be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80019ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019ce:	1d1a      	adds	r2, r3, #4
 80019d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80019d4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80019d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80019e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019e8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 80019f4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019f8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8001a04:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a08:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8001a14:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a18:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8001a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a28:	1f1a      	subs	r2, r3, #4
 8001a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001a2e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001a32:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a42:	1f1a      	subs	r2, r3, #4
 8001a44:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001a48:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a4c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a54:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8001a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a64:	3304      	adds	r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8001a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001a72:	4413      	add	r3, r2
 8001a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001a78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a7c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a84:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8001a88:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a8c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a94:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8001a98:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a9c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8001aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aac:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8001ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001abc:	1d1a      	adds	r2, r3, #4
 8001abe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ac2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ac6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001adc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ae0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001aec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001af0:	eef1 7a67 	vneg.f32	s15, s15
 8001af4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8001b00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b04:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8001b10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b14:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8001b20:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b24:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8001b30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b34:	1f1a      	subs	r2, r3, #4
 8001b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b3a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001b3e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b4e:	1f1a      	subs	r2, r3, #4
 8001b50:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b54:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b58:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8001b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b70:	3304      	adds	r3, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8001b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b7e:	4413      	add	r3, r2
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b88:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b90:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8001b94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b98:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8001ba4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8001bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bc8:	1d1a      	adds	r2, r3, #4
 8001bca:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001bce:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001bd2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001be8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001bec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8001c08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8001c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c24:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8001c28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c2c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8001c38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c3c:	1f1a      	subs	r2, r3, #4
 8001c3e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001c42:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001c46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c56:	1f1a      	subs	r2, r3, #4
 8001c58:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001c5c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001c60:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c68:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c70:	3b01      	subs	r3, #1
 8001c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f acde 	bne.w	800163c <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c92:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	ed93 7a00 	vldr	s14, [r3]
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb8:	3304      	adds	r3, #4
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cdc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001d30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d40:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d48:	3304      	adds	r3, #4
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d7e:	3304      	adds	r3, #4
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d88:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da8:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	603a      	str	r2, [r7, #0]
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	ed93 7a00 	vldr	s14, [r3]
 8001ddc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001de8:	3304      	adds	r3, #4
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	1d1a      	adds	r2, r3, #4
 8001df2:	603a      	str	r2, [r7, #0]
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 8001e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e08:	3304      	adds	r3, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8001e0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e12:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8001e1e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e22:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8001e2e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e32:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8001e3e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e42:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8001e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e52:	1d1a      	adds	r2, r3, #4
 8001e54:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001e58:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001e5c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e6c:	1d1a      	adds	r2, r3, #4
 8001e6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001e72:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001e76:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8001e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8001e94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e98:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8001ea4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8001eb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8001ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8001ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed8:	1d1a      	adds	r2, r3, #4
 8001eda:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ede:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ee2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eea:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef2:	1d1a      	adds	r2, r3, #4
 8001ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ef8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001efc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f04:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8001f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f14:	3304      	adds	r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8001f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f26:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 8001f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f2e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8001f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f46:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8001f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f4e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8001f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f5e:	1d1a      	adds	r2, r3, #4
 8001f60:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001f64:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001f68:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f78:	1d1a      	adds	r2, r3, #4
 8001f7a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001f7e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001f82:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8a:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f92:	b299      	uxth	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2304      	movs	r3, #4
 8001f9a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001f9c:	f000 f9f2 	bl	8002384 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fa4:	b299      	uxth	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	2304      	movs	r3, #4
 8001fac:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001fae:	f000 f9e9 	bl	8002384 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fb6:	b299      	uxth	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001fc0:	f000 f9e0 	bl	8002384 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fc8:	b299      	uxth	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	2304      	movs	r3, #4
 8001fd0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001fd2:	f000 f9d7 	bl	8002384 <arm_radix8_butterfly_f32>
}
 8001fd6:	bf00      	nop
 8001fd8:	37b0      	adds	r7, #176	@ 0xb0
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b088      	sub	sp, #32
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	71fb      	strb	r3, [r7, #7]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d117      	bne.n	8002030 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3304      	adds	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e00d      	b.n	8002028 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	eef1 7a67 	vneg.f32	s15, s15
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	3308      	adds	r3, #8
 8002020:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	d3ed      	bcc.n	800200c <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002036:	d040      	beq.n	80020ba <arm_cfft_f32+0xdc>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800203e:	d845      	bhi.n	80020cc <arm_cfft_f32+0xee>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002046:	d033      	beq.n	80020b0 <arm_cfft_f32+0xd2>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800204e:	d83d      	bhi.n	80020cc <arm_cfft_f32+0xee>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002056:	d026      	beq.n	80020a6 <arm_cfft_f32+0xc8>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	d835      	bhi.n	80020cc <arm_cfft_f32+0xee>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002066:	d028      	beq.n	80020ba <arm_cfft_f32+0xdc>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206e:	d82d      	bhi.n	80020cc <arm_cfft_f32+0xee>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002076:	d01b      	beq.n	80020b0 <arm_cfft_f32+0xd2>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800207e:	d825      	bhi.n	80020cc <arm_cfft_f32+0xee>
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b80      	cmp	r3, #128	@ 0x80
 8002084:	d00f      	beq.n	80020a6 <arm_cfft_f32+0xc8>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b80      	cmp	r3, #128	@ 0x80
 800208a:	d81f      	bhi.n	80020cc <arm_cfft_f32+0xee>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b40      	cmp	r3, #64	@ 0x40
 8002090:	d013      	beq.n	80020ba <arm_cfft_f32+0xdc>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b40      	cmp	r3, #64	@ 0x40
 8002096:	d819      	bhi.n	80020cc <arm_cfft_f32+0xee>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d003      	beq.n	80020a6 <arm_cfft_f32+0xc8>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d005      	beq.n	80020b0 <arm_cfft_f32+0xd2>
 80020a4:	e012      	b.n	80020cc <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7fe ff74 	bl	8000f96 <arm_cfft_radix8by2_f32>
    break;
 80020ae:	e00d      	b.n	80020cc <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff f963 	bl	800137e <arm_cfft_radix8by4_f32>
    break;
 80020b8:	e008      	b.n	80020cc <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	b299      	uxth	r1, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	2301      	movs	r3, #1
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f000 f95d 	bl	8002384 <arm_radix8_butterfly_f32>
    break;
 80020ca:	bf00      	nop
  }

  if ( bitReverseFlag )
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8999      	ldrh	r1, [r3, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	461a      	mov	r2, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f7fe ff01 	bl	8000ee4 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d130      	bne.n	800214a <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fa:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e01c      	b.n	8002142 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1d1a      	adds	r2, r3, #4
 800210c:	61ba      	str	r2, [r7, #24]
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	edd7 7a04 	vldr	s15, [r7, #16]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	eeb1 7a67 	vneg.f32	s14, s15
 8002128:	edd7 7a04 	vldr	s15, [r7, #16]
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	3304      	adds	r3, #4
 800213a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3301      	adds	r3, #1
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3de      	bcc.n	8002108 <arm_cfft_f32+0x12a>
    }
  }
}
 800214a:	bf00      	nop
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <arm_cfft_init_2048_f32+0x44>)
 8002170:	899a      	ldrh	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	819a      	strh	r2, [r3, #12]
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <arm_cfft_init_2048_f32+0x44>)
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <arm_cfft_init_2048_f32+0x44>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	0801f57c 	.word	0x0801f57c

0800219c <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ae:	801a      	strh	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <arm_cfft_init_1024_f32+0x44>)
 80021b8:	899a      	ldrh	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	819a      	strh	r2, [r3, #12]
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <arm_cfft_init_1024_f32+0x44>)
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <arm_cfft_init_1024_f32+0x44>)
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	0801f56c 	.word	0x0801f56c

080021e4 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f6:	801a      	strh	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <arm_cfft_init_512_f32+0x44>)
 8002200:	899a      	ldrh	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	819a      	strh	r2, [r3, #12]
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <arm_cfft_init_512_f32+0x44>)
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <arm_cfft_init_512_f32+0x44>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	0801f55c 	.word	0x0801f55c

0800222c <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <arm_cfft_init_256_f32+0x44>)
 8002248:	899a      	ldrh	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	819a      	strh	r2, [r3, #12]
 800224e:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <arm_cfft_init_256_f32+0x44>)
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <arm_cfft_init_256_f32+0x44>)
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	0801f54c 	.word	0x0801f54c

08002274 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <arm_cfft_init_128_f32+0x40>)
 800228e:	899a      	ldrh	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	819a      	strh	r2, [r3, #12]
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <arm_cfft_init_128_f32+0x40>)
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <arm_cfft_init_128_f32+0x40>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	0801f53c 	.word	0x0801f53c

080022b8 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	801a      	strh	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <arm_cfft_init_64_f32+0x40>)
 80022d2:	899a      	ldrh	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	819a      	strh	r2, [r3, #12]
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <arm_cfft_init_64_f32+0x40>)
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <arm_cfft_init_64_f32+0x40>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0801f52c 	.word	0x0801f52c

080022fc <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	801a      	strh	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <arm_cfft_init_32_f32+0x40>)
 8002316:	899a      	ldrh	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	819a      	strh	r2, [r3, #12]
 800231c:	4b07      	ldr	r3, [pc, #28]	@ (800233c <arm_cfft_init_32_f32+0x40>)
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <arm_cfft_init_32_f32+0x40>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	0801f51c 	.word	0x0801f51c

08002340 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2210      	movs	r2, #16
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <arm_cfft_init_16_f32+0x40>)
 800235a:	899a      	ldrh	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	819a      	strh	r2, [r3, #12]
 8002360:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <arm_cfft_init_16_f32+0x40>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <arm_cfft_init_16_f32+0x40>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	0801f50c 	.word	0x0801f50c

08002384 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002384:	b480      	push	{r7}
 8002386:	b0bd      	sub	sp, #244	@ 0xf4
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <arm_radix8_butterfly_f32+0x3c>)
 800239a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 80023a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 80023ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023bc:	e002      	b.n	80023c4 <arm_radix8_butterfly_f32+0x40>
 80023be:	bf00      	nop
 80023c0:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80023c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80023c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023cc:	4413      	add	r3, r2
 80023ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 80023d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80023d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023da:	4413      	add	r3, r2
 80023dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 80023e0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e8:	4413      	add	r3, r2
 80023ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 80023ee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80023f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023f6:	4413      	add	r3, r2
 80023f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 80023fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002404:	4413      	add	r3, r2
 8002406:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 800240a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800240e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002412:	4413      	add	r3, r2
 8002414:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 8002418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800241c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002420:	4413      	add	r3, r2
 8002422:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002426:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800244a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246a:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800246e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	ed93 7a00 	vldr	s14, [r3]
 800247c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	ed93 7a00 	vldr	s14, [r3]
 80024a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b2:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80024b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80024da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	ed93 7a00 	vldr	s14, [r3]
 80024e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fa:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80024fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	ed93 7a00 	vldr	s14, [r3]
 800250c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002542:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 8002546:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800254a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800254e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002552:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 8002556:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800255a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800255e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002562:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 8002566:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800256a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800256e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002572:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 8002576:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800257a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 8002586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002594:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80025a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80025ae:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80025ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3304      	adds	r3, #4
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4413      	add	r3, r2
 80025c6:	ed93 7a00 	vldr	s14, [r3]
 80025ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	3304      	adds	r3, #4
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025de:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80025e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	3304      	adds	r3, #4
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	3304      	adds	r3, #4
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002606:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800260a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	3304      	adds	r3, #4
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	3304      	adds	r3, #4
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4413      	add	r3, r2
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	3304      	adds	r3, #4
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	3304      	adds	r3, #4
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002656:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800265a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	3304      	adds	r3, #4
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	ed93 7a00 	vldr	s14, [r3]
 800266a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	3304      	adds	r3, #4
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002682:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3304      	adds	r3, #4
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	ed93 7a00 	vldr	s14, [r3]
 8002692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	3304      	adds	r3, #4
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80026aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	3304      	adds	r3, #4
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	ed93 7a00 	vldr	s14, [r3]
 80026ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	3304      	adds	r3, #4
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80026d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	3304      	adds	r3, #4
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	ed93 7a00 	vldr	s14, [r3]
 80026e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	3304      	adds	r3, #4
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	edd3 7a00 	vldr	s15, [r3]
 80026f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 80026fa:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80026fe:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002706:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 800270a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800270e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002716:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 800271a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800271e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002726:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 800272a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800272e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800273a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	3304      	adds	r3, #4
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4413      	add	r3, r2
 8002746:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800274a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3304      	adds	r3, #4
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4413      	add	r3, r2
 8002762:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002766:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002780:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800278c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800279a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800279e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80027a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	3304      	adds	r3, #4
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80027b6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80027c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	3304      	adds	r3, #4
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80027d2:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80027d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027da:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80027de:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80027e2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80027ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 80027f6:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80027fa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 800280e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8002812:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8002826:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800282a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 800283e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002842:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 800284e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002852:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285a:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 800285e:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002862:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 800286e:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002872:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 800287e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002882:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 800288e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002892:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 800289e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80028a2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 80028ae:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80028b2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80028b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ba:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 80028be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80028cc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80028d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80028d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80028e6:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80028ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80028f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002900:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800290c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800291a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3304      	adds	r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002936:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3304      	adds	r3, #4
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002952:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	3304      	adds	r3, #4
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800296e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002976:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800297a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	3304      	adds	r3, #4
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800298a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800298e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002992:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002996:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800299a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800299e:	4413      	add	r3, r2
 80029a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80029aa:	429a      	cmp	r2, r3
 80029ac:	f4ff ad0a 	bcc.w	80023c4 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	f240 84e3 	bls.w	8003380 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80029cc:	4413      	add	r3, r2
 80029ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 80029d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 80029d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80029da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029dc:	4413      	add	r3, r2
 80029de:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 80029e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80029e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029e4:	4413      	add	r3, r2
 80029e6:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 80029e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029ec:	4413      	add	r3, r2
 80029ee:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 80029f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80029f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029f4:	4413      	add	r3, r2
 80029f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 80029f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029fc:	4413      	add	r3, r2
 80029fe:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8002a00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a04:	4413      	add	r3, r2
 8002a06:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8002a08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8002a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8002a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8002a2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8002a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8002a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8002a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002a5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	3304      	adds	r3, #4
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	3304      	adds	r3, #4
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	3304      	adds	r3, #4
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	3304      	adds	r3, #4
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002aa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	3304      	adds	r3, #4
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	3304      	adds	r3, #4
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8002ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002aca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8002ad8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8002ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aee:	4413      	add	r3, r2
 8002af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8002af4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afc:	4413      	add	r3, r2
 8002afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8002b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8002b10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b18:	4413      	add	r3, r2
 8002b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8002b1e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b26:	4413      	add	r3, r2
 8002b28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	ed93 7a00 	vldr	s14, [r3]
 8002b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002b50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	ed93 7a00 	vldr	s14, [r3]
 8002b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002bbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	ed93 7a00 	vldr	s14, [r3]
 8002bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bdc:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	ed93 7a00 	vldr	s14, [r3]
 8002bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	ed93 7a00 	vldr	s14, [r3]
 8002c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	ed93 7a00 	vldr	s14, [r3]
 8002c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c48:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8002c4c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c50:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8002c5c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c60:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8002c6c:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002c70:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c78:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8002c7c:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002c80:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002c8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c9a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002ca6:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002caa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	ed93 7a00 	vldr	s14, [r3]
 8002cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3304      	adds	r3, #4
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002cde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4413      	add	r3, r2
 8002cea:	ed93 7a00 	vldr	s14, [r3]
 8002cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	ed93 7a00 	vldr	s14, [r3]
 8002d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4413      	add	r3, r2
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	3304      	adds	r3, #4
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	ed93 7a00 	vldr	s14, [r3]
 8002d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	3304      	adds	r3, #4
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d52:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002d56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4413      	add	r3, r2
 8002d62:	ed93 7a00 	vldr	s14, [r3]
 8002d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002d7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	3304      	adds	r3, #4
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	ed93 7a00 	vldr	s14, [r3]
 8002d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	3304      	adds	r3, #4
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	3304      	adds	r3, #4
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	ed93 7a00 	vldr	s14, [r3]
 8002db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002dce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	ed93 7a00 	vldr	s14, [r3]
 8002dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3304      	adds	r3, #4
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8002df6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dfa:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e02:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8002e06:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e0a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 8002e16:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e22:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 8002e26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8002e36:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002e3a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e42:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8002e46:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002e4a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e52:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002e56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e66:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002e72:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e76:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8002e82:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002e86:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8002e92:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002e96:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8002ea2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002ea6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002eb2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002eb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002ec2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002ec6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ece:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002ed2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002ed6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ef0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002efc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	3304      	adds	r3, #4
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f14:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002f18:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002f1c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f24:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002f28:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002f2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f34:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002f38:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f44:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002f48:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002f4c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f54:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002f58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002f72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	3304      	adds	r3, #4
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002f8e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002f92:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002f9e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002fa2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002faa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002fae:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002fb2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fba:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002fbe:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002fc2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002fce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	3304      	adds	r3, #4
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003000:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003004:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003008:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800300c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003010:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003018:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 800301c:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003020:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003028:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800302c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003030:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 8003034:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003038:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800303c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003040:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003048:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 800304c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003050:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003058:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800305c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003060:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8003064:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003068:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800306c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003070:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8003074:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003078:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800307c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003080:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8003084:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003088:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800308c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003090:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8003094:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003098:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800309c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a0:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 80030a4:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80030a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 80030b4:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80030b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80030bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 80030c4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80030c8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80030cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 80030d4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80030d8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 80030e4:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80030e8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 80030f4:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80030f8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80030fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003100:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 8003104:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003108:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 8003114:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003118:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800311c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003120:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 8003124:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003128:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 8003134:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003138:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8003144:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003148:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800314c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003150:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8003154:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003158:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8003164:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003168:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003174:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003178:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800317c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003180:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003184:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003188:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800318c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003190:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003194:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003198:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800319c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80031a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80031b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ba:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	3304      	adds	r3, #4
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80031da:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80031de:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80031ea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031ee:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80031fa:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80031fe:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800320a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800320e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800321a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	ed97 7a07 	vldr	s14, [r7, #28]
 8003228:	edd7 7a06 	vldr	s15, [r7, #24]
 800322c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003230:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	3304      	adds	r3, #4
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	ed97 7a05 	vldr	s14, [r7, #20]
 8003244:	edd7 7a04 	vldr	s15, [r7, #16]
 8003248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800324c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003250:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003254:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003260:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003264:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003270:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003274:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003280:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003284:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	ed97 7a07 	vldr	s14, [r7, #28]
 800329e:	edd7 7a06 	vldr	s15, [r7, #24]
 80032a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80032aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	3304      	adds	r3, #4
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80032ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80032be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80032c6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80032ca:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80032d6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032da:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80032de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80032e6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80032ea:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80032ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80032f6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032fa:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	ed97 7a07 	vldr	s14, [r7, #28]
 8003314:	edd7 7a06 	vldr	s15, [r7, #24]
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	3304      	adds	r3, #4
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003330:	edd7 7a04 	vldr	s15, [r7, #16]
 8003334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003338:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800333c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003344:	4413      	add	r3, r2
 8003346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003350:	429a      	cmp	r2, r3
 8003352:	f4ff abba 	bcc.w	8002aca <arm_radix8_butterfly_f32+0x746>

         j++;
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335a:	3301      	adds	r3, #1
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8003360:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003368:	429a      	cmp	r2, r3
 800336a:	f4ff ab2c 	bcc.w	80029c6 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003378:	2b07      	cmp	r3, #7
 800337a:	f63f a813 	bhi.w	80023a4 <arm_radix8_butterfly_f32+0x20>
}
 800337e:	e000      	b.n	8003382 <arm_radix8_butterfly_f32+0xffe>
         break;
 8003380:	bf00      	nop
}
 8003382:	bf00      	nop
 8003384:	37f4      	adds	r7, #244	@ 0xf4
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003390:	b480      	push	{r7}
 8003392:	b095      	sub	sp, #84	@ 0x54
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80033b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 80033b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ba:	3304      	adds	r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 80033c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 80033c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c8:	3304      	adds	r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 80033ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 80033d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80033e2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80033e6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80033f2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80033f6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80033fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fe:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8003402:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003406:	edd7 7a08 	vldr	s15, [r7, #32]
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	1d1a      	adds	r2, r3, #4
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8003420:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003424:	edd7 7a08 	vldr	s15, [r7, #32]
 8003428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800343e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4413      	add	r3, r2
 8003446:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 8003448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344a:	3308      	adds	r3, #8
 800344c:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800344e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003450:	3304      	adds	r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 8003456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 800345c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8003462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003464:	3304      	adds	r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 800346a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800346c:	1d1a      	adds	r2, r3, #4
 800346e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8003474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	64ba      	str	r2, [r7, #72]	@ 0x48
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 800347e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003482:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 800348e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003492:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800349e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80034a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034aa:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80034ae:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80034be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80034c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ca:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80034ce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034da:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80034de:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80034e2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80034e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80034ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	1d1a      	adds	r2, r3, #4
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003508:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800350c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003510:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003518:	edd7 7a06 	vldr	s15, [r7, #24]
 800351c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003520:	edd7 7a05 	vldr	s15, [r7, #20]
 8003524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003536:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800353a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800353c:	3308      	adds	r3, #8
 800353e:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	3b08      	subs	r3, #8
 8003544:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8003546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003548:	3b01      	subs	r3, #1
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 800354c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354e:	2b00      	cmp	r3, #0
 8003550:	f73f af7d 	bgt.w	800344e <stage_rfft_f32+0xbe>
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3754      	adds	r7, #84	@ 0x54
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003562:	b480      	push	{r7}
 8003564:	b095      	sub	sp, #84	@ 0x54
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8003584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 800358a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358c:	3304      	adds	r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8003592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003594:	3308      	adds	r3, #8
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8003598:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800359c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b2:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80035b6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80035ba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1d1a      	adds	r2, r3, #4
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d0:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80035d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	4413      	add	r3, r2
 80035dc:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 80035de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e0:	3308      	adds	r3, #8
 80035e2:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 80035e4:	e07e      	b.n	80036e4 <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80035e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e8:	3304      	adds	r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80035f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80035fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035fc:	3304      	adds	r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 8003602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 800360c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800360e:	1d1a      	adds	r2, r3, #4
 8003610:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 8003616:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800361a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800361e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003622:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 8003626:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800362a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800362e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003632:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8003636:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800363a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8003646:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800364a:	edd7 7a08 	vldr	s15, [r7, #32]
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8003656:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800365a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8003666:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800366a:	edd7 7a08 	vldr	s15, [r7, #32]
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003676:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800367a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800367e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003682:	edd7 7a07 	vldr	s15, [r7, #28]
 8003686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368a:	edd7 7a06 	vldr	s15, [r7, #24]
 800368e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800369c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80036a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80036a8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80036ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ce:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80036d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d4:	3308      	adds	r3, #8
 80036d6:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	3b08      	subs	r3, #8
 80036dc:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80036de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e0:	3b01      	subs	r3, #1
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 80036e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f73f af7d 	bgt.w	80035e6 <merge_rfft_f32+0x84>
   }

}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	3754      	adds	r7, #84	@ 0x54
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff23 	bl	8003562 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	2301      	movs	r3, #1
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7fe fc5b 	bl	8001fde <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8003728:	e00a      	b.n	8003740 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	2301      	movs	r3, #1
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f7fe fc54 	bl	8001fde <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff fe28 	bl	8003390 <stage_rfft_f32>
}
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <arm_rfft_fast_init_32_f32>:
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)

FAST_INIT_FUNC(32)

#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <arm_rfft_fast_init_32_f32+0x14>
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	e013      	b.n	8003784 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fdee 	bl	8002340 <arm_cfft_init_16_f32>
 8003764:	4603      	mov	r3, r0
 8003766:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003774:	e006      	b.n	8003784 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a03      	ldr	r2, [pc, #12]	@ (800378c <arm_rfft_fast_init_32_f32+0x44>)
 8003780:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	08016d88 	.word	0x08016d88

08003790 <arm_rfft_fast_init_64_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(64)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <arm_rfft_fast_init_64_f32+0x14>
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	e013      	b.n	80037cc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fda8 	bl	80022fc <arm_cfft_init_32_f32>
 80037ac:	4603      	mov	r3, r0
 80037ae:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 80037b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037bc:	e006      	b.n	80037cc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2240      	movs	r2, #64	@ 0x40
 80037c2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a03      	ldr	r2, [pc, #12]	@ (80037d4 <arm_rfft_fast_init_64_f32+0x44>)
 80037c8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	08016e08 	.word	0x08016e08

080037d8 <arm_rfft_fast_init_128_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(128)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <arm_rfft_fast_init_128_f32+0x14>
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	e013      	b.n	8003814 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fd62 	bl	80022b8 <arm_cfft_init_64_f32>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8003800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003804:	e006      	b.n	8003814 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a03      	ldr	r2, [pc, #12]	@ (800381c <arm_rfft_fast_init_128_f32+0x44>)
 8003810:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08016f08 	.word	0x08016f08

08003820 <arm_rfft_fast_init_256_f32>:
*/

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(256)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <arm_rfft_fast_init_256_f32+0x14>
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	e014      	b.n	800385e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd1c 	bl	8002274 <arm_cfft_init_128_f32>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	e007      	b.n	800385e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003854:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a03      	ldr	r2, [pc, #12]	@ (8003868 <arm_rfft_fast_init_256_f32+0x48>)
 800385a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	08017108 	.word	0x08017108

0800386c <arm_rfft_fast_init_512_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(512)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <arm_rfft_fast_init_512_f32+0x14>
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	e014      	b.n	80038aa <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fcd2 	bl	800222c <arm_cfft_init_256_f32>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800388c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	e007      	b.n	80038aa <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a03      	ldr	r2, [pc, #12]	@ (80038b4 <arm_rfft_fast_init_512_f32+0x48>)
 80038a6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	08017508 	.word	0x08017508

080038b8 <arm_rfft_fast_init_1024_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(1024)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <arm_rfft_fast_init_1024_f32+0x14>
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e014      	b.n	80038f6 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fc88 	bl	80021e4 <arm_cfft_init_512_f32>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80038e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e4:	e007      	b.n	80038f6 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ec:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a03      	ldr	r2, [pc, #12]	@ (8003900 <arm_rfft_fast_init_1024_f32+0x48>)
 80038f2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	08017d08 	.word	0x08017d08

08003904 <arm_rfft_fast_init_2048_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(2048)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <arm_rfft_fast_init_2048_f32+0x14>
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e014      	b.n	8003942 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fc3e 	bl	800219c <arm_cfft_init_1024_f32>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800392c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003930:	e007      	b.n	8003942 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003938:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a03      	ldr	r2, [pc, #12]	@ (800394c <arm_rfft_fast_init_2048_f32+0x48>)
 800393e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	08018d08 	.word	0x08018d08

08003950 <arm_rfft_fast_init_4096_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(4096)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <arm_rfft_fast_init_4096_f32+0x14>
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	e014      	b.n	800398e <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fbf4 	bl	8002154 <arm_cfft_init_2048_f32>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397c:	e007      	b.n	800398e <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003984:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a03      	ldr	r2, [pc, #12]	@ (8003998 <arm_rfft_fast_init_4096_f32+0x48>)
 800398a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	0801ad08 	.word	0x0801ad08

0800399c <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ae:	d023      	beq.n	80039f8 <arm_rfft_fast_init_f32+0x5c>
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b4:	dc50      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ba:	d023      	beq.n	8003a04 <arm_rfft_fast_init_f32+0x68>
 80039bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c0:	dc4a      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c6:	d023      	beq.n	8003a10 <arm_rfft_fast_init_f32+0x74>
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039cc:	dc44      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d2:	d023      	beq.n	8003a1c <arm_rfft_fast_init_f32+0x80>
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d8:	dc3e      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d023      	beq.n	8003a28 <arm_rfft_fast_init_f32+0x8c>
 80039e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e4:	dc38      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039e6:	2b80      	cmp	r3, #128	@ 0x80
 80039e8:	d024      	beq.n	8003a34 <arm_rfft_fast_init_f32+0x98>
 80039ea:	2b80      	cmp	r3, #128	@ 0x80
 80039ec:	dc34      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d02c      	beq.n	8003a4c <arm_rfft_fast_init_f32+0xb0>
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d024      	beq.n	8003a40 <arm_rfft_fast_init_f32+0xa4>
 80039f6:	e02f      	b.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffa9 	bl	8003950 <arm_rfft_fast_init_4096_f32>
 80039fe:	4603      	mov	r3, r0
 8003a00:	73fb      	strb	r3, [r7, #15]
    break;
 8003a02:	e02c      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff7d 	bl	8003904 <arm_rfft_fast_init_2048_f32>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a0e:	e026      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff51 	bl	80038b8 <arm_rfft_fast_init_1024_f32>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
    break;
 8003a1a:	e020      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ff25 	bl	800386c <arm_rfft_fast_init_512_f32>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
    break;
 8003a26:	e01a      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fef9 	bl	8003820 <arm_rfft_fast_init_256_f32>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]
    break;
 8003a32:	e014      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fecf 	bl	80037d8 <arm_rfft_fast_init_128_f32>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a3e:	e00e      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fea5 	bl	8003790 <arm_rfft_fast_init_64_f32>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
    break;
 8003a4a:	e008      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fe7b 	bl	8003748 <arm_rfft_fast_init_32_f32>
 8003a52:	4603      	mov	r3, r0
 8003a54:	73fb      	strb	r3, [r7, #15]
    break;
 8003a56:	e002      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e001      	b.n	8003a62 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <HAL_Init+0x40>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <HAL_Init+0x40>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <HAL_Init+0x40>)
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	@ (8003aac <HAL_Init+0x40>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f94f 	bl	8003d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f000 f808 	bl	8003ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa0:	f7fd f8ca 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00

08003ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ab8:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_InitTick+0x54>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <HAL_InitTick+0x58>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f967 	bl	8003da2 <HAL_SYSTICK_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00e      	b.n	8003afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d80a      	bhi.n	8003afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f000 f92f 	bl	8003d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af0:	4a06      	ldr	r2, [pc, #24]	@ (8003b0c <HAL_InitTick+0x5c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000008 	.word	0x20000008
 8003b08:	20000010 	.word	0x20000010
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <HAL_IncTick+0x20>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_IncTick+0x24>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	@ (8003b34 <HAL_IncTick+0x24>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000010 	.word	0x20000010
 8003b34:	20000330 	.word	0x20000330

08003b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <HAL_GetTick+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000330 	.word	0x20000330

08003b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff ffee 	bl	8003b38 <HAL_GetTick>
 8003b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d005      	beq.n	8003b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_Delay+0x44>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b76:	bf00      	nop
 8003b78:	f7ff ffde 	bl	8003b38 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d8f7      	bhi.n	8003b78 <HAL_Delay+0x28>
  {
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000010 	.word	0x20000010

08003b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be4:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	@ (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	@ (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	@ (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	@ 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	bf28      	it	cs
 8003caa:	2304      	movcs	r3, #4
 8003cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d902      	bls.n	8003cbc <NVIC_EncodePriority+0x30>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3b03      	subs	r3, #3
 8003cba:	e000      	b.n	8003cbe <NVIC_EncodePriority+0x32>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	401a      	ands	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	43d9      	mvns	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	4313      	orrs	r3, r2
         );
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d04:	d301      	bcc.n	8003d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00f      	b.n	8003d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d34 <SysTick_Config+0x40>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d12:	210f      	movs	r1, #15
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	f7ff ff8e 	bl	8003c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <SysTick_Config+0x40>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d22:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <SysTick_Config+0x40>)
 8003d24:	2207      	movs	r2, #7
 8003d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	e000e010 	.word	0xe000e010

08003d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff29 	bl	8003b98 <__NVIC_SetPriorityGrouping>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d60:	f7ff ff3e 	bl	8003be0 <__NVIC_GetPriorityGrouping>
 8003d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f7ff ff8e 	bl	8003c8c <NVIC_EncodePriority>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff5d 	bl	8003c38 <__NVIC_SetPriority>
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ff31 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffa2 	bl	8003cf4 <SysTick_Config>
 8003db0:	4603      	mov	r3, r0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e16b      	b.n	80040b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	f040 815a 	bne.w	80040aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d005      	beq.n	8003e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d130      	bne.n	8003e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e44:	2201      	movs	r2, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 0201 	and.w	r2, r3, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d017      	beq.n	8003eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2203      	movs	r2, #3
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d123      	bne.n	8003f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	08da      	lsrs	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3208      	adds	r2, #8
 8003ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	220f      	movs	r2, #15
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	08da      	lsrs	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3208      	adds	r2, #8
 8003efa:	69b9      	ldr	r1, [r7, #24]
 8003efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0203 	and.w	r2, r3, #3
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80b4 	beq.w	80040aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	4b60      	ldr	r3, [pc, #384]	@ (80040c8 <HAL_GPIO_Init+0x30c>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80040c8 <HAL_GPIO_Init+0x30c>)
 8003f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f52:	4b5d      	ldr	r3, [pc, #372]	@ (80040c8 <HAL_GPIO_Init+0x30c>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80040cc <HAL_GPIO_Init+0x310>)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	3302      	adds	r3, #2
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	220f      	movs	r2, #15
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a52      	ldr	r2, [pc, #328]	@ (80040d0 <HAL_GPIO_Init+0x314>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d02b      	beq.n	8003fe2 <HAL_GPIO_Init+0x226>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a51      	ldr	r2, [pc, #324]	@ (80040d4 <HAL_GPIO_Init+0x318>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d025      	beq.n	8003fde <HAL_GPIO_Init+0x222>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a50      	ldr	r2, [pc, #320]	@ (80040d8 <HAL_GPIO_Init+0x31c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01f      	beq.n	8003fda <HAL_GPIO_Init+0x21e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80040dc <HAL_GPIO_Init+0x320>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d019      	beq.n	8003fd6 <HAL_GPIO_Init+0x21a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80040e0 <HAL_GPIO_Init+0x324>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x216>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4d      	ldr	r2, [pc, #308]	@ (80040e4 <HAL_GPIO_Init+0x328>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00d      	beq.n	8003fce <HAL_GPIO_Init+0x212>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80040e8 <HAL_GPIO_Init+0x32c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_GPIO_Init+0x20e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80040ec <HAL_GPIO_Init+0x330>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_GPIO_Init+0x20a>
 8003fc2:	2307      	movs	r3, #7
 8003fc4:	e00e      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	e00c      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fca:	2306      	movs	r3, #6
 8003fcc:	e00a      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fce:	2305      	movs	r3, #5
 8003fd0:	e008      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	e006      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e004      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e002      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_GPIO_Init+0x228>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f002 0203 	and.w	r2, r2, #3
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	4093      	lsls	r3, r2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff4:	4935      	ldr	r1, [pc, #212]	@ (80040cc <HAL_GPIO_Init+0x310>)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004002:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004026:	4a32      	ldr	r2, [pc, #200]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800402c:	4b30      	ldr	r3, [pc, #192]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004050:	4a27      	ldr	r2, [pc, #156]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004056:	4b26      	ldr	r3, [pc, #152]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407a:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004080:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a4:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <HAL_GPIO_Init+0x334>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3301      	adds	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b0f      	cmp	r3, #15
 80040b4:	f67f ae90 	bls.w	8003dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	3724      	adds	r7, #36	@ 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020400 	.word	0x40020400
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40021400 	.word	0x40021400
 80040e8:	40021800 	.word	0x40021800
 80040ec:	40021c00 	.word	0x40021c00
 80040f0:	40013c00 	.word	0x40013c00

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004110:	e003      	b.n	800411a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	041a      	lsls	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	619a      	str	r2, [r3, #24]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af02      	add	r7, sp, #8
 800412c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e059      	b.n	80041ec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f006 ff9a 	bl	800b08c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2203      	movs	r2, #3
 800415c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004166:	d102      	bne.n	800416e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f003 fdb4 	bl	8007ce0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7c1a      	ldrb	r2, [r3, #16]
 8004180:	f88d 2000 	strb.w	r2, [sp]
 8004184:	3304      	adds	r3, #4
 8004186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004188:	f003 fd35 	bl	8007bf6 <USB_CoreInit>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e026      	b.n	80041ec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f003 fdac 	bl	8007d02 <USB_SetCurrentMode>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e017      	b.n	80041ec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7c1a      	ldrb	r2, [r3, #16]
 80041c4:	f88d 2000 	strb.w	r2, [sp]
 80041c8:	3304      	adds	r3, #4
 80041ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041cc:	f003 ff4e 	bl	800806c <USB_HostInit>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e004      	b.n	80041ec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b08b      	sub	sp, #44	@ 0x2c
 80041f8:	af04      	add	r7, sp, #16
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	70fb      	strb	r3, [r7, #3]
 8004206:	460b      	mov	r3, r1
 8004208:	70bb      	strb	r3, [r7, #2]
 800420a:	4613      	mov	r3, r2
 800420c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800420e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004210:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_HCD_HC_Init+0x2c>
 800421c:	2302      	movs	r3, #2
 800421e:	e09d      	b.n	800435c <HAL_HCD_HC_Init+0x168>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	3319      	adds	r3, #25
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3314      	adds	r3, #20
 800424c:	787a      	ldrb	r2, [r7, #1]
 800424e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3315      	adds	r3, #21
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3326      	adds	r3, #38	@ 0x26
 8004274:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004278:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	78bb      	ldrb	r3, [r7, #2]
 800427e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004282:	b2d8      	uxtb	r0, r3
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3316      	adds	r3, #22
 8004292:	4602      	mov	r2, r0
 8004294:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fbc8 	bl	8004a30 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80042a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da0a      	bge.n	80042be <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	3317      	adds	r3, #23
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e009      	b.n	80042d2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3317      	adds	r3, #23
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f004 f82c 	bl	8008334 <USB_GetHostSpeed>
 80042dc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80042de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10b      	bne.n	80042fe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80042e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_HCD_HC_Init+0x10a>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80042f8:	d901      	bls.n	80042fe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80042fa:	23bc      	movs	r3, #188	@ 0xbc
 80042fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3318      	adds	r3, #24
 800430e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004312:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	b298      	uxth	r0, r3
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	3328      	adds	r3, #40	@ 0x28
 8004328:	4602      	mov	r2, r0
 800432a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	b29b      	uxth	r3, r3
 8004334:	787c      	ldrb	r4, [r7, #1]
 8004336:	78ba      	ldrb	r2, [r7, #2]
 8004338:	78f9      	ldrb	r1, [r7, #3]
 800433a:	9302      	str	r3, [sp, #8]
 800433c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4623      	mov	r3, r4
 800434a:	f004 f81b 	bl	8008384 <USB_HC_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd90      	pop	{r4, r7, pc}

08004364 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_HCD_HC_Halt+0x1e>
 800437e:	2302      	movs	r3, #2
 8004380:	e00f      	b.n	80043a2 <HAL_HCD_HC_Halt+0x3e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f004 fbad 	bl	8008af2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	70fb      	strb	r3, [r7, #3]
 80043be:	460b      	mov	r3, r1
 80043c0:	70bb      	strb	r3, [r7, #2]
 80043c2:	4613      	mov	r3, r2
 80043c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3317      	adds	r3, #23
 80043d6:	78ba      	ldrb	r2, [r7, #2]
 80043d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3326      	adds	r3, #38	@ 0x26
 80043ea:	787a      	ldrb	r2, [r7, #1]
 80043ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80043ee:	7c3b      	ldrb	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d114      	bne.n	800441e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	332a      	adds	r3, #42	@ 0x2a
 8004404:	2203      	movs	r2, #3
 8004406:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	3319      	adds	r3, #25
 8004418:	7f3a      	ldrb	r2, [r7, #28]
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e009      	b.n	8004432 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	332a      	adds	r3, #42	@ 0x2a
 800442e:	2202      	movs	r2, #2
 8004430:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004432:	787b      	ldrb	r3, [r7, #1]
 8004434:	2b03      	cmp	r3, #3
 8004436:	f200 8102 	bhi.w	800463e <HAL_HCD_HC_SubmitRequest+0x292>
 800443a:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <HAL_HCD_HC_SubmitRequest+0x94>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	08004629 	.word	0x08004629
 8004448:	08004515 	.word	0x08004515
 800444c:	0800459f 	.word	0x0800459f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004450:	7c3b      	ldrb	r3, [r7, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	f040 80f5 	bne.w	8004642 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004458:	78bb      	ldrb	r3, [r7, #2]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12d      	bne.n	80044ba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800445e:	8b3b      	ldrh	r3, [r7, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	333d      	adds	r3, #61	@ 0x3d
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	333d      	adds	r3, #61	@ 0x3d
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	332a      	adds	r3, #42	@ 0x2a
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80044a2:	e0ce      	b.n	8004642 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	332a      	adds	r3, #42	@ 0x2a
 80044b4:	2202      	movs	r2, #2
 80044b6:	701a      	strb	r2, [r3, #0]
      break;
 80044b8:	e0c3      	b.n	8004642 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	331a      	adds	r3, #26
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 80b8 	bne.w	8004642 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	333c      	adds	r3, #60	@ 0x3c
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	332a      	adds	r3, #42	@ 0x2a
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
      break;
 80044fc:	e0a1      	b.n	8004642 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	332a      	adds	r3, #42	@ 0x2a
 800450e:	2202      	movs	r2, #2
 8004510:	701a      	strb	r2, [r3, #0]
      break;
 8004512:	e096      	b.n	8004642 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004514:	78bb      	ldrb	r3, [r7, #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d120      	bne.n	800455c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	333d      	adds	r3, #61	@ 0x3d
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	332a      	adds	r3, #42	@ 0x2a
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004544:	e07e      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	332a      	adds	r3, #42	@ 0x2a
 8004556:	2202      	movs	r2, #2
 8004558:	701a      	strb	r2, [r3, #0]
      break;
 800455a:	e073      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	333c      	adds	r3, #60	@ 0x3c
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	332a      	adds	r3, #42	@ 0x2a
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
      break;
 8004586:	e05d      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	332a      	adds	r3, #42	@ 0x2a
 8004598:	2202      	movs	r2, #2
 800459a:	701a      	strb	r2, [r3, #0]
      break;
 800459c:	e052      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800459e:	78bb      	ldrb	r3, [r7, #2]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d120      	bne.n	80045e6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	333d      	adds	r3, #61	@ 0x3d
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	332a      	adds	r3, #42	@ 0x2a
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045ce:	e039      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	332a      	adds	r3, #42	@ 0x2a
 80045e0:	2202      	movs	r2, #2
 80045e2:	701a      	strb	r2, [r3, #0]
      break;
 80045e4:	e02e      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	333c      	adds	r3, #60	@ 0x3c
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	332a      	adds	r3, #42	@ 0x2a
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
      break;
 8004610:	e018      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	332a      	adds	r3, #42	@ 0x2a
 8004622:	2202      	movs	r2, #2
 8004624:	701a      	strb	r2, [r3, #0]
      break;
 8004626:	e00d      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	332a      	adds	r3, #42	@ 0x2a
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
      break;
 800463c:	e002      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004642:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	332c      	adds	r3, #44	@ 0x2c
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	8b39      	ldrh	r1, [r7, #24]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4403      	add	r3, r0
 8004668:	3334      	adds	r3, #52	@ 0x34
 800466a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334c      	adds	r3, #76	@ 0x4c
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3338      	adds	r3, #56	@ 0x38
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3315      	adds	r3, #21
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	334d      	adds	r3, #77	@ 0x4d
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	3310      	adds	r3, #16
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	1d19      	adds	r1, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	799b      	ldrb	r3, [r3, #6]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f003 ff80 	bl	80085dc <USB_HC_StartXfer>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop

080046e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f003 fc75 	bl	8007fee <USB_GetMode>
 8004704:	4603      	mov	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 80fb 	bne.w	8004902 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f003 fc38 	bl	8007f86 <USB_ReadInterrupts>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80f1 	beq.w	8004900 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f003 fc2f 	bl	8007f86 <USB_ReadInterrupts>
 8004728:	4603      	mov	r3, r0
 800472a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800472e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004732:	d104      	bne.n	800473e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800473c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f003 fc1f 	bl	8007f86 <USB_ReadInterrupts>
 8004748:	4603      	mov	r3, r0
 800474a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800474e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004752:	d104      	bne.n	800475e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800475c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 fc0f 	bl	8007f86 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800476e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004772:	d104      	bne.n	800477e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800477c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fbff 	bl	8007f86 <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d103      	bne.n	800479a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2202      	movs	r2, #2
 8004798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f003 fbf1 	bl	8007f86 <USB_ReadInterrupts>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ae:	d120      	bne.n	80047f2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80047b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80047ca:	2110      	movs	r1, #16
 80047cc:	6938      	ldr	r0, [r7, #16]
 80047ce:	f003 fae4 	bl	8007d9a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80047d2:	6938      	ldr	r0, [r7, #16]
 80047d4:	f003 fb13 	bl	8007dfe <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7a5b      	ldrb	r3, [r3, #9]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d105      	bne.n	80047ec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f003 fd04 	bl	80081f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f006 fccb 	bl	800b188 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 fbc5 	bl	8007f86 <USB_ReadInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004806:	d102      	bne.n	800480e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f001 fd4d 	bl	80062a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 fbb7 	bl	8007f86 <USB_ReadInterrupts>
 8004818:	4603      	mov	r3, r0
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b08      	cmp	r3, #8
 8004820:	d106      	bne.n	8004830 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f006 fc94 	bl	800b150 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2208      	movs	r2, #8
 800482e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fba6 	bl	8007f86 <USB_ReadInterrupts>
 800483a:	4603      	mov	r3, r0
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004844:	d139      	bne.n	80048ba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f004 f940 	bl	8008ad0 <USB_HC_ReadInterrupt>
 8004850:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e025      	b.n	80048a4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d018      	beq.n	800489e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800487e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004882:	d106      	bne.n	8004892 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f905 	bl	8004a9a <HCD_HC_IN_IRQHandler>
 8004890:	e005      	b.n	800489e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 ff67 	bl	800576c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	3301      	adds	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	795b      	ldrb	r3, [r3, #5]
 80048a8:	461a      	mov	r2, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d3d3      	bcc.n	8004858 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 fb61 	bl	8007f86 <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d101      	bne.n	80048d2 <HAL_HCD_IRQHandler+0x1ea>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_HCD_IRQHandler+0x1ec>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d014      	beq.n	8004902 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0210 	bic.w	r2, r2, #16
 80048e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 fbfe 	bl	80060ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0210 	orr.w	r2, r2, #16
 80048fc:	619a      	str	r2, [r3, #24]
 80048fe:	e000      	b.n	8004902 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004900:	bf00      	nop
    }
  }
}
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_HCD_Start+0x16>
 800491a:	2302      	movs	r3, #2
 800491c:	e013      	b.n	8004946 <HAL_HCD_Start+0x3e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f003 fcc8 	bl	80082c2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f003 f9c1 	bl	8007cbe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_HCD_Stop+0x16>
 8004960:	2302      	movs	r3, #2
 8004962:	e00d      	b.n	8004980 <HAL_HCD_Stop+0x32>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f004 fa1b 	bl	8008dac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f003 fc6a 	bl	800826e <USB_ResetPort>
 800499a:	4603      	mov	r3, r0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	334c      	adds	r3, #76	@ 0x4c
 80049c0:	781b      	ldrb	r3, [r3, #0]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3338      	adds	r3, #56	@ 0x38
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f003 fcac 	bl	8008362 <USB_GetCurrentFrame>
 8004a0a:	4603      	mov	r3, r0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f003 fc87 	bl	8008334 <USB_GetHostSpeed>
 8004a26:	4603      	mov	r3, r0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	331a      	adds	r3, #26
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	331b      	adds	r3, #27
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	3325      	adds	r3, #37	@ 0x25
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3324      	adds	r3, #36	@ 0x24
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f003 fa77 	bl	8007fac <USB_ReadChInterrupts>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d11a      	bne.n	8004afe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	334d      	adds	r3, #77	@ 0x4d
 8004aea:	2207      	movs	r2, #7
 8004aec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 fffb 	bl	8008af2 <USB_HC_Halt>
 8004afc:	e09e      	b.n	8004c3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f003 fa50 	bl	8007fac <USB_ReadChInterrupts>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b16:	d11b      	bne.n	8004b50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b24:	461a      	mov	r2, r3
 8004b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	334d      	adds	r3, #77	@ 0x4d
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f003 ffd2 	bl	8008af2 <USB_HC_Halt>
 8004b4e:	e075      	b.n	8004c3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f003 fa27 	bl	8007fac <USB_ReadChInterrupts>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d11a      	bne.n	8004b9e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b74:	461a      	mov	r2, r3
 8004b76:	2308      	movs	r3, #8
 8004b78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	334d      	adds	r3, #77	@ 0x4d
 8004b8a:	2206      	movs	r2, #6
 8004b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f003 ffab 	bl	8008af2 <USB_HC_Halt>
 8004b9c:	e04e      	b.n	8004c3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f003 fa00 	bl	8007fac <USB_ReadChInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb6:	d11b      	bne.n	8004bf0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	334d      	adds	r3, #77	@ 0x4d
 8004bdc:	2209      	movs	r2, #9
 8004bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f003 ff82 	bl	8008af2 <USB_HC_Halt>
 8004bee:	e025      	b.n	8004c3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f003 f9d7 	bl	8007fac <USB_ReadChInterrupts>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	d119      	bne.n	8004c3c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c14:	461a      	mov	r2, r3
 8004c16:	2380      	movs	r3, #128	@ 0x80
 8004c18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	334d      	adds	r3, #77	@ 0x4d
 8004c2a:	2207      	movs	r2, #7
 8004c2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f003 ff5b 	bl	8008af2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 f9b1 	bl	8007fac <USB_ReadChInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c54:	d112      	bne.n	8004c7c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f003 ff47 	bl	8008af2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c70:	461a      	mov	r2, r3
 8004c72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c76:	6093      	str	r3, [r2, #8]
 8004c78:	f000 bd75 	b.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f003 f991 	bl	8007fac <USB_ReadChInterrupts>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f040 8128 	bne.w	8004ee6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	331b      	adds	r3, #27
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d119      	bne.n	8004cf2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	331b      	adds	r3, #27
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	799b      	ldrb	r3, [r3, #6]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01b      	beq.n	8004d32 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3330      	adds	r3, #48	@ 0x30
 8004d0a:	6819      	ldr	r1, [r3, #0]
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	1ac9      	subs	r1, r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4403      	add	r3, r0
 8004d2e:	3338      	adds	r3, #56	@ 0x38
 8004d30:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	334d      	adds	r3, #77	@ 0x4d
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d46:	78fa      	ldrb	r2, [r7, #3]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	3344      	adds	r3, #68	@ 0x44
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d66:	461a      	mov	r2, r3
 8004d68:	2301      	movs	r3, #1
 8004d6a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3326      	adds	r3, #38	@ 0x26
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3326      	adds	r3, #38	@ 0x26
 8004d92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d110      	bne.n	8004dba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f003 fea6 	bl	8008af2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db2:	461a      	mov	r2, r3
 8004db4:	2310      	movs	r3, #16
 8004db6:	6093      	str	r3, [r2, #8]
 8004db8:	e03d      	b.n	8004e36 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	3326      	adds	r3, #38	@ 0x26
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d00a      	beq.n	8004de6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3326      	adds	r3, #38	@ 0x26
 8004de0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d127      	bne.n	8004e36 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e04:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	334c      	adds	r3, #76	@ 0x4c
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	334c      	adds	r3, #76	@ 0x4c
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f006 f9b7 	bl	800b1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	799b      	ldrb	r3, [r3, #6]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d13b      	bne.n	8004eb6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3338      	adds	r3, #56	@ 0x38
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4403      	add	r3, r0
 8004e5e:	3328      	adds	r3, #40	@ 0x28
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	440b      	add	r3, r1
 8004e64:	1e59      	subs	r1, r3, #1
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4403      	add	r3, r0
 8004e74:	3328      	adds	r3, #40	@ 0x28
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8470 	beq.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	333c      	adds	r3, #60	@ 0x3c
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	f083 0301 	eor.w	r3, r3, #1
 8004e9e:	b2d8      	uxtb	r0, r3
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	333c      	adds	r3, #60	@ 0x3c
 8004eae:	4602      	mov	r2, r0
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	f000 bc58 	b.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	333c      	adds	r3, #60	@ 0x3c
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	f083 0301 	eor.w	r3, r3, #1
 8004ece:	b2d8      	uxtb	r0, r3
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	333c      	adds	r3, #60	@ 0x3c
 8004ede:	4602      	mov	r2, r0
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	f000 bc40 	b.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 f85c 	bl	8007fac <USB_ReadChInterrupts>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d131      	bne.n	8004f62 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	331a      	adds	r3, #26
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	f040 841f 	bne.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	331b      	adds	r3, #27
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	334d      	adds	r3, #77	@ 0x4d
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	4611      	mov	r1, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f003 fdca 	bl	8008af2 <USB_HC_Halt>
 8004f5e:	f000 bc02 	b.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 f81e 	bl	8007fac <USB_ReadChInterrupts>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	f040 8305 	bne.w	8005586 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	334d      	adds	r3, #77	@ 0x4d
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d114      	bne.n	8004fce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	334d      	adds	r3, #77	@ 0x4d
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	334c      	adds	r3, #76	@ 0x4c
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e2cc      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	334d      	adds	r3, #77	@ 0x4d
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b06      	cmp	r3, #6
 8004fe2:	d114      	bne.n	800500e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	334d      	adds	r3, #77	@ 0x4d
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	334c      	adds	r3, #76	@ 0x4c
 8005008:	2205      	movs	r2, #5
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e2ac      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	334d      	adds	r3, #77	@ 0x4d
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b07      	cmp	r3, #7
 8005022:	d00b      	beq.n	800503c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	334d      	adds	r3, #77	@ 0x4d
 8005034:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005036:	2b09      	cmp	r3, #9
 8005038:	f040 80a6 	bne.w	8005188 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	334d      	adds	r3, #77	@ 0x4d
 800504c:	2202      	movs	r2, #2
 800504e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3344      	adds	r3, #68	@ 0x44
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1c59      	adds	r1, r3, #1
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4403      	add	r3, r0
 8005070:	3344      	adds	r3, #68	@ 0x44
 8005072:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	3344      	adds	r3, #68	@ 0x44
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d943      	bls.n	8005112 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3344      	adds	r3, #68	@ 0x44
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	331a      	adds	r3, #26
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d123      	bne.n	80050fc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80050b4:	78fa      	ldrb	r2, [r7, #3]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	331b      	adds	r3, #27
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	331c      	adds	r3, #28
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	334c      	adds	r3, #76	@ 0x4c
 800510c:	2204      	movs	r2, #4
 800510e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005110:	e229      	b.n	8005566 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	334c      	adds	r3, #76	@ 0x4c
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3326      	adds	r3, #38	@ 0x26
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	3326      	adds	r3, #38	@ 0x26
 800514c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800514e:	2b02      	cmp	r3, #2
 8005150:	f040 8209 	bne.w	8005566 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800516a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005172:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005186:	e1ee      	b.n	8005566 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	334d      	adds	r3, #77	@ 0x4d
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b05      	cmp	r3, #5
 800519c:	f040 80c8 	bne.w	8005330 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	334d      	adds	r3, #77	@ 0x4d
 80051b0:	2202      	movs	r2, #2
 80051b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	331b      	adds	r3, #27
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f040 81ce 	bne.w	8005568 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3326      	adds	r3, #38	@ 0x26
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d16b      	bne.n	80052ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3348      	adds	r3, #72	@ 0x48
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	1c59      	adds	r1, r3, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4403      	add	r3, r0
 8005202:	3348      	adds	r3, #72	@ 0x48
 8005204:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	3348      	adds	r3, #72	@ 0x48
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d943      	bls.n	80052a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	3348      	adds	r3, #72	@ 0x48
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	331b      	adds	r3, #27
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	3344      	adds	r3, #68	@ 0x44
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d809      	bhi.n	800526e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	331c      	adds	r3, #28
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	440a      	add	r2, r1
 8005284:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800528c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	334c      	adds	r3, #76	@ 0x4c
 800529e:	2204      	movs	r2, #4
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e014      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	334c      	adds	r3, #76	@ 0x4c
 80052b4:	2202      	movs	r2, #2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e009      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	334c      	adds	r3, #76	@ 0x4c
 80052ca:	2202      	movs	r2, #2
 80052cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3326      	adds	r3, #38	@ 0x26
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3326      	adds	r3, #38	@ 0x26
 80052f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	f040 8136 	bne.w	8005568 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005312:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800531a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005328:	461a      	mov	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e11b      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	334d      	adds	r3, #77	@ 0x4d
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b03      	cmp	r3, #3
 8005344:	f040 8081 	bne.w	800544a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	334d      	adds	r3, #77	@ 0x4d
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	331b      	adds	r3, #27
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	f040 80fa 	bne.w	8005568 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	334c      	adds	r3, #76	@ 0x4c
 8005384:	2202      	movs	r2, #2
 8005386:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	440a      	add	r2, r1
 800539e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053c6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053e2:	f023 0320 	bic.w	r3, r3, #32
 80053e6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3326      	adds	r3, #38	@ 0x26
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3326      	adds	r3, #38	@ 0x26
 800540e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005410:	2b02      	cmp	r3, #2
 8005412:	f040 80a9 	bne.w	8005568 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005434:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e08e      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	334d      	adds	r3, #77	@ 0x4d
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d143      	bne.n	80054e8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	334d      	adds	r3, #77	@ 0x4d
 8005470:	2202      	movs	r2, #2
 8005472:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	334c      	adds	r3, #76	@ 0x4c
 8005484:	2202      	movs	r2, #2
 8005486:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3326      	adds	r3, #38	@ 0x26
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3326      	adds	r3, #38	@ 0x26
 80054ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d159      	bne.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e0:	461a      	mov	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e03f      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	334d      	adds	r3, #77	@ 0x4d
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d126      	bne.n	800554c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	334d      	adds	r3, #77	@ 0x4d
 800550e:	2202      	movs	r2, #2
 8005510:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	3344      	adds	r3, #68	@ 0x44
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4403      	add	r3, r0
 8005532:	3344      	adds	r3, #68	@ 0x44
 8005534:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	334c      	adds	r3, #76	@ 0x4c
 8005546:	2204      	movs	r2, #4
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e00d      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	334d      	adds	r3, #77	@ 0x4d
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b02      	cmp	r3, #2
 8005560:	f000 8100 	beq.w	8005764 <HCD_HC_IN_IRQHandler+0xcca>
 8005564:	e000      	b.n	8005568 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005566:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	334c      	adds	r3, #76	@ 0x4c
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f005 fe10 	bl	800b1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005584:	e0ef      	b.n	8005766 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f002 fd0c 	bl	8007fac <USB_ReadChInterrupts>
 8005594:	4603      	mov	r3, r0
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d12f      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055aa:	461a      	mov	r2, r3
 80055ac:	2340      	movs	r3, #64	@ 0x40
 80055ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	334d      	adds	r3, #77	@ 0x4d
 80055c0:	2205      	movs	r2, #5
 80055c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	331a      	adds	r3, #26
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80055da:	78fa      	ldrb	r2, [r7, #3]
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3344      	adds	r3, #68	@ 0x44
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f003 fa7b 	bl	8008af2 <USB_HC_Halt>
 80055fc:	e0b3      	b.n	8005766 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f002 fcd0 	bl	8007fac <USB_ReadChInterrupts>
 800560c:	4603      	mov	r3, r0
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b10      	cmp	r3, #16
 8005614:	f040 80a7 	bne.w	8005766 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	3326      	adds	r3, #38	@ 0x26
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d11b      	bne.n	8005666 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3344      	adds	r3, #68	@ 0x44
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	334d      	adds	r3, #77	@ 0x4d
 8005652:	2204      	movs	r2, #4
 8005654:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f003 fa47 	bl	8008af2 <USB_HC_Halt>
 8005664:	e03f      	b.n	80056e6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3326      	adds	r3, #38	@ 0x26
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3326      	adds	r3, #38	@ 0x26
 800568c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800568e:	2b02      	cmp	r3, #2
 8005690:	d129      	bne.n	80056e6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	3344      	adds	r3, #68	@ 0x44
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	799b      	ldrb	r3, [r3, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HCD_HC_IN_IRQHandler+0xc2a>
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	331b      	adds	r3, #27
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d110      	bne.n	80056e6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	334d      	adds	r3, #77	@ 0x4d
 80056d4:	2204      	movs	r2, #4
 80056d6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 fa06 	bl	8008af2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	331b      	adds	r3, #27
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d129      	bne.n	8005750 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	331b      	adds	r3, #27
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	440a      	add	r2, r1
 8005726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800572a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	440a      	add	r2, r1
 8005746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800574a:	f043 0320 	orr.w	r3, r3, #32
 800574e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	2310      	movs	r3, #16
 8005760:	6093      	str	r3, [r2, #8]
 8005762:	e000      	b.n	8005766 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005764:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f002 fc0e 	bl	8007fac <USB_ReadChInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d11b      	bne.n	80057d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a6:	461a      	mov	r2, r3
 80057a8:	2304      	movs	r3, #4
 80057aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80057ac:	78fa      	ldrb	r2, [r7, #3]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	334d      	adds	r3, #77	@ 0x4d
 80057bc:	2207      	movs	r2, #7
 80057be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f003 f992 	bl	8008af2 <USB_HC_Halt>
 80057ce:	f000 bc89 	b.w	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f002 fbe6 	bl	8007fac <USB_ReadChInterrupts>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	f040 8082 	bne.w	80058f0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f8:	461a      	mov	r2, r3
 80057fa:	2320      	movs	r3, #32
 80057fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3319      	adds	r3, #25
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d124      	bne.n	800585e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	3319      	adds	r3, #25
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	334c      	adds	r3, #76	@ 0x4c
 8005838:	2202      	movs	r2, #2
 800583a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	334d      	adds	r3, #77	@ 0x4d
 800584c:	2203      	movs	r2, #3
 800584e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f003 f94a 	bl	8008af2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	331a      	adds	r3, #26
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	f040 8437 	bne.w	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	331b      	adds	r3, #27
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 842b 	bne.w	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3326      	adds	r3, #38	@ 0x26
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d009      	beq.n	80058b8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	331b      	adds	r3, #27
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	334d      	adds	r3, #77	@ 0x4d
 80058c8:	2203      	movs	r2, #3
 80058ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	4611      	mov	r1, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f003 f90c 	bl	8008af2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	3344      	adds	r3, #68	@ 0x44
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e3f9      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fb57 	bl	8007fac <USB_ReadChInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005908:	d111      	bne.n	800592e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005916:	461a      	mov	r2, r3
 8005918:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800591c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f003 f8e3 	bl	8008af2 <USB_HC_Halt>
 800592c:	e3da      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f002 fb38 	bl	8007fac <USB_ReadChInterrupts>
 800593c:	4603      	mov	r3, r0
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d168      	bne.n	8005a18 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3344      	adds	r3, #68	@ 0x44
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f002 fb22 	bl	8007fac <USB_ReadChInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	d112      	bne.n	8005998 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3319      	adds	r3, #25
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005992:	461a      	mov	r2, r3
 8005994:	2340      	movs	r3, #64	@ 0x40
 8005996:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	331b      	adds	r3, #27
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d019      	beq.n	80059e2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	331b      	adds	r3, #27
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	78fa      	ldrb	r2, [r7, #3]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ee:	461a      	mov	r2, r3
 80059f0:	2301      	movs	r3, #1
 80059f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	334d      	adds	r3, #77	@ 0x4d
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f003 f86e 	bl	8008af2 <USB_HC_Halt>
 8005a16:	e365      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 fac3 	bl	8007fac <USB_ReadChInterrupts>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d139      	bne.n	8005aa4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	334d      	adds	r3, #77	@ 0x4d
 8005a40:	2205      	movs	r2, #5
 8005a42:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	331a      	adds	r3, #26
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3319      	adds	r3, #25
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3344      	adds	r3, #68	@ 0x44
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f003 f831 	bl	8008af2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2340      	movs	r3, #64	@ 0x40
 8005aa0:	6093      	str	r3, [r2, #8]
 8005aa2:	e31f      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f002 fa7d 	bl	8007fac <USB_ReadChInterrupts>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d11a      	bne.n	8005af2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2308      	movs	r3, #8
 8005acc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	334d      	adds	r3, #77	@ 0x4d
 8005ade:	2206      	movs	r2, #6
 8005ae0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f003 f801 	bl	8008af2 <USB_HC_Halt>
 8005af0:	e2f8      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f002 fa56 	bl	8007fac <USB_ReadChInterrupts>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d144      	bne.n	8005b94 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005b0a:	78fa      	ldrb	r2, [r7, #3]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3344      	adds	r3, #68	@ 0x44
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	334d      	adds	r3, #77	@ 0x4d
 8005b2e:	2204      	movs	r2, #4
 8005b30:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3319      	adds	r3, #25
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d114      	bne.n	8005b72 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3318      	adds	r3, #24
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3319      	adds	r3, #25
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 ffb9 	bl	8008af2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2310      	movs	r3, #16
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	e2a7      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 fa05 	bl	8007fac <USB_ReadChInterrupts>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba8:	2b80      	cmp	r3, #128	@ 0x80
 8005baa:	f040 8083 	bne.w	8005cb4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	799b      	ldrb	r3, [r3, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d111      	bne.n	8005bda <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	334d      	adds	r3, #77	@ 0x4d
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f002 ff8d 	bl	8008af2 <USB_HC_Halt>
 8005bd8:	e062      	b.n	8005ca0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3344      	adds	r3, #68	@ 0x44
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c59      	adds	r1, r3, #1
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4403      	add	r3, r0
 8005bfa:	3344      	adds	r3, #68	@ 0x44
 8005bfc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3344      	adds	r3, #68	@ 0x44
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d922      	bls.n	8005c5a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	3344      	adds	r3, #68	@ 0x44
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	334c      	adds	r3, #76	@ 0x4c
 8005c38:	2204      	movs	r2, #4
 8005c3a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	334c      	adds	r3, #76	@ 0x4c
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f005 faa6 	bl	800b1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c58:	e022      	b.n	8005ca0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	334c      	adds	r3, #76	@ 0x4c
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c84:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c8c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cac:	461a      	mov	r2, r3
 8005cae:	2380      	movs	r3, #128	@ 0x80
 8005cb0:	6093      	str	r3, [r2, #8]
 8005cb2:	e217      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f002 f975 	bl	8007fac <USB_ReadChInterrupts>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ccc:	d11b      	bne.n	8005d06 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	334d      	adds	r3, #77	@ 0x4d
 8005cde:	2209      	movs	r2, #9
 8005ce0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f002 ff01 	bl	8008af2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d02:	6093      	str	r3, [r2, #8]
 8005d04:	e1ee      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f002 f94c 	bl	8007fac <USB_ReadChInterrupts>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	f040 81df 	bne.w	80060de <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2302      	movs	r3, #2
 8005d30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	334d      	adds	r3, #77	@ 0x4d
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	f040 8093 	bne.w	8005e70 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	334d      	adds	r3, #77	@ 0x4d
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	334c      	adds	r3, #76	@ 0x4c
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3326      	adds	r3, #38	@ 0x26
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d00b      	beq.n	8005da0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	3326      	adds	r3, #38	@ 0x26
 8005d98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	f040 8190 	bne.w	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	799b      	ldrb	r3, [r3, #6]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d115      	bne.n	8005dd4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	333d      	adds	r3, #61	@ 0x3d
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	f083 0301 	eor.w	r3, r3, #1
 8005dc0:	b2d8      	uxtb	r0, r3
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	333d      	adds	r3, #61	@ 0x3d
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	799b      	ldrb	r3, [r3, #6]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	f040 8171 	bne.w	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
 8005dde:	78fa      	ldrb	r2, [r7, #3]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3334      	adds	r3, #52	@ 0x34
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8165 	beq.w	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	3334      	adds	r3, #52	@ 0x34
 8005e06:	6819      	ldr	r1, [r3, #0]
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4403      	add	r3, r0
 8005e16:	3328      	adds	r3, #40	@ 0x28
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	440b      	add	r3, r1
 8005e1c:	1e59      	subs	r1, r3, #1
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4403      	add	r3, r0
 8005e2c:	3328      	adds	r3, #40	@ 0x28
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e34:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 813f 	beq.w	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	333d      	adds	r3, #61	@ 0x3d
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	f083 0301 	eor.w	r3, r3, #1
 8005e5a:	b2d8      	uxtb	r0, r3
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	333d      	adds	r3, #61	@ 0x3d
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e127      	b.n	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	334d      	adds	r3, #77	@ 0x4d
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d120      	bne.n	8005ec8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	334d      	adds	r3, #77	@ 0x4d
 8005e96:	2202      	movs	r2, #2
 8005e98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	331b      	adds	r3, #27
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 8107 	bne.w	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	334c      	adds	r3, #76	@ 0x4c
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e0fb      	b.n	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	334d      	adds	r3, #77	@ 0x4d
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d13a      	bne.n	8005f54 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	334d      	adds	r3, #77	@ 0x4d
 8005eee:	2202      	movs	r2, #2
 8005ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	334c      	adds	r3, #76	@ 0x4c
 8005f02:	2202      	movs	r2, #2
 8005f04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	331b      	adds	r3, #27
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 80d1 	bne.w	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	331b      	adds	r3, #27
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f50:	6053      	str	r3, [r2, #4]
 8005f52:	e0b5      	b.n	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	334d      	adds	r3, #77	@ 0x4d
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d114      	bne.n	8005f94 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	334d      	adds	r3, #77	@ 0x4d
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	334c      	adds	r3, #76	@ 0x4c
 8005f8e:	2202      	movs	r2, #2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e095      	b.n	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	334d      	adds	r3, #77	@ 0x4d
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b06      	cmp	r3, #6
 8005fa8:	d114      	bne.n	8005fd4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	334d      	adds	r3, #77	@ 0x4d
 8005fba:	2202      	movs	r2, #2
 8005fbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	334c      	adds	r3, #76	@ 0x4c
 8005fce:	2205      	movs	r2, #5
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e075      	b.n	80060c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	334d      	adds	r3, #77	@ 0x4d
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b07      	cmp	r3, #7
 8005fe8:	d00a      	beq.n	8006000 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	334d      	adds	r3, #77	@ 0x4d
 8005ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005ffc:	2b09      	cmp	r3, #9
 8005ffe:	d170      	bne.n	80060e2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	334d      	adds	r3, #77	@ 0x4d
 8006010:	2202      	movs	r2, #2
 8006012:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006014:	78fa      	ldrb	r2, [r7, #3]
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	3344      	adds	r3, #68	@ 0x44
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4403      	add	r3, r0
 8006034:	3344      	adds	r3, #68	@ 0x44
 8006036:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006038:	78fa      	ldrb	r2, [r7, #3]
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	3344      	adds	r3, #68	@ 0x44
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d914      	bls.n	8006078 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3344      	adds	r3, #68	@ 0x44
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	334c      	adds	r3, #76	@ 0x4c
 8006072:	2204      	movs	r2, #4
 8006074:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006076:	e022      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	334c      	adds	r3, #76	@ 0x4c
 8006088:	2202      	movs	r2, #2
 800608a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b8:	461a      	mov	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	334c      	adds	r3, #76	@ 0x4c
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f005 f864 	bl	800b1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060dc:	e002      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80060e2:	bf00      	nop
  }
}
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b08a      	sub	sp, #40	@ 0x28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	0c5b      	lsrs	r3, r3, #17
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800611e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d004      	beq.n	8006130 <HCD_RXQLVL_IRQHandler+0x46>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b05      	cmp	r3, #5
 800612a:	f000 80b6 	beq.w	800629a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800612e:	e0b7      	b.n	80062a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80b3 	beq.w	800629e <HCD_RXQLVL_IRQHandler+0x1b4>
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	332c      	adds	r3, #44	@ 0x2c
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80a7 	beq.w	800629e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4613      	mov	r3, r2
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3338      	adds	r3, #56	@ 0x38
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	18d1      	adds	r1, r2, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4613      	mov	r3, r2
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4403      	add	r3, r0
 8006174:	3334      	adds	r3, #52	@ 0x34
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4299      	cmp	r1, r3
 800617a:	f200 8083 	bhi.w	8006284 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4613      	mov	r3, r2
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	332c      	adds	r3, #44	@ 0x2c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	b292      	uxth	r2, r2
 8006198:	4619      	mov	r1, r3
 800619a:	f001 fe9c 	bl	8007ed6 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	4613      	mov	r3, r2
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	332c      	adds	r3, #44	@ 0x2c
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	18d1      	adds	r1, r2, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4613      	mov	r3, r2
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4403      	add	r3, r0
 80061c2:	332c      	adds	r3, #44	@ 0x2c
 80061c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4613      	mov	r3, r2
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	3338      	adds	r3, #56	@ 0x38
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	18d1      	adds	r1, r2, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4403      	add	r3, r0
 80061ea:	3338      	adds	r3, #56	@ 0x38
 80061ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	0cdb      	lsrs	r3, r3, #19
 80061fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006202:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4613      	mov	r3, r2
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	3328      	adds	r3, #40	@ 0x28
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4293      	cmp	r3, r2
 800621c:	d13f      	bne.n	800629e <HCD_RXQLVL_IRQHandler+0x1b4>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d03c      	beq.n	800629e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800623a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006242:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4613      	mov	r3, r2
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	333c      	adds	r3, #60	@ 0x3c
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f083 0301 	eor.w	r3, r3, #1
 800626c:	b2d8      	uxtb	r0, r3
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	333c      	adds	r3, #60	@ 0x3c
 800627e:	4602      	mov	r2, r0
 8006280:	701a      	strb	r2, [r3, #0]
      break;
 8006282:	e00c      	b.n	800629e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4613      	mov	r3, r2
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	334c      	adds	r3, #76	@ 0x4c
 8006294:	2204      	movs	r2, #4
 8006296:	701a      	strb	r2, [r3, #0]
      break;
 8006298:	e001      	b.n	800629e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800629a:	bf00      	nop
 800629c:	e000      	b.n	80062a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800629e:	bf00      	nop
  }
}
 80062a0:	bf00      	nop
 80062a2:	3728      	adds	r7, #40	@ 0x28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80062d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d10b      	bne.n	80062f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d102      	bne.n	80062f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f004 ff3e 	bl	800b16c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f043 0302 	orr.w	r3, r3, #2
 80062f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d132      	bne.n	8006368 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f043 0308 	orr.w	r3, r3, #8
 8006308:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b04      	cmp	r3, #4
 8006312:	d126      	bne.n	8006362 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7a5b      	ldrb	r3, [r3, #9]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d113      	bne.n	8006344 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006322:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006326:	d106      	bne.n	8006336 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2102      	movs	r1, #2
 800632e:	4618      	mov	r0, r3
 8006330:	f001 ff60 	bl	80081f4 <USB_InitFSLSPClkSel>
 8006334:	e011      	b.n	800635a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2101      	movs	r1, #1
 800633c:	4618      	mov	r0, r3
 800633e:	f001 ff59 	bl	80081f4 <USB_InitFSLSPClkSel>
 8006342:	e00a      	b.n	800635a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	79db      	ldrb	r3, [r3, #7]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d106      	bne.n	800635a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006352:	461a      	mov	r2, r3
 8006354:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006358:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f004 ff30 	bl	800b1c0 <HAL_HCD_PortEnabled_Callback>
 8006360:	e002      	b.n	8006368 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f004 ff3a 	bl	800b1dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b20      	cmp	r3, #32
 8006370:	d103      	bne.n	800637a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 0320 	orr.w	r3, r3, #32
 8006378:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6013      	str	r3, [r2, #0]
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e12b      	b.n	80065fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fa f9aa 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2224      	movs	r2, #36	@ 0x24
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063f4:	f001 fa20 	bl	8007838 <HAL_RCC_GetPCLK1Freq>
 80063f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4a81      	ldr	r2, [pc, #516]	@ (8006604 <HAL_I2C_Init+0x274>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d807      	bhi.n	8006414 <HAL_I2C_Init+0x84>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4a80      	ldr	r2, [pc, #512]	@ (8006608 <HAL_I2C_Init+0x278>)
 8006408:	4293      	cmp	r3, r2
 800640a:	bf94      	ite	ls
 800640c:	2301      	movls	r3, #1
 800640e:	2300      	movhi	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e006      	b.n	8006422 <HAL_I2C_Init+0x92>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a7d      	ldr	r2, [pc, #500]	@ (800660c <HAL_I2C_Init+0x27c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	bf94      	ite	ls
 800641c:	2301      	movls	r3, #1
 800641e:	2300      	movhi	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e0e7      	b.n	80065fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a78      	ldr	r2, [pc, #480]	@ (8006610 <HAL_I2C_Init+0x280>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	0c9b      	lsrs	r3, r3, #18
 8006434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a6a      	ldr	r2, [pc, #424]	@ (8006604 <HAL_I2C_Init+0x274>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d802      	bhi.n	8006464 <HAL_I2C_Init+0xd4>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3301      	adds	r3, #1
 8006462:	e009      	b.n	8006478 <HAL_I2C_Init+0xe8>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	4a69      	ldr	r2, [pc, #420]	@ (8006614 <HAL_I2C_Init+0x284>)
 8006470:	fba2 2303 	umull	r2, r3, r2, r3
 8006474:	099b      	lsrs	r3, r3, #6
 8006476:	3301      	adds	r3, #1
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	430b      	orrs	r3, r1
 800647e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800648a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	495c      	ldr	r1, [pc, #368]	@ (8006604 <HAL_I2C_Init+0x274>)
 8006494:	428b      	cmp	r3, r1
 8006496:	d819      	bhi.n	80064cc <HAL_I2C_Init+0x13c>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1e59      	subs	r1, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80064ac:	400b      	ands	r3, r1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_I2C_Init+0x138>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1e59      	subs	r1, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80064c0:	3301      	adds	r3, #1
 80064c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c6:	e051      	b.n	800656c <HAL_I2C_Init+0x1dc>
 80064c8:	2304      	movs	r3, #4
 80064ca:	e04f      	b.n	800656c <HAL_I2C_Init+0x1dc>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d111      	bne.n	80064f8 <HAL_I2C_Init+0x168>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1e58      	subs	r0, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6859      	ldr	r1, [r3, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	440b      	add	r3, r1
 80064e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064e6:	3301      	adds	r3, #1
 80064e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf0c      	ite	eq
 80064f0:	2301      	moveq	r3, #1
 80064f2:	2300      	movne	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e012      	b.n	800651e <HAL_I2C_Init+0x18e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	1e58      	subs	r0, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6859      	ldr	r1, [r3, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	0099      	lsls	r1, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	fbb0 f3f3 	udiv	r3, r0, r3
 800650e:	3301      	adds	r3, #1
 8006510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006514:	2b00      	cmp	r3, #0
 8006516:	bf0c      	ite	eq
 8006518:	2301      	moveq	r3, #1
 800651a:	2300      	movne	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_I2C_Init+0x196>
 8006522:	2301      	movs	r3, #1
 8006524:	e022      	b.n	800656c <HAL_I2C_Init+0x1dc>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10e      	bne.n	800654c <HAL_I2C_Init+0x1bc>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1e58      	subs	r0, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6859      	ldr	r1, [r3, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	440b      	add	r3, r1
 800653c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006540:	3301      	adds	r3, #1
 8006542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800654a:	e00f      	b.n	800656c <HAL_I2C_Init+0x1dc>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	1e58      	subs	r0, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	0099      	lsls	r1, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006562:	3301      	adds	r3, #1
 8006564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006568:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	6809      	ldr	r1, [r1, #0]
 8006570:	4313      	orrs	r3, r2
 8006572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69da      	ldr	r2, [r3, #28]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800659a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6911      	ldr	r1, [r2, #16]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68d2      	ldr	r2, [r2, #12]
 80065a6:	4311      	orrs	r1, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	000186a0 	.word	0x000186a0
 8006608:	001e847f 	.word	0x001e847f
 800660c:	003d08ff 	.word	0x003d08ff
 8006610:	431bde83 	.word	0x431bde83
 8006614:	10624dd3 	.word	0x10624dd3

08006618 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e128      	b.n	800687c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a90      	ldr	r2, [pc, #576]	@ (8006884 <HAL_I2S_Init+0x26c>)
 8006642:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fa f8db 	bl	8000800 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006660:	f023 030f 	bic.w	r3, r3, #15
 8006664:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2202      	movs	r2, #2
 800666c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d060      	beq.n	8006738 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800667e:	2310      	movs	r3, #16
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e001      	b.n	8006688 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006684:	2320      	movs	r3, #32
 8006686:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b20      	cmp	r3, #32
 800668e:	d802      	bhi.n	8006696 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006696:	2001      	movs	r0, #1
 8006698:	f001 f9c4 	bl	8007a24 <HAL_RCCEx_GetPeriphCLKFreq>
 800669c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a6:	d125      	bne.n	80066f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	3305      	adds	r3, #5
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	e01f      	b.n	8006712 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	461a      	mov	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	3305      	adds	r3, #5
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	e00e      	b.n	8006712 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	461a      	mov	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	fbb2 f3f3 	udiv	r3, r2, r3
 800670e:	3305      	adds	r3, #5
 8006710:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4a5c      	ldr	r2, [pc, #368]	@ (8006888 <HAL_I2S_Init+0x270>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	08db      	lsrs	r3, r3, #3
 800671c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	085b      	lsrs	r3, r3, #1
 800672e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e003      	b.n	8006740 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006738:	2302      	movs	r3, #2
 800673a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d902      	bls.n	800674c <HAL_I2S_Init+0x134>
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2bff      	cmp	r3, #255	@ 0xff
 800674a:	d907      	bls.n	800675c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006750:	f043 0210 	orr.w	r2, r3, #16
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e08f      	b.n	800687c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	ea42 0103 	orr.w	r1, r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	430a      	orrs	r2, r1
 800676e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800677a:	f023 030f 	bic.w	r3, r3, #15
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6851      	ldr	r1, [r2, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6892      	ldr	r2, [r2, #8]
 8006786:	4311      	orrs	r1, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68d2      	ldr	r2, [r2, #12]
 800678c:	4311      	orrs	r1, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6992      	ldr	r2, [r2, #24]
 8006792:	430a      	orrs	r2, r1
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800679e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d161      	bne.n	800686c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a38      	ldr	r2, [pc, #224]	@ (800688c <HAL_I2S_Init+0x274>)
 80067ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a37      	ldr	r2, [pc, #220]	@ (8006890 <HAL_I2S_Init+0x278>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d101      	bne.n	80067bc <HAL_I2S_Init+0x1a4>
 80067b8:	4b36      	ldr	r3, [pc, #216]	@ (8006894 <HAL_I2S_Init+0x27c>)
 80067ba:	e001      	b.n	80067c0 <HAL_I2S_Init+0x1a8>
 80067bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	4932      	ldr	r1, [pc, #200]	@ (8006890 <HAL_I2S_Init+0x278>)
 80067c8:	428a      	cmp	r2, r1
 80067ca:	d101      	bne.n	80067d0 <HAL_I2S_Init+0x1b8>
 80067cc:	4a31      	ldr	r2, [pc, #196]	@ (8006894 <HAL_I2S_Init+0x27c>)
 80067ce:	e001      	b.n	80067d4 <HAL_I2S_Init+0x1bc>
 80067d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80067d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80067d8:	f023 030f 	bic.w	r3, r3, #15
 80067dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006890 <HAL_I2S_Init+0x278>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d101      	bne.n	80067ec <HAL_I2S_Init+0x1d4>
 80067e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <HAL_I2S_Init+0x27c>)
 80067ea:	e001      	b.n	80067f0 <HAL_I2S_Init+0x1d8>
 80067ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067f0:	2202      	movs	r2, #2
 80067f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a25      	ldr	r2, [pc, #148]	@ (8006890 <HAL_I2S_Init+0x278>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d101      	bne.n	8006802 <HAL_I2S_Init+0x1ea>
 80067fe:	4b25      	ldr	r3, [pc, #148]	@ (8006894 <HAL_I2S_Init+0x27c>)
 8006800:	e001      	b.n	8006806 <HAL_I2S_Init+0x1ee>
 8006802:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006812:	d003      	beq.n	800681c <HAL_I2S_Init+0x204>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800681c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e001      	b.n	8006828 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006832:	4313      	orrs	r3, r2
 8006834:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800683c:	4313      	orrs	r3, r2
 800683e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006846:	4313      	orrs	r3, r2
 8006848:	b29a      	uxth	r2, r3
 800684a:	897b      	ldrh	r3, [r7, #10]
 800684c:	4313      	orrs	r3, r2
 800684e:	b29b      	uxth	r3, r3
 8006850:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006854:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a0d      	ldr	r2, [pc, #52]	@ (8006890 <HAL_I2S_Init+0x278>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d101      	bne.n	8006864 <HAL_I2S_Init+0x24c>
 8006860:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <HAL_I2S_Init+0x27c>)
 8006862:	e001      	b.n	8006868 <HAL_I2S_Init+0x250>
 8006864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006868:	897a      	ldrh	r2, [r7, #10]
 800686a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	0800698f 	.word	0x0800698f
 8006888:	cccccccd 	.word	0xcccccccd
 800688c:	08006aa5 	.word	0x08006aa5
 8006890:	40003800 	.word	0x40003800
 8006894:	40003400 	.word	0x40003400

08006898 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	881a      	ldrh	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ec:	1c9a      	adds	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10e      	bne.n	8006928 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006918:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff ffb8 	bl	8006898 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006942:	b292      	uxth	r2, r2
 8006944:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10e      	bne.n	8006986 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006976:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff93 	bl	80068ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d13a      	bne.n	8006a20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d109      	bne.n	80069c8 <I2S_IRQHandler+0x3a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	d102      	bne.n	80069c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ffb4 	bl	8006930 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ce:	2b40      	cmp	r3, #64	@ 0x40
 80069d0:	d126      	bne.n	8006a20 <I2S_IRQHandler+0x92>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d11f      	bne.n	8006a20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a12:	f043 0202 	orr.w	r2, r3, #2
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ff50 	bl	80068c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d136      	bne.n	8006a9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d109      	bne.n	8006a4a <I2S_IRQHandler+0xbc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a40:	2b80      	cmp	r3, #128	@ 0x80
 8006a42:	d102      	bne.n	8006a4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ff45 	bl	80068d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d122      	bne.n	8006a9a <I2S_IRQHandler+0x10c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d11b      	bne.n	8006a9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8c:	f043 0204 	orr.w	r2, r3, #4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff13 	bl	80068c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a92      	ldr	r2, [pc, #584]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d101      	bne.n	8006ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006abe:	4b92      	ldr	r3, [pc, #584]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ac0:	e001      	b.n	8006ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006ac2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a8b      	ldr	r2, [pc, #556]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d101      	bne.n	8006ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006adc:	4b8a      	ldr	r3, [pc, #552]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ade:	e001      	b.n	8006ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af0:	d004      	beq.n	8006afc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 8099 	bne.w	8006c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d107      	bne.n	8006b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f925 	bl	8006d60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d107      	bne.n	8006b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9c8 	bl	8006ec0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b36:	2b40      	cmp	r3, #64	@ 0x40
 8006b38:	d13a      	bne.n	8006bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d035      	beq.n	8006bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6e      	ldr	r2, [pc, #440]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b50:	e001      	b.n	8006b56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006b52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4969      	ldr	r1, [pc, #420]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b5e:	428b      	cmp	r3, r1
 8006b60:	d101      	bne.n	8006b66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006b62:	4b69      	ldr	r3, [pc, #420]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b64:	e001      	b.n	8006b6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba2:	f043 0202 	orr.w	r2, r3, #2
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fe88 	bl	80068c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	f040 80c3 	bne.w	8006d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80bd 	beq.w	8006d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006bd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a49      	ldr	r2, [pc, #292]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d101      	bne.n	8006be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006be2:	4b49      	ldr	r3, [pc, #292]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006be4:	e001      	b.n	8006bea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006be6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4944      	ldr	r1, [pc, #272]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bf2:	428b      	cmp	r3, r1
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006bf6:	4b44      	ldr	r3, [pc, #272]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bf8:	e001      	b.n	8006bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006bfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bfe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c04:	2300      	movs	r3, #0
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1e:	f043 0204 	orr.w	r2, r3, #4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fe4a 	bl	80068c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c2c:	e089      	b.n	8006d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d107      	bne.n	8006c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f8be 	bl	8006dc4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d107      	bne.n	8006c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f8fd 	bl	8006e5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c68:	2b40      	cmp	r3, #64	@ 0x40
 8006c6a:	d12f      	bne.n	8006ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02a      	beq.n	8006ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d101      	bne.n	8006c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006c90:	4b1d      	ldr	r3, [pc, #116]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c92:	e001      	b.n	8006c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4919      	ldr	r1, [pc, #100]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006ca4:	4b18      	ldr	r3, [pc, #96]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ca6:	e001      	b.n	8006cac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006cb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	f043 0202 	orr.w	r2, r3, #2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fdfa 	bl	80068c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d136      	bne.n	8006d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d031      	beq.n	8006d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a07      	ldr	r2, [pc, #28]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006cea:	4b07      	ldr	r3, [pc, #28]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cec:	e001      	b.n	8006cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4902      	ldr	r1, [pc, #8]	@ (8006d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cfa:	428b      	cmp	r3, r1
 8006cfc:	d106      	bne.n	8006d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006cfe:	4b02      	ldr	r3, [pc, #8]	@ (8006d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d00:	e006      	b.n	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006d02:	bf00      	nop
 8006d04:	40003800 	.word	0x40003800
 8006d08:	40003400 	.word	0x40003400
 8006d0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d14:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	f043 0204 	orr.w	r2, r3, #4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fdc0 	bl	80068c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d40:	e000      	b.n	8006d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d42:	bf00      	nop
}
 8006d44:	bf00      	nop
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	1c99      	adds	r1, r3, #2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6251      	str	r1, [r2, #36]	@ 0x24
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d113      	bne.n	8006dba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006da0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ffc9 	bl	8006d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	1c99      	adds	r1, r3, #2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6251      	str	r1, [r2, #36]	@ 0x24
 8006dd6:	8819      	ldrh	r1, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e54 <I2SEx_TxISR_I2SExt+0x90>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d101      	bne.n	8006de6 <I2SEx_TxISR_I2SExt+0x22>
 8006de2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <I2SEx_TxISR_I2SExt+0x94>)
 8006de4:	e001      	b.n	8006dea <I2SEx_TxISR_I2SExt+0x26>
 8006de6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dea:	460a      	mov	r2, r1
 8006dec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d121      	bne.n	8006e4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a12      	ldr	r2, [pc, #72]	@ (8006e54 <I2SEx_TxISR_I2SExt+0x90>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d101      	bne.n	8006e14 <I2SEx_TxISR_I2SExt+0x50>
 8006e10:	4b11      	ldr	r3, [pc, #68]	@ (8006e58 <I2SEx_TxISR_I2SExt+0x94>)
 8006e12:	e001      	b.n	8006e18 <I2SEx_TxISR_I2SExt+0x54>
 8006e14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	490d      	ldr	r1, [pc, #52]	@ (8006e54 <I2SEx_TxISR_I2SExt+0x90>)
 8006e20:	428b      	cmp	r3, r1
 8006e22:	d101      	bne.n	8006e28 <I2SEx_TxISR_I2SExt+0x64>
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <I2SEx_TxISR_I2SExt+0x94>)
 8006e26:	e001      	b.n	8006e2c <I2SEx_TxISR_I2SExt+0x68>
 8006e28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff81 	bl	8006d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40003800 	.word	0x40003800
 8006e58:	40003400 	.word	0x40003400

08006e5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68d8      	ldr	r0, [r3, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	1c99      	adds	r1, r3, #2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006e74:	b282      	uxth	r2, r0
 8006e76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d113      	bne.n	8006eb8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff ff4a 	bl	8006d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a20      	ldr	r2, [pc, #128]	@ (8006f50 <I2SEx_RxISR_I2SExt+0x90>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d101      	bne.n	8006ed6 <I2SEx_RxISR_I2SExt+0x16>
 8006ed2:	4b20      	ldr	r3, [pc, #128]	@ (8006f54 <I2SEx_RxISR_I2SExt+0x94>)
 8006ed4:	e001      	b.n	8006eda <I2SEx_RxISR_I2SExt+0x1a>
 8006ed6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006eda:	68d8      	ldr	r0, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	1c99      	adds	r1, r3, #2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006ee6:	b282      	uxth	r2, r0
 8006ee8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d121      	bne.n	8006f46 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a12      	ldr	r2, [pc, #72]	@ (8006f50 <I2SEx_RxISR_I2SExt+0x90>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d101      	bne.n	8006f10 <I2SEx_RxISR_I2SExt+0x50>
 8006f0c:	4b11      	ldr	r3, [pc, #68]	@ (8006f54 <I2SEx_RxISR_I2SExt+0x94>)
 8006f0e:	e001      	b.n	8006f14 <I2SEx_RxISR_I2SExt+0x54>
 8006f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	490d      	ldr	r1, [pc, #52]	@ (8006f50 <I2SEx_RxISR_I2SExt+0x90>)
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	d101      	bne.n	8006f24 <I2SEx_RxISR_I2SExt+0x64>
 8006f20:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <I2SEx_RxISR_I2SExt+0x94>)
 8006f22:	e001      	b.n	8006f28 <I2SEx_RxISR_I2SExt+0x68>
 8006f24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006f2c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff ff03 	bl	8006d4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40003800 	.word	0x40003800
 8006f54:	40003400 	.word	0x40003400

08006f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e267      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d075      	beq.n	8007062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006f76:	4b88      	ldr	r3, [pc, #544]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d00c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f82:	4b85      	ldr	r3, [pc, #532]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d112      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f8e:	4b82      	ldr	r3, [pc, #520]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f9a:	d10b      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d05b      	beq.n	8007060 <HAL_RCC_OscConfig+0x108>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d157      	bne.n	8007060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e242      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCC_OscConfig+0x74>
 8006fbe:	4b76      	ldr	r3, [pc, #472]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a75      	ldr	r2, [pc, #468]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e01d      	b.n	8007008 <HAL_RCC_OscConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x98>
 8006fd6:	4b70      	ldr	r3, [pc, #448]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a6f      	ldr	r2, [pc, #444]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a6c      	ldr	r2, [pc, #432]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e00b      	b.n	8007008 <HAL_RCC_OscConfig+0xb0>
 8006ff0:	4b69      	ldr	r3, [pc, #420]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a68      	ldr	r2, [pc, #416]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b66      	ldr	r3, [pc, #408]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a65      	ldr	r2, [pc, #404]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8007002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007010:	f7fc fd92 	bl	8003b38 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007018:	f7fc fd8e 	bl	8003b38 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	@ 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e207      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702a:	4b5b      	ldr	r3, [pc, #364]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0xc0>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007038:	f7fc fd7e 	bl	8003b38 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007040:	f7fc fd7a 	bl	8003b38 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b64      	cmp	r3, #100	@ 0x64
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e1f3      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007052:	4b51      	ldr	r3, [pc, #324]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0xe8>
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d063      	beq.n	8007136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800706e:	4b4a      	ldr	r3, [pc, #296]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707a:	4b47      	ldr	r3, [pc, #284]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007082:	2b08      	cmp	r3, #8
 8007084:	d11c      	bne.n	80070c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007086:	4b44      	ldr	r3, [pc, #272]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d116      	bne.n	80070c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	4b41      	ldr	r3, [pc, #260]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_RCC_OscConfig+0x152>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e1c7      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4937      	ldr	r1, [pc, #220]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070be:	e03a      	b.n	8007136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d020      	beq.n	800710a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070c8:	4b34      	ldr	r3, [pc, #208]	@ (800719c <HAL_RCC_OscConfig+0x244>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ce:	f7fc fd33 	bl	8003b38 <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070d6:	f7fc fd2f 	bl	8003b38 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e1a8      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0f0      	beq.n	80070d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f4:	4b28      	ldr	r3, [pc, #160]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4925      	ldr	r1, [pc, #148]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 8007104:	4313      	orrs	r3, r2
 8007106:	600b      	str	r3, [r1, #0]
 8007108:	e015      	b.n	8007136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710a:	4b24      	ldr	r3, [pc, #144]	@ (800719c <HAL_RCC_OscConfig+0x244>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fc fd12 	bl	8003b38 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007118:	f7fc fd0e 	bl	8003b38 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e187      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712a:	4b1b      	ldr	r3, [pc, #108]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d036      	beq.n	80071b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d016      	beq.n	8007178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714a:	4b15      	ldr	r3, [pc, #84]	@ (80071a0 <HAL_RCC_OscConfig+0x248>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fc fcf2 	bl	8003b38 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007158:	f7fc fcee 	bl	8003b38 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e167      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716a:	4b0b      	ldr	r3, [pc, #44]	@ (8007198 <HAL_RCC_OscConfig+0x240>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0x200>
 8007176:	e01b      	b.n	80071b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007178:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <HAL_RCC_OscConfig+0x248>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800717e:	f7fc fcdb 	bl	8003b38 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007184:	e00e      	b.n	80071a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007186:	f7fc fcd7 	bl	8003b38 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d907      	bls.n	80071a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e150      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
 8007198:	40023800 	.word	0x40023800
 800719c:	42470000 	.word	0x42470000
 80071a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a4:	4b88      	ldr	r3, [pc, #544]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1ea      	bne.n	8007186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8097 	beq.w	80072ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c2:	4b81      	ldr	r3, [pc, #516]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	4b7d      	ldr	r3, [pc, #500]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	4a7c      	ldr	r2, [pc, #496]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80071de:	4b7a      	ldr	r3, [pc, #488]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ea:	2301      	movs	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	4b77      	ldr	r3, [pc, #476]	@ (80073cc <HAL_RCC_OscConfig+0x474>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d118      	bne.n	800722c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071fa:	4b74      	ldr	r3, [pc, #464]	@ (80073cc <HAL_RCC_OscConfig+0x474>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a73      	ldr	r2, [pc, #460]	@ (80073cc <HAL_RCC_OscConfig+0x474>)
 8007200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007206:	f7fc fc97 	bl	8003b38 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800720e:	f7fc fc93 	bl	8003b38 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e10c      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007220:	4b6a      	ldr	r3, [pc, #424]	@ (80073cc <HAL_RCC_OscConfig+0x474>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f0      	beq.n	800720e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <HAL_RCC_OscConfig+0x2ea>
 8007234:	4b64      	ldr	r3, [pc, #400]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007238:	4a63      	ldr	r2, [pc, #396]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007240:	e01c      	b.n	800727c <HAL_RCC_OscConfig+0x324>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b05      	cmp	r3, #5
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0x30c>
 800724a:	4b5f      	ldr	r3, [pc, #380]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724e:	4a5e      	ldr	r2, [pc, #376]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007250:	f043 0304 	orr.w	r3, r3, #4
 8007254:	6713      	str	r3, [r2, #112]	@ 0x70
 8007256:	4b5c      	ldr	r3, [pc, #368]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725a:	4a5b      	ldr	r2, [pc, #364]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	6713      	str	r3, [r2, #112]	@ 0x70
 8007262:	e00b      	b.n	800727c <HAL_RCC_OscConfig+0x324>
 8007264:	4b58      	ldr	r3, [pc, #352]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007268:	4a57      	ldr	r2, [pc, #348]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007270:	4b55      	ldr	r3, [pc, #340]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007274:	4a54      	ldr	r2, [pc, #336]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007276:	f023 0304 	bic.w	r3, r3, #4
 800727a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d015      	beq.n	80072b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007284:	f7fc fc58 	bl	8003b38 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fc fc54 	bl	8003b38 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0cb      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a2:	4b49      	ldr	r3, [pc, #292]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0ee      	beq.n	800728c <HAL_RCC_OscConfig+0x334>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b0:	f7fc fc42 	bl	8003b38 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b8:	f7fc fc3e 	bl	8003b38 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e0b5      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ce:	4b3e      	ldr	r3, [pc, #248]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ee      	bne.n	80072b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e0:	4b39      	ldr	r3, [pc, #228]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	4a38      	ldr	r2, [pc, #224]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 80a1 	beq.w	8007438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072f6:	4b34      	ldr	r3, [pc, #208]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d05c      	beq.n	80073bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d141      	bne.n	800738e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730a:	4b31      	ldr	r3, [pc, #196]	@ (80073d0 <HAL_RCC_OscConfig+0x478>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007310:	f7fc fc12 	bl	8003b38 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007318:	f7fc fc0e 	bl	8003b38 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e087      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732a:	4b27      	ldr	r3, [pc, #156]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007344:	019b      	lsls	r3, r3, #6
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	3b01      	subs	r3, #1
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	491b      	ldr	r1, [pc, #108]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 800735c:	4313      	orrs	r3, r2
 800735e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007360:	4b1b      	ldr	r3, [pc, #108]	@ (80073d0 <HAL_RCC_OscConfig+0x478>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007366:	f7fc fbe7 	bl	8003b38 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800736e:	f7fc fbe3 	bl	8003b38 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e05c      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007380:	4b11      	ldr	r3, [pc, #68]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCC_OscConfig+0x416>
 800738c:	e054      	b.n	8007438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738e:	4b10      	ldr	r3, [pc, #64]	@ (80073d0 <HAL_RCC_OscConfig+0x478>)
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007394:	f7fc fbd0 	bl	8003b38 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800739c:	f7fc fbcc 	bl	8003b38 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e045      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ae:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <HAL_RCC_OscConfig+0x470>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f0      	bne.n	800739c <HAL_RCC_OscConfig+0x444>
 80073ba:	e03d      	b.n	8007438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d107      	bne.n	80073d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e038      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40007000 	.word	0x40007000
 80073d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007444 <HAL_RCC_OscConfig+0x4ec>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d028      	beq.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d121      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d11a      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800740a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800740c:	4293      	cmp	r3, r2
 800740e:	d111      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	3b01      	subs	r3, #1
 800741e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007420:	429a      	cmp	r2, r3
 8007422:	d107      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d001      	beq.n	8007438 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	40023800 	.word	0x40023800

08007448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0cc      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b68      	ldr	r3, [pc, #416]	@ (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d90c      	bls.n	8007484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b65      	ldr	r3, [pc, #404]	@ (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b63      	ldr	r3, [pc, #396]	@ (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0b8      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d020      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800749c:	4b59      	ldr	r3, [pc, #356]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4a58      	ldr	r2, [pc, #352]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80074a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b4:	4b53      	ldr	r3, [pc, #332]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	4a52      	ldr	r2, [pc, #328]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80074be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c0:	4b50      	ldr	r3, [pc, #320]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	494d      	ldr	r1, [pc, #308]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d044      	beq.n	8007568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e6:	4b47      	ldr	r3, [pc, #284]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d119      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e07f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d003      	beq.n	8007506 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007502:	2b03      	cmp	r3, #3
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007506:	4b3f      	ldr	r3, [pc, #252]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e06f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007516:	4b3b      	ldr	r3, [pc, #236]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e067      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007526:	4b37      	ldr	r3, [pc, #220]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0203 	bic.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4934      	ldr	r1, [pc, #208]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007538:	f7fc fafe 	bl	8003b38 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753e:	e00a      	b.n	8007556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007540:	f7fc fafa 	bl	8003b38 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	4b2b      	ldr	r3, [pc, #172]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 020c 	and.w	r2, r3, #12
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	429a      	cmp	r2, r3
 8007566:	d1eb      	bne.n	8007540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007568:	4b25      	ldr	r3, [pc, #148]	@ (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d20c      	bcs.n	8007590 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b22      	ldr	r3, [pc, #136]	@ (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b20      	ldr	r3, [pc, #128]	@ (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e032      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800759c:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4916      	ldr	r1, [pc, #88]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	490e      	ldr	r1, [pc, #56]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075ce:	f000 f821 	bl	8007614 <HAL_RCC_GetSysClockFreq>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	490a      	ldr	r1, [pc, #40]	@ (8007608 <HAL_RCC_ClockConfig+0x1c0>)
 80075e0:	5ccb      	ldrb	r3, [r1, r3]
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	4a09      	ldr	r2, [pc, #36]	@ (800760c <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80075ea:	4b09      	ldr	r3, [pc, #36]	@ (8007610 <HAL_RCC_ClockConfig+0x1c8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fc fa5e 	bl	8003ab0 <HAL_InitTick>

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40023c00 	.word	0x40023c00
 8007604:	40023800 	.word	0x40023800
 8007608:	0800b898 	.word	0x0800b898
 800760c:	20000008 	.word	0x20000008
 8007610:	2000000c 	.word	0x2000000c

08007614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007618:	b094      	sub	sp, #80	@ 0x50
 800761a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800762c:	4b79      	ldr	r3, [pc, #484]	@ (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	2b08      	cmp	r3, #8
 8007636:	d00d      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x40>
 8007638:	2b08      	cmp	r3, #8
 800763a:	f200 80e1 	bhi.w	8007800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <HAL_RCC_GetSysClockFreq+0x34>
 8007642:	2b04      	cmp	r3, #4
 8007644:	d003      	beq.n	800764e <HAL_RCC_GetSysClockFreq+0x3a>
 8007646:	e0db      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007648:	4b73      	ldr	r3, [pc, #460]	@ (8007818 <HAL_RCC_GetSysClockFreq+0x204>)
 800764a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800764c:	e0db      	b.n	8007806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800764e:	4b73      	ldr	r3, [pc, #460]	@ (800781c <HAL_RCC_GetSysClockFreq+0x208>)
 8007650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007652:	e0d8      	b.n	8007806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007654:	4b6f      	ldr	r3, [pc, #444]	@ (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800765c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800765e:	4b6d      	ldr	r3, [pc, #436]	@ (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d063      	beq.n	8007732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800766a:	4b6a      	ldr	r3, [pc, #424]	@ (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	099b      	lsrs	r3, r3, #6
 8007670:	2200      	movs	r2, #0
 8007672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007674:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	633b      	str	r3, [r7, #48]	@ 0x30
 800767e:	2300      	movs	r3, #0
 8007680:	637b      	str	r3, [r7, #52]	@ 0x34
 8007682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007686:	4622      	mov	r2, r4
 8007688:	462b      	mov	r3, r5
 800768a:	f04f 0000 	mov.w	r0, #0
 800768e:	f04f 0100 	mov.w	r1, #0
 8007692:	0159      	lsls	r1, r3, #5
 8007694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007698:	0150      	lsls	r0, r2, #5
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4621      	mov	r1, r4
 80076a0:	1a51      	subs	r1, r2, r1
 80076a2:	6139      	str	r1, [r7, #16]
 80076a4:	4629      	mov	r1, r5
 80076a6:	eb63 0301 	sbc.w	r3, r3, r1
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076b8:	4659      	mov	r1, fp
 80076ba:	018b      	lsls	r3, r1, #6
 80076bc:	4651      	mov	r1, sl
 80076be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076c2:	4651      	mov	r1, sl
 80076c4:	018a      	lsls	r2, r1, #6
 80076c6:	4651      	mov	r1, sl
 80076c8:	ebb2 0801 	subs.w	r8, r2, r1
 80076cc:	4659      	mov	r1, fp
 80076ce:	eb63 0901 	sbc.w	r9, r3, r1
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076e6:	4690      	mov	r8, r2
 80076e8:	4699      	mov	r9, r3
 80076ea:	4623      	mov	r3, r4
 80076ec:	eb18 0303 	adds.w	r3, r8, r3
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	462b      	mov	r3, r5
 80076f4:	eb49 0303 	adc.w	r3, r9, r3
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007706:	4629      	mov	r1, r5
 8007708:	024b      	lsls	r3, r1, #9
 800770a:	4621      	mov	r1, r4
 800770c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007710:	4621      	mov	r1, r4
 8007712:	024a      	lsls	r2, r1, #9
 8007714:	4610      	mov	r0, r2
 8007716:	4619      	mov	r1, r3
 8007718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800771a:	2200      	movs	r2, #0
 800771c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800771e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007724:	f7f8 fd50 	bl	80001c8 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4613      	mov	r3, r2
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007730:	e058      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007732:	4b38      	ldr	r3, [pc, #224]	@ (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	099b      	lsrs	r3, r3, #6
 8007738:	2200      	movs	r2, #0
 800773a:	4618      	mov	r0, r3
 800773c:	4611      	mov	r1, r2
 800773e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007742:	623b      	str	r3, [r7, #32]
 8007744:	2300      	movs	r3, #0
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
 8007748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	f04f 0000 	mov.w	r0, #0
 8007754:	f04f 0100 	mov.w	r1, #0
 8007758:	0159      	lsls	r1, r3, #5
 800775a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800775e:	0150      	lsls	r0, r2, #5
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4641      	mov	r1, r8
 8007766:	ebb2 0a01 	subs.w	sl, r2, r1
 800776a:	4649      	mov	r1, r9
 800776c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800777c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007784:	ebb2 040a 	subs.w	r4, r2, sl
 8007788:	eb63 050b 	sbc.w	r5, r3, fp
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	00eb      	lsls	r3, r5, #3
 8007796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800779a:	00e2      	lsls	r2, r4, #3
 800779c:	4614      	mov	r4, r2
 800779e:	461d      	mov	r5, r3
 80077a0:	4643      	mov	r3, r8
 80077a2:	18e3      	adds	r3, r4, r3
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	464b      	mov	r3, r9
 80077a8:	eb45 0303 	adc.w	r3, r5, r3
 80077ac:	607b      	str	r3, [r7, #4]
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f04f 0300 	mov.w	r3, #0
 80077b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077ba:	4629      	mov	r1, r5
 80077bc:	028b      	lsls	r3, r1, #10
 80077be:	4621      	mov	r1, r4
 80077c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077c4:	4621      	mov	r1, r4
 80077c6:	028a      	lsls	r2, r1, #10
 80077c8:	4610      	mov	r0, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ce:	2200      	movs	r2, #0
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	61fa      	str	r2, [r7, #28]
 80077d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077d8:	f7f8 fcf6 	bl	80001c8 <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4613      	mov	r3, r2
 80077e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80077e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	3301      	adds	r3, #1
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80077f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077fe:	e002      	b.n	8007806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007800:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <HAL_RCC_GetSysClockFreq+0x204>)
 8007802:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007808:	4618      	mov	r0, r3
 800780a:	3750      	adds	r7, #80	@ 0x50
 800780c:	46bd      	mov	sp, r7
 800780e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007812:	bf00      	nop
 8007814:	40023800 	.word	0x40023800
 8007818:	00f42400 	.word	0x00f42400
 800781c:	007a1200 	.word	0x007a1200

08007820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007824:	4b03      	ldr	r3, [pc, #12]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x14>)
 8007826:	681b      	ldr	r3, [r3, #0]
}
 8007828:	4618      	mov	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000008 	.word	0x20000008

08007838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800783c:	f7ff fff0 	bl	8007820 <HAL_RCC_GetHCLKFreq>
 8007840:	4602      	mov	r2, r0
 8007842:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	0a9b      	lsrs	r3, r3, #10
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	4903      	ldr	r1, [pc, #12]	@ (800785c <HAL_RCC_GetPCLK1Freq+0x24>)
 800784e:	5ccb      	ldrb	r3, [r1, r3]
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007854:	4618      	mov	r0, r3
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40023800 	.word	0x40023800
 800785c:	0800b8a8 	.word	0x0800b8a8

08007860 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d105      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007884:	2b00      	cmp	r3, #0
 8007886:	d035      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007888:	4b62      	ldr	r3, [pc, #392]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800788e:	f7fc f953 	bl	8003b38 <HAL_GetTick>
 8007892:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007894:	e008      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007896:	f7fc f94f 	bl	8003b38 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e0b0      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	019a      	lsls	r2, r3, #6
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	071b      	lsls	r3, r3, #28
 80078c0:	4955      	ldr	r1, [pc, #340]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80078c8:	4b52      	ldr	r3, [pc, #328]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078ce:	f7fc f933 	bl	8003b38 <HAL_GetTick>
 80078d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078d4:	e008      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078d6:	f7fc f92f 	bl	8003b38 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e090      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078e8:	4b4b      	ldr	r3, [pc, #300]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f0      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8083 	beq.w	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	4b44      	ldr	r3, [pc, #272]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790a:	4a43      	ldr	r2, [pc, #268]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800790c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007910:	6413      	str	r3, [r2, #64]	@ 0x40
 8007912:	4b41      	ldr	r3, [pc, #260]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800791e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3e      	ldr	r2, [pc, #248]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007928:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800792a:	f7fc f905 	bl	8003b38 <HAL_GetTick>
 800792e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007932:	f7fc f901 	bl	8003b38 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e062      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007944:	4b35      	ldr	r3, [pc, #212]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007950:	4b31      	ldr	r3, [pc, #196]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007958:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02f      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	429a      	cmp	r2, r3
 800796c:	d028      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800796e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007976:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007978:	4b29      	ldr	r3, [pc, #164]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800797e:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007984:	4a24      	ldr	r2, [pc, #144]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800798a:	4b23      	ldr	r3, [pc, #140]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b01      	cmp	r3, #1
 8007994:	d114      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007996:	f7fc f8cf 	bl	8003b38 <HAL_GetTick>
 800799a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799c:	e00a      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799e:	f7fc f8cb 	bl	8003b38 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e02a      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b4:	4b18      	ldr	r3, [pc, #96]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0ee      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079cc:	d10d      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80079ce:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80079de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079e2:	490d      	ldr	r1, [pc, #52]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	608b      	str	r3, [r1, #8]
 80079e8:	e005      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80079ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80079f4:	6093      	str	r3, [r2, #8]
 80079f6:	4b08      	ldr	r3, [pc, #32]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a02:	4905      	ldr	r1, [pc, #20]	@ (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	42470068 	.word	0x42470068
 8007a18:	40023800 	.word	0x40023800
 8007a1c:	40007000 	.word	0x40007000
 8007a20:	42470e40 	.word	0x42470e40

08007a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d13f      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007a42:	4b24      	ldr	r3, [pc, #144]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a58:	d12f      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007a5c:	617b      	str	r3, [r7, #20]
          break;
 8007a5e:	e02f      	b.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a60:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a6c:	d108      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a6e:	4b19      	ldr	r3, [pc, #100]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a76:	4a19      	ldr	r2, [pc, #100]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e007      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a80:	4b14      	ldr	r3, [pc, #80]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a88:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007a90:	4b10      	ldr	r3, [pc, #64]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	fb02 f303 	mul.w	r3, r2, r3
 8007aa2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aaa:	0f1b      	lsrs	r3, r3, #28
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab6:	617b      	str	r3, [r7, #20]
          break;
 8007ab8:	e002      	b.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
          break;
 8007abe:	bf00      	nop
        }
      }
      break;
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007ac2:	bf00      	nop
    }
  }
  return frequency;
 8007ac4:	697b      	ldr	r3, [r7, #20]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	00bb8000 	.word	0x00bb8000
 8007adc:	007a1200 	.word	0x007a1200
 8007ae0:	00f42400 	.word	0x00f42400

08007ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e07b      	b.n	8007bee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d108      	bne.n	8007b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b06:	d009      	beq.n	8007b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	61da      	str	r2, [r3, #28]
 8007b0e:	e005      	b.n	8007b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7f9 f836 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba0:	ea42 0103 	orr.w	r1, r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	f003 0104 	and.w	r1, r3, #4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc2:	f003 0210 	and.w	r2, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	f107 001c 	add.w	r0, r7, #28
 8007c04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c08:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d123      	bne.n	8007c58 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d105      	bne.n	8007c4c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f9dc 	bl	800800a <USB_CoreReset>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	e01b      	b.n	8007c90 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f9d0 	bl	800800a <USB_CoreReset>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c82:	e005      	b.n	8007c90 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c90:	7fbb      	ldrb	r3, [r7, #30]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d10b      	bne.n	8007cae <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f043 0206 	orr.w	r2, r3, #6
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f043 0220 	orr.w	r2, r3, #32
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cba:	b004      	add	sp, #16
 8007cbc:	4770      	bx	lr

08007cbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f043 0201 	orr.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f023 0201 	bic.w	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d115      	bne.n	8007d50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d30:	200a      	movs	r0, #10
 8007d32:	f7fb ff0d 	bl	8003b50 <HAL_Delay>
      ms += 10U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	330a      	adds	r3, #10
 8007d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f956 	bl	8007fee <USB_GetMode>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d01e      	beq.n	8007d86 <USB_SetCurrentMode+0x84>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d4c:	d9f0      	bls.n	8007d30 <USB_SetCurrentMode+0x2e>
 8007d4e:	e01a      	b.n	8007d86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d115      	bne.n	8007d82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d62:	200a      	movs	r0, #10
 8007d64:	f7fb fef4 	bl	8003b50 <HAL_Delay>
      ms += 10U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	330a      	adds	r3, #10
 8007d6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f93d 	bl	8007fee <USB_GetMode>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <USB_SetCurrentMode+0x84>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d7e:	d9f0      	bls.n	8007d62 <USB_SetCurrentMode+0x60>
 8007d80:	e001      	b.n	8007d86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e005      	b.n	8007d92 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d8a:	d101      	bne.n	8007d90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007db4:	d901      	bls.n	8007dba <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e01b      	b.n	8007df2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	daf2      	bge.n	8007da8 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	019b      	lsls	r3, r3, #6
 8007dca:	f043 0220 	orr.w	r2, r3, #32
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dde:	d901      	bls.n	8007de4 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e006      	b.n	8007df2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d0f0      	beq.n	8007dd2 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e16:	d901      	bls.n	8007e1c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e018      	b.n	8007e4e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	daf2      	bge.n	8007e0a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2210      	movs	r2, #16
 8007e2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e3a:	d901      	bls.n	8007e40 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e006      	b.n	8007e4e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d0f0      	beq.n	8007e2e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b089      	sub	sp, #36	@ 0x24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	4611      	mov	r1, r2
 8007e66:	461a      	mov	r2, r3
 8007e68:	460b      	mov	r3, r1
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d123      	bne.n	8007ec8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e80:	88bb      	ldrh	r3, [r7, #4]
 8007e82:	3303      	adds	r3, #3
 8007e84:	089b      	lsrs	r3, r3, #2
 8007e86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	e018      	b.n	8007ec0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	031a      	lsls	r2, r3, #12
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	61bb      	str	r3, [r7, #24]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d3e2      	bcc.n	8007e8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3724      	adds	r7, #36	@ 0x24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b08b      	sub	sp, #44	@ 0x2c
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	089b      	lsrs	r3, r3, #2
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007efc:	2300      	movs	r3, #0
 8007efe:	623b      	str	r3, [r7, #32]
 8007f00:	e014      	b.n	8007f2c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	3301      	adds	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	3301      	adds	r3, #1
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	3301      	adds	r3, #1
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	623b      	str	r3, [r7, #32]
 8007f2c:	6a3a      	ldr	r2, [r7, #32]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d3e6      	bcc.n	8007f02 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f34:	8bfb      	ldrh	r3, [r7, #30]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01e      	beq.n	8007f78 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f44:	461a      	mov	r2, r3
 8007f46:	f107 0310 	add.w	r3, r7, #16
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	701a      	strb	r2, [r3, #0]
      i++;
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	3301      	adds	r3, #1
 8007f64:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	3301      	adds	r3, #1
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007f6c:	8bfb      	ldrh	r3, [r7, #30]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f72:	8bfb      	ldrh	r3, [r7, #30]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1ea      	bne.n	8007f4e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	372c      	adds	r7, #44	@ 0x2c
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008022:	d901      	bls.n	8008028 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e01b      	b.n	8008060 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	daf2      	bge.n	8008016 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f043 0201 	orr.w	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800804c:	d901      	bls.n	8008052 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e006      	b.n	8008060 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d0f0      	beq.n	8008040 <USB_CoreReset+0x36>

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800806c:	b084      	sub	sp, #16
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800807a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008096:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d119      	bne.n	80080f6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80080c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d10a      	bne.n	80080e0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080d8:	f043 0304 	orr.w	r3, r3, #4
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	e014      	b.n	800810a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080ee:	f023 0304 	bic.w	r3, r3, #4
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e009      	b.n	800810a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008104:	f023 0304 	bic.w	r3, r3, #4
 8008108:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800810a:	2110      	movs	r1, #16
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fe44 	bl	8007d9a <USB_FlushTxFifo>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fe6e 	bl	8007dfe <USB_FlushRxFifo>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800812c:	2300      	movs	r3, #0
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	e015      	b.n	800815e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813e:	461a      	mov	r2, r3
 8008140:	f04f 33ff 	mov.w	r3, #4294967295
 8008144:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008152:	461a      	mov	r2, r3
 8008154:	2300      	movs	r3, #0
 8008156:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3301      	adds	r3, #1
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008162:	461a      	mov	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4293      	cmp	r3, r2
 8008168:	d3e3      	bcc.n	8008132 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f04f 32ff 	mov.w	r2, #4294967295
 8008176:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <USB_HostInit+0x170>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10b      	bne.n	8008198 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008186:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a15      	ldr	r2, [pc, #84]	@ (80081e0 <USB_HostInit+0x174>)
 800818c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a14      	ldr	r2, [pc, #80]	@ (80081e4 <USB_HostInit+0x178>)
 8008192:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008196:	e009      	b.n	80081ac <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2280      	movs	r2, #128	@ 0x80
 800819c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a11      	ldr	r2, [pc, #68]	@ (80081e8 <USB_HostInit+0x17c>)
 80081a2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a11      	ldr	r2, [pc, #68]	@ (80081ec <USB_HostInit+0x180>)
 80081a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	f043 0210 	orr.w	r2, r3, #16
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <USB_HostInit+0x184>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081d8:	b004      	add	sp, #16
 80081da:	4770      	bx	lr
 80081dc:	40040000 	.word	0x40040000
 80081e0:	01000200 	.word	0x01000200
 80081e4:	00e00300 	.word	0x00e00300
 80081e8:	00600080 	.word	0x00600080
 80081ec:	004000e0 	.word	0x004000e0
 80081f0:	a3200008 	.word	0xa3200008

080081f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800822c:	4313      	orrs	r3, r2
 800822e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d107      	bne.n	8008246 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800823c:	461a      	mov	r2, r3
 800823e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008242:	6053      	str	r3, [r2, #4]
 8008244:	e00c      	b.n	8008260 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d107      	bne.n	800825c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008252:	461a      	mov	r2, r3
 8008254:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008258:	6053      	str	r3, [r2, #4]
 800825a:	e001      	b.n	8008260 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800828e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800829c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800829e:	2064      	movs	r0, #100	@ 0x64
 80082a0:	f7fb fc56 	bl	8003b50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082b2:	200a      	movs	r0, #10
 80082b4:	f7fb fc4c 	bl	8003b50 <HAL_Delay>

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80082e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <USB_DriveVbus+0x44>
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d106      	bne.n	8008306 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008300:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008304:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800830c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008310:	d109      	bne.n	8008326 <USB_DriveVbus+0x64>
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008324:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	0c5b      	lsrs	r3, r3, #17
 8008352:	f003 0303 	and.w	r3, r3, #3
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008362:	b480      	push	{r7}
 8008364:	b085      	sub	sp, #20
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	b29b      	uxth	r3, r3
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	461a      	mov	r2, r3
 8008392:	4603      	mov	r3, r0
 8008394:	70fb      	strb	r3, [r7, #3]
 8008396:	460b      	mov	r3, r1
 8008398:	70bb      	strb	r3, [r7, #2]
 800839a:	4613      	mov	r3, r2
 800839c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b2:	461a      	mov	r2, r3
 80083b4:	f04f 33ff 	mov.w	r3, #4294967295
 80083b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d87c      	bhi.n	80084bc <USB_HC_Init+0x138>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <USB_HC_Init+0x44>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	0800847f 	.word	0x0800847f
 80083d0:	080083d9 	.word	0x080083d9
 80083d4:	08008441 	.word	0x08008441
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e4:	461a      	mov	r2, r3
 80083e6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80083ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80083ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	da10      	bge.n	8008416 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	78fa      	ldrb	r2, [r7, #3]
 8008404:	0151      	lsls	r1, r2, #5
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	440a      	add	r2, r1
 800840a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800840e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008412:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008414:	e055      	b.n	80084c2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a6f      	ldr	r2, [pc, #444]	@ (80085d8 <USB_HC_Init+0x254>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d151      	bne.n	80084c2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4413      	add	r3, r2
 8008426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	440a      	add	r2, r1
 8008434:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008438:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800843c:	60d3      	str	r3, [r2, #12]
      break;
 800843e:	e040      	b.n	80084c2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800844c:	461a      	mov	r2, r3
 800844e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	da34      	bge.n	80084c6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	4413      	add	r3, r2
 8008464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	440a      	add	r2, r1
 8008472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800847a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800847c:	e023      	b.n	80084c6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	4413      	add	r3, r2
 8008486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848a:	461a      	mov	r2, r3
 800848c:	f240 2325 	movw	r3, #549	@ 0x225
 8008490:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008492:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da17      	bge.n	80084ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80084b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084ba:	e006      	b.n	80084ca <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	77fb      	strb	r3, [r7, #31]
      break;
 80084c0:	e004      	b.n	80084cc <USB_HC_Init+0x148>
      break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <USB_HC_Init+0x148>
      break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <USB_HC_Init+0x148>
      break;
 80084ca:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d8:	461a      	mov	r2, r3
 80084da:	2300      	movs	r3, #0
 80084dc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	78fa      	ldrb	r2, [r7, #3]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f8:	f043 0302 	orr.w	r3, r3, #2
 80084fc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f303 	lsl.w	r3, r1, r3
 8008512:	6939      	ldr	r1, [r7, #16]
 8008514:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008518:	4313      	orrs	r3, r2
 800851a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008528:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	da03      	bge.n	8008538 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	e001      	b.n	800853c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff fef9 	bl	8008334 <USB_GetHostSpeed>
 8008542:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008544:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008548:	2b02      	cmp	r3, #2
 800854a:	d106      	bne.n	800855a <USB_HC_Init+0x1d6>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d003      	beq.n	800855a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008552:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e001      	b.n	800855e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800855e:	787b      	ldrb	r3, [r7, #1]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008566:	78bb      	ldrb	r3, [r7, #2]
 8008568:	02db      	lsls	r3, r3, #11
 800856a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800856e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008570:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008574:	049b      	lsls	r3, r3, #18
 8008576:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800857a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800857c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800857e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008582:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	431a      	orrs	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	440a      	add	r2, r1
 8008594:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800859c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800859e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d003      	beq.n	80085ae <USB_HC_Init+0x22a>
 80085a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d10f      	bne.n	80085ce <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	78fa      	ldrb	r2, [r7, #3]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80085ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3720      	adds	r7, #32
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	40040000 	.word	0x40040000

080085dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08c      	sub	sp, #48	@ 0x30
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80085f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085f8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4a5d      	ldr	r2, [pc, #372]	@ (8008774 <USB_HC_StartXfer+0x198>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d12f      	bne.n	8008662 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d11c      	bne.n	8008642 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	7c9b      	ldrb	r3, [r3, #18]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <USB_HC_StartXfer+0x3c>
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	7c9b      	ldrb	r3, [r3, #18]
 8008614:	2b02      	cmp	r3, #2
 8008616:	d124      	bne.n	8008662 <USB_HC_StartXfer+0x86>
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	799b      	ldrb	r3, [r3, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d120      	bne.n	8008662 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	4413      	add	r3, r2
 8008628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	6a3a      	ldr	r2, [r7, #32]
 8008634:	440a      	add	r2, r1
 8008636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800863a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800863e:	60d3      	str	r3, [r2, #12]
 8008640:	e00f      	b.n	8008662 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10b      	bne.n	8008662 <USB_HC_StartXfer+0x86>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	795b      	ldrb	r3, [r3, #5]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d107      	bne.n	8008662 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	4619      	mov	r1, r3
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fb6b 	bl	8008d34 <USB_DoPing>
        return HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	e232      	b.n	8008ac8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	799b      	ldrb	r3, [r3, #6]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d158      	bne.n	800871c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800866a:	2301      	movs	r3, #1
 800866c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	78db      	ldrb	r3, [r3, #3]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008676:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	8a92      	ldrh	r2, [r2, #20]
 800867c:	fb03 f202 	mul.w	r2, r3, r2
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	61da      	str	r2, [r3, #28]
 8008684:	e07c      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	7c9b      	ldrb	r3, [r3, #18]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d130      	bne.n	80086f0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	2bbc      	cmp	r3, #188	@ 0xbc
 8008694:	d918      	bls.n	80086c8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	8a9b      	ldrh	r3, [r3, #20]
 800869a:	461a      	mov	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d003      	beq.n	80086b8 <USB_HC_StartXfer+0xdc>
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d103      	bne.n	80086c0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2202      	movs	r2, #2
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	e05f      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2201      	movs	r2, #1
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	e05b      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d007      	beq.n	80086e8 <USB_HC_StartXfer+0x10c>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d003      	beq.n	80086e8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2204      	movs	r2, #4
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	e04b      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2203      	movs	r2, #3
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	e047      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d10d      	bne.n	8008712 <USB_HC_StartXfer+0x136>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	8a92      	ldrh	r2, [r2, #20]
 80086fe:	4293      	cmp	r3, r2
 8008700:	d907      	bls.n	8008712 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008702:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	8a92      	ldrh	r2, [r2, #20]
 8008708:	fb03 f202 	mul.w	r2, r3, r2
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	61da      	str	r2, [r3, #28]
 8008710:	e036      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	61da      	str	r2, [r3, #28]
 800871a:	e031      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d018      	beq.n	8008756 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	8a92      	ldrh	r2, [r2, #20]
 800872c:	4413      	add	r3, r2
 800872e:	3b01      	subs	r3, #1
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	8a92      	ldrh	r2, [r2, #20]
 8008734:	fbb3 f3f2 	udiv	r3, r3, r2
 8008738:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800873a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800873c:	8b7b      	ldrh	r3, [r7, #26]
 800873e:	429a      	cmp	r2, r3
 8008740:	d90b      	bls.n	800875a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008742:	8b7b      	ldrh	r3, [r7, #26]
 8008744:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008746:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	8a92      	ldrh	r2, [r2, #20]
 800874c:	fb03 f202 	mul.w	r2, r3, r2
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	61da      	str	r2, [r3, #28]
 8008754:	e001      	b.n	800875a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008756:	2301      	movs	r3, #1
 8008758:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	78db      	ldrb	r3, [r3, #3]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008762:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	8a92      	ldrh	r2, [r2, #20]
 8008768:	fb03 f202 	mul.w	r2, r3, r2
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	61da      	str	r2, [r3, #28]
 8008770:	e006      	b.n	8008780 <USB_HC_StartXfer+0x1a4>
 8008772:	bf00      	nop
 8008774:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6a1a      	ldr	r2, [r3, #32]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008788:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800878a:	04d9      	lsls	r1, r3, #19
 800878c:	4ba3      	ldr	r3, [pc, #652]	@ (8008a1c <USB_HC_StartXfer+0x440>)
 800878e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008790:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	7d9b      	ldrb	r3, [r3, #22]
 8008796:	075b      	lsls	r3, r3, #29
 8008798:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800879c:	69f9      	ldr	r1, [r7, #28]
 800879e:	0148      	lsls	r0, r1, #5
 80087a0:	6a39      	ldr	r1, [r7, #32]
 80087a2:	4401      	add	r1, r0
 80087a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6999      	ldr	r1, [r3, #24]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c2:	460a      	mov	r2, r1
 80087c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	0151      	lsls	r1, r2, #5
 80087f0:	6a3a      	ldr	r2, [r7, #32]
 80087f2:	440a      	add	r2, r1
 80087f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	4413      	add	r3, r2
 8008806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	7e7b      	ldrb	r3, [r7, #25]
 800880e:	075b      	lsls	r3, r3, #29
 8008810:	69f9      	ldr	r1, [r7, #28]
 8008812:	0148      	lsls	r0, r1, #5
 8008814:	6a39      	ldr	r1, [r7, #32]
 8008816:	4401      	add	r1, r0
 8008818:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800881c:	4313      	orrs	r3, r2
 800881e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	799b      	ldrb	r3, [r3, #6]
 8008824:	2b01      	cmp	r3, #1
 8008826:	f040 80c3 	bne.w	80089b0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	7c5b      	ldrb	r3, [r3, #17]
 800882e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008834:	4313      	orrs	r3, r2
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	6a3a      	ldr	r2, [r7, #32]
 800883c:	440a      	add	r2, r1
 800883e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008846:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	4413      	add	r3, r2
 8008850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	0151      	lsls	r1, r2, #5
 800885a:	6a3a      	ldr	r2, [r7, #32]
 800885c:	440a      	add	r2, r1
 800885e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008862:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008866:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	79db      	ldrb	r3, [r3, #7]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d123      	bne.n	80088b8 <USB_HC_StartXfer+0x2dc>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	78db      	ldrb	r3, [r3, #3]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11f      	bne.n	80088b8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	4413      	add	r3, r2
 8008880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	6a3a      	ldr	r2, [r7, #32]
 800888c:	440a      	add	r2, r1
 800888e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008896:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	6a3a      	ldr	r2, [r7, #32]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	7c9b      	ldrb	r3, [r3, #18]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d003      	beq.n	80088c8 <USB_HC_StartXfer+0x2ec>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	7c9b      	ldrb	r3, [r3, #18]
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d117      	bne.n	80088f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d113      	bne.n	80088f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d10f      	bne.n	80088f8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088f6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	7c9b      	ldrb	r3, [r3, #18]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d162      	bne.n	80089c6 <USB_HC_StartXfer+0x3ea>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	78db      	ldrb	r3, [r3, #3]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d15e      	bne.n	80089c6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	3b01      	subs	r3, #1
 800890e:	2b03      	cmp	r3, #3
 8008910:	d858      	bhi.n	80089c4 <USB_HC_StartXfer+0x3e8>
 8008912:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <USB_HC_StartXfer+0x33c>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008929 	.word	0x08008929
 800891c:	0800894b 	.word	0x0800894b
 8008920:	0800896d 	.word	0x0800896d
 8008924:	0800898f 	.word	0x0800898f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	4413      	add	r3, r2
 8008930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	0151      	lsls	r1, r2, #5
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	440a      	add	r2, r1
 800893e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008946:	6053      	str	r3, [r2, #4]
          break;
 8008948:	e03d      	b.n	80089c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008964:	f043 030e 	orr.w	r3, r3, #14
 8008968:	6053      	str	r3, [r2, #4]
          break;
 800896a:	e02c      	b.n	80089c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	4413      	add	r3, r2
 8008974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	6a3a      	ldr	r2, [r7, #32]
 8008980:	440a      	add	r2, r1
 8008982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800898a:	6053      	str	r3, [r2, #4]
          break;
 800898c:	e01b      	b.n	80089c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089ac:	6053      	str	r3, [r2, #4]
          break;
 80089ae:	e00a      	b.n	80089c6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089bc:	461a      	mov	r2, r3
 80089be:	2300      	movs	r3, #0
 80089c0:	6053      	str	r3, [r2, #4]
 80089c2:	e000      	b.n	80089c6 <USB_HC_StartXfer+0x3ea>
          break;
 80089c4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089dc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	78db      	ldrb	r3, [r3, #3]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d004      	beq.n	80089f0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	e003      	b.n	80089f8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089f6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089fe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e055      	b.n	8008ac8 <USB_HC_StartXfer+0x4ec>
 8008a1c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	78db      	ldrb	r3, [r3, #3]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d14e      	bne.n	8008ac6 <USB_HC_StartXfer+0x4ea>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d04a      	beq.n	8008ac6 <USB_HC_StartXfer+0x4ea>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	79db      	ldrb	r3, [r3, #7]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d146      	bne.n	8008ac6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	7c9b      	ldrb	r3, [r3, #18]
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d831      	bhi.n	8008aa4 <USB_HC_StartXfer+0x4c8>
 8008a40:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <USB_HC_StartXfer+0x46c>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a59 	.word	0x08008a59
 8008a4c:	08008a7d 	.word	0x08008a7d
 8008a50:	08008a59 	.word	0x08008a59
 8008a54:	08008a7d 	.word	0x08008a7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	3303      	adds	r3, #3
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008a62:	8afa      	ldrh	r2, [r7, #22]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d91c      	bls.n	8008aa8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	f043 0220 	orr.w	r2, r3, #32
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a7a:	e015      	b.n	8008aa8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	3303      	adds	r3, #3
 8008a82:	089b      	lsrs	r3, r3, #2
 8008a84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a86:	8afa      	ldrh	r2, [r7, #22]
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90a      	bls.n	8008aac <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008aa2:	e003      	b.n	8008aac <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008aa4:	bf00      	nop
 8008aa6:	e002      	b.n	8008aae <USB_HC_StartXfer+0x4d2>
        break;
 8008aa8:	bf00      	nop
 8008aaa:	e000      	b.n	8008aae <USB_HC_StartXfer+0x4d2>
        break;
 8008aac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6999      	ldr	r1, [r3, #24]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	785a      	ldrb	r2, [r3, #1]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	2000      	movs	r0, #0
 8008abe:	9000      	str	r0, [sp, #0]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff f9ca 	bl	8007e5a <USB_WritePacket>
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3728      	adds	r7, #40	@ 0x28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	b29b      	uxth	r3, r3
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b089      	sub	sp, #36	@ 0x24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	0c9b      	lsrs	r3, r3, #18
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	0fdb      	lsrs	r3, r3, #31
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	0fdb      	lsrs	r3, r3, #31
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d10d      	bne.n	8008b74 <USB_HC_Halt+0x82>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <USB_HC_Halt+0x82>
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d002      	beq.n	8008b70 <USB_HC_Halt+0x7e>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d101      	bne.n	8008b74 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e0d8      	b.n	8008d26 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <USB_HC_Halt+0x8e>
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d173      	bne.n	8008c68 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d14a      	bne.n	8008c42 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d133      	bne.n	8008c20 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bf6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c04:	d82e      	bhi.n	8008c64 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c1c:	d0ec      	beq.n	8008bf8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c1e:	e081      	b.n	8008d24 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c3e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c40:	e070      	b.n	8008d24 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c62:	e05f      	b.n	8008d24 <USB_HC_Halt+0x232>
            break;
 8008c64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c66:	e05d      	b.n	8008d24 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d133      	bne.n	8008d00 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cd6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ce4:	d81d      	bhi.n	8008d22 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cfc:	d0ec      	beq.n	8008cd8 <USB_HC_Halt+0x1e6>
 8008cfe:	e011      	b.n	8008d24 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	e000      	b.n	8008d24 <USB_HC_Halt+0x232>
          break;
 8008d22:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3724      	adds	r7, #36	@ 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	04da      	lsls	r2, r3, #19
 8008d50:	4b15      	ldr	r3, [pc, #84]	@ (8008da8 <USB_DoPing+0x74>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d92:	461a      	mov	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	1ff80000 	.word	0x1ff80000

08008dac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fe ff8d 	bl	8007ce0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7fe ffe6 	bl	8007d9a <USB_FlushTxFifo>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff f810 	bl	8007dfe <USB_FlushRxFifo>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	e01f      	b.n	8008e2e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e22:	461a      	mov	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b0f      	cmp	r3, #15
 8008e32:	d9dc      	bls.n	8008dee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e34:	2300      	movs	r3, #0
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	e034      	b.n	8008ea4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e6e:	461a      	mov	r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e80:	d80c      	bhi.n	8008e9c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e98:	d0ec      	beq.n	8008e74 <USB_StopHost+0xc8>
 8008e9a:	e000      	b.n	8008e9e <USB_StopHost+0xf2>
        break;
 8008e9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d9c7      	bls.n	8008e3a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7fe fefc 	bl	8007cbe <USB_EnableGlobalInt>

  return ret;
 8008ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3720      	adds	r7, #32
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ed0:	b590      	push	{r4, r7, lr}
 8008ed2:	b089      	sub	sp, #36	@ 0x24
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008ed8:	2301      	movs	r3, #1
 8008eda:	2202      	movs	r2, #2
 8008edc:	2102      	movs	r1, #2
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fc85 	bl	80097ee <USBH_FindInterface>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2bff      	cmp	r3, #255	@ 0xff
 8008eec:	d002      	beq.n	8008ef4 <USBH_CDC_InterfaceInit+0x24>
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d901      	bls.n	8008ef8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e13d      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fc5a 	bl	80097b6 <USBH_SelectInterface>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e131      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008f16:	2050      	movs	r0, #80	@ 0x50
 8008f18:	f002 fb64 	bl	800b5e4 <malloc>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e11f      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f34:	2250      	movs	r2, #80	@ 0x50
 8008f36:	2100      	movs	r1, #0
 8008f38:	68b8      	ldr	r0, [r7, #8]
 8008f3a:	f002 fc11 	bl	800b760 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	211a      	movs	r1, #26
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	b25b      	sxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da15      	bge.n	8008f82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	211a      	movs	r1, #26
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	211a      	movs	r1, #26
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008f7c:	881a      	ldrh	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 ffbe 	bl	800af0a <USBH_AllocPipe>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	7819      	ldrb	r1, [r3, #0]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	7858      	ldrb	r0, [r3, #1]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	8952      	ldrh	r2, [r2, #10]
 8008fae:	9202      	str	r2, [sp, #8]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	9201      	str	r2, [sp, #4]
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 ff76 	bl	800aeac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f002 fa85 	bl	800b4d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	210a      	movs	r1, #10
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fc0a 	bl	80097ee <USBH_FindInterface>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2bff      	cmp	r3, #255	@ 0xff
 8008fe2:	d002      	beq.n	8008fea <USBH_CDC_InterfaceInit+0x11a>
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d901      	bls.n	8008fee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008fea:	2302      	movs	r3, #2
 8008fec:	e0c2      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	211a      	movs	r1, #26
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	b25b      	sxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	da16      	bge.n	8009034 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	211a      	movs	r1, #26
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	4413      	add	r3, r2
 8009012:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	211a      	movs	r1, #26
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	4413      	add	r3, r2
 8009028:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800902c:	881a      	ldrh	r2, [r3, #0]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	835a      	strh	r2, [r3, #26]
 8009032:	e015      	b.n	8009060 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	211a      	movs	r1, #26
 800903a:	fb01 f303 	mul.w	r3, r1, r3
 800903e:	4413      	add	r3, r2
 8009040:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	211a      	movs	r1, #26
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	4413      	add	r3, r2
 8009056:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800905a:	881a      	ldrh	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	211a      	movs	r1, #26
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b25b      	sxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	da16      	bge.n	80090a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	211a      	movs	r1, #26
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	4413      	add	r3, r2
 8009084:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	211a      	movs	r1, #26
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	4413      	add	r3, r2
 800909a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800909e:	881a      	ldrh	r2, [r3, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	835a      	strh	r2, [r3, #26]
 80090a4:	e015      	b.n	80090d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	211a      	movs	r1, #26
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	211a      	movs	r1, #26
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80090cc:	881a      	ldrh	r2, [r3, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	7b9b      	ldrb	r3, [r3, #14]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 ff16 	bl	800af0a <USBH_AllocPipe>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7bdb      	ldrb	r3, [r3, #15]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 ff0c 	bl	800af0a <USBH_AllocPipe>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	7b59      	ldrb	r1, [r3, #13]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	7b98      	ldrb	r0, [r3, #14]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	8b12      	ldrh	r2, [r2, #24]
 8009112:	9202      	str	r2, [sp, #8]
 8009114:	2202      	movs	r2, #2
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	4623      	mov	r3, r4
 800911c:	4602      	mov	r2, r0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fec4 	bl	800aeac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	7b19      	ldrb	r1, [r3, #12]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	7bd8      	ldrb	r0, [r3, #15]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	8b52      	ldrh	r2, [r2, #26]
 800913c:	9202      	str	r2, [sp, #8]
 800913e:	2202      	movs	r2, #2
 8009140:	9201      	str	r2, [sp, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4623      	mov	r3, r4
 8009146:	4602      	mov	r2, r0
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 feaf 	bl	800aeac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	7b5b      	ldrb	r3, [r3, #13]
 800915a:	2200      	movs	r2, #0
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 f9ba 	bl	800b4d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	7b1b      	ldrb	r3, [r3, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f002 f9b3 	bl	800b4d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bd90      	pop	{r4, r7, pc}

0800917c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 fea4 	bl	800aeea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fecf 	bl	800af4c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	7b1b      	ldrb	r3, [r3, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00e      	beq.n	80091da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7b1b      	ldrb	r3, [r3, #12]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fe91 	bl	800aeea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	7b1b      	ldrb	r3, [r3, #12]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 febc 	bl	800af4c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	7b5b      	ldrb	r3, [r3, #13]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00e      	beq.n	8009200 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	7b5b      	ldrb	r3, [r3, #13]
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 fe7e 	bl	800aeea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	7b5b      	ldrb	r3, [r3, #13]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fea9 	bl	800af4c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	4618      	mov	r0, r3
 8009216:	f002 f9ed 	bl	800b5f4 <free>
    phost->pActiveClass->pData = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009220:	2200      	movs	r2, #0
 8009222:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3340      	adds	r3, #64	@ 0x40
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8b1 	bl	80093ae <GetLineCoding>
 800924c:	4603      	mov	r3, r0
 800924e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800925c:	2102      	movs	r1, #2
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009262:	7afb      	ldrb	r3, [r7, #11]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800928c:	2b04      	cmp	r3, #4
 800928e:	d877      	bhi.n	8009380 <USBH_CDC_Process+0x114>
 8009290:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <USBH_CDC_Process+0x2c>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092ad 	.word	0x080092ad
 800929c:	080092b3 	.word	0x080092b3
 80092a0:	080092e3 	.word	0x080092e3
 80092a4:	08009357 	.word	0x08009357
 80092a8:	08009365 	.word	0x08009365
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
      break;
 80092b0:	e06d      	b.n	800938e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f897 	bl	80093ec <SetLineCoding>
 80092be:	4603      	mov	r3, r0
 80092c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d104      	bne.n	80092d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092d0:	e058      	b.n	8009384 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d055      	beq.n	8009384 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2204      	movs	r2, #4
 80092dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80092e0:	e050      	b.n	8009384 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	3340      	adds	r3, #64	@ 0x40
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f860 	bl	80093ae <GetLineCoding>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d126      	bne.n	8009346 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800930a:	791b      	ldrb	r3, [r3, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d13b      	bne.n	8009388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800931a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800931c:	429a      	cmp	r2, r3
 800931e:	d133      	bne.n	8009388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800932a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800932c:	429a      	cmp	r2, r3
 800932e:	d12b      	bne.n	8009388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009338:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800933a:	429a      	cmp	r2, r3
 800933c:	d124      	bne.n	8009388 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f958 	bl	80095f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009344:	e020      	b.n	8009388 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d01d      	beq.n	8009388 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2204      	movs	r2, #4
 8009350:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009354:	e018      	b.n	8009388 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f867 	bl	800942a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8da 	bl	8009516 <CDC_ProcessReception>
      break;
 8009362:	e014      	b.n	800938e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 f81a 	bl	800a3a0 <USBH_ClrFeature>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800937e:	e005      	b.n	800938c <USBH_CDC_Process+0x120>

    default:
      break;
 8009380:	bf00      	nop
 8009382:	e004      	b.n	800938e <USBH_CDC_Process+0x122>
      break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <USBH_CDC_Process+0x122>
      break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <USBH_CDC_Process+0x122>
      break;
 800938c:	bf00      	nop

  }

  return status;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	22a1      	movs	r2, #161	@ 0xa1
 80093bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2221      	movs	r2, #33	@ 0x21
 80093c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2207      	movs	r2, #7
 80093d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2207      	movs	r2, #7
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 fb14 	bl	800aa0a <USBH_CtlReq>
 80093e2:	4603      	mov	r3, r0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2221      	movs	r2, #33	@ 0x21
 80093fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2207      	movs	r2, #7
 8009412:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2207      	movs	r2, #7
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 faf5 	bl	800aa0a <USBH_CtlReq>
 8009420:	4603      	mov	r3, r0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af02      	add	r7, sp, #8
 8009430:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800943c:	2300      	movs	r3, #0
 800943e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009446:	2b01      	cmp	r3, #1
 8009448:	d002      	beq.n	8009450 <CDC_ProcessTransmission+0x26>
 800944a:	2b02      	cmp	r3, #2
 800944c:	d023      	beq.n	8009496 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800944e:	e05e      	b.n	800950e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	8b12      	ldrh	r2, [r2, #24]
 8009458:	4293      	cmp	r3, r2
 800945a:	d90b      	bls.n	8009474 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	69d9      	ldr	r1, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8b1a      	ldrh	r2, [r3, #24]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	7b5b      	ldrb	r3, [r3, #13]
 8009468:	2001      	movs	r0, #1
 800946a:	9000      	str	r0, [sp, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 fcda 	bl	800ae26 <USBH_BulkSendData>
 8009472:	e00b      	b.n	800948c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	7b5b      	ldrb	r3, [r3, #13]
 8009482:	2001      	movs	r0, #1
 8009484:	9000      	str	r0, [sp, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fccd 	bl	800ae26 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009494:	e03b      	b.n	800950e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	7b5b      	ldrb	r3, [r3, #13]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fff1 	bl	800b484 <USBH_LL_GetURBState>
 80094a2:	4603      	mov	r3, r0
 80094a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80094a6:	7afb      	ldrb	r3, [r7, #11]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d128      	bne.n	80094fe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	8b12      	ldrh	r2, [r2, #24]
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d90e      	bls.n	80094d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	8b12      	ldrh	r2, [r2, #24]
 80094c0:	1a9a      	subs	r2, r3, r2
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	8b12      	ldrh	r2, [r2, #24]
 80094ce:	441a      	add	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	61da      	str	r2, [r3, #28]
 80094d4:	e002      	b.n	80094dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094ec:	e00e      	b.n	800950c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f868 	bl	80095cc <USBH_CDC_TransmitCallback>
      break;
 80094fc:	e006      	b.n	800950c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d103      	bne.n	800950c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800950c:	bf00      	nop
  }
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009528:	2300      	movs	r3, #0
 800952a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009532:	2b03      	cmp	r3, #3
 8009534:	d002      	beq.n	800953c <CDC_ProcessReception+0x26>
 8009536:	2b04      	cmp	r3, #4
 8009538:	d00e      	beq.n	8009558 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800953a:	e043      	b.n	80095c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	6a19      	ldr	r1, [r3, #32]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	8b5a      	ldrh	r2, [r3, #26]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	7b1b      	ldrb	r3, [r3, #12]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fc91 	bl	800ae70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2204      	movs	r2, #4
 8009552:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009556:	e035      	b.n	80095c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	7b1b      	ldrb	r3, [r3, #12]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 ff90 	bl	800b484 <USBH_LL_GetURBState>
 8009564:	4603      	mov	r3, r0
 8009566:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d129      	bne.n	80095c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	7b1b      	ldrb	r3, [r3, #12]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 fef3 	bl	800b360 <USBH_LL_GetLastXferSize>
 800957a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d016      	beq.n	80095b4 <CDC_ProcessReception+0x9e>
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	8b5b      	ldrh	r3, [r3, #26]
 800958a:	461a      	mov	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4293      	cmp	r3, r2
 8009590:	d110      	bne.n	80095b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	6a1a      	ldr	r2, [r3, #32]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	441a      	add	r2, r3
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2203      	movs	r2, #3
 80095ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80095b2:	e006      	b.n	80095c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f80f 	bl	80095e0 <USBH_CDC_ReceiveCallback>
      break;
 80095c2:	bf00      	nop
  }
}
 80095c4:	bf00      	nop
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	e029      	b.n	8009674 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	79fa      	ldrb	r2, [r7, #7]
 8009624:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f81f 	bl	800967c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f001 fdc3 	bl	800b1f8 <USBH_LL_Init>

  return USBH_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	e009      	b.n	80096a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	33e0      	adds	r3, #224	@ 0xe0
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	2200      	movs	r2, #0
 800969a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3301      	adds	r3, #1
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b0f      	cmp	r3, #15
 80096a6:	d9f2      	bls.n	800968e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e009      	b.n	80096c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096c8:	d3f1      	bcc.n	80096ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2240      	movs	r2, #64	@ 0x40
 80096ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	331c      	adds	r3, #28
 800971a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800971e:	2100      	movs	r1, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f002 f81d 	bl	800b760 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800972c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f002 f814 	bl	800b760 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800973e:	2212      	movs	r2, #18
 8009740:	2100      	movs	r1, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f002 f80c 	bl	800b760 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800974e:	223e      	movs	r2, #62	@ 0x3e
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f002 f804 	bl	800b760 <memset>

  return USBH_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d016      	beq.n	80097a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10e      	bne.n	800979e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009786:	1c59      	adds	r1, r3, #1
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	33de      	adds	r3, #222	@ 0xde
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
 800979c:	e004      	b.n	80097a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800979e:	2302      	movs	r3, #2
 80097a0:	73fb      	strb	r3, [r7, #15]
 80097a2:	e001      	b.n	80097a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80097a4:	2302      	movs	r3, #2
 80097a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d204      	bcs.n	80097dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	78fa      	ldrb	r2, [r7, #3]
 80097d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80097da:	e001      	b.n	80097e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80097dc:	2302      	movs	r3, #2
 80097de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	4608      	mov	r0, r1
 80097f8:	4611      	mov	r1, r2
 80097fa:	461a      	mov	r2, r3
 80097fc:	4603      	mov	r3, r0
 80097fe:	70fb      	strb	r3, [r7, #3]
 8009800:	460b      	mov	r3, r1
 8009802:	70bb      	strb	r3, [r7, #2]
 8009804:	4613      	mov	r3, r2
 8009806:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009816:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009818:	e025      	b.n	8009866 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	221a      	movs	r2, #26
 800981e:	fb02 f303 	mul.w	r3, r2, r3
 8009822:	3308      	adds	r3, #8
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	3302      	adds	r3, #2
 800982a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	795b      	ldrb	r3, [r3, #5]
 8009830:	78fa      	ldrb	r2, [r7, #3]
 8009832:	429a      	cmp	r2, r3
 8009834:	d002      	beq.n	800983c <USBH_FindInterface+0x4e>
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	2bff      	cmp	r3, #255	@ 0xff
 800983a:	d111      	bne.n	8009860 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009840:	78ba      	ldrb	r2, [r7, #2]
 8009842:	429a      	cmp	r2, r3
 8009844:	d002      	beq.n	800984c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009846:	78bb      	ldrb	r3, [r7, #2]
 8009848:	2bff      	cmp	r3, #255	@ 0xff
 800984a:	d109      	bne.n	8009860 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009850:	787a      	ldrb	r2, [r7, #1]
 8009852:	429a      	cmp	r2, r3
 8009854:	d002      	beq.n	800985c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009856:	787b      	ldrb	r3, [r7, #1]
 8009858:	2bff      	cmp	r3, #255	@ 0xff
 800985a:	d101      	bne.n	8009860 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	e006      	b.n	800986e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	3301      	adds	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d9d6      	bls.n	800981a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800986c:	23ff      	movs	r3, #255	@ 0xff
}
 800986e:	4618      	mov	r0, r3
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 fcf4 	bl	800b270 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009888:	2101      	movs	r1, #1
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 fe0d 	bl	800b4aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af04      	add	r7, sp, #16
 80098a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80098a4:	2302      	movs	r3, #2
 80098a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d102      	bne.n	80098be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2203      	movs	r2, #3
 80098bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b0b      	cmp	r3, #11
 80098c6:	f200 81bb 	bhi.w	8009c40 <USBH_Process+0x3a4>
 80098ca:	a201      	add	r2, pc, #4	@ (adr r2, 80098d0 <USBH_Process+0x34>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009901 	.word	0x08009901
 80098d4:	08009933 	.word	0x08009933
 80098d8:	0800999b 	.word	0x0800999b
 80098dc:	08009bdb 	.word	0x08009bdb
 80098e0:	08009c41 	.word	0x08009c41
 80098e4:	08009a3b 	.word	0x08009a3b
 80098e8:	08009b81 	.word	0x08009b81
 80098ec:	08009a71 	.word	0x08009a71
 80098f0:	08009a91 	.word	0x08009a91
 80098f4:	08009aaf 	.word	0x08009aaf
 80098f8:	08009af3 	.word	0x08009af3
 80098fc:	08009bc3 	.word	0x08009bc3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 819b 	beq.w	8009c44 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009914:	20c8      	movs	r0, #200	@ 0xc8
 8009916:	f001 fe12 	bl	800b53e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f001 fd05 	bl	800b32a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009930:	e188      	b.n	8009c44 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009938:	2b01      	cmp	r3, #1
 800993a:	d107      	bne.n	800994c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800994a:	e18a      	b.n	8009c62 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009956:	d914      	bls.n	8009982 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800995e:	3301      	adds	r3, #1
 8009960:	b2da      	uxtb	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800996e:	2b03      	cmp	r3, #3
 8009970:	d903      	bls.n	800997a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	220d      	movs	r2, #13
 8009976:	701a      	strb	r2, [r3, #0]
      break;
 8009978:	e173      	b.n	8009c62 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	701a      	strb	r2, [r3, #0]
      break;
 8009980:	e16f      	b.n	8009c62 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009988:	f103 020a 	add.w	r2, r3, #10
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009992:	200a      	movs	r0, #10
 8009994:	f001 fdd3 	bl	800b53e <USBH_Delay>
      break;
 8009998:	e163      	b.n	8009c62 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099aa:	2104      	movs	r1, #4
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80099b0:	2064      	movs	r0, #100	@ 0x64
 80099b2:	f001 fdc4 	bl	800b53e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fc90 	bl	800b2dc <USBH_LL_GetSpeed>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2205      	movs	r2, #5
 80099ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80099cc:	2100      	movs	r1, #0
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fa9b 	bl	800af0a <USBH_AllocPipe>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80099dc:	2180      	movs	r1, #128	@ 0x80
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fa93 	bl	800af0a <USBH_AllocPipe>
 80099e4:	4603      	mov	r3, r0
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7919      	ldrb	r1, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a00:	9202      	str	r2, [sp, #8]
 8009a02:	2200      	movs	r2, #0
 8009a04:	9201      	str	r2, [sp, #4]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2280      	movs	r2, #128	@ 0x80
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 fa4d 	bl	800aeac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7959      	ldrb	r1, [r3, #5]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a26:	9202      	str	r2, [sp, #8]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	9201      	str	r2, [sp, #4]
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2200      	movs	r2, #0
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 fa3a 	bl	800aeac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a38:	e113      	b.n	8009c62 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f916 	bl	8009c6c <USBH_HandleEnum>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 80fd 	bne.w	8009c48 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d103      	bne.n	8009a68 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2208      	movs	r2, #8
 8009a64:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a66:	e0ef      	b.n	8009c48 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2207      	movs	r2, #7
 8009a6c:	701a      	strb	r2, [r3, #0]
      break;
 8009a6e:	e0eb      	b.n	8009c48 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80e8 	beq.w	8009c4c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a82:	2101      	movs	r1, #1
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2208      	movs	r2, #8
 8009a8c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009a8e:	e0dd      	b.n	8009c4c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fc3a 	bl	800a312 <USBH_SetCfg>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f040 80d5 	bne.w	8009c50 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2209      	movs	r2, #9
 8009aaa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009aac:	e0d0      	b.n	8009c50 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d016      	beq.n	8009aea <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009abc:	2101      	movs	r1, #1
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc4a 	bl	800a358 <USBH_SetFeature>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ad6:	e0bd      	b.n	8009c54 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	f040 80b9 	bne.w	8009c54 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	220a      	movs	r2, #10
 8009ae6:	701a      	strb	r2, [r3, #0]
      break;
 8009ae8:	e0b4      	b.n	8009c54 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	220a      	movs	r2, #10
 8009aee:	701a      	strb	r2, [r3, #0]
      break;
 8009af0:	e0b0      	b.n	8009c54 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 80ad 	beq.w	8009c58 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b06:	2300      	movs	r3, #0
 8009b08:	73fb      	strb	r3, [r7, #15]
 8009b0a:	e016      	b.n	8009b3a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b0c:	7bfa      	ldrb	r2, [r7, #15]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	32de      	adds	r2, #222	@ 0xde
 8009b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b16:	791a      	ldrb	r2, [r3, #4]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d108      	bne.n	8009b34 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b22:	7bfa      	ldrb	r2, [r7, #15]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	32de      	adds	r2, #222	@ 0xde
 8009b28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009b32:	e005      	b.n	8009b40 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	3301      	adds	r3, #1
 8009b38:	73fb      	strb	r3, [r7, #15]
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0e5      	beq.n	8009b0c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2206      	movs	r2, #6
 8009b60:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b68:	2103      	movs	r1, #3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b6e:	e073      	b.n	8009c58 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	220d      	movs	r2, #13
 8009b74:	701a      	strb	r2, [r3, #0]
      break;
 8009b76:	e06f      	b.n	8009c58 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	220d      	movs	r2, #13
 8009b7c:	701a      	strb	r2, [r3, #0]
      break;
 8009b7e:	e06b      	b.n	8009c58 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d017      	beq.n	8009bba <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	4798      	blx	r3
 8009b96:	4603      	mov	r3, r0
 8009b98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d103      	bne.n	8009baa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	220b      	movs	r2, #11
 8009ba6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ba8:	e058      	b.n	8009c5c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d154      	bne.n	8009c5c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	220d      	movs	r2, #13
 8009bb6:	701a      	strb	r2, [r3, #0]
      break;
 8009bb8:	e050      	b.n	8009c5c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	220d      	movs	r2, #13
 8009bbe:	701a      	strb	r2, [r3, #0]
      break;
 8009bc0:	e04c      	b.n	8009c5c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d049      	beq.n	8009c60 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
      }
      break;
 8009bd8:	e042      	b.n	8009c60 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fd4a 	bl	800967c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d009      	beq.n	8009c06 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c16:	2105      	movs	r1, #5
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d107      	bne.n	8009c38 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff fe22 	bl	800987a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c36:	e014      	b.n	8009c62 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 fb19 	bl	800b270 <USBH_LL_Start>
      break;
 8009c3e:	e010      	b.n	8009c62 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c40:	bf00      	nop
 8009c42:	e00e      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c44:	bf00      	nop
 8009c46:	e00c      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c48:	bf00      	nop
 8009c4a:	e00a      	b.n	8009c62 <USBH_Process+0x3c6>
    break;
 8009c4c:	bf00      	nop
 8009c4e:	e008      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c50:	bf00      	nop
 8009c52:	e006      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c54:	bf00      	nop
 8009c56:	e004      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c58:	bf00      	nop
 8009c5a:	e002      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c5c:	bf00      	nop
 8009c5e:	e000      	b.n	8009c62 <USBH_Process+0x3c6>
      break;
 8009c60:	bf00      	nop
  }
  return USBH_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	785b      	ldrb	r3, [r3, #1]
 8009c80:	2b07      	cmp	r3, #7
 8009c82:	f200 81bd 	bhi.w	800a000 <USBH_HandleEnum+0x394>
 8009c86:	a201      	add	r2, pc, #4	@ (adr r2, 8009c8c <USBH_HandleEnum+0x20>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cad 	.word	0x08009cad
 8009c90:	08009d67 	.word	0x08009d67
 8009c94:	08009dd1 	.word	0x08009dd1
 8009c98:	08009e5b 	.word	0x08009e5b
 8009c9c:	08009ec5 	.word	0x08009ec5
 8009ca0:	08009f35 	.word	0x08009f35
 8009ca4:	08009f7b 	.word	0x08009f7b
 8009ca8:	08009fc1 	.word	0x08009fc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009cac:	2108      	movs	r1, #8
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa4c 	bl	800a14c <USBH_Get_DevDesc>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d12e      	bne.n	8009d1c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	7919      	ldrb	r1, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ce2:	9202      	str	r2, [sp, #8]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	9201      	str	r2, [sp, #4]
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	4603      	mov	r3, r0
 8009cec:	2280      	movs	r2, #128	@ 0x80
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f8dc 	bl	800aeac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7959      	ldrb	r1, [r3, #5]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d08:	9202      	str	r2, [sp, #8]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	9201      	str	r2, [sp, #4]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	4603      	mov	r3, r0
 8009d12:	2200      	movs	r2, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 f8c9 	bl	800aeac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d1a:	e173      	b.n	800a004 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	f040 8170 	bne.w	800a004 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d903      	bls.n	8009d46 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	220d      	movs	r2, #13
 8009d42:	701a      	strb	r2, [r3, #0]
      break;
 8009d44:	e15e      	b.n	800a004 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	795b      	ldrb	r3, [r3, #5]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 f8fd 	bl	800af4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	791b      	ldrb	r3, [r3, #4]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 f8f7 	bl	800af4c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
      break;
 8009d64:	e14e      	b.n	800a004 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009d66:	2112      	movs	r1, #18
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f9ef 	bl	800a14c <USBH_Get_DevDesc>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d7e:	e143      	b.n	800a008 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	f040 8140 	bne.w	800a008 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d8e:	3301      	adds	r3, #1
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d903      	bls.n	8009daa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	220d      	movs	r2, #13
 8009da6:	701a      	strb	r2, [r3, #0]
      break;
 8009da8:	e12e      	b.n	800a008 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	795b      	ldrb	r3, [r3, #5]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 f8cb 	bl	800af4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	791b      	ldrb	r3, [r3, #4]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 f8c5 	bl	800af4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
      break;
 8009dce:	e11b      	b.n	800a008 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa79 	bl	800a2ca <USBH_SetAddress>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d130      	bne.n	8009e44 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009de2:	2002      	movs	r0, #2
 8009de4:	f001 fbab 	bl	800b53e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2203      	movs	r2, #3
 8009df4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7919      	ldrb	r1, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e0a:	9202      	str	r2, [sp, #8]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	9201      	str	r2, [sp, #4]
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	4603      	mov	r3, r0
 8009e14:	2280      	movs	r2, #128	@ 0x80
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 f848 	bl	800aeac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7959      	ldrb	r1, [r3, #5]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e30:	9202      	str	r2, [sp, #8]
 8009e32:	2200      	movs	r2, #0
 8009e34:	9201      	str	r2, [sp, #4]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 f835 	bl	800aeac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e42:	e0e3      	b.n	800a00c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	f040 80e0 	bne.w	800a00c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220d      	movs	r2, #13
 8009e50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	705a      	strb	r2, [r3, #1]
      break;
 8009e58:	e0d8      	b.n	800a00c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009e5a:	2109      	movs	r1, #9
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f9a1 	bl	800a1a4 <USBH_Get_CfgDesc>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e72:	e0cd      	b.n	800a010 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	f040 80ca 	bne.w	800a010 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e82:	3301      	adds	r3, #1
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d903      	bls.n	8009e9e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	220d      	movs	r2, #13
 8009e9a:	701a      	strb	r2, [r3, #0]
      break;
 8009e9c:	e0b8      	b.n	800a010 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	795b      	ldrb	r3, [r3, #5]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 f851 	bl	800af4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	791b      	ldrb	r3, [r3, #4]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f84b 	bl	800af4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
      break;
 8009ec2:	e0a5      	b.n	800a010 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f969 	bl	800a1a4 <USBH_Get_CfgDesc>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2205      	movs	r2, #5
 8009ee0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ee2:	e097      	b.n	800a014 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	f040 8094 	bne.w	800a014 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d903      	bls.n	8009f0e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	220d      	movs	r2, #13
 8009f0a:	701a      	strb	r2, [r3, #0]
      break;
 8009f0c:	e082      	b.n	800a014 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	795b      	ldrb	r3, [r3, #5]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f819 	bl	800af4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	791b      	ldrb	r3, [r3, #4]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 f813 	bl	800af4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
      break;
 8009f32:	e06f      	b.n	800a014 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d019      	beq.n	8009f72 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f4a:	23ff      	movs	r3, #255	@ 0xff
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f953 	bl	800a1f8 <USBH_Get_StringDesc>
 8009f52:	4603      	mov	r3, r0
 8009f54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d103      	bne.n	8009f64 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2206      	movs	r2, #6
 8009f60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f62:	e059      	b.n	800a018 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d156      	bne.n	800a018 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2206      	movs	r2, #6
 8009f6e:	705a      	strb	r2, [r3, #1]
      break;
 8009f70:	e052      	b.n	800a018 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2206      	movs	r2, #6
 8009f76:	705a      	strb	r2, [r3, #1]
      break;
 8009f78:	e04e      	b.n	800a018 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d019      	beq.n	8009fb8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f90:	23ff      	movs	r3, #255	@ 0xff
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f930 	bl	800a1f8 <USBH_Get_StringDesc>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d103      	bne.n	8009faa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009fa8:	e038      	b.n	800a01c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d135      	bne.n	800a01c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2207      	movs	r2, #7
 8009fb4:	705a      	strb	r2, [r3, #1]
      break;
 8009fb6:	e031      	b.n	800a01c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2207      	movs	r2, #7
 8009fbc:	705a      	strb	r2, [r3, #1]
      break;
 8009fbe:	e02d      	b.n	800a01c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d017      	beq.n	8009ffa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009fd6:	23ff      	movs	r3, #255	@ 0xff
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f90d 	bl	800a1f8 <USBH_Get_StringDesc>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009fec:	e018      	b.n	800a020 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d115      	bne.n	800a020 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff8:	e012      	b.n	800a020 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffe:	e00f      	b.n	800a020 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a000:	bf00      	nop
 800a002:	e00e      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a004:	bf00      	nop
 800a006:	e00c      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a008:	bf00      	nop
 800a00a:	e00a      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a00c:	bf00      	nop
 800a00e:	e008      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a010:	bf00      	nop
 800a012:	e006      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a014:	bf00      	nop
 800a016:	e004      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a018:	bf00      	nop
 800a01a:	e002      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <USBH_HandleEnum+0x3b6>
      break;
 800a020:	bf00      	nop
  }
  return Status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f804 	bl	800a06e <USBH_HandleSof>
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b0b      	cmp	r3, #11
 800a07e:	d10a      	bne.n	800a096 <USBH_HandleSof+0x28>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
  }
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a0ae:	bf00      	nop
}
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a0ca:	bf00      	nop
}
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 f8be 	bl	800b2a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	791b      	ldrb	r3, [r3, #4]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 ff0b 	bl	800af4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 ff05 	bl	800af4c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af02      	add	r7, sp, #8
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a158:	887b      	ldrh	r3, [r7, #2]
 800a15a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15e:	d901      	bls.n	800a164 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a160:	2303      	movs	r3, #3
 800a162:	e01b      	b.n	800a19c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a16a:	887b      	ldrh	r3, [r7, #2]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f872 	bl	800a260 <USBH_GetDescriptor>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d109      	bne.n	800a19a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a18c:	887a      	ldrh	r2, [r7, #2]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f929 	bl	800a3e8 <USBH_ParseDevDesc>
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	331c      	adds	r3, #28
 800a1b4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a1b6:	887b      	ldrh	r3, [r7, #2]
 800a1b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1bc:	d901      	bls.n	800a1c2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e016      	b.n	800a1f0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a1c2:	887b      	ldrh	r3, [r7, #2]
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f846 	bl	800a260 <USBH_GetDescriptor>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d107      	bne.n	800a1ee <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a1de:	887b      	ldrh	r3, [r7, #2]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f9af 	bl	800a548 <USBH_ParseCfgDesc>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	461a      	mov	r2, r3
 800a204:	460b      	mov	r3, r1
 800a206:	72fb      	strb	r3, [r7, #11]
 800a208:	4613      	mov	r3, r2
 800a20a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a20c:	893b      	ldrh	r3, [r7, #8]
 800a20e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a212:	d802      	bhi.n	800a21a <USBH_Get_StringDesc+0x22>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e01c      	b.n	800a258 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	b29b      	uxth	r3, r3
 800a222:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a226:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a22e:	893b      	ldrh	r3, [r7, #8]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	460b      	mov	r3, r1
 800a234:	2100      	movs	r1, #0
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 f812 	bl	800a260 <USBH_GetDescriptor>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a24c:	893a      	ldrh	r2, [r7, #8]
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fb8d 	bl	800a970 <USBH_ParseStringDesc>
  }

  return status;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	607b      	str	r3, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	72fb      	strb	r3, [r7, #11]
 800a26e:	4613      	mov	r3, r2
 800a270:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	789b      	ldrb	r3, [r3, #2]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d11c      	bne.n	800a2b4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a280:	b2da      	uxtb	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2206      	movs	r2, #6
 800a28a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	893a      	ldrh	r2, [r7, #8]
 800a290:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a292:	893b      	ldrh	r3, [r7, #8]
 800a294:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a29c:	d104      	bne.n	800a2a8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f240 4209 	movw	r2, #1033	@ 0x409
 800a2a4:	829a      	strh	r2, [r3, #20]
 800a2a6:	e002      	b.n	800a2ae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8b3a      	ldrh	r2, [r7, #24]
 800a2b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a2b4:	8b3b      	ldrh	r3, [r7, #24]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 fba5 	bl	800aa0a <USBH_CtlReq>
 800a2c0:	4603      	mov	r3, r0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	789b      	ldrb	r3, [r3, #2]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d10f      	bne.n	800a2fe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2205      	movs	r2, #5
 800a2e8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2fe:	2200      	movs	r2, #0
 800a300:	2100      	movs	r1, #0
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fb81 	bl	800aa0a <USBH_CtlReq>
 800a308:	4603      	mov	r3, r0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	789b      	ldrb	r3, [r3, #2]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d10e      	bne.n	800a344 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2209      	movs	r2, #9
 800a330:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	887a      	ldrh	r2, [r7, #2]
 800a336:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a344:	2200      	movs	r2, #0
 800a346:	2100      	movs	r1, #0
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fb5e 	bl	800aa0a <USBH_CtlReq>
 800a34e:	4603      	mov	r3, r0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	789b      	ldrb	r3, [r3, #2]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d10f      	bne.n	800a38c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2203      	movs	r2, #3
 800a376:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a378:	78fb      	ldrb	r3, [r7, #3]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fb3a 	bl	800aa0a <USBH_CtlReq>
 800a396:	4603      	mov	r3, r0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	789b      	ldrb	r3, [r3, #2]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d10f      	bne.n	800a3d4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fb16 	bl	800aa0a <USBH_CtlReq>
 800a3de:	4603      	mov	r3, r0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a3fc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a408:	2302      	movs	r3, #2
 800a40a:	e094      	b.n	800a536 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	785a      	ldrb	r2, [r3, #1]
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3302      	adds	r3, #2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3303      	adds	r3, #3
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4313      	orrs	r3, r2
 800a430:	b29a      	uxth	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	791a      	ldrb	r2, [r3, #4]
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	795a      	ldrb	r2, [r3, #5]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	799a      	ldrb	r2, [r3, #6]
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	79da      	ldrb	r2, [r3, #7]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a466:	2b01      	cmp	r3, #1
 800a468:	d11b      	bne.n	800a4a2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	79db      	ldrb	r3, [r3, #7]
 800a46e:	2b20      	cmp	r3, #32
 800a470:	dc0f      	bgt.n	800a492 <USBH_ParseDevDesc+0xaa>
 800a472:	2b08      	cmp	r3, #8
 800a474:	db0f      	blt.n	800a496 <USBH_ParseDevDesc+0xae>
 800a476:	3b08      	subs	r3, #8
 800a478:	4a32      	ldr	r2, [pc, #200]	@ (800a544 <USBH_ParseDevDesc+0x15c>)
 800a47a:	fa22 f303 	lsr.w	r3, r2, r3
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	bf14      	ite	ne
 800a486:	2301      	movne	r3, #1
 800a488:	2300      	moveq	r3, #0
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <USBH_ParseDevDesc+0xb6>
 800a490:	e001      	b.n	800a496 <USBH_ParseDevDesc+0xae>
 800a492:	2b40      	cmp	r3, #64	@ 0x40
 800a494:	d003      	beq.n	800a49e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2208      	movs	r2, #8
 800a49a:	71da      	strb	r2, [r3, #7]
        break;
 800a49c:	e000      	b.n	800a4a0 <USBH_ParseDevDesc+0xb8>
        break;
 800a49e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a4a0:	e00e      	b.n	800a4c0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d107      	bne.n	800a4bc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	79db      	ldrb	r3, [r3, #7]
 800a4b0:	2b08      	cmp	r3, #8
 800a4b2:	d005      	beq.n	800a4c0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	71da      	strb	r2, [r3, #7]
 800a4ba:	e001      	b.n	800a4c0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d936      	bls.n	800a534 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	3309      	adds	r3, #9
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	330a      	adds	r3, #10
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	330b      	adds	r3, #11
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	330d      	adds	r3, #13
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	021b      	lsls	r3, r3, #8
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	7b9a      	ldrb	r2, [r3, #14]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	7bda      	ldrb	r2, [r3, #15]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	7c1a      	ldrb	r2, [r3, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	7c5a      	ldrb	r2, [r3, #17]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
}
 800a536:	4618      	mov	r0, r3
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	01000101 	.word	0x01000101

0800a548 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08c      	sub	sp, #48	@ 0x30
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	4613      	mov	r3, r2
 800a554:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a55c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a576:	2302      	movs	r3, #2
 800a578:	e0da      	b.n	800a730 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b09      	cmp	r3, #9
 800a584:	d002      	beq.n	800a58c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	2209      	movs	r2, #9
 800a58a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	781a      	ldrb	r2, [r3, #0]
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	785a      	ldrb	r2, [r3, #1]
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3302      	adds	r3, #2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3303      	adds	r3, #3
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b6:	bf28      	it	cs
 800a5b8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	791a      	ldrb	r2, [r3, #4]
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	795a      	ldrb	r2, [r3, #5]
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	799a      	ldrb	r2, [r3, #6]
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	79da      	ldrb	r2, [r3, #7]
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	7a1a      	ldrb	r2, [r3, #8]
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	f240 809d 	bls.w	800a72c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a5f2:	2309      	movs	r3, #9
 800a5f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5fa:	e081      	b.n	800a700 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a5fc:	f107 0316 	add.w	r3, r7, #22
 800a600:	4619      	mov	r1, r3
 800a602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a604:	f000 f9e7 	bl	800a9d6 <USBH_GetNextDesc>
 800a608:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d176      	bne.n	800a700 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b09      	cmp	r3, #9
 800a618:	d002      	beq.n	800a620 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61c:	2209      	movs	r2, #9
 800a61e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a624:	221a      	movs	r2, #26
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	3308      	adds	r3, #8
 800a62c:	6a3a      	ldr	r2, [r7, #32]
 800a62e:	4413      	add	r3, r2
 800a630:	3302      	adds	r3, #2
 800a632:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a636:	69f8      	ldr	r0, [r7, #28]
 800a638:	f000 f87e 	bl	800a738 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a646:	e043      	b.n	800a6d0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a648:	f107 0316 	add.w	r3, r7, #22
 800a64c:	4619      	mov	r1, r3
 800a64e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a650:	f000 f9c1 	bl	800a9d6 <USBH_GetNextDesc>
 800a654:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b05      	cmp	r3, #5
 800a65c:	d138      	bne.n	800a6d0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	795b      	ldrb	r3, [r3, #5]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d113      	bne.n	800a68e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d003      	beq.n	800a676 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	799b      	ldrb	r3, [r3, #6]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d10b      	bne.n	800a68e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	79db      	ldrb	r3, [r3, #7]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <USBH_ParseCfgDesc+0x14e>
 800a67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b09      	cmp	r3, #9
 800a684:	d007      	beq.n	800a696 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a688:	2209      	movs	r2, #9
 800a68a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a68c:	e003      	b.n	800a696 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	2207      	movs	r2, #7
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	e000      	b.n	800a698 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a696:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a69c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	00d2      	lsls	r2, r2, #3
 800a6a4:	211a      	movs	r1, #26
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a6b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f870 	bl	800a7a0 <USBH_ParseEPDesc>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a6c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	791b      	ldrb	r3, [r3, #4]
 800a6d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d204      	bcs.n	800a6e6 <USBH_ParseCfgDesc+0x19e>
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	885a      	ldrh	r2, [r3, #2]
 800a6e0:	8afb      	ldrh	r3, [r7, #22]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d8b0      	bhi.n	800a648 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d201      	bcs.n	800a6f6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e01c      	b.n	800a730 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a704:	2b01      	cmp	r3, #1
 800a706:	d805      	bhi.n	800a714 <USBH_ParseCfgDesc+0x1cc>
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	885a      	ldrh	r2, [r3, #2]
 800a70c:	8afb      	ldrh	r3, [r7, #22]
 800a70e:	429a      	cmp	r2, r3
 800a710:	f63f af74 	bhi.w	800a5fc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	791b      	ldrb	r3, [r3, #4]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	bf28      	it	cs
 800a71c:	2302      	movcs	r3, #2
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a724:	429a      	cmp	r2, r3
 800a726:	d201      	bcs.n	800a72c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a728:	2303      	movs	r3, #3
 800a72a:	e001      	b.n	800a730 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a72c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a730:	4618      	mov	r0, r3
 800a732:	3730      	adds	r7, #48	@ 0x30
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	785a      	ldrb	r2, [r3, #1]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	789a      	ldrb	r2, [r3, #2]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	78da      	ldrb	r2, [r3, #3]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	3304      	adds	r3, #4
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b02      	cmp	r3, #2
 800a76a:	bf28      	it	cs
 800a76c:	2302      	movcs	r3, #2
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	795a      	ldrb	r2, [r3, #5]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	799a      	ldrb	r2, [r3, #6]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	79da      	ldrb	r2, [r3, #7]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	7a1a      	ldrb	r2, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	721a      	strb	r2, [r3, #8]
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	781a      	ldrb	r2, [r3, #0]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	785a      	ldrb	r2, [r3, #1]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	789a      	ldrb	r2, [r3, #2]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	78da      	ldrb	r2, [r3, #3]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3305      	adds	r3, #5
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	799a      	ldrb	r2, [r3, #6]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	889b      	ldrh	r3, [r3, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d009      	beq.n	800a80e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a7fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a802:	d804      	bhi.n	800a80e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a80c:	d901      	bls.n	800a812 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a80e:	2303      	movs	r3, #3
 800a810:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d136      	bne.n	800a88a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	78db      	ldrb	r3, [r3, #3]
 800a820:	f003 0303 	and.w	r3, r3, #3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d108      	bne.n	800a83a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	889b      	ldrh	r3, [r3, #4]
 800a82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a830:	f240 8097 	bls.w	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a834:	2303      	movs	r3, #3
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	e093      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	78db      	ldrb	r3, [r3, #3]
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d107      	bne.n	800a856 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	889b      	ldrh	r3, [r3, #4]
 800a84a:	2b40      	cmp	r3, #64	@ 0x40
 800a84c:	f240 8089 	bls.w	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a850:	2303      	movs	r3, #3
 800a852:	75fb      	strb	r3, [r7, #23]
 800a854:	e085      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	78db      	ldrb	r3, [r3, #3]
 800a85a:	f003 0303 	and.w	r3, r3, #3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d005      	beq.n	800a86e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	78db      	ldrb	r3, [r3, #3]
 800a866:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d10a      	bne.n	800a884 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	799b      	ldrb	r3, [r3, #6]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <USBH_ParseEPDesc+0xde>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	799b      	ldrb	r3, [r3, #6]
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d970      	bls.n	800a960 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a87e:	2303      	movs	r3, #3
 800a880:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a882:	e06d      	b.n	800a960 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a884:	2303      	movs	r3, #3
 800a886:	75fb      	strb	r3, [r7, #23]
 800a888:	e06b      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a890:	2b01      	cmp	r3, #1
 800a892:	d13c      	bne.n	800a90e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	78db      	ldrb	r3, [r3, #3]
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d005      	beq.n	800a8ac <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	78db      	ldrb	r3, [r3, #3]
 800a8a4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	889b      	ldrh	r3, [r3, #4]
 800a8b0:	2b40      	cmp	r3, #64	@ 0x40
 800a8b2:	d956      	bls.n	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8b8:	e053      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	78db      	ldrb	r3, [r3, #3]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d10e      	bne.n	800a8e4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	799b      	ldrb	r3, [r3, #6]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d007      	beq.n	800a8de <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a8d2:	2b10      	cmp	r3, #16
 800a8d4:	d803      	bhi.n	800a8de <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a8da:	2b40      	cmp	r3, #64	@ 0x40
 800a8dc:	d941      	bls.n	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	75fb      	strb	r3, [r7, #23]
 800a8e2:	e03e      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	78db      	ldrb	r3, [r3, #3]
 800a8e8:	f003 0303 	and.w	r3, r3, #3
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d10b      	bne.n	800a908 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	799b      	ldrb	r3, [r3, #6]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <USBH_ParseEPDesc+0x162>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	889b      	ldrh	r3, [r3, #4]
 800a8fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a900:	d32f      	bcc.n	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a902:	2303      	movs	r3, #3
 800a904:	75fb      	strb	r3, [r7, #23]
 800a906:	e02c      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a908:	2303      	movs	r3, #3
 800a90a:	75fb      	strb	r3, [r7, #23]
 800a90c:	e029      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a914:	2b02      	cmp	r3, #2
 800a916:	d120      	bne.n	800a95a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	78db      	ldrb	r3, [r3, #3]
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d106      	bne.n	800a932 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	889b      	ldrh	r3, [r3, #4]
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d01a      	beq.n	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a92c:	2303      	movs	r3, #3
 800a92e:	75fb      	strb	r3, [r7, #23]
 800a930:	e017      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d10a      	bne.n	800a954 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	799b      	ldrb	r3, [r3, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <USBH_ParseEPDesc+0x1ae>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	889b      	ldrh	r3, [r3, #4]
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d909      	bls.n	800a962 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a94e:	2303      	movs	r3, #3
 800a950:	75fb      	strb	r3, [r7, #23]
 800a952:	e006      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a954:	2303      	movs	r3, #3
 800a956:	75fb      	strb	r3, [r7, #23]
 800a958:	e003      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a95a:	2303      	movs	r3, #3
 800a95c:	75fb      	strb	r3, [r7, #23]
 800a95e:	e000      	b.n	800a962 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a960:	bf00      	nop
  }

  return status;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	4613      	mov	r3, r2
 800a97c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b03      	cmp	r3, #3
 800a986:	d120      	bne.n	800a9ca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	1e9a      	subs	r2, r3, #2
 800a98e:	88fb      	ldrh	r3, [r7, #6]
 800a990:	4293      	cmp	r3, r2
 800a992:	bf28      	it	cs
 800a994:	4613      	movcs	r3, r2
 800a996:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3302      	adds	r3, #2
 800a99c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a99e:	2300      	movs	r3, #0
 800a9a0:	82fb      	strh	r3, [r7, #22]
 800a9a2:	e00b      	b.n	800a9bc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9a4:	8afb      	ldrh	r3, [r7, #22]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9b6:	8afb      	ldrh	r3, [r7, #22]
 800a9b8:	3302      	adds	r3, #2
 800a9ba:	82fb      	strh	r3, [r7, #22]
 800a9bc:	8afa      	ldrh	r2, [r7, #22]
 800a9be:	8abb      	ldrh	r3, [r7, #20]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3ef      	bcc.n	800a9a4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	701a      	strb	r2, [r3, #0]
  }
}
 800a9ca:	bf00      	nop
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	7812      	ldrb	r2, [r2, #0]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b086      	sub	sp, #24
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	4613      	mov	r3, r2
 800aa16:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	789b      	ldrb	r3, [r3, #2]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d002      	beq.n	800aa2a <USBH_CtlReq+0x20>
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d00f      	beq.n	800aa48 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa28:	e027      	b.n	800aa7a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	88fa      	ldrh	r2, [r7, #6]
 800aa34:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
      break;
 800aa46:	e018      	b.n	800aa7a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 f81b 	bl	800aa84 <USBH_HandleControl>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <USBH_CtlReq+0x54>
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d106      	bne.n	800aa6c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2201      	movs	r2, #1
 800aa62:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	761a      	strb	r2, [r3, #24]
      break;
 800aa6a:	e005      	b.n	800aa78 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d102      	bne.n	800aa78 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	709a      	strb	r2, [r3, #2]
      break;
 800aa78:	bf00      	nop
  }
  return status;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7e1b      	ldrb	r3, [r3, #24]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	2b0a      	cmp	r3, #10
 800aa9c:	f200 8156 	bhi.w	800ad4c <USBH_HandleControl+0x2c8>
 800aaa0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa8 <USBH_HandleControl+0x24>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	0800aaef 	.word	0x0800aaef
 800aab0:	0800ab59 	.word	0x0800ab59
 800aab4:	0800ab7f 	.word	0x0800ab7f
 800aab8:	0800abb7 	.word	0x0800abb7
 800aabc:	0800abe1 	.word	0x0800abe1
 800aac0:	0800ac33 	.word	0x0800ac33
 800aac4:	0800ac55 	.word	0x0800ac55
 800aac8:	0800ac91 	.word	0x0800ac91
 800aacc:	0800acb7 	.word	0x0800acb7
 800aad0:	0800acf5 	.word	0x0800acf5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f103 0110 	add.w	r1, r3, #16
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	795b      	ldrb	r3, [r3, #5]
 800aade:	461a      	mov	r2, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f943 	bl	800ad6c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	761a      	strb	r2, [r3, #24]
      break;
 800aaec:	e139      	b.n	800ad62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	795b      	ldrb	r3, [r3, #5]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fcc5 	bl	800b484 <USBH_LL_GetURBState>
 800aafa:	4603      	mov	r3, r0
 800aafc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d11e      	bne.n	800ab42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7c1b      	ldrb	r3, [r3, #16]
 800ab08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8adb      	ldrh	r3, [r3, #22]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab16:	7b7b      	ldrb	r3, [r7, #13]
 800ab18:	2b80      	cmp	r3, #128	@ 0x80
 800ab1a:	d103      	bne.n	800ab24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2203      	movs	r2, #3
 800ab20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab22:	e115      	b.n	800ad50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2205      	movs	r2, #5
 800ab28:	761a      	strb	r2, [r3, #24]
      break;
 800ab2a:	e111      	b.n	800ad50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab2c:	7b7b      	ldrb	r3, [r7, #13]
 800ab2e:	2b80      	cmp	r3, #128	@ 0x80
 800ab30:	d103      	bne.n	800ab3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2209      	movs	r2, #9
 800ab36:	761a      	strb	r2, [r3, #24]
      break;
 800ab38:	e10a      	b.n	800ad50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2207      	movs	r2, #7
 800ab3e:	761a      	strb	r2, [r3, #24]
      break;
 800ab40:	e106      	b.n	800ad50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d003      	beq.n	800ab50 <USBH_HandleControl+0xcc>
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	f040 8100 	bne.w	800ad50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	220b      	movs	r2, #11
 800ab54:	761a      	strb	r2, [r3, #24]
      break;
 800ab56:	e0fb      	b.n	800ad50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6899      	ldr	r1, [r3, #8]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	899a      	ldrh	r2, [r3, #12]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	791b      	ldrb	r3, [r3, #4]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f93a 	bl	800adea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2204      	movs	r2, #4
 800ab7a:	761a      	strb	r2, [r3, #24]
      break;
 800ab7c:	e0f1      	b.n	800ad62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	791b      	ldrb	r3, [r3, #4]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fc7d 	bl	800b484 <USBH_LL_GetURBState>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d102      	bne.n	800ab9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2209      	movs	r2, #9
 800ab98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	2b05      	cmp	r3, #5
 800ab9e:	d102      	bne.n	800aba6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aba0:	2303      	movs	r3, #3
 800aba2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aba4:	e0d6      	b.n	800ad54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	f040 80d3 	bne.w	800ad54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	220b      	movs	r2, #11
 800abb2:	761a      	strb	r2, [r3, #24]
      break;
 800abb4:	e0ce      	b.n	800ad54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6899      	ldr	r1, [r3, #8]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	899a      	ldrh	r2, [r3, #12]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	795b      	ldrb	r3, [r3, #5]
 800abc2:	2001      	movs	r0, #1
 800abc4:	9000      	str	r0, [sp, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f8ea 	bl	800ada0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2206      	movs	r2, #6
 800abdc:	761a      	strb	r2, [r3, #24]
      break;
 800abde:	e0c0      	b.n	800ad62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	795b      	ldrb	r3, [r3, #5]
 800abe4:	4619      	mov	r1, r3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fc4c 	bl	800b484 <USBH_LL_GetURBState>
 800abec:	4603      	mov	r3, r0
 800abee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d103      	bne.n	800abfe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2207      	movs	r2, #7
 800abfa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abfc:	e0ac      	b.n	800ad58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	2b05      	cmp	r3, #5
 800ac02:	d105      	bne.n	800ac10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	220c      	movs	r2, #12
 800ac08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0e:	e0a3      	b.n	800ad58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d103      	bne.n	800ac1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2205      	movs	r2, #5
 800ac1a:	761a      	strb	r2, [r3, #24]
      break;
 800ac1c:	e09c      	b.n	800ad58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	f040 8099 	bne.w	800ad58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	220b      	movs	r2, #11
 800ac2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac30:	e092      	b.n	800ad58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	791b      	ldrb	r3, [r3, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f8d5 	bl	800adea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2208      	movs	r2, #8
 800ac50:	761a      	strb	r2, [r3, #24]

      break;
 800ac52:	e086      	b.n	800ad62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	791b      	ldrb	r3, [r3, #4]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fc12 	bl	800b484 <USBH_LL_GetURBState>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d105      	bne.n	800ac76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	220d      	movs	r2, #13
 800ac6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac74:	e072      	b.n	800ad5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ac76:	7bbb      	ldrb	r3, [r7, #14]
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d103      	bne.n	800ac84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	220b      	movs	r2, #11
 800ac80:	761a      	strb	r2, [r3, #24]
      break;
 800ac82:	e06b      	b.n	800ad5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b05      	cmp	r3, #5
 800ac88:	d168      	bne.n	800ad5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8e:	e065      	b.n	800ad5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	795b      	ldrb	r3, [r3, #5]
 800ac94:	2201      	movs	r2, #1
 800ac96:	9200      	str	r2, [sp, #0]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f87f 	bl	800ada0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	220a      	movs	r2, #10
 800acb2:	761a      	strb	r2, [r3, #24]
      break;
 800acb4:	e055      	b.n	800ad62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	795b      	ldrb	r3, [r3, #5]
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fbe1 	bl	800b484 <USBH_LL_GetURBState>
 800acc2:	4603      	mov	r3, r0
 800acc4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d105      	bne.n	800acd8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	220d      	movs	r2, #13
 800acd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acd6:	e043      	b.n	800ad60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d103      	bne.n	800ace6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2209      	movs	r2, #9
 800ace2:	761a      	strb	r2, [r3, #24]
      break;
 800ace4:	e03c      	b.n	800ad60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d139      	bne.n	800ad60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	220b      	movs	r2, #11
 800acf0:	761a      	strb	r2, [r3, #24]
      break;
 800acf2:	e035      	b.n	800ad60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	7e5b      	ldrb	r3, [r3, #25]
 800acf8:	3301      	adds	r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	765a      	strb	r2, [r3, #25]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7e5b      	ldrb	r3, [r3, #25]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d806      	bhi.n	800ad16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad14:	e025      	b.n	800ad62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad1c:	2106      	movs	r1, #6
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	795b      	ldrb	r3, [r3, #5]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f90c 	bl	800af4c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	791b      	ldrb	r3, [r3, #4]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f906 	bl	800af4c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4a:	e00a      	b.n	800ad62 <USBH_HandleControl+0x2de>

    default:
      break;
 800ad4c:	bf00      	nop
 800ad4e:	e008      	b.n	800ad62 <USBH_HandleControl+0x2de>
      break;
 800ad50:	bf00      	nop
 800ad52:	e006      	b.n	800ad62 <USBH_HandleControl+0x2de>
      break;
 800ad54:	bf00      	nop
 800ad56:	e004      	b.n	800ad62 <USBH_HandleControl+0x2de>
      break;
 800ad58:	bf00      	nop
 800ad5a:	e002      	b.n	800ad62 <USBH_HandleControl+0x2de>
      break;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <USBH_HandleControl+0x2de>
      break;
 800ad60:	bf00      	nop
  }

  return status;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af04      	add	r7, sp, #16
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	4613      	mov	r3, r2
 800ad78:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad7a:	79f9      	ldrb	r1, [r7, #7]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9303      	str	r3, [sp, #12]
 800ad80:	2308      	movs	r3, #8
 800ad82:	9302      	str	r3, [sp, #8]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	2200      	movs	r2, #0
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 fb46 	bl	800b422 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af04      	add	r7, sp, #16
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	4611      	mov	r1, r2
 800adac:	461a      	mov	r2, r3
 800adae:	460b      	mov	r3, r1
 800adb0:	80fb      	strh	r3, [r7, #6]
 800adb2:	4613      	mov	r3, r2
 800adb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adc4:	7979      	ldrb	r1, [r7, #5]
 800adc6:	7e3b      	ldrb	r3, [r7, #24]
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	2301      	movs	r3, #1
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	2300      	movs	r3, #0
 800add8:	2200      	movs	r2, #0
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 fb21 	bl	800b422 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b088      	sub	sp, #32
 800adee:	af04      	add	r7, sp, #16
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	60b9      	str	r1, [r7, #8]
 800adf4:	4611      	mov	r1, r2
 800adf6:	461a      	mov	r2, r3
 800adf8:	460b      	mov	r3, r1
 800adfa:	80fb      	strh	r3, [r7, #6]
 800adfc:	4613      	mov	r3, r2
 800adfe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae00:	7979      	ldrb	r1, [r7, #5]
 800ae02:	2300      	movs	r3, #0
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	88fb      	ldrh	r3, [r7, #6]
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	2300      	movs	r3, #0
 800ae14:	2201      	movs	r2, #1
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 fb03 	bl	800b422 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae1c:	2300      	movs	r3, #0

}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b088      	sub	sp, #32
 800ae2a:	af04      	add	r7, sp, #16
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	4611      	mov	r1, r2
 800ae32:	461a      	mov	r2, r3
 800ae34:	460b      	mov	r3, r1
 800ae36:	80fb      	strh	r3, [r7, #6]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae4a:	7979      	ldrb	r1, [r7, #5]
 800ae4c:	7e3b      	ldrb	r3, [r7, #24]
 800ae4e:	9303      	str	r3, [sp, #12]
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	9302      	str	r3, [sp, #8]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	2301      	movs	r3, #1
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f000 fade 	bl	800b422 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af04      	add	r7, sp, #16
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	460b      	mov	r3, r1
 800ae80:	80fb      	strh	r3, [r7, #6]
 800ae82:	4613      	mov	r3, r2
 800ae84:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae86:	7979      	ldrb	r1, [r7, #5]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9303      	str	r3, [sp, #12]
 800ae8c:	88fb      	ldrh	r3, [r7, #6]
 800ae8e:	9302      	str	r3, [sp, #8]
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	2301      	movs	r3, #1
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2302      	movs	r3, #2
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 fac0 	bl	800b422 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af04      	add	r7, sp, #16
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4603      	mov	r3, r0
 800aebc:	70fb      	strb	r3, [r7, #3]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70bb      	strb	r3, [r7, #2]
 800aec2:	4613      	mov	r3, r2
 800aec4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aec6:	7878      	ldrb	r0, [r7, #1]
 800aec8:	78ba      	ldrb	r2, [r7, #2]
 800aeca:	78f9      	ldrb	r1, [r7, #3]
 800aecc:	8b3b      	ldrh	r3, [r7, #24]
 800aece:	9302      	str	r3, [sp, #8]
 800aed0:	7d3b      	ldrb	r3, [r7, #20]
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	7c3b      	ldrb	r3, [r7, #16]
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	4603      	mov	r3, r0
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa53 	bl	800b386 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	460b      	mov	r3, r1
 800aef4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aef6:	78fb      	ldrb	r3, [r7, #3]
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fa72 	bl	800b3e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f836 	bl	800af88 <USBH_GetFreePipe>
 800af1c:	4603      	mov	r3, r0
 800af1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af20:	89fb      	ldrh	r3, [r7, #14]
 800af22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af26:	4293      	cmp	r3, r2
 800af28:	d00a      	beq.n	800af40 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af2a:	78fa      	ldrb	r2, [r7, #3]
 800af2c:	89fb      	ldrh	r3, [r7, #14]
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	33e0      	adds	r3, #224	@ 0xe0
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	440b      	add	r3, r1
 800af3e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af40:	89fb      	ldrh	r3, [r7, #14]
 800af42:	b2db      	uxtb	r3, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	2b0f      	cmp	r3, #15
 800af5c:	d80d      	bhi.n	800af7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af5e:	78fb      	ldrb	r3, [r7, #3]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	33e0      	adds	r3, #224	@ 0xe0
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af70:	6879      	ldr	r1, [r7, #4]
 800af72:	33e0      	adds	r3, #224	@ 0xe0
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]
 800af98:	e00f      	b.n	800afba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	33e0      	adds	r3, #224	@ 0xe0
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	e007      	b.n	800afc4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	3301      	adds	r3, #1
 800afb8:	73fb      	strb	r3, [r7, #15]
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	2b0f      	cmp	r3, #15
 800afbe:	d9ec      	bls.n	800af9a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800afc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800afd4:	2201      	movs	r2, #1
 800afd6:	490e      	ldr	r1, [pc, #56]	@ (800b010 <MX_USB_HOST_Init+0x40>)
 800afd8:	480e      	ldr	r0, [pc, #56]	@ (800b014 <MX_USB_HOST_Init+0x44>)
 800afda:	f7fe fb15 	bl	8009608 <USBH_Init>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800afe4:	f7f5 fda4 	bl	8000b30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800afe8:	490b      	ldr	r1, [pc, #44]	@ (800b018 <MX_USB_HOST_Init+0x48>)
 800afea:	480a      	ldr	r0, [pc, #40]	@ (800b014 <MX_USB_HOST_Init+0x44>)
 800afec:	f7fe fbb9 	bl	8009762 <USBH_RegisterClass>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aff6:	f7f5 fd9b 	bl	8000b30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800affa:	4806      	ldr	r0, [pc, #24]	@ (800b014 <MX_USB_HOST_Init+0x44>)
 800affc:	f7fe fc3d 	bl	800987a <USBH_Start>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b006:	f7f5 fd93 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b00a:	bf00      	nop
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	0800b031 	.word	0x0800b031
 800b014:	20000334 	.word	0x20000334
 800b018:	20000014 	.word	0x20000014

0800b01c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b020:	4802      	ldr	r0, [pc, #8]	@ (800b02c <MX_USB_HOST_Process+0x10>)
 800b022:	f7fe fc3b 	bl	800989c <USBH_Process>
}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000334 	.word	0x20000334

0800b030 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	3b01      	subs	r3, #1
 800b040:	2b04      	cmp	r3, #4
 800b042:	d819      	bhi.n	800b078 <USBH_UserProcess+0x48>
 800b044:	a201      	add	r2, pc, #4	@ (adr r2, 800b04c <USBH_UserProcess+0x1c>)
 800b046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04a:	bf00      	nop
 800b04c:	0800b079 	.word	0x0800b079
 800b050:	0800b069 	.word	0x0800b069
 800b054:	0800b079 	.word	0x0800b079
 800b058:	0800b071 	.word	0x0800b071
 800b05c:	0800b061 	.word	0x0800b061
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b060:	4b09      	ldr	r3, [pc, #36]	@ (800b088 <USBH_UserProcess+0x58>)
 800b062:	2203      	movs	r2, #3
 800b064:	701a      	strb	r2, [r3, #0]
  break;
 800b066:	e008      	b.n	800b07a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b068:	4b07      	ldr	r3, [pc, #28]	@ (800b088 <USBH_UserProcess+0x58>)
 800b06a:	2202      	movs	r2, #2
 800b06c:	701a      	strb	r2, [r3, #0]
  break;
 800b06e:	e004      	b.n	800b07a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b070:	4b05      	ldr	r3, [pc, #20]	@ (800b088 <USBH_UserProcess+0x58>)
 800b072:	2201      	movs	r2, #1
 800b074:	701a      	strb	r2, [r3, #0]
  break;
 800b076:	e000      	b.n	800b07a <USBH_UserProcess+0x4a>

  default:
  break;
 800b078:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b07a:	bf00      	nop
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	2000070c 	.word	0x2000070c

0800b08c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	@ 0x28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b094:	f107 0314 	add.w	r3, r7, #20
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	605a      	str	r2, [r3, #4]
 800b09e:	609a      	str	r2, [r3, #8]
 800b0a0:	60da      	str	r2, [r3, #12]
 800b0a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0ac:	d147      	bne.n	800b13e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	4b25      	ldr	r3, [pc, #148]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b6:	4a24      	ldr	r2, [pc, #144]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b0b8:	f043 0301 	orr.w	r3, r3, #1
 800b0bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0be:	4b22      	ldr	r3, [pc, #136]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	4619      	mov	r1, r3
 800b0de:	481b      	ldr	r0, [pc, #108]	@ (800b14c <HAL_HCD_MspInit+0xc0>)
 800b0e0:	f7f8 fe6c 	bl	8003dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b0e4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b0e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0fa:	f107 0314 	add.w	r3, r7, #20
 800b0fe:	4619      	mov	r1, r3
 800b100:	4812      	ldr	r0, [pc, #72]	@ (800b14c <HAL_HCD_MspInit+0xc0>)
 800b102:	f7f8 fe5b 	bl	8003dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b106:	4b10      	ldr	r3, [pc, #64]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b10a:	4a0f      	ldr	r2, [pc, #60]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b10c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b110:	6353      	str	r3, [r2, #52]	@ 0x34
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	4b0c      	ldr	r3, [pc, #48]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b11a:	4a0b      	ldr	r2, [pc, #44]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b11c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b120:	6453      	str	r3, [r2, #68]	@ 0x44
 800b122:	4b09      	ldr	r3, [pc, #36]	@ (800b148 <HAL_HCD_MspInit+0xbc>)
 800b124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b12e:	2200      	movs	r2, #0
 800b130:	2100      	movs	r1, #0
 800b132:	2043      	movs	r0, #67	@ 0x43
 800b134:	f7f8 fe0b 	bl	8003d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b138:	2043      	movs	r0, #67	@ 0x43
 800b13a:	f7f8 fe24 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b13e:	bf00      	nop
 800b140:	3728      	adds	r7, #40	@ 0x28
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	40023800 	.word	0x40023800
 800b14c:	40020000 	.word	0x40020000

0800b150 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe ff73 	bl	800a04a <USBH_LL_IncTimer>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe ffab 	bl	800a0d6 <USBH_LL_Connect>
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe ffb4 	bl	800a104 <USBH_LL_Disconnect>
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe ff65 	bl	800a09e <USBH_LL_PortEnabled>
}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe ff65 	bl	800a0ba <USBH_LL_PortDisabled>
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b206:	2b01      	cmp	r3, #1
 800b208:	d12a      	bne.n	800b260 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b20a:	4a18      	ldr	r2, [pc, #96]	@ (800b26c <USBH_LL_Init+0x74>)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a15      	ldr	r2, [pc, #84]	@ (800b26c <USBH_LL_Init+0x74>)
 800b216:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b21a:	4b14      	ldr	r3, [pc, #80]	@ (800b26c <USBH_LL_Init+0x74>)
 800b21c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b220:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b222:	4b12      	ldr	r3, [pc, #72]	@ (800b26c <USBH_LL_Init+0x74>)
 800b224:	2208      	movs	r2, #8
 800b226:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b228:	4b10      	ldr	r3, [pc, #64]	@ (800b26c <USBH_LL_Init+0x74>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b22e:	4b0f      	ldr	r3, [pc, #60]	@ (800b26c <USBH_LL_Init+0x74>)
 800b230:	2200      	movs	r2, #0
 800b232:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b234:	4b0d      	ldr	r3, [pc, #52]	@ (800b26c <USBH_LL_Init+0x74>)
 800b236:	2202      	movs	r2, #2
 800b238:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b23a:	4b0c      	ldr	r3, [pc, #48]	@ (800b26c <USBH_LL_Init+0x74>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b240:	480a      	ldr	r0, [pc, #40]	@ (800b26c <USBH_LL_Init+0x74>)
 800b242:	f7f8 ff70 	bl	8004126 <HAL_HCD_Init>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b24c:	f7f5 fc70 	bl	8000b30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b250:	4806      	ldr	r0, [pc, #24]	@ (800b26c <USBH_LL_Init+0x74>)
 800b252:	f7f9 fbd1 	bl	80049f8 <HAL_HCD_GetCurrentFrame>
 800b256:	4603      	mov	r3, r0
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7fe fee6 	bl	800a02c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000710 	.word	0x20000710

0800b270 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b286:	4618      	mov	r0, r3
 800b288:	f7f9 fb3e 	bl	8004908 <HAL_HCD_Start>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	4618      	mov	r0, r3
 800b294:	f000 f95e 	bl	800b554 <USBH_Get_USB_Status>
 800b298:	4603      	mov	r3, r0
 800b29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7f9 fb46 	bl	800494e <HAL_HCD_Stop>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f943 	bl	800b554 <USBH_Get_USB_Status>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f9 fb90 	bl	8004a14 <HAL_HCD_GetCurrentSpeed>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d00c      	beq.n	800b314 <USBH_LL_GetSpeed+0x38>
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d80d      	bhi.n	800b31a <USBH_LL_GetSpeed+0x3e>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <USBH_LL_GetSpeed+0x2c>
 800b302:	2b01      	cmp	r3, #1
 800b304:	d003      	beq.n	800b30e <USBH_LL_GetSpeed+0x32>
 800b306:	e008      	b.n	800b31a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
    break;
 800b30c:	e008      	b.n	800b320 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b30e:	2301      	movs	r3, #1
 800b310:	73fb      	strb	r3, [r7, #15]
    break;
 800b312:	e005      	b.n	800b320 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b314:	2302      	movs	r3, #2
 800b316:	73fb      	strb	r3, [r7, #15]
    break;
 800b318:	e002      	b.n	800b320 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b31a:	2301      	movs	r3, #1
 800b31c:	73fb      	strb	r3, [r7, #15]
    break;
 800b31e:	bf00      	nop
  }
  return  speed;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b340:	4618      	mov	r0, r3
 800b342:	f7f9 fb21 	bl	8004988 <HAL_HCD_ResetPort>
 800b346:	4603      	mov	r3, r0
 800b348:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 f901 	bl	800b554 <USBH_Get_USB_Status>
 800b352:	4603      	mov	r3, r0
 800b354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b356:	7bbb      	ldrb	r3, [r7, #14]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b372:	78fa      	ldrb	r2, [r7, #3]
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7f9 fb29 	bl	80049ce <HAL_HCD_HC_GetXferCount>
 800b37c:	4603      	mov	r3, r0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b386:	b590      	push	{r4, r7, lr}
 800b388:	b089      	sub	sp, #36	@ 0x24
 800b38a:	af04      	add	r7, sp, #16
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	461a      	mov	r2, r3
 800b394:	4603      	mov	r3, r0
 800b396:	70fb      	strb	r3, [r7, #3]
 800b398:	460b      	mov	r3, r1
 800b39a:	70bb      	strb	r3, [r7, #2]
 800b39c:	4613      	mov	r3, r2
 800b39e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3ae:	787c      	ldrb	r4, [r7, #1]
 800b3b0:	78ba      	ldrb	r2, [r7, #2]
 800b3b2:	78f9      	ldrb	r1, [r7, #3]
 800b3b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	4623      	mov	r3, r4
 800b3c6:	f7f8 ff15 	bl	80041f4 <HAL_HCD_HC_Init>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f8bf 	bl	800b554 <USBH_Get_USB_Status>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}

0800b3e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3fe:	78fa      	ldrb	r2, [r7, #3]
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7f8 ffae 	bl	8004364 <HAL_HCD_HC_Halt>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f8a0 	bl	800b554 <USBH_Get_USB_Status>
 800b414:	4603      	mov	r3, r0
 800b416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b418:	7bbb      	ldrb	r3, [r7, #14]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b422:	b590      	push	{r4, r7, lr}
 800b424:	b089      	sub	sp, #36	@ 0x24
 800b426:	af04      	add	r7, sp, #16
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	4608      	mov	r0, r1
 800b42c:	4611      	mov	r1, r2
 800b42e:	461a      	mov	r2, r3
 800b430:	4603      	mov	r3, r0
 800b432:	70fb      	strb	r3, [r7, #3]
 800b434:	460b      	mov	r3, r1
 800b436:	70bb      	strb	r3, [r7, #2]
 800b438:	4613      	mov	r3, r2
 800b43a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b44a:	787c      	ldrb	r4, [r7, #1]
 800b44c:	78ba      	ldrb	r2, [r7, #2]
 800b44e:	78f9      	ldrb	r1, [r7, #3]
 800b450:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	4623      	mov	r3, r4
 800b466:	f7f8 ffa1 	bl	80043ac <HAL_HCD_HC_SubmitRequest>
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	4618      	mov	r0, r3
 800b472:	f000 f86f 	bl	800b554 <USBH_Get_USB_Status>
 800b476:	4603      	mov	r3, r0
 800b478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b47a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	bd90      	pop	{r4, r7, pc}

0800b484 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b496:	78fa      	ldrb	r2, [r7, #3]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f9 fa82 	bl	80049a4 <HAL_HCD_HC_GetURBState>
 800b4a0:	4603      	mov	r3, r0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d103      	bne.n	800b4c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f872 	bl	800b5ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b4c8:	20c8      	movs	r0, #200	@ 0xc8
 800b4ca:	f7f8 fb41 	bl	8003b50 <HAL_Delay>
  return USBH_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4f0:	78fa      	ldrb	r2, [r7, #3]
 800b4f2:	68f9      	ldr	r1, [r7, #12]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	011b      	lsls	r3, r3, #4
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	3317      	adds	r3, #23
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b506:	78fa      	ldrb	r2, [r7, #3]
 800b508:	68f9      	ldr	r1, [r7, #12]
 800b50a:	4613      	mov	r3, r2
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	333c      	adds	r3, #60	@ 0x3c
 800b516:	78ba      	ldrb	r2, [r7, #2]
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	e009      	b.n	800b530 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b51c:	78fa      	ldrb	r2, [r7, #3]
 800b51e:	68f9      	ldr	r1, [r7, #12]
 800b520:	4613      	mov	r3, r2
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	1a9b      	subs	r3, r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	333d      	adds	r3, #61	@ 0x3d
 800b52c:	78ba      	ldrb	r2, [r7, #2]
 800b52e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7f8 fb02 	bl	8003b50 <HAL_Delay>
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4603      	mov	r3, r0
 800b55c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	2b03      	cmp	r3, #3
 800b566:	d817      	bhi.n	800b598 <USBH_Get_USB_Status+0x44>
 800b568:	a201      	add	r2, pc, #4	@ (adr r2, 800b570 <USBH_Get_USB_Status+0x1c>)
 800b56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56e:	bf00      	nop
 800b570:	0800b581 	.word	0x0800b581
 800b574:	0800b587 	.word	0x0800b587
 800b578:	0800b58d 	.word	0x0800b58d
 800b57c:	0800b593 	.word	0x0800b593
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
    break;
 800b584:	e00b      	b.n	800b59e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b586:	2302      	movs	r3, #2
 800b588:	73fb      	strb	r3, [r7, #15]
    break;
 800b58a:	e008      	b.n	800b59e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b58c:	2301      	movs	r3, #1
 800b58e:	73fb      	strb	r3, [r7, #15]
    break;
 800b590:	e005      	b.n	800b59e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b592:	2302      	movs	r3, #2
 800b594:	73fb      	strb	r3, [r7, #15]
    break;
 800b596:	e002      	b.n	800b59e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b598:	2302      	movs	r3, #2
 800b59a:	73fb      	strb	r3, [r7, #15]
    break;
 800b59c:	bf00      	nop
  }
  return usb_status;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
 800b5c4:	e001      	b.n	800b5ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	4803      	ldr	r0, [pc, #12]	@ (800b5e0 <MX_DriverVbusFS+0x34>)
 800b5d2:	f7f8 fd8f 	bl	80040f4 <HAL_GPIO_WritePin>
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40020800 	.word	0x40020800

0800b5e4 <malloc>:
 800b5e4:	4b02      	ldr	r3, [pc, #8]	@ (800b5f0 <malloc+0xc>)
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	f000 b82d 	b.w	800b648 <_malloc_r>
 800b5ee:	bf00      	nop
 800b5f0:	20000034 	.word	0x20000034

0800b5f4 <free>:
 800b5f4:	4b02      	ldr	r3, [pc, #8]	@ (800b600 <free+0xc>)
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	f000 b8f5 	b.w	800b7e8 <_free_r>
 800b5fe:	bf00      	nop
 800b600:	20000034 	.word	0x20000034

0800b604 <sbrk_aligned>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	4e0f      	ldr	r6, [pc, #60]	@ (800b644 <sbrk_aligned+0x40>)
 800b608:	460c      	mov	r4, r1
 800b60a:	6831      	ldr	r1, [r6, #0]
 800b60c:	4605      	mov	r5, r0
 800b60e:	b911      	cbnz	r1, 800b616 <sbrk_aligned+0x12>
 800b610:	f000 f8ae 	bl	800b770 <_sbrk_r>
 800b614:	6030      	str	r0, [r6, #0]
 800b616:	4621      	mov	r1, r4
 800b618:	4628      	mov	r0, r5
 800b61a:	f000 f8a9 	bl	800b770 <_sbrk_r>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	d103      	bne.n	800b62a <sbrk_aligned+0x26>
 800b622:	f04f 34ff 	mov.w	r4, #4294967295
 800b626:	4620      	mov	r0, r4
 800b628:	bd70      	pop	{r4, r5, r6, pc}
 800b62a:	1cc4      	adds	r4, r0, #3
 800b62c:	f024 0403 	bic.w	r4, r4, #3
 800b630:	42a0      	cmp	r0, r4
 800b632:	d0f8      	beq.n	800b626 <sbrk_aligned+0x22>
 800b634:	1a21      	subs	r1, r4, r0
 800b636:	4628      	mov	r0, r5
 800b638:	f000 f89a 	bl	800b770 <_sbrk_r>
 800b63c:	3001      	adds	r0, #1
 800b63e:	d1f2      	bne.n	800b626 <sbrk_aligned+0x22>
 800b640:	e7ef      	b.n	800b622 <sbrk_aligned+0x1e>
 800b642:	bf00      	nop
 800b644:	20000af0 	.word	0x20000af0

0800b648 <_malloc_r>:
 800b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	1ccd      	adds	r5, r1, #3
 800b64e:	f025 0503 	bic.w	r5, r5, #3
 800b652:	3508      	adds	r5, #8
 800b654:	2d0c      	cmp	r5, #12
 800b656:	bf38      	it	cc
 800b658:	250c      	movcc	r5, #12
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	4606      	mov	r6, r0
 800b65e:	db01      	blt.n	800b664 <_malloc_r+0x1c>
 800b660:	42a9      	cmp	r1, r5
 800b662:	d904      	bls.n	800b66e <_malloc_r+0x26>
 800b664:	230c      	movs	r3, #12
 800b666:	6033      	str	r3, [r6, #0]
 800b668:	2000      	movs	r0, #0
 800b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b744 <_malloc_r+0xfc>
 800b672:	f000 f869 	bl	800b748 <__malloc_lock>
 800b676:	f8d8 3000 	ldr.w	r3, [r8]
 800b67a:	461c      	mov	r4, r3
 800b67c:	bb44      	cbnz	r4, 800b6d0 <_malloc_r+0x88>
 800b67e:	4629      	mov	r1, r5
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ffbf 	bl	800b604 <sbrk_aligned>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	4604      	mov	r4, r0
 800b68a:	d158      	bne.n	800b73e <_malloc_r+0xf6>
 800b68c:	f8d8 4000 	ldr.w	r4, [r8]
 800b690:	4627      	mov	r7, r4
 800b692:	2f00      	cmp	r7, #0
 800b694:	d143      	bne.n	800b71e <_malloc_r+0xd6>
 800b696:	2c00      	cmp	r4, #0
 800b698:	d04b      	beq.n	800b732 <_malloc_r+0xea>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	4639      	mov	r1, r7
 800b69e:	4630      	mov	r0, r6
 800b6a0:	eb04 0903 	add.w	r9, r4, r3
 800b6a4:	f000 f864 	bl	800b770 <_sbrk_r>
 800b6a8:	4581      	cmp	r9, r0
 800b6aa:	d142      	bne.n	800b732 <_malloc_r+0xea>
 800b6ac:	6821      	ldr	r1, [r4, #0]
 800b6ae:	1a6d      	subs	r5, r5, r1
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff ffa6 	bl	800b604 <sbrk_aligned>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d03a      	beq.n	800b732 <_malloc_r+0xea>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	442b      	add	r3, r5
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	bb62      	cbnz	r2, 800b724 <_malloc_r+0xdc>
 800b6ca:	f8c8 7000 	str.w	r7, [r8]
 800b6ce:	e00f      	b.n	800b6f0 <_malloc_r+0xa8>
 800b6d0:	6822      	ldr	r2, [r4, #0]
 800b6d2:	1b52      	subs	r2, r2, r5
 800b6d4:	d420      	bmi.n	800b718 <_malloc_r+0xd0>
 800b6d6:	2a0b      	cmp	r2, #11
 800b6d8:	d917      	bls.n	800b70a <_malloc_r+0xc2>
 800b6da:	1961      	adds	r1, r4, r5
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	6025      	str	r5, [r4, #0]
 800b6e0:	bf18      	it	ne
 800b6e2:	6059      	strne	r1, [r3, #4]
 800b6e4:	6863      	ldr	r3, [r4, #4]
 800b6e6:	bf08      	it	eq
 800b6e8:	f8c8 1000 	streq.w	r1, [r8]
 800b6ec:	5162      	str	r2, [r4, r5]
 800b6ee:	604b      	str	r3, [r1, #4]
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f000 f82f 	bl	800b754 <__malloc_unlock>
 800b6f6:	f104 000b 	add.w	r0, r4, #11
 800b6fa:	1d23      	adds	r3, r4, #4
 800b6fc:	f020 0007 	bic.w	r0, r0, #7
 800b700:	1ac2      	subs	r2, r0, r3
 800b702:	bf1c      	itt	ne
 800b704:	1a1b      	subne	r3, r3, r0
 800b706:	50a3      	strne	r3, [r4, r2]
 800b708:	e7af      	b.n	800b66a <_malloc_r+0x22>
 800b70a:	6862      	ldr	r2, [r4, #4]
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	bf0c      	ite	eq
 800b710:	f8c8 2000 	streq.w	r2, [r8]
 800b714:	605a      	strne	r2, [r3, #4]
 800b716:	e7eb      	b.n	800b6f0 <_malloc_r+0xa8>
 800b718:	4623      	mov	r3, r4
 800b71a:	6864      	ldr	r4, [r4, #4]
 800b71c:	e7ae      	b.n	800b67c <_malloc_r+0x34>
 800b71e:	463c      	mov	r4, r7
 800b720:	687f      	ldr	r7, [r7, #4]
 800b722:	e7b6      	b.n	800b692 <_malloc_r+0x4a>
 800b724:	461a      	mov	r2, r3
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	42a3      	cmp	r3, r4
 800b72a:	d1fb      	bne.n	800b724 <_malloc_r+0xdc>
 800b72c:	2300      	movs	r3, #0
 800b72e:	6053      	str	r3, [r2, #4]
 800b730:	e7de      	b.n	800b6f0 <_malloc_r+0xa8>
 800b732:	230c      	movs	r3, #12
 800b734:	6033      	str	r3, [r6, #0]
 800b736:	4630      	mov	r0, r6
 800b738:	f000 f80c 	bl	800b754 <__malloc_unlock>
 800b73c:	e794      	b.n	800b668 <_malloc_r+0x20>
 800b73e:	6005      	str	r5, [r0, #0]
 800b740:	e7d6      	b.n	800b6f0 <_malloc_r+0xa8>
 800b742:	bf00      	nop
 800b744:	20000af4 	.word	0x20000af4

0800b748 <__malloc_lock>:
 800b748:	4801      	ldr	r0, [pc, #4]	@ (800b750 <__malloc_lock+0x8>)
 800b74a:	f000 b84b 	b.w	800b7e4 <__retarget_lock_acquire_recursive>
 800b74e:	bf00      	nop
 800b750:	20000c34 	.word	0x20000c34

0800b754 <__malloc_unlock>:
 800b754:	4801      	ldr	r0, [pc, #4]	@ (800b75c <__malloc_unlock+0x8>)
 800b756:	f000 b846 	b.w	800b7e6 <__retarget_lock_release_recursive>
 800b75a:	bf00      	nop
 800b75c:	20000c34 	.word	0x20000c34

0800b760 <memset>:
 800b760:	4402      	add	r2, r0
 800b762:	4603      	mov	r3, r0
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <memset+0xa>
 800b768:	4770      	bx	lr
 800b76a:	f803 1b01 	strb.w	r1, [r3], #1
 800b76e:	e7f9      	b.n	800b764 <memset+0x4>

0800b770 <_sbrk_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d06      	ldr	r5, [pc, #24]	@ (800b78c <_sbrk_r+0x1c>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	f7f5 fabe 	bl	8000cfc <_sbrk>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_sbrk_r+0x1a>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	b103      	cbz	r3, 800b78a <_sbrk_r+0x1a>
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	20000c30 	.word	0x20000c30

0800b790 <__errno>:
 800b790:	4b01      	ldr	r3, [pc, #4]	@ (800b798 <__errno+0x8>)
 800b792:	6818      	ldr	r0, [r3, #0]
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	20000034 	.word	0x20000034

0800b79c <__libc_init_array>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	4d0d      	ldr	r5, [pc, #52]	@ (800b7d4 <__libc_init_array+0x38>)
 800b7a0:	4c0d      	ldr	r4, [pc, #52]	@ (800b7d8 <__libc_init_array+0x3c>)
 800b7a2:	1b64      	subs	r4, r4, r5
 800b7a4:	10a4      	asrs	r4, r4, #2
 800b7a6:	2600      	movs	r6, #0
 800b7a8:	42a6      	cmp	r6, r4
 800b7aa:	d109      	bne.n	800b7c0 <__libc_init_array+0x24>
 800b7ac:	4d0b      	ldr	r5, [pc, #44]	@ (800b7dc <__libc_init_array+0x40>)
 800b7ae:	4c0c      	ldr	r4, [pc, #48]	@ (800b7e0 <__libc_init_array+0x44>)
 800b7b0:	f000 f864 	bl	800b87c <_init>
 800b7b4:	1b64      	subs	r4, r4, r5
 800b7b6:	10a4      	asrs	r4, r4, #2
 800b7b8:	2600      	movs	r6, #0
 800b7ba:	42a6      	cmp	r6, r4
 800b7bc:	d105      	bne.n	800b7ca <__libc_init_array+0x2e>
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7c4:	4798      	blx	r3
 800b7c6:	3601      	adds	r6, #1
 800b7c8:	e7ee      	b.n	800b7a8 <__libc_init_array+0xc>
 800b7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ce:	4798      	blx	r3
 800b7d0:	3601      	adds	r6, #1
 800b7d2:	e7f2      	b.n	800b7ba <__libc_init_array+0x1e>
 800b7d4:	0801f594 	.word	0x0801f594
 800b7d8:	0801f594 	.word	0x0801f594
 800b7dc:	0801f594 	.word	0x0801f594
 800b7e0:	0801f598 	.word	0x0801f598

0800b7e4 <__retarget_lock_acquire_recursive>:
 800b7e4:	4770      	bx	lr

0800b7e6 <__retarget_lock_release_recursive>:
 800b7e6:	4770      	bx	lr

0800b7e8 <_free_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	2900      	cmp	r1, #0
 800b7ee:	d041      	beq.n	800b874 <_free_r+0x8c>
 800b7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f4:	1f0c      	subs	r4, r1, #4
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	bfb8      	it	lt
 800b7fa:	18e4      	addlt	r4, r4, r3
 800b7fc:	f7ff ffa4 	bl	800b748 <__malloc_lock>
 800b800:	4a1d      	ldr	r2, [pc, #116]	@ (800b878 <_free_r+0x90>)
 800b802:	6813      	ldr	r3, [r2, #0]
 800b804:	b933      	cbnz	r3, 800b814 <_free_r+0x2c>
 800b806:	6063      	str	r3, [r4, #4]
 800b808:	6014      	str	r4, [r2, #0]
 800b80a:	4628      	mov	r0, r5
 800b80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b810:	f7ff bfa0 	b.w	800b754 <__malloc_unlock>
 800b814:	42a3      	cmp	r3, r4
 800b816:	d908      	bls.n	800b82a <_free_r+0x42>
 800b818:	6820      	ldr	r0, [r4, #0]
 800b81a:	1821      	adds	r1, r4, r0
 800b81c:	428b      	cmp	r3, r1
 800b81e:	bf01      	itttt	eq
 800b820:	6819      	ldreq	r1, [r3, #0]
 800b822:	685b      	ldreq	r3, [r3, #4]
 800b824:	1809      	addeq	r1, r1, r0
 800b826:	6021      	streq	r1, [r4, #0]
 800b828:	e7ed      	b.n	800b806 <_free_r+0x1e>
 800b82a:	461a      	mov	r2, r3
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	b10b      	cbz	r3, 800b834 <_free_r+0x4c>
 800b830:	42a3      	cmp	r3, r4
 800b832:	d9fa      	bls.n	800b82a <_free_r+0x42>
 800b834:	6811      	ldr	r1, [r2, #0]
 800b836:	1850      	adds	r0, r2, r1
 800b838:	42a0      	cmp	r0, r4
 800b83a:	d10b      	bne.n	800b854 <_free_r+0x6c>
 800b83c:	6820      	ldr	r0, [r4, #0]
 800b83e:	4401      	add	r1, r0
 800b840:	1850      	adds	r0, r2, r1
 800b842:	4283      	cmp	r3, r0
 800b844:	6011      	str	r1, [r2, #0]
 800b846:	d1e0      	bne.n	800b80a <_free_r+0x22>
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	6053      	str	r3, [r2, #4]
 800b84e:	4408      	add	r0, r1
 800b850:	6010      	str	r0, [r2, #0]
 800b852:	e7da      	b.n	800b80a <_free_r+0x22>
 800b854:	d902      	bls.n	800b85c <_free_r+0x74>
 800b856:	230c      	movs	r3, #12
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	e7d6      	b.n	800b80a <_free_r+0x22>
 800b85c:	6820      	ldr	r0, [r4, #0]
 800b85e:	1821      	adds	r1, r4, r0
 800b860:	428b      	cmp	r3, r1
 800b862:	bf04      	itt	eq
 800b864:	6819      	ldreq	r1, [r3, #0]
 800b866:	685b      	ldreq	r3, [r3, #4]
 800b868:	6063      	str	r3, [r4, #4]
 800b86a:	bf04      	itt	eq
 800b86c:	1809      	addeq	r1, r1, r0
 800b86e:	6021      	streq	r1, [r4, #0]
 800b870:	6054      	str	r4, [r2, #4]
 800b872:	e7ca      	b.n	800b80a <_free_r+0x22>
 800b874:	bd38      	pop	{r3, r4, r5, pc}
 800b876:	bf00      	nop
 800b878:	20000af4 	.word	0x20000af4

0800b87c <_init>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	bf00      	nop
 800b880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b882:	bc08      	pop	{r3}
 800b884:	469e      	mov	lr, r3
 800b886:	4770      	bx	lr

0800b888 <_fini>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	bf00      	nop
 800b88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88e:	bc08      	pop	{r3}
 800b890:	469e      	mov	lr, r3
 800b892:	4770      	bx	lr
