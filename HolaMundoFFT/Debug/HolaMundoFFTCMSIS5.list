
HolaMundoFFTCMSIS5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013cf8  0800b868  0800b868  0000c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f560  0801f560  0002107c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f560  0801f560  00020560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f568  0801f568  0002107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f568  0801f568  00020568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f56c  0801f56c  0002056c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0801f570  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002107c  2**0
                  CONTENTS
 10 .bss          00000bb8  2000007c  2000007c  0002107c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c34  20000c34  0002107c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002107c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001908b  00000000  00000000  000210ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004747  00000000  00000000  0003a137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6f  00000000  00000000  0003fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026142  00000000  00000000  00040a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020af2  00000000  00000000  00066b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf56a  00000000  00000000  0008768b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156bf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005004  00000000  00000000  00156c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b850 	.word	0x0800b850

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800b850 	.word	0x0800b850

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	4b72      	ldr	r3, [pc, #456]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a71      	ldr	r2, [pc, #452]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b6f      	ldr	r3, [pc, #444]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0310 	and.w	r3, r3, #16
 80004e6:	61bb      	str	r3, [r7, #24]
 80004e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	4b6b      	ldr	r3, [pc, #428]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a6a      	ldr	r2, [pc, #424]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b68      	ldr	r3, [pc, #416]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a63      	ldr	r2, [pc, #396]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b61      	ldr	r3, [pc, #388]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a5c      	ldr	r2, [pc, #368]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b5a      	ldr	r3, [pc, #360]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b56      	ldr	r3, [pc, #344]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a55      	ldr	r2, [pc, #340]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a4e      	ldr	r2, [pc, #312]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b4c      	ldr	r3, [pc, #304]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	4849      	ldr	r0, [pc, #292]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800057c:	f003 fda4 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4847      	ldr	r0, [pc, #284]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 8000586:	f003 fd9f 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000590:	4845      	ldr	r0, [pc, #276]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000592:	f003 fd99 	bl	80040c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000596:	2308      	movs	r3, #8
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	483c      	ldr	r0, [pc, #240]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 80005ae:	f003 fbef 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4836      	ldr	r0, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ca:	f003 fbe1 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005de:	2305      	movs	r3, #5
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	482e      	ldr	r0, [pc, #184]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ea:	f003 fbd1 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	482a      	ldr	r0, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x1f4>)
 8000604:	f003 fbc4 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000608:	2304      	movs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4825      	ldr	r0, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800061c:	f003 fbb8 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000632:	2305      	movs	r3, #5
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800063e:	f003 fba7 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000646:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 800065c:	f003 fb98 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000674:	f003 fb8c 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800068e:	f003 fb7f 	bl	8003d90 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3730      	adds	r7, #48	@ 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f005 fe37 	bl	8006364 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 fa02 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000098 	.word	0x20000098
 8000708:	40005400 	.word	0x40005400
 800070c:	000186a0 	.word	0x000186a0

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <HAL_I2C_MspInit+0x84>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d12c      	bne.n	800078c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800074e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0x8c>)
 800076c:	f003 fb10 	bl	8003d90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_I2S3_Init+0x5c>)
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f005 ff04 	bl	80065ec <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f98b 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000ec 	.word	0x200000ec
 80007f8:	40003c00 	.word	0x40003c00
 80007fc:	00017700 	.word	0x00017700

08000800 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <HAL_I2S_MspInit+0xf0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d15a      	bne.n	80008e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000834:	23c0      	movs	r3, #192	@ 0xc0
 8000836:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f006 fff7 	bl	8007834 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800084c:	f000 f95a 	bl	8000b04 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6313      	str	r3, [r2, #48]	@ 0x30
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <HAL_I2S_MspInit+0xf8>)
 80008c0:	f003 fa66 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <HAL_I2S_MspInit+0xfc>)
 80008e2:	f003 fa55 	bl	8003d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3738      	adds	r7, #56	@ 0x38
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40003c00 	.word	0x40003c00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f003 f89b 	bl	8003a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f891 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f7ff fdd3 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000912:	f7ff fecf 	bl	80006b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000916:	f7ff ff43 	bl	80007a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800091a:	f000 f8f9 	bl	8000b10 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800091e:	f00a fb41 	bl	800afa4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  if(!flag){
 8000922:	4b3c      	ldr	r3, [pc, #240]	@ (8000a14 <main+0x114>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d11f      	bne.n	800096a <main+0x6a>
	  for(int i = 0; i < FFT_Length; i++){
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e010      	b.n	8000952 <main+0x52>
		  fft_input[i] = 1;
 8000930:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <main+0x118>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800093c:	601a      	str	r2, [r3, #0]
		  fft_keeper[i] = 1;
 800093e:	4a37      	ldr	r2, [pc, #220]	@ (8000a1c <main+0x11c>)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800094a:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < FFT_Length; i++){
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b1f      	cmp	r3, #31
 8000956:	ddeb      	ble.n	8000930 <main+0x30>
	  }
	  fft_input[5] = 1;
 8000958:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <main+0x118>)
 800095a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800095e:	615a      	str	r2, [r3, #20]
	  fft_keeper[5] = 1;
 8000960:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <main+0x11c>)
 8000962:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	e02f      	b.n	80009ca <main+0xca>
  }
  else{
	  for (int i = 0; i < FFT_Length; i++) {
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	e029      	b.n	80009c4 <main+0xc4>
		  fft_input[i] = 10.0f * arm_sin_f32(2 * PI * 10 * i / FFT_Length);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000a20 <main+0x120>
 800097e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000982:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000a24 <main+0x124>
 8000986:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800098a:	eeb0 0a47 	vmov.f32	s0, s14
 800098e:	f000 fa11 	bl	8000db4 <arm_sin_f32>
 8000992:	eef0 7a40 	vmov.f32	s15, s0
 8000996:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800099a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <main+0x118>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	edc3 7a00 	vstr	s15, [r3]
		  fft_keeper[i] = fft_input[i];
 80009aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <main+0x118>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4919      	ldr	r1, [pc, #100]	@ (8000a1c <main+0x11c>)
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < FFT_Length; i++) {
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b1f      	cmp	r3, #31
 80009c8:	ddd2      	ble.n	8000970 <main+0x70>
	  }
  }
  arm_rfft_fast_init_f32(&fft_handler,FFT_Length);
 80009ca:	2120      	movs	r1, #32
 80009cc:	4816      	ldr	r0, [pc, #88]	@ (8000a28 <main+0x128>)
 80009ce:	f002 ffcf 	bl	8003970 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  arm_rfft_fast_f32(&fft_handler, (float32_t *)&fft_input, (float32_t *)&fft_output,0);
 80009d2:	2300      	movs	r3, #0
 80009d4:	4a15      	ldr	r2, [pc, #84]	@ (8000a2c <main+0x12c>)
 80009d6:	4910      	ldr	r1, [pc, #64]	@ (8000a18 <main+0x118>)
 80009d8:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <main+0x128>)
 80009da:	f002 fe78 	bl	80036ce <arm_rfft_fast_f32>
	  for(int i = 0; i < FFT_Length; i++){
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	e00c      	b.n	80009fe <main+0xfe>
		  fft_input[i] = fft_keeper[i];
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <main+0x11c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	490a      	ldr	r1, [pc, #40]	@ (8000a18 <main+0x118>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	440b      	add	r3, r1
 80009f6:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < FFT_Length; i++){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b1f      	cmp	r3, #31
 8000a02:	ddef      	ble.n	80009e4 <main+0xe4>

	  }
	  HAL_Delay(500);
 8000a04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a08:	f003 f88c 	bl	8003b24 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a0c:	f00a faf0 	bl	800aff0 <MX_USB_HOST_Process>
	  arm_rfft_fast_f32(&fft_handler, (float32_t *)&fft_input, (float32_t *)&fft_output,0);
 8000a10:	e7df      	b.n	80009d2 <main+0xd2>
 8000a12:	bf00      	nop
 8000a14:	200002cc 	.word	0x200002cc
 8000a18:	2000014c 	.word	0x2000014c
 8000a1c:	200001cc 	.word	0x200001cc
 8000a20:	427b53d2 	.word	0x427b53d2
 8000a24:	42000000 	.word	0x42000000
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	2000024c 	.word	0x2000024c

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	@ 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	@ 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00a fe78 	bl	800b734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a27      	ldr	r2, [pc, #156]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f006 fa38 	bl	8006f2c <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ac2:	f000 f81f 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ad6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2105      	movs	r1, #5
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f006 fc99 	bl	800741c <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000af0:	f000 f808 	bl	8000b04 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3750      	adds	r7, #80	@ 0x50
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b16:	4a18      	ldr	r2, [pc, #96]	@ (8000b78 <MX_SPI1_Init+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b62:	f006 ffa9 	bl	8007ab8 <HAL_SPI_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b6c:	f7ff ffca 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200002d0 	.word	0x200002d0
 8000b78:	40013000 	.word	0x40013000

08000b7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <HAL_SPI_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12b      	bne.n	8000bf6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bd6:	23e0      	movs	r3, #224	@ 0xe0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <HAL_SPI_MspInit+0x8c>)
 8000bf2:	f003 f8cd 	bl	8003d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40013000 	.word	0x40013000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	f003 f85e 	bl	8003d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f002 ff17 	bl	8003ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <OTG_FS_IRQHandler+0x10>)
 8000cc2:	f003 fcfb 	bl	80046bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000070c 	.word	0x2000070c

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f00a fd30 	bl	800b764 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20020000 	.word	0x20020000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000328 	.word	0x20000328
 8000d38:	20000c38 	.word	0x20000c38

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f00a fcef 	bl	800b770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fdb5 	bl	8000900 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000da4:	0801f570 	.word	0x0801f570
  ldr r2, =_sbss
 8000da8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dac:	20000c34 	.word	0x20000c34

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <arm_sin_f32>:
  @return        sin(x)
 */

ARM_DSP_ATTRIBUTE float32_t arm_sin_f32(
  float32_t x)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b08b      	sub	sp, #44	@ 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000eac <arm_sin_f32+0xf8>
 8000dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dca:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd6:	ee17 3a90 	vmov	r3, s15
 8000dda:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000ddc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de8:	d502      	bpl.n	8000df0 <arm_sin_f32+0x3c>
  {
    n--;
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e0a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000eb0 <arm_sin_f32+0xfc>
 8000e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e12:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8000e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1e:	ee17 3a90 	vmov	r3, s15
 8000e22:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8000e24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e2a:	d309      	bcc.n	8000e40 <arm_sin_f32+0x8c>
    index = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e34:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000eb0 <arm_sin_f32+0xfc>
 8000e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e3c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000e40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e52:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8000e56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e58:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <arm_sin_f32+0x100>)
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000e62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <arm_sin_f32+0x100>)
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8000e70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e84:	edd7 6a05 	vldr	s13, [r7, #20]
 8000e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e94:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	ee07 3a90 	vmov	s15, r3
}
 8000e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea2:	372c      	adds	r7, #44	@ 0x2c
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	3e22f983 	.word	0x3e22f983
 8000eb0:	44000000 	.word	0x44000000
 8000eb4:	0801ecdc 	.word	0x0801ecdc

08000eb8 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	e043      	b.n	8000f54 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	441a      	add	r2, r3
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	68f9      	ldr	r1, [r7, #12]
 8000f08:	440b      	add	r3, r1
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	441a      	add	r2, r3
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	3301      	adds	r3, #1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	440b      	add	r3, r1
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]

    i += 2;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3302      	adds	r3, #2
 8000f52:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3b7      	bcc.n	8000ecc <arm_bitreversal_32+0x14>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <arm_cfft_radix8by2_f32>:
  @par Size of buffers according to the target architecture and datatype:
       They are described on the page \ref transformbuffers "transform buffers".
 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b0a0      	sub	sp, #128	@ 0x80
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8000f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f90:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 8000f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000f98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8000fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000fa8:	4413      	add	r3, r2
 8000faa:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000fb2:	e1b6      	b.n	8001322 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 8000fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8000fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8000fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 8000fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8000fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8000fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8000ff0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8000ff6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 8000ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8001002:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800100e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8001014:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001018:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	1d1a      	adds	r2, r3, #4
 8001020:	603a      	str	r2, [r7, #0]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800102a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800102e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	1d1a      	adds	r2, r3, #4
 8001036:	603a      	str	r2, [r7, #0]
 8001038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001040:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001044:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	603a      	str	r2, [r7, #0]
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001052:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8001056:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800105a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	1d1a      	adds	r2, r3, #4
 8001062:	603a      	str	r2, [r7, #0]
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800106c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001070:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001078:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 800107c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001080:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001088:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 800108c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001090:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800109c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80010a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 80010ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80010b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80010c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010cc:	1d1a      	adds	r2, r3, #4
 80010ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80010d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80010dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80010e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80010ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80010f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010f8:	1d1a      	adds	r2, r3, #4
 80010fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8001104:	ed97 7a02 	vldr	s14, [r7, #8]
 8001108:	edd7 7a06 	vldr	s15, [r7, #24]
 800110c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001110:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8001114:	ed97 7a03 	vldr	s14, [r7, #12]
 8001118:	edd7 7a07 	vldr	s15, [r7, #28]
 800111c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001120:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8001124:	ed97 7a04 	vldr	s14, [r7, #16]
 8001128:	edd7 7a08 	vldr	s15, [r7, #32]
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8001134:	ed97 7a05 	vldr	s14, [r7, #20]
 8001138:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800113c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001140:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8001144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001146:	1d1a      	adds	r2, r3, #4
 8001148:	673a      	str	r2, [r7, #112]	@ 0x70
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 800114e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001150:	1d1a      	adds	r2, r3, #4
 8001152:	673a      	str	r2, [r7, #112]	@ 0x70
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001158:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800115c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001164:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8001168:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800116c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8001178:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800117c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8001188:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800118c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8001198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800119a:	1d1a      	adds	r2, r3, #4
 800119c:	677a      	str	r2, [r7, #116]	@ 0x74
 800119e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80011a2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80011a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011aa:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80011ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011b0:	1d1a      	adds	r2, r3, #4
 80011b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80011b4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80011b8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80011bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c0:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80011c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 80011e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 80011f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8001204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001206:	1d1a      	adds	r2, r3, #4
 8001208:	67ba      	str	r2, [r7, #120]	@ 0x78
 800120a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800120e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800121a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800121c:	1d1a      	adds	r2, r3, #4
 800121e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001220:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001224:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	673a      	str	r2, [r7, #112]	@ 0x70
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 800123a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800123c:	1d1a      	adds	r2, r3, #4
 800123e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 8001244:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001248:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 8001254:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001258:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 8001264:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001268:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 8001274:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001278:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001280:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 8001284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001286:	1d1a      	adds	r2, r3, #4
 8001288:	677a      	str	r2, [r7, #116]	@ 0x74
 800128a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800128e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800129a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800129c:	1d1a      	adds	r2, r3, #4
 800129e:	677a      	str	r2, [r7, #116]	@ 0x74
 80012a0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80012a4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80012a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ac:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 80012c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 80012d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80012d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012dc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80012e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ec:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80012f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80012f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012fa:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80012fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001302:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001308:	1d1a      	adds	r2, r3, #4
 800130a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800130c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001310:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800131c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800131e:	3b01      	subs	r3, #1
 8001320:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f ae45 	bne.w	8000fb4 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800132a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800132c:	b299      	uxth	r1, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	2302      	movs	r3, #2
 8001334:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001336:	f001 f80f 	bl	8002358 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800133a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800133c:	b299      	uxth	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2302      	movs	r3, #2
 8001344:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001346:	f001 f807 	bl	8002358 <arm_radix8_butterfly_f32>
}
 800134a:	bf00      	nop
 800134c:	3780      	adds	r7, #128	@ 0x80
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b0ac      	sub	sp, #176	@ 0xb0
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	b29b      	uxth	r3, r3
 8001364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001368:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	4413      	add	r3, r2
 8001372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8001376:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001380:	4413      	add	r3, r2
 8001382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 8001386:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001390:	4413      	add	r3, r2
 8001392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 800139a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800139e:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 80013a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013a4:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 80013a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013aa:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80013ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013b0:	3b04      	subs	r3, #4
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 80013b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013ba:	3b04      	subs	r3, #4
 80013bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80013c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013c4:	3b04      	subs	r3, #4
 80013c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80013ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80013d4:	4413      	add	r3, r2
 80013d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 80013f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8001400:	2304      	movs	r3, #4
 8001402:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8001404:	2306      	movs	r3, #6
 8001406:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001430:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3304      	adds	r3, #4
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001440:	3304      	adds	r3, #4
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3304      	adds	r3, #4
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800145a:	3304      	adds	r3, #4
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001468:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800146c:	3304      	adds	r3, #4
 800146e:	ed93 7a00 	vldr	s14, [r3]
 8001472:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800147e:	3304      	adds	r3, #4
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001488:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800148c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80014ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80014b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80014cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014d0:	3304      	adds	r3, #4
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80014da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014e2:	3304      	adds	r3, #4
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80014f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014f4:	3304      	adds	r3, #4
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80014fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001502:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001506:	3304      	adds	r3, #4
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001510:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001518:	ed93 7a00 	vldr	s14, [r3]
 800151c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001524:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	1d1a      	adds	r2, r3, #4
 8001550:	603a      	str	r2, [r7, #0]
 8001552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001556:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800155a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800155e:	3304      	adds	r3, #4
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001570:	3304      	adds	r3, #4
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	1d1a      	adds	r2, r3, #4
 800157a:	603a      	str	r2, [r7, #0]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8001584:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001588:	1d1a      	adds	r2, r3, #4
 800158a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800158e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001590:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001592:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001596:	1d1a      	adds	r2, r3, #4
 8001598:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800159c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800159e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80015a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015a4:	1d1a      	adds	r2, r3, #4
 80015a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80015ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015b2:	1d1a      	adds	r2, r3, #4
 80015b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015b8:	6a3a      	ldr	r2, [r7, #32]
 80015ba:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80015bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015c0:	1d1a      	adds	r2, r3, #4
 80015c2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80015ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015ce:	1d1a      	adds	r2, r3, #4
 80015d0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80015d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80015e0:	4413      	add	r3, r2
 80015e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 80015e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80015ee:	4413      	add	r3, r2
 80015f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 80015f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015fc:	4413      	add	r3, r2
 80015fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8001602:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001606:	3b02      	subs	r3, #2
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800160e:	e31c      	b.n	8001c4a <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	ed93 7a00 	vldr	s14, [r3]
 8001616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	ed93 7a00 	vldr	s14, [r3]
 800162c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001648:	3304      	adds	r3, #4
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3304      	adds	r3, #4
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001662:	3304      	adds	r3, #4
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001670:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001674:	3304      	adds	r3, #4
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800167e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001682:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001686:	3304      	adds	r3, #4
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001690:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80016a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80016b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80016d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016d8:	3304      	adds	r3, #4
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80016e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016ea:	3304      	adds	r3, #4
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f4:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80016f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016fc:	3304      	adds	r3, #4
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800170e:	3304      	adds	r3, #4
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800171c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800173c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800174c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	603a      	str	r2, [r7, #0]
 800175a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175e:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001762:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001766:	3304      	adds	r3, #4
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001778:	3304      	adds	r3, #4
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	1d1a      	adds	r2, r3, #4
 8001782:	603a      	str	r2, [r7, #0]
 8001784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001788:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800178c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001790:	3b04      	subs	r3, #4
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800179a:	3b04      	subs	r3, #4
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80017a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017ac:	3b04      	subs	r3, #4
 80017ae:	ed93 7a00 	vldr	s14, [r3]
 80017b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017b6:	3b04      	subs	r3, #4
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80017c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80017dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80017f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001808:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001818:	ed93 7a00 	vldr	s14, [r3]
 800181c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800182c:	3b04      	subs	r3, #4
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800183a:	3b04      	subs	r3, #4
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800184c:	3b04      	subs	r3, #4
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800185e:	3b04      	subs	r3, #4
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001868:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800186c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001888:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800188c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a8:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80018ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018b0:	3b04      	subs	r3, #4
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018ba:	3b04      	subs	r3, #4
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80018c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018cc:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80018d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80018dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ec:	1f1a      	subs	r2, r3, #4
 80018ee:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80018f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80018fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018fe:	3b04      	subs	r3, #4
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001910:	3b04      	subs	r3, #4
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800191a:	1f1a      	subs	r2, r3, #4
 800191c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8001928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8001936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8001944:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001948:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800194c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001950:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8001954:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001958:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8001964:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001968:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800196c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001970:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8001974:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001978:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8001984:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001988:	1d1a      	adds	r2, r3, #4
 800198a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800198e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001992:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800199e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019a2:	1d1a      	adds	r2, r3, #4
 80019a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80019a8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80019ac:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80019b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 80019c8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019cc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 80019d8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019dc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 80019e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 80019f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019fc:	1f1a      	subs	r2, r3, #4
 80019fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001a02:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001a06:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a16:	1f1a      	subs	r2, r3, #4
 8001a18:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001a1c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a20:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8001a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a38:	3304      	adds	r3, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8001a3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001a46:	4413      	add	r3, r2
 8001a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001a4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a50:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8001a5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a60:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8001a6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a70:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8001a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a80:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8001a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a90:	1d1a      	adds	r2, r3, #4
 8001a92:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a96:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001a9a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aaa:	1d1a      	adds	r2, r3, #4
 8001aac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ab0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ab4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abc:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001ac0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ac4:	eef1 7a67 	vneg.f32	s15, s15
 8001ac8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8001ad4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ad8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8001ae4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ae8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8001af4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001af8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b00:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8001b04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b08:	1f1a      	subs	r2, r3, #4
 8001b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b0e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001b12:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b22:	1f1a      	subs	r2, r3, #4
 8001b24:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b28:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b2c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8001b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b44:	3304      	adds	r3, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8001b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b52:	4413      	add	r3, r2
 8001b54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b5c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b64:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8001b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b74:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8001b78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b7c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8001b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8001b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b9c:	1d1a      	adds	r2, r3, #4
 8001b9e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001ba2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ba6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001bbc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001bc0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8001bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8001bec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8001bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c00:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8001c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c10:	1f1a      	subs	r2, r3, #4
 8001c12:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001c16:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001c1a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c2a:	1f1a      	subs	r2, r3, #4
 8001c2c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001c30:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001c34:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c44:	3b01      	subs	r3, #1
 8001c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f acde 	bne.w	8001610 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	3304      	adds	r3, #4
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	ed93 7a00 	vldr	s14, [r3]
 8001ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cb8:	3304      	adds	r3, #4
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cca:	3304      	adds	r3, #4
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001ce4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2e:	3304      	adds	r3, #4
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d40:	3304      	adds	r3, #4
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d52:	3304      	adds	r3, #4
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	1d1a      	adds	r2, r3, #4
 8001d9c:	603a      	str	r2, [r7, #0]
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001daa:	3304      	adds	r3, #4
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	1d1a      	adds	r2, r3, #4
 8001dc6:	603a      	str	r2, [r7, #0]
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 8001dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ddc:	3304      	adds	r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8001de2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001de6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8001df2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001df6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8001e02:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e06:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8001e12:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e16:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8001e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e26:	1d1a      	adds	r2, r3, #4
 8001e28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001e2c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001e30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e40:	1d1a      	adds	r2, r3, #4
 8001e42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001e46:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001e4a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8001e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e62:	3304      	adds	r3, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8001e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e74:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8001e78:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e7c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8001e88:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e8c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8001e98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e9c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8001ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eac:	1d1a      	adds	r2, r3, #4
 8001eae:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001eb2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001eb6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ec6:	1d1a      	adds	r2, r3, #4
 8001ec8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ecc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ed0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8001ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ee8:	3304      	adds	r3, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8001eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 8001efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f02:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8001f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f12:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8001f1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f22:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8001f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001f38:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001f3c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f44:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f4c:	1d1a      	adds	r2, r3, #4
 8001f4e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001f52:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001f56:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f66:	b299      	uxth	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001f70:	f000 f9f2 	bl	8002358 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	2304      	movs	r3, #4
 8001f80:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001f82:	f000 f9e9 	bl	8002358 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f8a:	b299      	uxth	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	2304      	movs	r3, #4
 8001f92:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f94:	f000 f9e0 	bl	8002358 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f9c:	b299      	uxth	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001fa6:	f000 f9d7 	bl	8002358 <arm_radix8_butterfly_f32>
}
 8001faa:	bf00      	nop
 8001fac:	37b0      	adds	r7, #176	@ 0xb0
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b088      	sub	sp, #32
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d117      	bne.n	8002004 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e00d      	b.n	8001ffc <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	eef1 7a67 	vneg.f32	s15, s15
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3ed      	bcc.n	8001fe0 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800200a:	d040      	beq.n	800208e <arm_cfft_f32+0xdc>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002012:	d845      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800201a:	d033      	beq.n	8002084 <arm_cfft_f32+0xd2>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002022:	d83d      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202a:	d026      	beq.n	800207a <arm_cfft_f32+0xc8>
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002032:	d835      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800203a:	d028      	beq.n	800208e <arm_cfft_f32+0xdc>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002042:	d82d      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204a:	d01b      	beq.n	8002084 <arm_cfft_f32+0xd2>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002052:	d825      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b80      	cmp	r3, #128	@ 0x80
 8002058:	d00f      	beq.n	800207a <arm_cfft_f32+0xc8>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b80      	cmp	r3, #128	@ 0x80
 800205e:	d81f      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b40      	cmp	r3, #64	@ 0x40
 8002064:	d013      	beq.n	800208e <arm_cfft_f32+0xdc>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b40      	cmp	r3, #64	@ 0x40
 800206a:	d819      	bhi.n	80020a0 <arm_cfft_f32+0xee>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b10      	cmp	r3, #16
 8002070:	d003      	beq.n	800207a <arm_cfft_f32+0xc8>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b20      	cmp	r3, #32
 8002076:	d005      	beq.n	8002084 <arm_cfft_f32+0xd2>
 8002078:	e012      	b.n	80020a0 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7fe ff74 	bl	8000f6a <arm_cfft_radix8by2_f32>
    break;
 8002082:	e00d      	b.n	80020a0 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff f963 	bl	8001352 <arm_cfft_radix8by4_f32>
    break;
 800208c:	e008      	b.n	80020a0 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	b299      	uxth	r1, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	2301      	movs	r3, #1
 8002098:	68b8      	ldr	r0, [r7, #8]
 800209a:	f000 f95d 	bl	8002358 <arm_radix8_butterfly_f32>
    break;
 800209e:	bf00      	nop
  }

  if ( bitReverseFlag )
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8999      	ldrh	r1, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68b8      	ldr	r0, [r7, #8]
 80020b2:	f7fe ff01 	bl	8000eb8 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d130      	bne.n	800211e <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ce:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e01c      	b.n	8002116 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	61ba      	str	r2, [r7, #24]
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	eeb1 7a67 	vneg.f32	s14, s15
 80020fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	3304      	adds	r3, #4
 800210e:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3301      	adds	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	429a      	cmp	r2, r3
 800211c:	d3de      	bcc.n	80020dc <arm_cfft_f32+0x12a>
    }
  }
}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800213a:	801a      	strh	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <arm_cfft_init_2048_f32+0x44>)
 8002144:	899a      	ldrh	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	819a      	strh	r2, [r3, #12]
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <arm_cfft_init_2048_f32+0x44>)
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <arm_cfft_init_2048_f32+0x44>)
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0801f550 	.word	0x0801f550

08002170 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <arm_cfft_init_1024_f32+0x44>)
 800218c:	899a      	ldrh	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	819a      	strh	r2, [r3, #12]
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <arm_cfft_init_1024_f32+0x44>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <arm_cfft_init_1024_f32+0x44>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	0801f540 	.word	0x0801f540

080021b8 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <arm_cfft_init_512_f32+0x44>)
 80021d4:	899a      	ldrh	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	819a      	strh	r2, [r3, #12]
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <arm_cfft_init_512_f32+0x44>)
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <arm_cfft_init_512_f32+0x44>)
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	0801f530 	.word	0x0801f530

08002200 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <arm_cfft_init_256_f32+0x44>)
 800221c:	899a      	ldrh	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	819a      	strh	r2, [r3, #12]
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <arm_cfft_init_256_f32+0x44>)
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <arm_cfft_init_256_f32+0x44>)
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	0801f520 	.word	0x0801f520

08002248 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <arm_cfft_init_128_f32+0x40>)
 8002262:	899a      	ldrh	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	819a      	strh	r2, [r3, #12]
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <arm_cfft_init_128_f32+0x40>)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <arm_cfft_init_128_f32+0x40>)
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	0801f510 	.word	0x0801f510

0800228c <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2240      	movs	r2, #64	@ 0x40
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <arm_cfft_init_64_f32+0x40>)
 80022a6:	899a      	ldrh	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	819a      	strh	r2, [r3, #12]
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <arm_cfft_init_64_f32+0x40>)
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <arm_cfft_init_64_f32+0x40>)
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	0801f500 	.word	0x0801f500

080022d0 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <arm_cfft_init_32_f32+0x40>)
 80022ea:	899a      	ldrh	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	819a      	strh	r2, [r3, #12]
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <arm_cfft_init_32_f32+0x40>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <arm_cfft_init_32_f32+0x40>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	0801f4f0 	.word	0x0801f4f0

08002314 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2210      	movs	r2, #16
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <arm_cfft_init_16_f32+0x40>)
 800232e:	899a      	ldrh	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	819a      	strh	r2, [r3, #12]
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <arm_cfft_init_16_f32+0x40>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <arm_cfft_init_16_f32+0x40>)
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	0801f4e0 	.word	0x0801f4e0

08002358 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002358:	b480      	push	{r7}
 800235a:	b0bd      	sub	sp, #244	@ 0xf4
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	461a      	mov	r2, r3
 8002364:	460b      	mov	r3, r1
 8002366:	817b      	strh	r3, [r7, #10]
 8002368:	4613      	mov	r3, r2
 800236a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <arm_radix8_butterfly_f32+0x3c>)
 800236e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8002378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800237c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8002380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002390:	e002      	b.n	8002398 <arm_radix8_butterfly_f32+0x40>
 8002392:	bf00      	nop
 8002394:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8002398:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800239c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a0:	4413      	add	r3, r2
 80023a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 80023a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80023aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ae:	4413      	add	r3, r2
 80023b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 80023b4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023bc:	4413      	add	r3, r2
 80023be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 80023c2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80023c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ca:	4413      	add	r3, r2
 80023cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 80023d0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d8:	4413      	add	r3, r2
 80023da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 80023de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e6:	4413      	add	r3, r2
 80023e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 80023ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80023f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023f4:	4413      	add	r3, r2
 80023f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80023fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800241e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	ed93 7a00 	vldr	s14, [r3]
 800242c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	ed93 7a00 	vldr	s14, [r3]
 8002450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4413      	add	r3, r2
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002462:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	ed93 7a00 	vldr	s14, [r3]
 8002474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4413      	add	r3, r2
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002486:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800248a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4413      	add	r3, r2
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80024ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ce:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80024d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80024f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	ed93 7a00 	vldr	s14, [r3]
 8002504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002516:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 800251a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800251e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002526:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 800252a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800252e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 800253a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800253e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002546:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 800254a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800254e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002556:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 800255a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002568:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002570:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002582:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800258e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	3304      	adds	r3, #4
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3304      	adds	r3, #4
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80025b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	3304      	adds	r3, #4
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3304      	adds	r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025da:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80025de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	3304      	adds	r3, #4
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3304      	adds	r3, #4
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3304      	adds	r3, #4
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3304      	adds	r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800262e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3304      	adds	r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002652:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002656:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	3304      	adds	r3, #4
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	ed93 7a00 	vldr	s14, [r3]
 8002666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3304      	adds	r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800267e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	3304      	adds	r3, #4
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	3304      	adds	r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80026a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	3304      	adds	r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ca:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 80026ce:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80026d2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 80026de:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80026e2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 80026ee:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80026f2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80026f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 80026fe:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002702:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800270e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	3304      	adds	r3, #4
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4413      	add	r3, r2
 800271a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800271e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800272a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	3304      	adds	r3, #4
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800273a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002746:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002754:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800276e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002776:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800277a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	3304      	adds	r3, #4
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4413      	add	r3, r2
 8002786:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800278a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	3304      	adds	r3, #4
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80027a6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80027b2:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80027b6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 80027ca:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80027ce:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027de:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 80027e2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80027e6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80027ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ee:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 80027fa:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80027fe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8002812:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002816:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800281a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8002822:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002826:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800282a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8002832:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002836:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800283a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8002842:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002846:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8002852:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002856:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800285a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8002862:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002866:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8002872:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002876:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800287a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8002882:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002886:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80028a0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80028ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80028ba:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80028c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80028d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80028e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80028ee:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80028fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	3304      	adds	r3, #4
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4413      	add	r3, r2
 8002906:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800290a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3304      	adds	r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002926:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800292a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	3304      	adds	r3, #4
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002942:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800294e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800295e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002966:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800296a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800296e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002972:	4413      	add	r3, r2
 8002974:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8002978:	897b      	ldrh	r3, [r7, #10]
 800297a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800297e:	429a      	cmp	r2, r3
 8002980:	f4ff ad0a 	bcc.w	8002398 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002988:	2b07      	cmp	r3, #7
 800298a:	f240 84e3 	bls.w	8003354 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8002994:	2301      	movs	r3, #1
 8002996:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80029a0:	4413      	add	r3, r2
 80029a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 80029a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 80029aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80029ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029b0:	4413      	add	r3, r2
 80029b2:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 80029b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80029b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029b8:	4413      	add	r3, r2
 80029ba:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 80029bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029c0:	4413      	add	r3, r2
 80029c2:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 80029c4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80029c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029c8:	4413      	add	r3, r2
 80029ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 80029cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029d0:	4413      	add	r3, r2
 80029d2:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 80029d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80029d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029d8:	4413      	add	r3, r2
 80029da:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 80029dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 80029ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 80029f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8002a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8002a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8002a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8002a26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002a32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	3304      	adds	r3, #4
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	3304      	adds	r3, #4
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	3304      	adds	r3, #4
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	3304      	adds	r3, #4
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	3304      	adds	r3, #4
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	3304      	adds	r3, #4
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8002a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002a9e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8002aac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8002aba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8002ac8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8002ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ade:	4413      	add	r3, r2
 8002ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8002ae4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aec:	4413      	add	r3, r2
 8002aee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8002af2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afa:	4413      	add	r3, r2
 8002afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002b24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	ed93 7a00 	vldr	s14, [r3]
 8002b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b44:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	ed93 7a00 	vldr	s14, [r3]
 8002b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002b90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	ed93 7a00 	vldr	s14, [r3]
 8002b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002bb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	ed93 7a00 	vldr	s14, [r3]
 8002be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf8:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4413      	add	r3, r2
 8002c06:	ed93 7a00 	vldr	s14, [r3]
 8002c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	edd3 7a00 	vldr	s15, [r3]
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8002c20:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c24:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8002c30:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c34:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8002c40:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002c44:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8002c50:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002c54:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002c60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c6e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c76:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002c7a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002c7e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c86:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002c8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3304      	adds	r3, #4
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	ed93 7a00 	vldr	s14, [r3]
 8002c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002cb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3304      	adds	r3, #4
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	ed93 7a00 	vldr	s14, [r3]
 8002cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3304      	adds	r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd6:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3304      	adds	r3, #4
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	ed93 7a00 	vldr	s14, [r3]
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d26:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002d2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3304      	adds	r3, #4
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3304      	adds	r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	3304      	adds	r3, #4
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	ed93 7a00 	vldr	s14, [r3]
 8002d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d76:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002d7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3304      	adds	r3, #4
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	ed93 7a00 	vldr	s14, [r3]
 8002d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3304      	adds	r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3304      	adds	r3, #4
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	ed93 7a00 	vldr	s14, [r3]
 8002db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3304      	adds	r3, #4
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8002dca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dce:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8002dda:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dde:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 8002dea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002dee:	edd7 7a08 	vldr	s15, [r7, #32]
 8002df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 8002dfa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8002e0a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002e0e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8002e1a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002e1e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	3304      	adds	r3, #4
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4413      	add	r3, r2
 8002e36:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e42:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002e46:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8002e56:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002e5a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e62:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8002e66:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002e6a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e72:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8002e76:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002e7a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002e86:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002e8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e92:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002e96:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002e9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002ea6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002eaa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ec4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ecc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002eec:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002ef0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002efc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002f00:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f08:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002f0c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002f10:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f18:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002f1c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002f20:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f28:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f42:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002f46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002f62:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002f66:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002f72:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002f76:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002f82:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002f86:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002f92:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002f96:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002fbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8002fd8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002fdc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 8002ff0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002ff4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 8003008:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800300c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003014:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8003020:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003024:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003034:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8003038:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800303c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003044:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8003048:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800304c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8003058:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800305c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003064:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8003068:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800306c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8003078:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800307c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003084:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8003088:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800308c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8003098:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800309c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80030a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 80030a8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80030ac:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80030b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 80030b8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80030bc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 80030c8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80030cc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80030d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 80030d8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80030dc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80030e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80030e8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80030ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80030f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80030f8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80030fc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003104:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 8003108:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800310c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8003118:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800311c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003124:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8003128:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800312c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8003138:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800313c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003144:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003148:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800314c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003154:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003158:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800315c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003164:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003168:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800316c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003174:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	ed97 7a07 	vldr	s14, [r7, #28]
 8003186:	edd7 7a06 	vldr	s15, [r7, #24]
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3304      	adds	r3, #4
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	ed97 7a05 	vldr	s14, [r7, #20]
 80031a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031aa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80031ae:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80031b2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80031be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031c2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80031ce:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80031d2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80031de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031e2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80031ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80031fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003204:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	3304      	adds	r3, #4
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	ed97 7a05 	vldr	s14, [r7, #20]
 8003218:	edd7 7a04 	vldr	s15, [r7, #16]
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003224:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003228:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003234:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003238:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800323c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003240:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003244:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003248:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800324c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003250:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003254:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003258:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003272:	edd7 7a06 	vldr	s15, [r7, #24]
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800327e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3304      	adds	r3, #4
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	ed97 7a05 	vldr	s14, [r7, #20]
 800328e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003296:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800329a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800329e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80032aa:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032ae:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80032ba:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80032be:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80032ca:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032ce:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80032da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80032f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	3304      	adds	r3, #4
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	ed97 7a05 	vldr	s14, [r7, #20]
 8003304:	edd7 7a04 	vldr	s15, [r7, #16]
 8003308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003310:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003318:	4413      	add	r3, r2
 800331a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003324:	429a      	cmp	r2, r3
 8003326:	f4ff abba 	bcc.w	8002a9e <arm_radix8_butterfly_f32+0x746>

         j++;
 800332a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332e:	3301      	adds	r3, #1
 8003330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8003334:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333c:	429a      	cmp	r2, r3
 800333e:	f4ff ab2c 	bcc.w	800299a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8003342:	893b      	ldrh	r3, [r7, #8]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334c:	2b07      	cmp	r3, #7
 800334e:	f63f a813 	bhi.w	8002378 <arm_radix8_butterfly_f32+0x20>
}
 8003352:	e000      	b.n	8003356 <arm_radix8_butterfly_f32+0xffe>
         break;
 8003354:	bf00      	nop
}
 8003356:	bf00      	nop
 8003358:	37f4      	adds	r7, #244	@ 0xf4
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003364:	b480      	push	{r7}
 8003366:	b095      	sub	sp, #84	@ 0x54
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8003386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 800338c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338e:	3304      	adds	r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8003394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 800339a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800339c:	3304      	adds	r3, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 80033a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a4:	1d1a      	adds	r2, r3, #4
 80033a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 80033ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80033b6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80033ba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80033be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80033c6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80033ca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80033ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80033d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80033da:	edd7 7a08 	vldr	s15, [r7, #32]
 80033de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	1d1a      	adds	r2, r3, #4
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80033f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80033f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80033fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800340a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8003412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 800341c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341e:	3308      	adds	r3, #8
 8003420:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	3304      	adds	r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 800342a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 8003430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8003436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003438:	3304      	adds	r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 800343e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003440:	1d1a      	adds	r2, r3, #4
 8003442:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8003448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800344a:	1d1a      	adds	r2, r3, #4
 800344c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 8003452:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003456:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800345a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8003462:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003466:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003472:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003476:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8003482:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003486:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348e:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8003492:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003496:	edd7 7a08 	vldr	s15, [r7, #32]
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80034a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80034b2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80034b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80034ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034be:	edd7 7a07 	vldr	s15, [r7, #28]
 80034c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034dc:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80034e0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80034e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80034e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80034f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800350e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003510:	3308      	adds	r3, #8
 8003512:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8003514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003516:	3b08      	subs	r3, #8
 8003518:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 800351a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800351c:	3b01      	subs	r3, #1
 800351e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 8003520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003522:	2b00      	cmp	r3, #0
 8003524:	f73f af7d 	bgt.w	8003422 <stage_rfft_f32+0xbe>
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3754      	adds	r7, #84	@ 0x54
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003536:	b480      	push	{r7}
 8003538:	b095      	sub	sp, #84	@ 0x54
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	3b01      	subs	r3, #1
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8003558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 800355e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003560:	3304      	adds	r3, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8003566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003568:	3308      	adds	r3, #8
 800356a:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800356c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003570:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1d1a      	adds	r2, r3, #4
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003586:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800358a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800358e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a4:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80035a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	4413      	add	r3, r2
 80035b0:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 80035b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b4:	3308      	adds	r3, #8
 80035b6:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 80035b8:	e07e      	b.n	80036b8 <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80035ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035bc:	3304      	adds	r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 80035c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80035c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80035ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d0:	3304      	adds	r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 80035d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d8:	1d1a      	adds	r2, r3, #4
 80035da:	64ba      	str	r2, [r7, #72]	@ 0x48
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80035e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 80035ea:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80035ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80035f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80035fa:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80035fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003606:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800360a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800360e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003616:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800361a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800361e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800362a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800362e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800363a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800363e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800364a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800364e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003656:	edd7 7a07 	vldr	s15, [r7, #28]
 800365a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	1d1a      	adds	r2, r3, #4
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003674:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003678:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800367c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003684:	edd7 7a05 	vldr	s15, [r7, #20]
 8003688:	ee37 7a27 	vadd.f32	s14, s14, s15
 800368c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800369e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a2:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80036a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a8:	3308      	adds	r3, #8
 80036aa:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80036ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ae:	3b08      	subs	r3, #8
 80036b0:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80036b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b4:	3b01      	subs	r3, #1
 80036b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 80036b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f73f af7d 	bgt.w	80035ba <merge_rfft_f32+0x84>
   }

}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3754      	adds	r7, #84	@ 0x54
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff ff23 	bl	8003536 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	2301      	movs	r3, #1
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7fe fc5b 	bl	8001fb2 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80036fc:	e00a      	b.n	8003714 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	2301      	movs	r3, #1
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	6978      	ldr	r0, [r7, #20]
 8003706:	f7fe fc54 	bl	8001fb2 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff fe28 	bl	8003364 <stage_rfft_f32>
}
 8003714:	bf00      	nop
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <arm_rfft_fast_init_32_f32>:
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)

FAST_INIT_FUNC(32)

#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <arm_rfft_fast_init_32_f32+0x14>
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	e013      	b.n	8003758 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fdee 	bl	8002314 <arm_cfft_init_16_f32>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800373c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003748:	e006      	b.n	8003758 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a03      	ldr	r2, [pc, #12]	@ (8003760 <arm_rfft_fast_init_32_f32+0x44>)
 8003754:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	08016d5c 	.word	0x08016d5c

08003764 <arm_rfft_fast_init_64_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(64)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <arm_rfft_fast_init_64_f32+0x14>
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	e013      	b.n	80037a0 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fda8 	bl	80022d0 <arm_cfft_init_32_f32>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 800378c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003790:	e006      	b.n	80037a0 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2240      	movs	r2, #64	@ 0x40
 8003796:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a03      	ldr	r2, [pc, #12]	@ (80037a8 <arm_rfft_fast_init_64_f32+0x44>)
 800379c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08016ddc 	.word	0x08016ddc

080037ac <arm_rfft_fast_init_128_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(128)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <arm_rfft_fast_init_128_f32+0x14>
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	e013      	b.n	80037e8 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fd62 	bl	800228c <arm_cfft_init_64_f32>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 80037d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d8:	e006      	b.n	80037e8 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a03      	ldr	r2, [pc, #12]	@ (80037f0 <arm_rfft_fast_init_128_f32+0x44>)
 80037e4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	08016edc 	.word	0x08016edc

080037f4 <arm_rfft_fast_init_256_f32>:
*/

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(256)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <arm_rfft_fast_init_256_f32+0x14>
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	e014      	b.n	8003832 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fd1c 	bl	8002248 <arm_cfft_init_128_f32>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 800381c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003820:	e007      	b.n	8003832 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003828:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a03      	ldr	r2, [pc, #12]	@ (800383c <arm_rfft_fast_init_256_f32+0x48>)
 800382e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	080170dc 	.word	0x080170dc

08003840 <arm_rfft_fast_init_512_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(512)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <arm_rfft_fast_init_512_f32+0x14>
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e014      	b.n	800387e <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fcd2 	bl	8002200 <arm_cfft_init_256_f32>
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	e007      	b.n	800387e <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003874:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a03      	ldr	r2, [pc, #12]	@ (8003888 <arm_rfft_fast_init_512_f32+0x48>)
 800387a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	080174dc 	.word	0x080174dc

0800388c <arm_rfft_fast_init_1024_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(1024)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <arm_rfft_fast_init_1024_f32+0x14>
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e014      	b.n	80038ca <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fc88 	bl	80021b8 <arm_cfft_init_512_f32>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b8:	e007      	b.n	80038ca <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038c0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a03      	ldr	r2, [pc, #12]	@ (80038d4 <arm_rfft_fast_init_1024_f32+0x48>)
 80038c6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	08017cdc 	.word	0x08017cdc

080038d8 <arm_rfft_fast_init_2048_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(2048)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <arm_rfft_fast_init_2048_f32+0x14>
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e014      	b.n	8003916 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fc3e 	bl	8002170 <arm_cfft_init_1024_f32>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003904:	e007      	b.n	8003916 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800390c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a03      	ldr	r2, [pc, #12]	@ (8003920 <arm_rfft_fast_init_2048_f32+0x48>)
 8003912:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	08018cdc 	.word	0x08018cdc

08003924 <arm_rfft_fast_init_4096_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(4096)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <arm_rfft_fast_init_4096_f32+0x14>
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e014      	b.n	8003962 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fbf4 	bl	8002128 <arm_cfft_init_2048_f32>
 8003940:	4603      	mov	r3, r0
 8003942:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 800394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003950:	e007      	b.n	8003962 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003958:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a03      	ldr	r2, [pc, #12]	@ (800396c <arm_rfft_fast_init_4096_f32+0x48>)
 800395e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	0801acdc 	.word	0x0801acdc

08003970 <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 800397c:	887b      	ldrh	r3, [r7, #2]
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003982:	d023      	beq.n	80039cc <arm_rfft_fast_init_f32+0x5c>
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003988:	dc50      	bgt.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
 800398a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800398e:	d023      	beq.n	80039d8 <arm_rfft_fast_init_f32+0x68>
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003994:	dc4a      	bgt.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399a:	d023      	beq.n	80039e4 <arm_rfft_fast_init_f32+0x74>
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a0:	dc44      	bgt.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
 80039a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a6:	d023      	beq.n	80039f0 <arm_rfft_fast_init_f32+0x80>
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ac:	dc3e      	bgt.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b2:	d023      	beq.n	80039fc <arm_rfft_fast_init_f32+0x8c>
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b8:	dc38      	bgt.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d024      	beq.n	8003a08 <arm_rfft_fast_init_f32+0x98>
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	dc34      	bgt.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d02c      	beq.n	8003a20 <arm_rfft_fast_init_f32+0xb0>
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d024      	beq.n	8003a14 <arm_rfft_fast_init_f32+0xa4>
 80039ca:	e02f      	b.n	8003a2c <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffa9 	bl	8003924 <arm_rfft_fast_init_4096_f32>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]
    break;
 80039d6:	e02c      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff7d 	bl	80038d8 <arm_rfft_fast_init_2048_f32>
 80039de:	4603      	mov	r3, r0
 80039e0:	73fb      	strb	r3, [r7, #15]
    break;
 80039e2:	e026      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff51 	bl	800388c <arm_rfft_fast_init_1024_f32>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
    break;
 80039ee:	e020      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff25 	bl	8003840 <arm_rfft_fast_init_512_f32>
 80039f6:	4603      	mov	r3, r0
 80039f8:	73fb      	strb	r3, [r7, #15]
    break;
 80039fa:	e01a      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fef9 	bl	80037f4 <arm_rfft_fast_init_256_f32>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
    break;
 8003a06:	e014      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fecf 	bl	80037ac <arm_rfft_fast_init_128_f32>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
    break;
 8003a12:	e00e      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fea5 	bl	8003764 <arm_rfft_fast_init_64_f32>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a1e:	e008      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fe7b 	bl	800371c <arm_rfft_fast_init_32_f32>
 8003a26:	4603      	mov	r3, r0
 8003a28:	73fb      	strb	r3, [r7, #15]
    break;
 8003a2a:	e002      	b.n	8003a32 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	e001      	b.n	8003a36 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_Init+0x40>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <HAL_Init+0x40>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a07      	ldr	r2, [pc, #28]	@ (8003a80 <HAL_Init+0x40>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f000 f94f 	bl	8003d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f000 f808 	bl	8003a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a74:	f7fd f8ca 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a8c:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_InitTick+0x54>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_InitTick+0x58>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f967 	bl	8003d76 <HAL_SYSTICK_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00e      	b.n	8003ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d80a      	bhi.n	8003ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac0:	f000 f92f 	bl	8003d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac4:	4a06      	ldr	r2, [pc, #24]	@ (8003ae0 <HAL_InitTick+0x5c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000008 	.word	0x20000008
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_IncTick+0x20>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_IncTick+0x24>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	4a04      	ldr	r2, [pc, #16]	@ (8003b08 <HAL_IncTick+0x24>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000008 	.word	0x20000008
 8003b08:	2000032c 	.word	0x2000032c

08003b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <HAL_GetTick+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	2000032c 	.word	0x2000032c

08003b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff ffee 	bl	8003b0c <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d005      	beq.n	8003b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <HAL_Delay+0x44>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b4a:	bf00      	nop
 8003b4c:	f7ff ffde 	bl	8003b0c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d8f7      	bhi.n	8003b4c <HAL_Delay+0x28>
  {
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000008 	.word	0x20000008

08003b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9e:	4a04      	ldr	r2, [pc, #16]	@ (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	60d3      	str	r3, [r2, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <__NVIC_GetPriorityGrouping+0x18>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 0307 	and.w	r3, r3, #7
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	db0b      	blt.n	8003bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	4907      	ldr	r1, [pc, #28]	@ (8003c08 <__NVIC_EnableIRQ+0x38>)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000e100 	.word	0xe000e100

08003c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	db0a      	blt.n	8003c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	490c      	ldr	r1, [pc, #48]	@ (8003c58 <__NVIC_SetPriority+0x4c>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c34:	e00a      	b.n	8003c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <__NVIC_SetPriority+0x50>)
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	3b04      	subs	r3, #4
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	440b      	add	r3, r1
 8003c4a:	761a      	strb	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	@ 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f1c3 0307 	rsb	r3, r3, #7
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf28      	it	cs
 8003c7e:	2304      	movcs	r3, #4
 8003c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d902      	bls.n	8003c90 <NVIC_EncodePriority+0x30>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3b03      	subs	r3, #3
 8003c8e:	e000      	b.n	8003c92 <NVIC_EncodePriority+0x32>
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43d9      	mvns	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	4313      	orrs	r3, r2
         );
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	@ 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cd8:	d301      	bcc.n	8003cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00f      	b.n	8003cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cde:	4a0a      	ldr	r2, [pc, #40]	@ (8003d08 <SysTick_Config+0x40>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f7ff ff8e 	bl	8003c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf0:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <SysTick_Config+0x40>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf6:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <SysTick_Config+0x40>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000e010 	.word	0xe000e010

08003d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff29 	bl	8003b6c <__NVIC_SetPriorityGrouping>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d34:	f7ff ff3e 	bl	8003bb4 <__NVIC_GetPriorityGrouping>
 8003d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f7ff ff8e 	bl	8003c60 <NVIC_EncodePriority>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff5d 	bl	8003c0c <__NVIC_SetPriority>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff31 	bl	8003bd0 <__NVIC_EnableIRQ>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffa2 	bl	8003cc8 <SysTick_Config>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	@ 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e16b      	b.n	8004084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f040 815a 	bne.w	800407e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d005      	beq.n	8003de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d130      	bne.n	8003e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	2203      	movs	r2, #3
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 0201 	and.w	r2, r3, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d017      	beq.n	8003e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d123      	bne.n	8003ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	08da      	lsrs	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3208      	adds	r2, #8
 8003e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	08da      	lsrs	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3208      	adds	r2, #8
 8003ece:	69b9      	ldr	r1, [r7, #24]
 8003ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80b4 	beq.w	800407e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	4b60      	ldr	r3, [pc, #384]	@ (800409c <HAL_GPIO_Init+0x30c>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	4a5f      	ldr	r2, [pc, #380]	@ (800409c <HAL_GPIO_Init+0x30c>)
 8003f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f26:	4b5d      	ldr	r3, [pc, #372]	@ (800409c <HAL_GPIO_Init+0x30c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f32:	4a5b      	ldr	r2, [pc, #364]	@ (80040a0 <HAL_GPIO_Init+0x310>)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a52      	ldr	r2, [pc, #328]	@ (80040a4 <HAL_GPIO_Init+0x314>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_GPIO_Init+0x226>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a51      	ldr	r2, [pc, #324]	@ (80040a8 <HAL_GPIO_Init+0x318>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d025      	beq.n	8003fb2 <HAL_GPIO_Init+0x222>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a50      	ldr	r2, [pc, #320]	@ (80040ac <HAL_GPIO_Init+0x31c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <HAL_GPIO_Init+0x21e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4f      	ldr	r2, [pc, #316]	@ (80040b0 <HAL_GPIO_Init+0x320>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d019      	beq.n	8003faa <HAL_GPIO_Init+0x21a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4e      	ldr	r2, [pc, #312]	@ (80040b4 <HAL_GPIO_Init+0x324>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_GPIO_Init+0x216>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4d      	ldr	r2, [pc, #308]	@ (80040b8 <HAL_GPIO_Init+0x328>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00d      	beq.n	8003fa2 <HAL_GPIO_Init+0x212>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4c      	ldr	r2, [pc, #304]	@ (80040bc <HAL_GPIO_Init+0x32c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <HAL_GPIO_Init+0x20e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	@ (80040c0 <HAL_GPIO_Init+0x330>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_GPIO_Init+0x20a>
 8003f96:	2307      	movs	r3, #7
 8003f98:	e00e      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00c      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	e00a      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e008      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e006      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e004      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e002      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f002 0203 	and.w	r2, r2, #3
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc8:	4935      	ldr	r1, [pc, #212]	@ (80040a0 <HAL_GPIO_Init+0x310>)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ffa:	4a32      	ldr	r2, [pc, #200]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004000:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004024:	4a27      	ldr	r2, [pc, #156]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800402a:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800404e:	4a1d      	ldr	r2, [pc, #116]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004078:	4a12      	ldr	r2, [pc, #72]	@ (80040c4 <HAL_GPIO_Init+0x334>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	f67f ae90 	bls.w	8003dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3724      	adds	r7, #36	@ 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	40013800 	.word	0x40013800
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40020400 	.word	0x40020400
 80040ac:	40020800 	.word	0x40020800
 80040b0:	40020c00 	.word	0x40020c00
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40021400 	.word	0x40021400
 80040bc:	40021800 	.word	0x40021800
 80040c0:	40021c00 	.word	0x40021c00
 80040c4:	40013c00 	.word	0x40013c00

080040c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
 80040d4:	4613      	mov	r3, r2
 80040d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040e4:	e003      	b.n	80040ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	041a      	lsls	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	619a      	str	r2, [r3, #24]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af02      	add	r7, sp, #8
 8004100:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e059      	b.n	80041c0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f006 ff9a 	bl	800b060 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2203      	movs	r2, #3
 8004130:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800413a:	d102      	bne.n	8004142 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fdb4 	bl	8007cb4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7c1a      	ldrb	r2, [r3, #16]
 8004154:	f88d 2000 	strb.w	r2, [sp]
 8004158:	3304      	adds	r3, #4
 800415a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800415c:	f003 fd35 	bl	8007bca <USB_CoreInit>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e026      	b.n	80041c0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fdac 	bl	8007cd6 <USB_SetCurrentMode>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e017      	b.n	80041c0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7c1a      	ldrb	r2, [r3, #16]
 8004198:	f88d 2000 	strb.w	r2, [sp]
 800419c:	3304      	adds	r3, #4
 800419e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a0:	f003 ff4e 	bl	8008040 <USB_HostInit>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e004      	b.n	80041c0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b08b      	sub	sp, #44	@ 0x2c
 80041cc:	af04      	add	r7, sp, #16
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4608      	mov	r0, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	70fb      	strb	r3, [r7, #3]
 80041da:	460b      	mov	r3, r1
 80041dc:	70bb      	strb	r3, [r7, #2]
 80041de:	4613      	mov	r3, r2
 80041e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80041e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80041e4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_HCD_HC_Init+0x2c>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e09d      	b.n	8004330 <HAL_HCD_HC_Init+0x168>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3319      	adds	r3, #25
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3314      	adds	r3, #20
 8004220:	787a      	ldrb	r2, [r7, #1]
 8004222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3315      	adds	r3, #21
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3326      	adds	r3, #38	@ 0x26
 8004248:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800424c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	78bb      	ldrb	r3, [r7, #2]
 8004252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004256:	b2d8      	uxtb	r0, r3
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3316      	adds	r3, #22
 8004266:	4602      	mov	r2, r0
 8004268:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fbc8 	bl	8004a04 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004278:	2b00      	cmp	r3, #0
 800427a:	da0a      	bge.n	8004292 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	3317      	adds	r3, #23
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e009      	b.n	80042a6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3317      	adds	r3, #23
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f004 f82c 	bl	8008308 <USB_GetHostSpeed>
 80042b0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80042b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10b      	bne.n	80042d2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80042ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d107      	bne.n	80042d2 <HAL_HCD_HC_Init+0x10a>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2bbc      	cmp	r3, #188	@ 0xbc
 80042cc:	d901      	bls.n	80042d2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80042ce:	23bc      	movs	r3, #188	@ 0xbc
 80042d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	3318      	adds	r3, #24
 80042e2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80042e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	b298      	uxth	r0, r3
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3328      	adds	r3, #40	@ 0x28
 80042fc:	4602      	mov	r2, r0
 80042fe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	b29b      	uxth	r3, r3
 8004308:	787c      	ldrb	r4, [r7, #1]
 800430a:	78ba      	ldrb	r2, [r7, #2]
 800430c:	78f9      	ldrb	r1, [r7, #3]
 800430e:	9302      	str	r3, [sp, #8]
 8004310:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4623      	mov	r3, r4
 800431e:	f004 f81b 	bl	8008358 <USB_HC_Init>
 8004322:	4603      	mov	r3, r0
 8004324:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd90      	pop	{r4, r7, pc}

08004338 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_HCD_HC_Halt+0x1e>
 8004352:	2302      	movs	r3, #2
 8004354:	e00f      	b.n	8004376 <HAL_HCD_HC_Halt+0x3e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f004 fbad 	bl	8008ac6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	70fb      	strb	r3, [r7, #3]
 8004392:	460b      	mov	r3, r1
 8004394:	70bb      	strb	r3, [r7, #2]
 8004396:	4613      	mov	r3, r2
 8004398:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3317      	adds	r3, #23
 80043aa:	78ba      	ldrb	r2, [r7, #2]
 80043ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3326      	adds	r3, #38	@ 0x26
 80043be:	787a      	ldrb	r2, [r7, #1]
 80043c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80043c2:	7c3b      	ldrb	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d114      	bne.n	80043f2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	332a      	adds	r3, #42	@ 0x2a
 80043d8:	2203      	movs	r2, #3
 80043da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3319      	adds	r3, #25
 80043ec:	7f3a      	ldrb	r2, [r7, #28]
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e009      	b.n	8004406 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	332a      	adds	r3, #42	@ 0x2a
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004406:	787b      	ldrb	r3, [r7, #1]
 8004408:	2b03      	cmp	r3, #3
 800440a:	f200 8102 	bhi.w	8004612 <HAL_HCD_HC_SubmitRequest+0x292>
 800440e:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004425 	.word	0x08004425
 8004418:	080045fd 	.word	0x080045fd
 800441c:	080044e9 	.word	0x080044e9
 8004420:	08004573 	.word	0x08004573
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004424:	7c3b      	ldrb	r3, [r7, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	f040 80f5 	bne.w	8004616 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800442c:	78bb      	ldrb	r3, [r7, #2]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d12d      	bne.n	800448e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004432:	8b3b      	ldrh	r3, [r7, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	333d      	adds	r3, #61	@ 0x3d
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	333d      	adds	r3, #61	@ 0x3d
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	332a      	adds	r3, #42	@ 0x2a
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004476:	e0ce      	b.n	8004616 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	332a      	adds	r3, #42	@ 0x2a
 8004488:	2202      	movs	r2, #2
 800448a:	701a      	strb	r2, [r3, #0]
      break;
 800448c:	e0c3      	b.n	8004616 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	331a      	adds	r3, #26
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 80b8 	bne.w	8004616 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	333c      	adds	r3, #60	@ 0x3c
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	332a      	adds	r3, #42	@ 0x2a
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
      break;
 80044d0:	e0a1      	b.n	8004616 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	332a      	adds	r3, #42	@ 0x2a
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]
      break;
 80044e6:	e096      	b.n	8004616 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80044e8:	78bb      	ldrb	r3, [r7, #2]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d120      	bne.n	8004530 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	333d      	adds	r3, #61	@ 0x3d
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	332a      	adds	r3, #42	@ 0x2a
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004518:	e07e      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	332a      	adds	r3, #42	@ 0x2a
 800452a:	2202      	movs	r2, #2
 800452c:	701a      	strb	r2, [r3, #0]
      break;
 800452e:	e073      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	333c      	adds	r3, #60	@ 0x3c
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	332a      	adds	r3, #42	@ 0x2a
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
      break;
 800455a:	e05d      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	332a      	adds	r3, #42	@ 0x2a
 800456c:	2202      	movs	r2, #2
 800456e:	701a      	strb	r2, [r3, #0]
      break;
 8004570:	e052      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004572:	78bb      	ldrb	r3, [r7, #2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d120      	bne.n	80045ba <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	333d      	adds	r3, #61	@ 0x3d
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	332a      	adds	r3, #42	@ 0x2a
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045a2:	e039      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	332a      	adds	r3, #42	@ 0x2a
 80045b4:	2202      	movs	r2, #2
 80045b6:	701a      	strb	r2, [r3, #0]
      break;
 80045b8:	e02e      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	333c      	adds	r3, #60	@ 0x3c
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	332a      	adds	r3, #42	@ 0x2a
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
      break;
 80045e4:	e018      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	332a      	adds	r3, #42	@ 0x2a
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]
      break;
 80045fa:	e00d      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	332a      	adds	r3, #42	@ 0x2a
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
      break;
 8004610:	e002      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004616:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	332c      	adds	r3, #44	@ 0x2c
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	8b39      	ldrh	r1, [r7, #24]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4403      	add	r3, r0
 800463c:	3334      	adds	r3, #52	@ 0x34
 800463e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334c      	adds	r3, #76	@ 0x4c
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3338      	adds	r3, #56	@ 0x38
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3315      	adds	r3, #21
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	334d      	adds	r3, #77	@ 0x4d
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	4613      	mov	r3, r2
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	3310      	adds	r3, #16
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	1d19      	adds	r1, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	799b      	ldrb	r3, [r3, #6]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f003 ff80 	bl	80085b0 <USB_HC_StartXfer>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop

080046bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f003 fc75 	bl	8007fc2 <USB_GetMode>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 80fb 	bne.w	80048d6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f003 fc38 	bl	8007f5a <USB_ReadInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80f1 	beq.w	80048d4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f003 fc2f 	bl	8007f5a <USB_ReadInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004702:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004706:	d104      	bne.n	8004712 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004710:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f003 fc1f 	bl	8007f5a <USB_ReadInterrupts>
 800471c:	4603      	mov	r3, r0
 800471e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004726:	d104      	bne.n	8004732 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004730:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f003 fc0f 	bl	8007f5a <USB_ReadInterrupts>
 800473c:	4603      	mov	r3, r0
 800473e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004746:	d104      	bne.n	8004752 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004750:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f003 fbff 	bl	8007f5a <USB_ReadInterrupts>
 800475c:	4603      	mov	r3, r0
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d103      	bne.n	800476e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2202      	movs	r2, #2
 800476c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f003 fbf1 	bl	8007f5a <USB_ReadInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800477e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004782:	d120      	bne.n	80047c6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800478c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d113      	bne.n	80047c6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800479e:	2110      	movs	r1, #16
 80047a0:	6938      	ldr	r0, [r7, #16]
 80047a2:	f003 fae4 	bl	8007d6e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80047a6:	6938      	ldr	r0, [r7, #16]
 80047a8:	f003 fb13 	bl	8007dd2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7a5b      	ldrb	r3, [r3, #9]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d105      	bne.n	80047c0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f003 fd04 	bl	80081c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f006 fccb 	bl	800b15c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fbc5 	bl	8007f5a <USB_ReadInterrupts>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047da:	d102      	bne.n	80047e2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 fd4d 	bl	800627c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f003 fbb7 	bl	8007f5a <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d106      	bne.n	8004804 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f006 fc94 	bl	800b124 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2208      	movs	r2, #8
 8004802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fba6 	bl	8007f5a <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004818:	d139      	bne.n	800488e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f004 f940 	bl	8008aa4 <USB_HC_ReadInterrupt>
 8004824:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e025      	b.n	8004878 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d018      	beq.n	8004872 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004856:	d106      	bne.n	8004866 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f905 	bl	8004a6e <HCD_HC_IN_IRQHandler>
 8004864:	e005      	b.n	8004872 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 ff67 	bl	8005740 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	795b      	ldrb	r3, [r3, #5]
 800487c:	461a      	mov	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4293      	cmp	r3, r2
 8004882:	d3d3      	bcc.n	800482c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800488c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f003 fb61 	bl	8007f5a <USB_ReadInterrupts>
 8004898:	4603      	mov	r3, r0
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d101      	bne.n	80048a6 <HAL_HCD_IRQHandler+0x1ea>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_HCD_IRQHandler+0x1ec>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d014      	beq.n	80048d6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0210 	bic.w	r2, r2, #16
 80048ba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fbfe 	bl	80060be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0210 	orr.w	r2, r2, #16
 80048d0:	619a      	str	r2, [r3, #24]
 80048d2:	e000      	b.n	80048d6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80048d4:	bf00      	nop
    }
  }
}
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_HCD_Start+0x16>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e013      	b.n	800491a <HAL_HCD_Start+0x3e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f003 fcc8 	bl	8008296 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f003 f9c1 	bl	8007c92 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_HCD_Stop+0x16>
 8004934:	2302      	movs	r3, #2
 8004936:	e00d      	b.n	8004954 <HAL_HCD_Stop+0x32>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f004 fa1b 	bl	8008d80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f003 fc6a 	bl	8008242 <USB_ResetPort>
 800496e:	4603      	mov	r3, r0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	334c      	adds	r3, #76	@ 0x4c
 8004994:	781b      	ldrb	r3, [r3, #0]
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	3338      	adds	r3, #56	@ 0x38
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 fcac 	bl	8008336 <USB_GetCurrentFrame>
 80049de:	4603      	mov	r3, r0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f003 fc87 	bl	8008308 <USB_GetHostSpeed>
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	331a      	adds	r3, #26
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	331b      	adds	r3, #27
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	3325      	adds	r3, #37	@ 0x25
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	3324      	adds	r3, #36	@ 0x24
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 fa77 	bl	8007f80 <USB_ReadChInterrupts>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11a      	bne.n	8004ad2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2304      	movs	r3, #4
 8004aac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	334d      	adds	r3, #77	@ 0x4d
 8004abe:	2207      	movs	r2, #7
 8004ac0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 fffb 	bl	8008ac6 <USB_HC_Halt>
 8004ad0:	e09e      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f003 fa50 	bl	8007f80 <USB_ReadChInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aea:	d11b      	bne.n	8004b24 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af8:	461a      	mov	r2, r3
 8004afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004afe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	334d      	adds	r3, #77	@ 0x4d
 8004b10:	2208      	movs	r2, #8
 8004b12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f003 ffd2 	bl	8008ac6 <USB_HC_Halt>
 8004b22:	e075      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f003 fa27 	bl	8007f80 <USB_ReadChInterrupts>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d11a      	bne.n	8004b72 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	334d      	adds	r3, #77	@ 0x4d
 8004b5e:	2206      	movs	r2, #6
 8004b60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f003 ffab 	bl	8008ac6 <USB_HC_Halt>
 8004b70:	e04e      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f003 fa00 	bl	8007f80 <USB_ReadChInterrupts>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d11b      	bne.n	8004bc4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	334d      	adds	r3, #77	@ 0x4d
 8004bb0:	2209      	movs	r2, #9
 8004bb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f003 ff82 	bl	8008ac6 <USB_HC_Halt>
 8004bc2:	e025      	b.n	8004c10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 f9d7 	bl	8007f80 <USB_ReadChInterrupts>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd8:	2b80      	cmp	r3, #128	@ 0x80
 8004bda:	d119      	bne.n	8004c10 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be8:	461a      	mov	r2, r3
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	334d      	adds	r3, #77	@ 0x4d
 8004bfe:	2207      	movs	r2, #7
 8004c00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f003 ff5b 	bl	8008ac6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f003 f9b1 	bl	8007f80 <USB_ReadChInterrupts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c28:	d112      	bne.n	8004c50 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 ff47 	bl	8008ac6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c44:	461a      	mov	r2, r3
 8004c46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c4a:	6093      	str	r3, [r2, #8]
 8004c4c:	f000 bd75 	b.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f003 f991 	bl	8007f80 <USB_ReadChInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f040 8128 	bne.w	8004eba <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c76:	461a      	mov	r2, r3
 8004c78:	2320      	movs	r3, #32
 8004c7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	331b      	adds	r3, #27
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d119      	bne.n	8004cc6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	331b      	adds	r3, #27
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	799b      	ldrb	r3, [r3, #6]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3330      	adds	r3, #48	@ 0x30
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	1ac9      	subs	r1, r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4403      	add	r3, r0
 8004d02:	3338      	adds	r3, #56	@ 0x38
 8004d04:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	334d      	adds	r3, #77	@ 0x4d
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	3344      	adds	r3, #68	@ 0x44
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3326      	adds	r3, #38	@ 0x26
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3326      	adds	r3, #38	@ 0x26
 8004d66:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d110      	bne.n	8004d8e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f003 fea6 	bl	8008ac6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	2310      	movs	r3, #16
 8004d8a:	6093      	str	r3, [r2, #8]
 8004d8c:	e03d      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3326      	adds	r3, #38	@ 0x26
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d00a      	beq.n	8004dba <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3326      	adds	r3, #38	@ 0x26
 8004db4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d127      	bne.n	8004e0a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dd8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	334c      	adds	r3, #76	@ 0x4c
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	334c      	adds	r3, #76	@ 0x4c
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f006 f9b7 	bl	800b178 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	799b      	ldrb	r3, [r3, #6]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d13b      	bne.n	8004e8a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3338      	adds	r3, #56	@ 0x38
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4403      	add	r3, r0
 8004e32:	3328      	adds	r3, #40	@ 0x28
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	440b      	add	r3, r1
 8004e38:	1e59      	subs	r1, r3, #1
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4403      	add	r3, r0
 8004e48:	3328      	adds	r3, #40	@ 0x28
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8470 	beq.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	333c      	adds	r3, #60	@ 0x3c
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	f083 0301 	eor.w	r3, r3, #1
 8004e72:	b2d8      	uxtb	r0, r3
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	333c      	adds	r3, #60	@ 0x3c
 8004e82:	4602      	mov	r2, r0
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	f000 bc58 	b.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	333c      	adds	r3, #60	@ 0x3c
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	f083 0301 	eor.w	r3, r3, #1
 8004ea2:	b2d8      	uxtb	r0, r3
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	333c      	adds	r3, #60	@ 0x3c
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	f000 bc40 	b.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f003 f85c 	bl	8007f80 <USB_ReadChInterrupts>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d131      	bne.n	8004f36 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	331a      	adds	r3, #26
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	f040 841f 	bne.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	331b      	adds	r3, #27
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	334d      	adds	r3, #77	@ 0x4d
 8004f20:	2203      	movs	r2, #3
 8004f22:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f003 fdca 	bl	8008ac6 <USB_HC_Halt>
 8004f32:	f000 bc02 	b.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f003 f81e 	bl	8007f80 <USB_ReadChInterrupts>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	f040 8305 	bne.w	800555a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2302      	movs	r3, #2
 8004f60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	334d      	adds	r3, #77	@ 0x4d
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d114      	bne.n	8004fa2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	334d      	adds	r3, #77	@ 0x4d
 8004f88:	2202      	movs	r2, #2
 8004f8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	334c      	adds	r3, #76	@ 0x4c
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e2cc      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	334d      	adds	r3, #77	@ 0x4d
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b06      	cmp	r3, #6
 8004fb6:	d114      	bne.n	8004fe2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	334d      	adds	r3, #77	@ 0x4d
 8004fc8:	2202      	movs	r2, #2
 8004fca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	334c      	adds	r3, #76	@ 0x4c
 8004fdc:	2205      	movs	r2, #5
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e2ac      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	334d      	adds	r3, #77	@ 0x4d
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b07      	cmp	r3, #7
 8004ff6:	d00b      	beq.n	8005010 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	334d      	adds	r3, #77	@ 0x4d
 8005008:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800500a:	2b09      	cmp	r3, #9
 800500c:	f040 80a6 	bne.w	800515c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	334d      	adds	r3, #77	@ 0x4d
 8005020:	2202      	movs	r2, #2
 8005022:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3344      	adds	r3, #68	@ 0x44
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1c59      	adds	r1, r3, #1
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4403      	add	r3, r0
 8005044:	3344      	adds	r3, #68	@ 0x44
 8005046:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	3344      	adds	r3, #68	@ 0x44
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d943      	bls.n	80050e6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3344      	adds	r3, #68	@ 0x44
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	331a      	adds	r3, #26
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d123      	bne.n	80050d0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	331b      	adds	r3, #27
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	331c      	adds	r3, #28
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ce:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	334c      	adds	r3, #76	@ 0x4c
 80050e0:	2204      	movs	r2, #4
 80050e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80050e4:	e229      	b.n	800553a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	334c      	adds	r3, #76	@ 0x4c
 80050f6:	2202      	movs	r2, #2
 80050f8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3326      	adds	r3, #38	@ 0x26
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3326      	adds	r3, #38	@ 0x26
 8005120:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005122:	2b02      	cmp	r3, #2
 8005124:	f040 8209 	bne.w	800553a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800513e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005146:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005154:	461a      	mov	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800515a:	e1ee      	b.n	800553a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	334d      	adds	r3, #77	@ 0x4d
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b05      	cmp	r3, #5
 8005170:	f040 80c8 	bne.w	8005304 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	334d      	adds	r3, #77	@ 0x4d
 8005184:	2202      	movs	r2, #2
 8005186:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	331b      	adds	r3, #27
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	f040 81ce 	bne.w	800553c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3326      	adds	r3, #38	@ 0x26
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d16b      	bne.n	800528e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	3348      	adds	r3, #72	@ 0x48
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4403      	add	r3, r0
 80051d6:	3348      	adds	r3, #72	@ 0x48
 80051d8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3348      	adds	r3, #72	@ 0x48
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d943      	bls.n	8005278 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	3348      	adds	r3, #72	@ 0x48
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	331b      	adds	r3, #27
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	3344      	adds	r3, #68	@ 0x44
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d809      	bhi.n	8005242 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	331c      	adds	r3, #28
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005260:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	334c      	adds	r3, #76	@ 0x4c
 8005272:	2204      	movs	r2, #4
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e014      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	334c      	adds	r3, #76	@ 0x4c
 8005288:	2202      	movs	r2, #2
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e009      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	334c      	adds	r3, #76	@ 0x4c
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	3326      	adds	r3, #38	@ 0x26
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3326      	adds	r3, #38	@ 0x26
 80052c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	f040 8136 	bne.w	800553c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fc:	461a      	mov	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e11b      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	334d      	adds	r3, #77	@ 0x4d
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b03      	cmp	r3, #3
 8005318:	f040 8081 	bne.w	800541e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	334d      	adds	r3, #77	@ 0x4d
 800532c:	2202      	movs	r2, #2
 800532e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	331b      	adds	r3, #27
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	f040 80fa 	bne.w	800553c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	334c      	adds	r3, #76	@ 0x4c
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	440a      	add	r2, r1
 8005372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800537a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	440a      	add	r2, r1
 8005392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800539a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053b6:	f023 0320 	bic.w	r3, r3, #32
 80053ba:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3326      	adds	r3, #38	@ 0x26
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3326      	adds	r3, #38	@ 0x26
 80053e2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	f040 80a9 	bne.w	800553c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005400:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005408:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e08e      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	334d      	adds	r3, #77	@ 0x4d
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d143      	bne.n	80054bc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	334d      	adds	r3, #77	@ 0x4d
 8005444:	2202      	movs	r2, #2
 8005446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	334c      	adds	r3, #76	@ 0x4c
 8005458:	2202      	movs	r2, #2
 800545a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	3326      	adds	r3, #38	@ 0x26
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	3326      	adds	r3, #38	@ 0x26
 8005482:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005484:	2b02      	cmp	r3, #2
 8005486:	d159      	bne.n	800553c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800549e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b4:	461a      	mov	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e03f      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	334d      	adds	r3, #77	@ 0x4d
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d126      	bne.n	8005520 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	334d      	adds	r3, #77	@ 0x4d
 80054e2:	2202      	movs	r2, #2
 80054e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3344      	adds	r3, #68	@ 0x44
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1c59      	adds	r1, r3, #1
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4403      	add	r3, r0
 8005506:	3344      	adds	r3, #68	@ 0x44
 8005508:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	334c      	adds	r3, #76	@ 0x4c
 800551a:	2204      	movs	r2, #4
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e00d      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	334d      	adds	r3, #77	@ 0x4d
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b02      	cmp	r3, #2
 8005534:	f000 8100 	beq.w	8005738 <HCD_HC_IN_IRQHandler+0xcca>
 8005538:	e000      	b.n	800553c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800553a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	334c      	adds	r3, #76	@ 0x4c
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f005 fe10 	bl	800b178 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005558:	e0ef      	b.n	800573a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f002 fd0c 	bl	8007f80 <USB_ReadChInterrupts>
 8005568:	4603      	mov	r3, r0
 800556a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d12f      	bne.n	80055d2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557e:	461a      	mov	r2, r3
 8005580:	2340      	movs	r3, #64	@ 0x40
 8005582:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	334d      	adds	r3, #77	@ 0x4d
 8005594:	2205      	movs	r2, #5
 8005596:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	331a      	adds	r3, #26
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	3344      	adds	r3, #68	@ 0x44
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f003 fa7b 	bl	8008ac6 <USB_HC_Halt>
 80055d0:	e0b3      	b.n	800573a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	4611      	mov	r1, r2
 80055da:	4618      	mov	r0, r3
 80055dc:	f002 fcd0 	bl	8007f80 <USB_ReadChInterrupts>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	f040 80a7 	bne.w	800573a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	3326      	adds	r3, #38	@ 0x26
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d11b      	bne.n	800563a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3344      	adds	r3, #68	@ 0x44
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	334d      	adds	r3, #77	@ 0x4d
 8005626:	2204      	movs	r2, #4
 8005628:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f003 fa47 	bl	8008ac6 <USB_HC_Halt>
 8005638:	e03f      	b.n	80056ba <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	3326      	adds	r3, #38	@ 0x26
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3326      	adds	r3, #38	@ 0x26
 8005660:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005662:	2b02      	cmp	r3, #2
 8005664:	d129      	bne.n	80056ba <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3344      	adds	r3, #68	@ 0x44
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	799b      	ldrb	r3, [r3, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HCD_HC_IN_IRQHandler+0xc2a>
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	331b      	adds	r3, #27
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d110      	bne.n	80056ba <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	334d      	adds	r3, #77	@ 0x4d
 80056a8:	2204      	movs	r2, #4
 80056aa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f003 fa06 	bl	8008ac6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	331b      	adds	r3, #27
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d129      	bne.n	8005724 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	331b      	adds	r3, #27
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005702:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	440a      	add	r2, r1
 800571a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800571e:	f043 0320 	orr.w	r3, r3, #32
 8005722:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005730:	461a      	mov	r2, r3
 8005732:	2310      	movs	r3, #16
 8005734:	6093      	str	r3, [r2, #8]
 8005736:	e000      	b.n	800573a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005738:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f002 fc0e 	bl	8007f80 <USB_ReadChInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d11b      	bne.n	80057a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	2304      	movs	r3, #4
 800577e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	334d      	adds	r3, #77	@ 0x4d
 8005790:	2207      	movs	r2, #7
 8005792:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f003 f992 	bl	8008ac6 <USB_HC_Halt>
 80057a2:	f000 bc89 	b.w	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 fbe6 	bl	8007f80 <USB_ReadChInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	f040 8082 	bne.w	80058c4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057cc:	461a      	mov	r2, r3
 80057ce:	2320      	movs	r3, #32
 80057d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	1a9b      	subs	r3, r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	3319      	adds	r3, #25
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d124      	bne.n	8005832 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3319      	adds	r3, #25
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	334c      	adds	r3, #76	@ 0x4c
 800580c:	2202      	movs	r2, #2
 800580e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	334d      	adds	r3, #77	@ 0x4d
 8005820:	2203      	movs	r2, #3
 8005822:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f003 f94a 	bl	8008ac6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	331a      	adds	r3, #26
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 8437 	bne.w	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	331b      	adds	r3, #27
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 842b 	bne.w	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005862:	78fa      	ldrb	r2, [r7, #3]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	3326      	adds	r3, #38	@ 0x26
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d009      	beq.n	800588c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	331b      	adds	r3, #27
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	334d      	adds	r3, #77	@ 0x4d
 800589c:	2203      	movs	r2, #3
 800589e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f003 f90c 	bl	8008ac6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3344      	adds	r3, #68	@ 0x44
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e3f9      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	78fa      	ldrb	r2, [r7, #3]
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f002 fb57 	bl	8007f80 <USB_ReadChInterrupts>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058dc:	d111      	bne.n	8005902 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ea:	461a      	mov	r2, r3
 80058ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f003 f8e3 	bl	8008ac6 <USB_HC_Halt>
 8005900:	e3da      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f002 fb38 	bl	8007f80 <USB_ReadChInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d168      	bne.n	80059ec <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3344      	adds	r3, #68	@ 0x44
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f002 fb22 	bl	8007f80 <USB_ReadChInterrupts>
 800593c:	4603      	mov	r3, r0
 800593e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005942:	2b40      	cmp	r3, #64	@ 0x40
 8005944:	d112      	bne.n	800596c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3319      	adds	r3, #25
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005966:	461a      	mov	r2, r3
 8005968:	2340      	movs	r3, #64	@ 0x40
 800596a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	331b      	adds	r3, #27
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d019      	beq.n	80059b6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	331b      	adds	r3, #27
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	78fa      	ldrb	r2, [r7, #3]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c2:	461a      	mov	r2, r3
 80059c4:	2301      	movs	r3, #1
 80059c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	334d      	adds	r3, #77	@ 0x4d
 80059d8:	2201      	movs	r2, #1
 80059da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f003 f86e 	bl	8008ac6 <USB_HC_Halt>
 80059ea:	e365      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f002 fac3 	bl	8007f80 <USB_ReadChInterrupts>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d139      	bne.n	8005a78 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	334d      	adds	r3, #77	@ 0x4d
 8005a14:	2205      	movs	r2, #5
 8005a16:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	331a      	adds	r3, #26
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3319      	adds	r3, #25
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	3344      	adds	r3, #68	@ 0x44
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f003 f831 	bl	8008ac6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a70:	461a      	mov	r2, r3
 8005a72:	2340      	movs	r3, #64	@ 0x40
 8005a74:	6093      	str	r3, [r2, #8]
 8005a76:	e31f      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 fa7d 	bl	8007f80 <USB_ReadChInterrupts>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d11a      	bne.n	8005ac6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	334d      	adds	r3, #77	@ 0x4d
 8005ab2:	2206      	movs	r2, #6
 8005ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f003 f801 	bl	8008ac6 <USB_HC_Halt>
 8005ac4:	e2f8      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f002 fa56 	bl	8007f80 <USB_ReadChInterrupts>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	d144      	bne.n	8005b68 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	3344      	adds	r3, #68	@ 0x44
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	334d      	adds	r3, #77	@ 0x4d
 8005b02:	2204      	movs	r2, #4
 8005b04:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3319      	adds	r3, #25
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d114      	bne.n	8005b46 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3319      	adds	r3, #25
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 ffb9 	bl	8008ac6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b60:	461a      	mov	r2, r3
 8005b62:	2310      	movs	r3, #16
 8005b64:	6093      	str	r3, [r2, #8]
 8005b66:	e2a7      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f002 fa05 	bl	8007f80 <USB_ReadChInterrupts>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7c:	2b80      	cmp	r3, #128	@ 0x80
 8005b7e:	f040 8083 	bne.w	8005c88 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	799b      	ldrb	r3, [r3, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d111      	bne.n	8005bae <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	334d      	adds	r3, #77	@ 0x4d
 8005b9a:	2207      	movs	r2, #7
 8005b9c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f002 ff8d 	bl	8008ac6 <USB_HC_Halt>
 8005bac:	e062      	b.n	8005c74 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3344      	adds	r3, #68	@ 0x44
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4403      	add	r3, r0
 8005bce:	3344      	adds	r3, #68	@ 0x44
 8005bd0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3344      	adds	r3, #68	@ 0x44
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d922      	bls.n	8005c2e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005be8:	78fa      	ldrb	r2, [r7, #3]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3344      	adds	r3, #68	@ 0x44
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	334c      	adds	r3, #76	@ 0x4c
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c10:	78fa      	ldrb	r2, [r7, #3]
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	334c      	adds	r3, #76	@ 0x4c
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f005 faa6 	bl	800b178 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c2c:	e022      	b.n	8005c74 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	334c      	adds	r3, #76	@ 0x4c
 8005c3e:	2202      	movs	r2, #2
 8005c40:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c58:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c60:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	2380      	movs	r3, #128	@ 0x80
 8005c84:	6093      	str	r3, [r2, #8]
 8005c86:	e217      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	78fa      	ldrb	r2, [r7, #3]
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f002 f975 	bl	8007f80 <USB_ReadChInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca0:	d11b      	bne.n	8005cda <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	334d      	adds	r3, #77	@ 0x4d
 8005cb2:	2209      	movs	r2, #9
 8005cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f002 ff01 	bl	8008ac6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd6:	6093      	str	r3, [r2, #8]
 8005cd8:	e1ee      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	78fa      	ldrb	r2, [r7, #3]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f002 f94c 	bl	8007f80 <USB_ReadChInterrupts>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	f040 81df 	bne.w	80060b2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d00:	461a      	mov	r2, r3
 8005d02:	2302      	movs	r3, #2
 8005d04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	334d      	adds	r3, #77	@ 0x4d
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	f040 8093 	bne.w	8005e44 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	334d      	adds	r3, #77	@ 0x4d
 8005d2e:	2202      	movs	r2, #2
 8005d30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	334c      	adds	r3, #76	@ 0x4c
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3326      	adds	r3, #38	@ 0x26
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d00b      	beq.n	8005d74 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3326      	adds	r3, #38	@ 0x26
 8005d6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	f040 8190 	bne.w	8006094 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	799b      	ldrb	r3, [r3, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d115      	bne.n	8005da8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	333d      	adds	r3, #61	@ 0x3d
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	f083 0301 	eor.w	r3, r3, #1
 8005d94:	b2d8      	uxtb	r0, r3
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	333d      	adds	r3, #61	@ 0x3d
 8005da4:	4602      	mov	r2, r0
 8005da6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	799b      	ldrb	r3, [r3, #6]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 8171 	bne.w	8006094 <HCD_HC_OUT_IRQHandler+0x954>
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3334      	adds	r3, #52	@ 0x34
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8165 	beq.w	8006094 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3334      	adds	r3, #52	@ 0x34
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4403      	add	r3, r0
 8005dea:	3328      	adds	r3, #40	@ 0x28
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	440b      	add	r3, r1
 8005df0:	1e59      	subs	r1, r3, #1
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4403      	add	r3, r0
 8005e00:	3328      	adds	r3, #40	@ 0x28
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e08:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 813f 	beq.w	8006094 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	333d      	adds	r3, #61	@ 0x3d
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	f083 0301 	eor.w	r3, r3, #1
 8005e2e:	b2d8      	uxtb	r0, r3
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	333d      	adds	r3, #61	@ 0x3d
 8005e3e:	4602      	mov	r2, r0
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e127      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	334d      	adds	r3, #77	@ 0x4d
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d120      	bne.n	8005e9c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	334d      	adds	r3, #77	@ 0x4d
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	331b      	adds	r3, #27
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	f040 8107 	bne.w	8006094 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	334c      	adds	r3, #76	@ 0x4c
 8005e96:	2202      	movs	r2, #2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e0fb      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	334d      	adds	r3, #77	@ 0x4d
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d13a      	bne.n	8005f28 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	334d      	adds	r3, #77	@ 0x4d
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	334c      	adds	r3, #76	@ 0x4c
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	331b      	adds	r3, #27
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	f040 80d1 	bne.w	8006094 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	331b      	adds	r3, #27
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f24:	6053      	str	r3, [r2, #4]
 8005f26:	e0b5      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	334d      	adds	r3, #77	@ 0x4d
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d114      	bne.n	8005f68 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	334d      	adds	r3, #77	@ 0x4d
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	334c      	adds	r3, #76	@ 0x4c
 8005f62:	2202      	movs	r2, #2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e095      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	334d      	adds	r3, #77	@ 0x4d
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d114      	bne.n	8005fa8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	334d      	adds	r3, #77	@ 0x4d
 8005f8e:	2202      	movs	r2, #2
 8005f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	334c      	adds	r3, #76	@ 0x4c
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e075      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	334d      	adds	r3, #77	@ 0x4d
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d00a      	beq.n	8005fd4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	334d      	adds	r3, #77	@ 0x4d
 8005fce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d170      	bne.n	80060b6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	334d      	adds	r3, #77	@ 0x4d
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3344      	adds	r3, #68	@ 0x44
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1c59      	adds	r1, r3, #1
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4403      	add	r3, r0
 8006008:	3344      	adds	r3, #68	@ 0x44
 800600a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3344      	adds	r3, #68	@ 0x44
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d914      	bls.n	800604c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3344      	adds	r3, #68	@ 0x44
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	334c      	adds	r3, #76	@ 0x4c
 8006046:	2204      	movs	r2, #4
 8006048:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800604a:	e022      	b.n	8006092 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	334c      	adds	r3, #76	@ 0x4c
 800605c:	2202      	movs	r2, #2
 800605e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006076:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800607e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608c:	461a      	mov	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006092:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	334c      	adds	r3, #76	@ 0x4c
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f005 f864 	bl	800b178 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060b0:	e002      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80060b2:	bf00      	nop
 80060b4:	e000      	b.n	80060b8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80060b6:	bf00      	nop
  }
}
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b08a      	sub	sp, #40	@ 0x28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	0c5b      	lsrs	r3, r3, #17
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d004      	beq.n	8006104 <HCD_RXQLVL_IRQHandler+0x46>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	f000 80b6 	beq.w	800626e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006102:	e0b7      	b.n	8006274 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80b3 	beq.w	8006272 <HCD_RXQLVL_IRQHandler+0x1b4>
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	332c      	adds	r3, #44	@ 0x2c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80a7 	beq.w	8006272 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	3338      	adds	r3, #56	@ 0x38
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	18d1      	adds	r1, r2, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4613      	mov	r3, r2
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4403      	add	r3, r0
 8006148:	3334      	adds	r3, #52	@ 0x34
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4299      	cmp	r1, r3
 800614e:	f200 8083 	bhi.w	8006258 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4613      	mov	r3, r2
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	332c      	adds	r3, #44	@ 0x2c
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	b292      	uxth	r2, r2
 800616c:	4619      	mov	r1, r3
 800616e:	f001 fe9c 	bl	8007eaa <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4613      	mov	r3, r2
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	332c      	adds	r3, #44	@ 0x2c
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	18d1      	adds	r1, r2, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4613      	mov	r3, r2
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4403      	add	r3, r0
 8006196:	332c      	adds	r3, #44	@ 0x2c
 8006198:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4613      	mov	r3, r2
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3338      	adds	r3, #56	@ 0x38
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	18d1      	adds	r1, r2, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4403      	add	r3, r0
 80061be:	3338      	adds	r3, #56	@ 0x38
 80061c0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	0cdb      	lsrs	r3, r3, #19
 80061d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4613      	mov	r3, r2
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	3328      	adds	r3, #40	@ 0x28
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d13f      	bne.n	8006272 <HCD_RXQLVL_IRQHandler+0x1b4>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d03c      	beq.n	8006272 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800620e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006216:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4613      	mov	r3, r2
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	333c      	adds	r3, #60	@ 0x3c
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f083 0301 	eor.w	r3, r3, #1
 8006240:	b2d8      	uxtb	r0, r3
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4613      	mov	r3, r2
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	333c      	adds	r3, #60	@ 0x3c
 8006252:	4602      	mov	r2, r0
 8006254:	701a      	strb	r2, [r3, #0]
      break;
 8006256:	e00c      	b.n	8006272 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	334c      	adds	r3, #76	@ 0x4c
 8006268:	2204      	movs	r2, #4
 800626a:	701a      	strb	r2, [r3, #0]
      break;
 800626c:	e001      	b.n	8006272 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006272:	bf00      	nop
  }
}
 8006274:	bf00      	nop
 8006276:	3728      	adds	r7, #40	@ 0x28
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80062a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d10b      	bne.n	80062cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d102      	bne.n	80062c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f004 ff3e 	bl	800b140 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f043 0302 	orr.w	r3, r3, #2
 80062ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d132      	bne.n	800633c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f043 0308 	orr.w	r3, r3, #8
 80062dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d126      	bne.n	8006336 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7a5b      	ldrb	r3, [r3, #9]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d113      	bne.n	8006318 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80062f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062fa:	d106      	bne.n	800630a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2102      	movs	r1, #2
 8006302:	4618      	mov	r0, r3
 8006304:	f001 ff60 	bl	80081c8 <USB_InitFSLSPClkSel>
 8006308:	e011      	b.n	800632e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2101      	movs	r1, #1
 8006310:	4618      	mov	r0, r3
 8006312:	f001 ff59 	bl	80081c8 <USB_InitFSLSPClkSel>
 8006316:	e00a      	b.n	800632e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	79db      	ldrb	r3, [r3, #7]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d106      	bne.n	800632e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006326:	461a      	mov	r2, r3
 8006328:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800632c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f004 ff30 	bl	800b194 <HAL_HCD_PortEnabled_Callback>
 8006334:	e002      	b.n	800633c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f004 ff3a 	bl	800b1b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b20      	cmp	r3, #32
 8006344:	d103      	bne.n	800634e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f043 0320 	orr.w	r3, r3, #32
 800634c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006354:	461a      	mov	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6013      	str	r3, [r2, #0]
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e12b      	b.n	80065ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fa f9c0 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	@ 0x24
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063c8:	f001 fa20 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 80063cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4a81      	ldr	r2, [pc, #516]	@ (80065d8 <HAL_I2C_Init+0x274>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d807      	bhi.n	80063e8 <HAL_I2C_Init+0x84>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a80      	ldr	r2, [pc, #512]	@ (80065dc <HAL_I2C_Init+0x278>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	bf94      	ite	ls
 80063e0:	2301      	movls	r3, #1
 80063e2:	2300      	movhi	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e006      	b.n	80063f6 <HAL_I2C_Init+0x92>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4a7d      	ldr	r2, [pc, #500]	@ (80065e0 <HAL_I2C_Init+0x27c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bf94      	ite	ls
 80063f0:	2301      	movls	r3, #1
 80063f2:	2300      	movhi	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e0e7      	b.n	80065ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a78      	ldr	r2, [pc, #480]	@ (80065e4 <HAL_I2C_Init+0x280>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	0c9b      	lsrs	r3, r3, #18
 8006408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	4a6a      	ldr	r2, [pc, #424]	@ (80065d8 <HAL_I2C_Init+0x274>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d802      	bhi.n	8006438 <HAL_I2C_Init+0xd4>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3301      	adds	r3, #1
 8006436:	e009      	b.n	800644c <HAL_I2C_Init+0xe8>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	4a69      	ldr	r2, [pc, #420]	@ (80065e8 <HAL_I2C_Init+0x284>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	099b      	lsrs	r3, r3, #6
 800644a:	3301      	adds	r3, #1
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800645e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	495c      	ldr	r1, [pc, #368]	@ (80065d8 <HAL_I2C_Init+0x274>)
 8006468:	428b      	cmp	r3, r1
 800646a:	d819      	bhi.n	80064a0 <HAL_I2C_Init+0x13c>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1e59      	subs	r1, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	fbb1 f3f3 	udiv	r3, r1, r3
 800647a:	1c59      	adds	r1, r3, #1
 800647c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006480:	400b      	ands	r3, r1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_I2C_Init+0x138>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1e59      	subs	r1, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	fbb1 f3f3 	udiv	r3, r1, r3
 8006494:	3301      	adds	r3, #1
 8006496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649a:	e051      	b.n	8006540 <HAL_I2C_Init+0x1dc>
 800649c:	2304      	movs	r3, #4
 800649e:	e04f      	b.n	8006540 <HAL_I2C_Init+0x1dc>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d111      	bne.n	80064cc <HAL_I2C_Init+0x168>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	1e58      	subs	r0, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	440b      	add	r3, r1
 80064b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	e012      	b.n	80064f2 <HAL_I2C_Init+0x18e>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1e58      	subs	r0, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	0099      	lsls	r1, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	fbb0 f3f3 	udiv	r3, r0, r3
 80064e2:	3301      	adds	r3, #1
 80064e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Init+0x196>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e022      	b.n	8006540 <HAL_I2C_Init+0x1dc>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10e      	bne.n	8006520 <HAL_I2C_Init+0x1bc>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1e58      	subs	r0, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	440b      	add	r3, r1
 8006510:	fbb0 f3f3 	udiv	r3, r0, r3
 8006514:	3301      	adds	r3, #1
 8006516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651e:	e00f      	b.n	8006540 <HAL_I2C_Init+0x1dc>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	1e58      	subs	r0, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6859      	ldr	r1, [r3, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	0099      	lsls	r1, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	fbb0 f3f3 	udiv	r3, r0, r3
 8006536:	3301      	adds	r3, #1
 8006538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800653c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	6809      	ldr	r1, [r1, #0]
 8006544:	4313      	orrs	r3, r2
 8006546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800656e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6911      	ldr	r1, [r2, #16]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68d2      	ldr	r2, [r2, #12]
 800657a:	4311      	orrs	r1, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	430b      	orrs	r3, r1
 8006582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	000186a0 	.word	0x000186a0
 80065dc:	001e847f 	.word	0x001e847f
 80065e0:	003d08ff 	.word	0x003d08ff
 80065e4:	431bde83 	.word	0x431bde83
 80065e8:	10624dd3 	.word	0x10624dd3

080065ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e128      	b.n	8006850 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a90      	ldr	r2, [pc, #576]	@ (8006858 <HAL_I2S_Init+0x26c>)
 8006616:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fa f8f1 	bl	8000800 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006634:	f023 030f 	bic.w	r3, r3, #15
 8006638:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2202      	movs	r2, #2
 8006640:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d060      	beq.n	800670c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006652:	2310      	movs	r3, #16
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	e001      	b.n	800665c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006658:	2320      	movs	r3, #32
 800665a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b20      	cmp	r3, #32
 8006662:	d802      	bhi.n	800666a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800666a:	2001      	movs	r0, #1
 800666c:	f001 f9c4 	bl	80079f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006670:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667a:	d125      	bne.n	80066c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	fbb2 f2f3 	udiv	r2, r2, r3
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a0:	3305      	adds	r3, #5
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e01f      	b.n	80066e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c2:	3305      	adds	r3, #5
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e00e      	b.n	80066e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e2:	3305      	adds	r3, #5
 80066e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4a5c      	ldr	r2, [pc, #368]	@ (800685c <HAL_I2S_Init+0x270>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	08db      	lsrs	r3, r3, #3
 80066f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e003      	b.n	8006714 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800670c:	2302      	movs	r3, #2
 800670e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d902      	bls.n	8006720 <HAL_I2S_Init+0x134>
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2bff      	cmp	r3, #255	@ 0xff
 800671e:	d907      	bls.n	8006730 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006724:	f043 0210 	orr.w	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e08f      	b.n	8006850 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	ea42 0103 	orr.w	r1, r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	430a      	orrs	r2, r1
 8006742:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800674e:	f023 030f 	bic.w	r3, r3, #15
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6851      	ldr	r1, [r2, #4]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6892      	ldr	r2, [r2, #8]
 800675a:	4311      	orrs	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68d2      	ldr	r2, [r2, #12]
 8006760:	4311      	orrs	r1, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6992      	ldr	r2, [r2, #24]
 8006766:	430a      	orrs	r2, r1
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006772:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d161      	bne.n	8006840 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a38      	ldr	r2, [pc, #224]	@ (8006860 <HAL_I2S_Init+0x274>)
 8006780:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a37      	ldr	r2, [pc, #220]	@ (8006864 <HAL_I2S_Init+0x278>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d101      	bne.n	8006790 <HAL_I2S_Init+0x1a4>
 800678c:	4b36      	ldr	r3, [pc, #216]	@ (8006868 <HAL_I2S_Init+0x27c>)
 800678e:	e001      	b.n	8006794 <HAL_I2S_Init+0x1a8>
 8006790:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	4932      	ldr	r1, [pc, #200]	@ (8006864 <HAL_I2S_Init+0x278>)
 800679c:	428a      	cmp	r2, r1
 800679e:	d101      	bne.n	80067a4 <HAL_I2S_Init+0x1b8>
 80067a0:	4a31      	ldr	r2, [pc, #196]	@ (8006868 <HAL_I2S_Init+0x27c>)
 80067a2:	e001      	b.n	80067a8 <HAL_I2S_Init+0x1bc>
 80067a4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80067a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80067ac:	f023 030f 	bic.w	r3, r3, #15
 80067b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2b      	ldr	r2, [pc, #172]	@ (8006864 <HAL_I2S_Init+0x278>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <HAL_I2S_Init+0x1d4>
 80067bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006868 <HAL_I2S_Init+0x27c>)
 80067be:	e001      	b.n	80067c4 <HAL_I2S_Init+0x1d8>
 80067c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067c4:	2202      	movs	r2, #2
 80067c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a25      	ldr	r2, [pc, #148]	@ (8006864 <HAL_I2S_Init+0x278>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_I2S_Init+0x1ea>
 80067d2:	4b25      	ldr	r3, [pc, #148]	@ (8006868 <HAL_I2S_Init+0x27c>)
 80067d4:	e001      	b.n	80067da <HAL_I2S_Init+0x1ee>
 80067d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e6:	d003      	beq.n	80067f0 <HAL_I2S_Init+0x204>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d103      	bne.n	80067f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80067f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e001      	b.n	80067fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006806:	4313      	orrs	r3, r2
 8006808:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006810:	4313      	orrs	r3, r2
 8006812:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800681a:	4313      	orrs	r3, r2
 800681c:	b29a      	uxth	r2, r3
 800681e:	897b      	ldrh	r3, [r7, #10]
 8006820:	4313      	orrs	r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006828:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a0d      	ldr	r2, [pc, #52]	@ (8006864 <HAL_I2S_Init+0x278>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d101      	bne.n	8006838 <HAL_I2S_Init+0x24c>
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <HAL_I2S_Init+0x27c>)
 8006836:	e001      	b.n	800683c <HAL_I2S_Init+0x250>
 8006838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800683c:	897a      	ldrh	r2, [r7, #10]
 800683e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08006963 	.word	0x08006963
 800685c:	cccccccd 	.word	0xcccccccd
 8006860:	08006a79 	.word	0x08006a79
 8006864:	40003800 	.word	0x40003800
 8006868:	40003400 	.word	0x40003400

0800686c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	1c9a      	adds	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10e      	bne.n	80068fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff ffb8 	bl	800686c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	b292      	uxth	r2, r2
 8006918:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	1c9a      	adds	r2, r3, #2
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10e      	bne.n	800695a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800694a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff93 	bl	8006880 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b04      	cmp	r3, #4
 800697c:	d13a      	bne.n	80069f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d109      	bne.n	800699c <I2S_IRQHandler+0x3a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d102      	bne.n	800699c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff ffb4 	bl	8006904 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a2:	2b40      	cmp	r3, #64	@ 0x40
 80069a4:	d126      	bne.n	80069f4 <I2S_IRQHandler+0x92>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d11f      	bne.n	80069f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	f043 0202 	orr.w	r2, r3, #2
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff ff50 	bl	8006894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d136      	bne.n	8006a6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d109      	bne.n	8006a1e <I2S_IRQHandler+0xbc>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a14:	2b80      	cmp	r3, #128	@ 0x80
 8006a16:	d102      	bne.n	8006a1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff ff45 	bl	80068a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d122      	bne.n	8006a6e <I2S_IRQHandler+0x10c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d11b      	bne.n	8006a6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a60:	f043 0204 	orr.w	r2, r3, #4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff13 	bl	8006894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a92      	ldr	r2, [pc, #584]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d101      	bne.n	8006a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006a92:	4b92      	ldr	r3, [pc, #584]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a94:	e001      	b.n	8006a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006a96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a8b      	ldr	r2, [pc, #556]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ab2:	e001      	b.n	8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ab4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac4:	d004      	beq.n	8006ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f040 8099 	bne.w	8006c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d107      	bne.n	8006aea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f925 	bl	8006d34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d107      	bne.n	8006b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9c8 	bl	8006e94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d13a      	bne.n	8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d035      	beq.n	8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d101      	bne.n	8006b26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006b22:	4b6e      	ldr	r3, [pc, #440]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b24:	e001      	b.n	8006b2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4969      	ldr	r1, [pc, #420]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b32:	428b      	cmp	r3, r1
 8006b34:	d101      	bne.n	8006b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006b36:	4b69      	ldr	r3, [pc, #420]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b38:	e001      	b.n	8006b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006b3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b76:	f043 0202 	orr.w	r2, r3, #2
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fe88 	bl	8006894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	f040 80c3 	bne.w	8006d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80bd 	beq.w	8006d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006baa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a49      	ldr	r2, [pc, #292]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d101      	bne.n	8006bba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006bb6:	4b49      	ldr	r3, [pc, #292]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bb8:	e001      	b.n	8006bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006bba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4944      	ldr	r1, [pc, #272]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bc6:	428b      	cmp	r3, r1
 8006bc8:	d101      	bne.n	8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006bca:	4b44      	ldr	r3, [pc, #272]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bcc:	e001      	b.n	8006bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006bce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006bd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf2:	f043 0204 	orr.w	r2, r3, #4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fe4a 	bl	8006894 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c00:	e089      	b.n	8006d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d107      	bne.n	8006c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8be 	bl	8006d98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d107      	bne.n	8006c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f8fd 	bl	8006e30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3c:	2b40      	cmp	r3, #64	@ 0x40
 8006c3e:	d12f      	bne.n	8006ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02a      	beq.n	8006ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006c64:	4b1d      	ldr	r3, [pc, #116]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c66:	e001      	b.n	8006c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4919      	ldr	r1, [pc, #100]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c74:	428b      	cmp	r3, r1
 8006c76:	d101      	bne.n	8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006c78:	4b18      	ldr	r3, [pc, #96]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c7a:	e001      	b.n	8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c92:	f043 0202 	orr.w	r2, r3, #2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fdfa 	bl	8006894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d136      	bne.n	8006d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d031      	beq.n	8006d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a07      	ldr	r2, [pc, #28]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d101      	bne.n	8006cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006cbe:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cc0:	e001      	b.n	8006cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006cc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4902      	ldr	r1, [pc, #8]	@ (8006cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cce:	428b      	cmp	r3, r1
 8006cd0:	d106      	bne.n	8006ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006cd2:	4b02      	ldr	r3, [pc, #8]	@ (8006cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cd4:	e006      	b.n	8006ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006cd6:	bf00      	nop
 8006cd8:	40003800 	.word	0x40003800
 8006cdc:	40003400 	.word	0x40003400
 8006ce0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ce4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ce8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006cf8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d06:	f043 0204 	orr.w	r2, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fdc0 	bl	8006894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d14:	e000      	b.n	8006d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d16:	bf00      	nop
}
 8006d18:	bf00      	nop
 8006d1a:	3720      	adds	r7, #32
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	1c99      	adds	r1, r3, #2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6251      	str	r1, [r2, #36]	@ 0x24
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d113      	bne.n	8006d8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ffc9 	bl	8006d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	1c99      	adds	r1, r3, #2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6251      	str	r1, [r2, #36]	@ 0x24
 8006daa:	8819      	ldrh	r1, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e28 <I2SEx_TxISR_I2SExt+0x90>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d101      	bne.n	8006dba <I2SEx_TxISR_I2SExt+0x22>
 8006db6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e2c <I2SEx_TxISR_I2SExt+0x94>)
 8006db8:	e001      	b.n	8006dbe <I2SEx_TxISR_I2SExt+0x26>
 8006dba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d121      	bne.n	8006e1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a12      	ldr	r2, [pc, #72]	@ (8006e28 <I2SEx_TxISR_I2SExt+0x90>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <I2SEx_TxISR_I2SExt+0x50>
 8006de4:	4b11      	ldr	r3, [pc, #68]	@ (8006e2c <I2SEx_TxISR_I2SExt+0x94>)
 8006de6:	e001      	b.n	8006dec <I2SEx_TxISR_I2SExt+0x54>
 8006de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	490d      	ldr	r1, [pc, #52]	@ (8006e28 <I2SEx_TxISR_I2SExt+0x90>)
 8006df4:	428b      	cmp	r3, r1
 8006df6:	d101      	bne.n	8006dfc <I2SEx_TxISR_I2SExt+0x64>
 8006df8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <I2SEx_TxISR_I2SExt+0x94>)
 8006dfa:	e001      	b.n	8006e00 <I2SEx_TxISR_I2SExt+0x68>
 8006dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff81 	bl	8006d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40003800 	.word	0x40003800
 8006e2c:	40003400 	.word	0x40003400

08006e30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68d8      	ldr	r0, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	1c99      	adds	r1, r3, #2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006e48:	b282      	uxth	r2, r0
 8006e4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d113      	bne.n	8006e8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff ff4a 	bl	8006d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a20      	ldr	r2, [pc, #128]	@ (8006f24 <I2SEx_RxISR_I2SExt+0x90>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d101      	bne.n	8006eaa <I2SEx_RxISR_I2SExt+0x16>
 8006ea6:	4b20      	ldr	r3, [pc, #128]	@ (8006f28 <I2SEx_RxISR_I2SExt+0x94>)
 8006ea8:	e001      	b.n	8006eae <I2SEx_RxISR_I2SExt+0x1a>
 8006eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006eae:	68d8      	ldr	r0, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	1c99      	adds	r1, r3, #2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006eba:	b282      	uxth	r2, r0
 8006ebc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d121      	bne.n	8006f1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a12      	ldr	r2, [pc, #72]	@ (8006f24 <I2SEx_RxISR_I2SExt+0x90>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <I2SEx_RxISR_I2SExt+0x50>
 8006ee0:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <I2SEx_RxISR_I2SExt+0x94>)
 8006ee2:	e001      	b.n	8006ee8 <I2SEx_RxISR_I2SExt+0x54>
 8006ee4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	490d      	ldr	r1, [pc, #52]	@ (8006f24 <I2SEx_RxISR_I2SExt+0x90>)
 8006ef0:	428b      	cmp	r3, r1
 8006ef2:	d101      	bne.n	8006ef8 <I2SEx_RxISR_I2SExt+0x64>
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <I2SEx_RxISR_I2SExt+0x94>)
 8006ef6:	e001      	b.n	8006efc <I2SEx_RxISR_I2SExt+0x68>
 8006ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006efc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006f00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff03 	bl	8006d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	40003800 	.word	0x40003800
 8006f28:	40003400 	.word	0x40003400

08006f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e267      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d075      	beq.n	8007036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006f4a:	4b88      	ldr	r3, [pc, #544]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d00c      	beq.n	8006f70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f56:	4b85      	ldr	r3, [pc, #532]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d112      	bne.n	8006f88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f62:	4b82      	ldr	r3, [pc, #520]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f6e:	d10b      	bne.n	8006f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f70:	4b7e      	ldr	r3, [pc, #504]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d05b      	beq.n	8007034 <HAL_RCC_OscConfig+0x108>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d157      	bne.n	8007034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e242      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f90:	d106      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x74>
 8006f92:	4b76      	ldr	r3, [pc, #472]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a75      	ldr	r2, [pc, #468]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e01d      	b.n	8006fdc <HAL_RCC_OscConfig+0xb0>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x98>
 8006faa:	4b70      	ldr	r3, [pc, #448]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a6f      	ldr	r2, [pc, #444]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6c      	ldr	r2, [pc, #432]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e00b      	b.n	8006fdc <HAL_RCC_OscConfig+0xb0>
 8006fc4:	4b69      	ldr	r3, [pc, #420]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a68      	ldr	r2, [pc, #416]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b66      	ldr	r3, [pc, #408]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a65      	ldr	r2, [pc, #404]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8006fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fc fd92 	bl	8003b0c <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fc fd8e 	bl	8003b0c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	@ 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e207      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0xc0>
 800700a:	e014      	b.n	8007036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700c:	f7fc fd7e 	bl	8003b0c <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007014:	f7fc fd7a 	bl	8003b0c <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b64      	cmp	r3, #100	@ 0x64
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1f3      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	4b51      	ldr	r3, [pc, #324]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0xe8>
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d063      	beq.n	800710a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007042:	4b4a      	ldr	r3, [pc, #296]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800704e:	4b47      	ldr	r3, [pc, #284]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007056:	2b08      	cmp	r3, #8
 8007058:	d11c      	bne.n	8007094 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800705a:	4b44      	ldr	r3, [pc, #272]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d116      	bne.n	8007094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	4b41      	ldr	r3, [pc, #260]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_RCC_OscConfig+0x152>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1c7      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b3b      	ldr	r3, [pc, #236]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4937      	ldr	r1, [pc, #220]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	e03a      	b.n	800710a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709c:	4b34      	ldr	r3, [pc, #208]	@ (8007170 <HAL_RCC_OscConfig+0x244>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a2:	f7fc fd33 	bl	8003b0c <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070aa:	f7fc fd2f 	bl	8003b0c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e1a8      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070bc:	4b2b      	ldr	r3, [pc, #172]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b28      	ldr	r3, [pc, #160]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4925      	ldr	r1, [pc, #148]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]
 80070dc:	e015      	b.n	800710a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070de:	4b24      	ldr	r3, [pc, #144]	@ (8007170 <HAL_RCC_OscConfig+0x244>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fc fd12 	bl	8003b0c <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ec:	f7fc fd0e 	bl	8003b0c <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e187      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fe:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d036      	beq.n	8007184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d016      	beq.n	800714c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800711e:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <HAL_RCC_OscConfig+0x248>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007124:	f7fc fcf2 	bl	8003b0c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712c:	f7fc fcee 	bl	8003b0c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e167      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713e:	4b0b      	ldr	r3, [pc, #44]	@ (800716c <HAL_RCC_OscConfig+0x240>)
 8007140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0x200>
 800714a:	e01b      	b.n	8007184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800714c:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <HAL_RCC_OscConfig+0x248>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007152:	f7fc fcdb 	bl	8003b0c <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007158:	e00e      	b.n	8007178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800715a:	f7fc fcd7 	bl	8003b0c <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d907      	bls.n	8007178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e150      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
 800716c:	40023800 	.word	0x40023800
 8007170:	42470000 	.word	0x42470000
 8007174:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007178:	4b88      	ldr	r3, [pc, #544]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800717a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ea      	bne.n	800715a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8097 	beq.w	80072c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007192:	2300      	movs	r3, #0
 8007194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007196:	4b81      	ldr	r3, [pc, #516]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10f      	bne.n	80071c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	4b7d      	ldr	r3, [pc, #500]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	4a7c      	ldr	r2, [pc, #496]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80071b2:	4b7a      	ldr	r3, [pc, #488]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c2:	4b77      	ldr	r3, [pc, #476]	@ (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ce:	4b74      	ldr	r3, [pc, #464]	@ (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a73      	ldr	r2, [pc, #460]	@ (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071da:	f7fc fc97 	bl	8003b0c <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fc fc93 	bl	8003b0c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e10c      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f4:	4b6a      	ldr	r3, [pc, #424]	@ (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x2ea>
 8007208:	4b64      	ldr	r3, [pc, #400]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720c:	4a63      	ldr	r2, [pc, #396]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6713      	str	r3, [r2, #112]	@ 0x70
 8007214:	e01c      	b.n	8007250 <HAL_RCC_OscConfig+0x324>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b05      	cmp	r3, #5
 800721c:	d10c      	bne.n	8007238 <HAL_RCC_OscConfig+0x30c>
 800721e:	4b5f      	ldr	r3, [pc, #380]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007222:	4a5e      	ldr	r2, [pc, #376]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007224:	f043 0304 	orr.w	r3, r3, #4
 8007228:	6713      	str	r3, [r2, #112]	@ 0x70
 800722a:	4b5c      	ldr	r3, [pc, #368]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722e:	4a5b      	ldr	r2, [pc, #364]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6713      	str	r3, [r2, #112]	@ 0x70
 8007236:	e00b      	b.n	8007250 <HAL_RCC_OscConfig+0x324>
 8007238:	4b58      	ldr	r3, [pc, #352]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723c:	4a57      	ldr	r2, [pc, #348]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	6713      	str	r3, [r2, #112]	@ 0x70
 8007244:	4b55      	ldr	r3, [pc, #340]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007248:	4a54      	ldr	r2, [pc, #336]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 800724a:	f023 0304 	bic.w	r3, r3, #4
 800724e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d015      	beq.n	8007284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007258:	f7fc fc58 	bl	8003b0c <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725e:	e00a      	b.n	8007276 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007260:	f7fc fc54 	bl	8003b0c <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0cb      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007276:	4b49      	ldr	r3, [pc, #292]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0ee      	beq.n	8007260 <HAL_RCC_OscConfig+0x334>
 8007282:	e014      	b.n	80072ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007284:	f7fc fc42 	bl	8003b0c <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fc fc3e 	bl	8003b0c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0b5      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072a2:	4b3e      	ldr	r3, [pc, #248]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ee      	bne.n	800728c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d105      	bne.n	80072c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072b4:	4b39      	ldr	r3, [pc, #228]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	4a38      	ldr	r2, [pc, #224]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80072ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80a1 	beq.w	800740c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072ca:	4b34      	ldr	r3, [pc, #208]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d05c      	beq.n	8007390 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d141      	bne.n	8007362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072de:	4b31      	ldr	r3, [pc, #196]	@ (80073a4 <HAL_RCC_OscConfig+0x478>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e4:	f7fc fc12 	bl	8003b0c <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ec:	f7fc fc0e 	bl	8003b0c <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e087      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fe:	4b27      	ldr	r3, [pc, #156]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f0      	bne.n	80072ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69da      	ldr	r2, [r3, #28]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007318:	019b      	lsls	r3, r3, #6
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	3b01      	subs	r3, #1
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	061b      	lsls	r3, r3, #24
 800732e:	491b      	ldr	r1, [pc, #108]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007330:	4313      	orrs	r3, r2
 8007332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007334:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <HAL_RCC_OscConfig+0x478>)
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733a:	f7fc fbe7 	bl	8003b0c <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007342:	f7fc fbe3 	bl	8003b0c <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e05c      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007354:	4b11      	ldr	r3, [pc, #68]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f0      	beq.n	8007342 <HAL_RCC_OscConfig+0x416>
 8007360:	e054      	b.n	800740c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007362:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <HAL_RCC_OscConfig+0x478>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007368:	f7fc fbd0 	bl	8003b0c <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007370:	f7fc fbcc 	bl	8003b0c <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e045      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007382:	4b06      	ldr	r3, [pc, #24]	@ (800739c <HAL_RCC_OscConfig+0x470>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x444>
 800738e:	e03d      	b.n	800740c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d107      	bne.n	80073a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e038      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
 800739c:	40023800 	.word	0x40023800
 80073a0:	40007000 	.word	0x40007000
 80073a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007418 <HAL_RCC_OscConfig+0x4ec>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d028      	beq.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d121      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11a      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073d8:	4013      	ands	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d111      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	3b01      	subs	r3, #1
 80073f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007404:	429a      	cmp	r2, r3
 8007406:	d001      	beq.n	800740c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40023800 	.word	0x40023800

0800741c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0cc      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007430:	4b68      	ldr	r3, [pc, #416]	@ (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d90c      	bls.n	8007458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b65      	ldr	r3, [pc, #404]	@ (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007446:	4b63      	ldr	r3, [pc, #396]	@ (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d001      	beq.n	8007458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0b8      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d020      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007470:	4b59      	ldr	r3, [pc, #356]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	4a58      	ldr	r2, [pc, #352]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800747a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007488:	4b53      	ldr	r3, [pc, #332]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a52      	ldr	r2, [pc, #328]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007494:	4b50      	ldr	r3, [pc, #320]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	494d      	ldr	r1, [pc, #308]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d044      	beq.n	800753c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ba:	4b47      	ldr	r3, [pc, #284]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d119      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e07f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d003      	beq.n	80074da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d107      	bne.n	80074ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074da:	4b3f      	ldr	r3, [pc, #252]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e06f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ea:	4b3b      	ldr	r3, [pc, #236]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e067      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fa:	4b37      	ldr	r3, [pc, #220]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 0203 	bic.w	r2, r3, #3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	4934      	ldr	r1, [pc, #208]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	4313      	orrs	r3, r2
 800750a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800750c:	f7fc fafe 	bl	8003b0c <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007512:	e00a      	b.n	800752a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007514:	f7fc fafa 	bl	8003b0c <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e04f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752a:	4b2b      	ldr	r3, [pc, #172]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 020c 	and.w	r2, r3, #12
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	429a      	cmp	r2, r3
 800753a:	d1eb      	bne.n	8007514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800753c:	4b25      	ldr	r3, [pc, #148]	@ (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d20c      	bcs.n	8007564 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754a:	4b22      	ldr	r3, [pc, #136]	@ (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007552:	4b20      	ldr	r3, [pc, #128]	@ (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d001      	beq.n	8007564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e032      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007570:	4b19      	ldr	r3, [pc, #100]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	4916      	ldr	r1, [pc, #88]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800758e:	4b12      	ldr	r3, [pc, #72]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	490e      	ldr	r1, [pc, #56]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075a2:	f000 f821 	bl	80075e8 <HAL_RCC_GetSysClockFreq>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	490a      	ldr	r1, [pc, #40]	@ (80075dc <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	5ccb      	ldrb	r3, [r1, r3]
 80075b6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ba:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80075be:	4b09      	ldr	r3, [pc, #36]	@ (80075e4 <HAL_RCC_ClockConfig+0x1c8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fc fa5e 	bl	8003a84 <HAL_InitTick>

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023c00 	.word	0x40023c00
 80075d8:	40023800 	.word	0x40023800
 80075dc:	0800b86c 	.word	0x0800b86c
 80075e0:	20000000 	.word	0x20000000
 80075e4:	20000004 	.word	0x20000004

080075e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075ec:	b094      	sub	sp, #80	@ 0x50
 80075ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007600:	4b79      	ldr	r3, [pc, #484]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 030c 	and.w	r3, r3, #12
 8007608:	2b08      	cmp	r3, #8
 800760a:	d00d      	beq.n	8007628 <HAL_RCC_GetSysClockFreq+0x40>
 800760c:	2b08      	cmp	r3, #8
 800760e:	f200 80e1 	bhi.w	80077d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_RCC_GetSysClockFreq+0x34>
 8007616:	2b04      	cmp	r3, #4
 8007618:	d003      	beq.n	8007622 <HAL_RCC_GetSysClockFreq+0x3a>
 800761a:	e0db      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800761c:	4b73      	ldr	r3, [pc, #460]	@ (80077ec <HAL_RCC_GetSysClockFreq+0x204>)
 800761e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007620:	e0db      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007622:	4b73      	ldr	r3, [pc, #460]	@ (80077f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007624:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007626:	e0d8      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007628:	4b6f      	ldr	r3, [pc, #444]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007630:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007632:	4b6d      	ldr	r3, [pc, #436]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d063      	beq.n	8007706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800763e:	4b6a      	ldr	r3, [pc, #424]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	2200      	movs	r2, #0
 8007646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007650:	633b      	str	r3, [r7, #48]	@ 0x30
 8007652:	2300      	movs	r3, #0
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
 8007656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f04f 0000 	mov.w	r0, #0
 8007662:	f04f 0100 	mov.w	r1, #0
 8007666:	0159      	lsls	r1, r3, #5
 8007668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800766c:	0150      	lsls	r0, r2, #5
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4621      	mov	r1, r4
 8007674:	1a51      	subs	r1, r2, r1
 8007676:	6139      	str	r1, [r7, #16]
 8007678:	4629      	mov	r1, r5
 800767a:	eb63 0301 	sbc.w	r3, r3, r1
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800768c:	4659      	mov	r1, fp
 800768e:	018b      	lsls	r3, r1, #6
 8007690:	4651      	mov	r1, sl
 8007692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007696:	4651      	mov	r1, sl
 8007698:	018a      	lsls	r2, r1, #6
 800769a:	4651      	mov	r1, sl
 800769c:	ebb2 0801 	subs.w	r8, r2, r1
 80076a0:	4659      	mov	r1, fp
 80076a2:	eb63 0901 	sbc.w	r9, r3, r1
 80076a6:	f04f 0200 	mov.w	r2, #0
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ba:	4690      	mov	r8, r2
 80076bc:	4699      	mov	r9, r3
 80076be:	4623      	mov	r3, r4
 80076c0:	eb18 0303 	adds.w	r3, r8, r3
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	462b      	mov	r3, r5
 80076c8:	eb49 0303 	adc.w	r3, r9, r3
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076da:	4629      	mov	r1, r5
 80076dc:	024b      	lsls	r3, r1, #9
 80076de:	4621      	mov	r1, r4
 80076e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076e4:	4621      	mov	r1, r4
 80076e6:	024a      	lsls	r2, r1, #9
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ee:	2200      	movs	r2, #0
 80076f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076f8:	f7f8 fd66 	bl	80001c8 <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4613      	mov	r3, r2
 8007702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007704:	e058      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007706:	4b38      	ldr	r3, [pc, #224]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	099b      	lsrs	r3, r3, #6
 800770c:	2200      	movs	r2, #0
 800770e:	4618      	mov	r0, r3
 8007710:	4611      	mov	r1, r2
 8007712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007716:	623b      	str	r3, [r7, #32]
 8007718:	2300      	movs	r3, #0
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
 800771c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007720:	4642      	mov	r2, r8
 8007722:	464b      	mov	r3, r9
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	0159      	lsls	r1, r3, #5
 800772e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007732:	0150      	lsls	r0, r2, #5
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4641      	mov	r1, r8
 800773a:	ebb2 0a01 	subs.w	sl, r2, r1
 800773e:	4649      	mov	r1, r9
 8007740:	eb63 0b01 	sbc.w	fp, r3, r1
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007758:	ebb2 040a 	subs.w	r4, r2, sl
 800775c:	eb63 050b 	sbc.w	r5, r3, fp
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	00eb      	lsls	r3, r5, #3
 800776a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800776e:	00e2      	lsls	r2, r4, #3
 8007770:	4614      	mov	r4, r2
 8007772:	461d      	mov	r5, r3
 8007774:	4643      	mov	r3, r8
 8007776:	18e3      	adds	r3, r4, r3
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	464b      	mov	r3, r9
 800777c:	eb45 0303 	adc.w	r3, r5, r3
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800778e:	4629      	mov	r1, r5
 8007790:	028b      	lsls	r3, r1, #10
 8007792:	4621      	mov	r1, r4
 8007794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007798:	4621      	mov	r1, r4
 800779a:	028a      	lsls	r2, r1, #10
 800779c:	4610      	mov	r0, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077a2:	2200      	movs	r2, #0
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	61fa      	str	r2, [r7, #28]
 80077a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077ac:	f7f8 fd0c 	bl	80001c8 <__aeabi_uldivmod>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4613      	mov	r3, r2
 80077b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80077b8:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	0c1b      	lsrs	r3, r3, #16
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	3301      	adds	r3, #1
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80077c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077d2:	e002      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <HAL_RCC_GetSysClockFreq+0x204>)
 80077d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3750      	adds	r7, #80	@ 0x50
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e6:	bf00      	nop
 80077e8:	40023800 	.word	0x40023800
 80077ec:	00f42400 	.word	0x00f42400
 80077f0:	007a1200 	.word	0x007a1200

080077f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077f8:	4b03      	ldr	r3, [pc, #12]	@ (8007808 <HAL_RCC_GetHCLKFreq+0x14>)
 80077fa:	681b      	ldr	r3, [r3, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20000000 	.word	0x20000000

0800780c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007810:	f7ff fff0 	bl	80077f4 <HAL_RCC_GetHCLKFreq>
 8007814:	4602      	mov	r2, r0
 8007816:	4b05      	ldr	r3, [pc, #20]	@ (800782c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	0a9b      	lsrs	r3, r3, #10
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	4903      	ldr	r1, [pc, #12]	@ (8007830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007822:	5ccb      	ldrb	r3, [r1, r3]
 8007824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007828:	4618      	mov	r0, r3
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40023800 	.word	0x40023800
 8007830:	0800b87c 	.word	0x0800b87c

08007834 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007858:	2b00      	cmp	r3, #0
 800785a:	d035      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800785c:	4b62      	ldr	r3, [pc, #392]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007862:	f7fc f953 	bl	8003b0c <HAL_GetTick>
 8007866:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007868:	e008      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800786a:	f7fc f94f 	bl	8003b0c <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d901      	bls.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e0b0      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800787c:	4b5b      	ldr	r3, [pc, #364]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f0      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	019a      	lsls	r2, r3, #6
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	071b      	lsls	r3, r3, #28
 8007894:	4955      	ldr	r1, [pc, #340]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800789c:	4b52      	ldr	r3, [pc, #328]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800789e:	2201      	movs	r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078a2:	f7fc f933 	bl	8003b0c <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078a8:	e008      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078aa:	f7fc f92f 	bl	8003b0c <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d901      	bls.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e090      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078bc:	4b4b      	ldr	r3, [pc, #300]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0f0      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8083 	beq.w	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	4b44      	ldr	r3, [pc, #272]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	4a43      	ldr	r2, [pc, #268]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80078e6:	4b41      	ldr	r3, [pc, #260]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80078f2:	4b3f      	ldr	r3, [pc, #252]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a3e      	ldr	r2, [pc, #248]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078fe:	f7fc f905 	bl	8003b0c <HAL_GetTick>
 8007902:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007904:	e008      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007906:	f7fc f901 	bl	8003b0c <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e062      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007918:	4b35      	ldr	r3, [pc, #212]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0f0      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007924:	4b31      	ldr	r3, [pc, #196]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800792c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02f      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	429a      	cmp	r2, r3
 8007940:	d028      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007942:	4b2a      	ldr	r3, [pc, #168]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800794a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800794c:	4b29      	ldr	r3, [pc, #164]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800794e:	2201      	movs	r2, #1
 8007950:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007952:	4b28      	ldr	r3, [pc, #160]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007958:	4a24      	ldr	r2, [pc, #144]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800795e:	4b23      	ldr	r3, [pc, #140]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d114      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800796a:	f7fc f8cf 	bl	8003b0c <HAL_GetTick>
 800796e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007970:	e00a      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007972:	f7fc f8cb 	bl	8003b0c <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e02a      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007988:	4b18      	ldr	r3, [pc, #96]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ee      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800799c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079a0:	d10d      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80079a2:	4b12      	ldr	r3, [pc, #72]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80079b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079b6:	490d      	ldr	r1, [pc, #52]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	608b      	str	r3, [r1, #8]
 80079bc:	e005      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80079be:	4b0b      	ldr	r3, [pc, #44]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	4a0a      	ldr	r2, [pc, #40]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80079c8:	6093      	str	r3, [r2, #8]
 80079ca:	4b08      	ldr	r3, [pc, #32]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d6:	4905      	ldr	r1, [pc, #20]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	42470068 	.word	0x42470068
 80079ec:	40023800 	.word	0x40023800
 80079f0:	40007000 	.word	0x40007000
 80079f4:	42470e40 	.word	0x42470e40

080079f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d13f      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007a16:	4b24      	ldr	r3, [pc, #144]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d006      	beq.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a2c:	d12f      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007a30:	617b      	str	r3, [r7, #20]
          break;
 8007a32:	e02f      	b.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a34:	4b1c      	ldr	r3, [pc, #112]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a40:	d108      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a42:	4b19      	ldr	r3, [pc, #100]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a4a:	4a19      	ldr	r2, [pc, #100]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	e007      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a54:	4b14      	ldr	r3, [pc, #80]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a5c:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a62:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007a64:	4b10      	ldr	r3, [pc, #64]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a6a:	099b      	lsrs	r3, r3, #6
 8007a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007a78:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7e:	0f1b      	lsrs	r3, r3, #28
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8a:	617b      	str	r3, [r7, #20]
          break;
 8007a8c:	e002      	b.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
          break;
 8007a92:	bf00      	nop
        }
      }
      break;
 8007a94:	e000      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007a96:	bf00      	nop
    }
  }
  return frequency;
 8007a98:	697b      	ldr	r3, [r7, #20]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	00bb8000 	.word	0x00bb8000
 8007ab0:	007a1200 	.word	0x007a1200
 8007ab4:	00f42400 	.word	0x00f42400

08007ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e07b      	b.n	8007bc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d108      	bne.n	8007ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ada:	d009      	beq.n	8007af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	61da      	str	r2, [r3, #28]
 8007ae2:	e005      	b.n	8007af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7f9 f836 	bl	8000b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b60:	431a      	orrs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b74:	ea42 0103 	orr.w	r1, r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	f003 0104 	and.w	r1, r3, #4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	f003 0210 	and.w	r2, r3, #16
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bca:	b084      	sub	sp, #16
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	f107 001c 	add.w	r0, r7, #28
 8007bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bdc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d123      	bne.n	8007c2c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d105      	bne.n	8007c20 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f9dc 	bl	8007fde <USB_CoreReset>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
 8007c2a:	e01b      	b.n	8007c64 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9d0 	bl	8007fde <USB_CoreReset>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c56:	e005      	b.n	8007c64 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c64:	7fbb      	ldrb	r3, [r7, #30]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d10b      	bne.n	8007c82 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f043 0206 	orr.w	r2, r3, #6
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f043 0220 	orr.w	r2, r3, #32
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c8e:	b004      	add	sp, #16
 8007c90:	4770      	bx	lr

08007c92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f043 0201 	orr.w	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f023 0201 	bic.w	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d115      	bne.n	8007d24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d04:	200a      	movs	r0, #10
 8007d06:	f7fb ff0d 	bl	8003b24 <HAL_Delay>
      ms += 10U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	330a      	adds	r3, #10
 8007d0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f956 	bl	8007fc2 <USB_GetMode>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d01e      	beq.n	8007d5a <USB_SetCurrentMode+0x84>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d20:	d9f0      	bls.n	8007d04 <USB_SetCurrentMode+0x2e>
 8007d22:	e01a      	b.n	8007d5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d115      	bne.n	8007d56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d36:	200a      	movs	r0, #10
 8007d38:	f7fb fef4 	bl	8003b24 <HAL_Delay>
      ms += 10U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	330a      	adds	r3, #10
 8007d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f93d 	bl	8007fc2 <USB_GetMode>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <USB_SetCurrentMode+0x84>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d52:	d9f0      	bls.n	8007d36 <USB_SetCurrentMode+0x60>
 8007d54:	e001      	b.n	8007d5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e005      	b.n	8007d66 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d5e:	d101      	bne.n	8007d64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d88:	d901      	bls.n	8007d8e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e01b      	b.n	8007dc6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	daf2      	bge.n	8007d7c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	019b      	lsls	r3, r3, #6
 8007d9e:	f043 0220 	orr.w	r2, r3, #32
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007db2:	d901      	bls.n	8007db8 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e006      	b.n	8007dc6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d0f0      	beq.n	8007da6 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dea:	d901      	bls.n	8007df0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e018      	b.n	8007e22 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	daf2      	bge.n	8007dde <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3301      	adds	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e0e:	d901      	bls.n	8007e14 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e006      	b.n	8007e22 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d0f0      	beq.n	8007e02 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b089      	sub	sp, #36	@ 0x24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d123      	bne.n	8007e9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e54:	88bb      	ldrh	r3, [r7, #4]
 8007e56:	3303      	adds	r3, #3
 8007e58:	089b      	lsrs	r3, r3, #2
 8007e5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	e018      	b.n	8007e94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	031a      	lsls	r2, r3, #12
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e6e:	461a      	mov	r2, r3
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	3301      	adds	r3, #1
 8007e92:	61bb      	str	r3, [r7, #24]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d3e2      	bcc.n	8007e62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3724      	adds	r7, #36	@ 0x24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b08b      	sub	sp, #44	@ 0x2c
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	089b      	lsrs	r3, r3, #2
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	623b      	str	r3, [r7, #32]
 8007ed4:	e014      	b.n	8007f00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	3301      	adds	r3, #1
 8007eec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	3301      	adds	r3, #1
 8007efe:	623b      	str	r3, [r7, #32]
 8007f00:	6a3a      	ldr	r2, [r7, #32]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d3e6      	bcc.n	8007ed6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f08:	8bfb      	ldrh	r3, [r7, #30]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01e      	beq.n	8007f4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f107 0310 	add.w	r3, r7, #16
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	701a      	strb	r2, [r3, #0]
      i++;
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	3301      	adds	r3, #1
 8007f38:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007f40:	8bfb      	ldrh	r3, [r7, #30]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f46:	8bfb      	ldrh	r3, [r7, #30]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1ea      	bne.n	8007f22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	372c      	adds	r7, #44	@ 0x2c
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f72:	68fb      	ldr	r3, [r7, #12]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	f003 0301 	and.w	r3, r3, #1
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ff6:	d901      	bls.n	8007ffc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e01b      	b.n	8008034 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	daf2      	bge.n	8007fea <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	f043 0201 	orr.w	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008020:	d901      	bls.n	8008026 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e006      	b.n	8008034 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b01      	cmp	r3, #1
 8008030:	d0f0      	beq.n	8008014 <USB_CoreReset+0x36>

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008040:	b084      	sub	sp, #16
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800804e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008060:	461a      	mov	r2, r3
 8008062:	2300      	movs	r3, #0
 8008064:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008076:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008082:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d119      	bne.n	80080ca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008096:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800809a:	2b01      	cmp	r3, #1
 800809c:	d10a      	bne.n	80080b4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080ac:	f043 0304 	orr.w	r3, r3, #4
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e014      	b.n	80080de <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080c2:	f023 0304 	bic.w	r3, r3, #4
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e009      	b.n	80080de <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080d8:	f023 0304 	bic.w	r3, r3, #4
 80080dc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080de:	2110      	movs	r1, #16
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fe44 	bl	8007d6e <USB_FlushTxFifo>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff fe6e 	bl	8007dd2 <USB_FlushRxFifo>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	e015      	b.n	8008132 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008112:	461a      	mov	r2, r3
 8008114:	f04f 33ff 	mov.w	r3, #4294967295
 8008118:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008126:	461a      	mov	r2, r3
 8008128:	2300      	movs	r3, #0
 800812a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3301      	adds	r3, #1
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008136:	461a      	mov	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	4293      	cmp	r3, r2
 800813c:	d3e3      	bcc.n	8008106 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a18      	ldr	r2, [pc, #96]	@ (80081b0 <USB_HostInit+0x170>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d10b      	bne.n	800816c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800815a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a15      	ldr	r2, [pc, #84]	@ (80081b4 <USB_HostInit+0x174>)
 8008160:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a14      	ldr	r2, [pc, #80]	@ (80081b8 <USB_HostInit+0x178>)
 8008166:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800816a:	e009      	b.n	8008180 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2280      	movs	r2, #128	@ 0x80
 8008170:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a11      	ldr	r2, [pc, #68]	@ (80081bc <USB_HostInit+0x17c>)
 8008176:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a11      	ldr	r2, [pc, #68]	@ (80081c0 <USB_HostInit+0x180>)
 800817c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008184:	2b00      	cmp	r3, #0
 8008186:	d105      	bne.n	8008194 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f043 0210 	orr.w	r2, r3, #16
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <USB_HostInit+0x184>)
 800819a:	4313      	orrs	r3, r2
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081ac:	b004      	add	sp, #16
 80081ae:	4770      	bx	lr
 80081b0:	40040000 	.word	0x40040000
 80081b4:	01000200 	.word	0x01000200
 80081b8:	00e00300 	.word	0x00e00300
 80081bc:	00600080 	.word	0x00600080
 80081c0:	004000e0 	.word	0x004000e0
 80081c4:	a3200008 	.word	0xa3200008

080081c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008200:	4313      	orrs	r3, r2
 8008202:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d107      	bne.n	800821a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008210:	461a      	mov	r2, r3
 8008212:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008216:	6053      	str	r3, [r2, #4]
 8008218:	e00c      	b.n	8008234 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d107      	bne.n	8008230 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008226:	461a      	mov	r2, r3
 8008228:	f241 7370 	movw	r3, #6000	@ 0x1770
 800822c:	6053      	str	r3, [r2, #4]
 800822e:	e001      	b.n	8008234 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008262:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800826c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008270:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008272:	2064      	movs	r0, #100	@ 0x64
 8008274:	f7fb fc56 	bl	8003b24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008284:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008286:	200a      	movs	r0, #10
 8008288:	f7fb fc4c 	bl	8003b24 <HAL_Delay>

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80082ba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <USB_DriveVbus+0x44>
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d106      	bne.n	80082da <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082d8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e4:	d109      	bne.n	80082fa <USB_DriveVbus+0x64>
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082f8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	0c5b      	lsrs	r3, r3, #17
 8008326:	f003 0303 	and.w	r3, r3, #3
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	b29b      	uxth	r3, r3
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	4608      	mov	r0, r1
 8008362:	4611      	mov	r1, r2
 8008364:	461a      	mov	r2, r3
 8008366:	4603      	mov	r3, r0
 8008368:	70fb      	strb	r3, [r7, #3]
 800836a:	460b      	mov	r3, r1
 800836c:	70bb      	strb	r3, [r7, #2]
 800836e:	4613      	mov	r3, r2
 8008370:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008386:	461a      	mov	r2, r3
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800838e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008392:	2b03      	cmp	r3, #3
 8008394:	d87c      	bhi.n	8008490 <USB_HC_Init+0x138>
 8008396:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <USB_HC_Init+0x44>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	08008453 	.word	0x08008453
 80083a4:	080083ad 	.word	0x080083ad
 80083a8:	08008415 	.word	0x08008415
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b8:	461a      	mov	r2, r3
 80083ba:	f240 439d 	movw	r3, #1181	@ 0x49d
 80083be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80083c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da10      	bge.n	80083ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083e6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80083e8:	e055      	b.n	8008496 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a6f      	ldr	r2, [pc, #444]	@ (80085ac <USB_HC_Init+0x254>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d151      	bne.n	8008496 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	440a      	add	r2, r1
 8008408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800840c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008410:	60d3      	str	r3, [r2, #12]
      break;
 8008412:	e040      	b.n	8008496 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4413      	add	r3, r2
 800841c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008420:	461a      	mov	r2, r3
 8008422:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008426:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008428:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800842c:	2b00      	cmp	r3, #0
 800842e:	da34      	bge.n	800849a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	440a      	add	r2, r1
 8008446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800844a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800844e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008450:	e023      	b.n	800849a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4413      	add	r3, r2
 800845a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845e:	461a      	mov	r2, r3
 8008460:	f240 2325 	movw	r3, #549	@ 0x225
 8008464:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008466:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800846a:	2b00      	cmp	r3, #0
 800846c:	da17      	bge.n	800849e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	440a      	add	r2, r1
 8008484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008488:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800848c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800848e:	e006      	b.n	800849e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	77fb      	strb	r3, [r7, #31]
      break;
 8008494:	e004      	b.n	80084a0 <USB_HC_Init+0x148>
      break;
 8008496:	bf00      	nop
 8008498:	e002      	b.n	80084a0 <USB_HC_Init+0x148>
      break;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <USB_HC_Init+0x148>
      break;
 800849e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ac:	461a      	mov	r2, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	78fa      	ldrb	r2, [r7, #3]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084cc:	f043 0302 	orr.w	r3, r3, #2
 80084d0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	2101      	movs	r1, #1
 80084e2:	fa01 f303 	lsl.w	r3, r1, r3
 80084e6:	6939      	ldr	r1, [r7, #16]
 80084e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80084ec:	4313      	orrs	r3, r2
 80084ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80084fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da03      	bge.n	800850c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e001      	b.n	8008510 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fef9 	bl	8008308 <USB_GetHostSpeed>
 8008516:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008518:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800851c:	2b02      	cmp	r3, #2
 800851e:	d106      	bne.n	800852e <USB_HC_Init+0x1d6>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d003      	beq.n	800852e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008526:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	e001      	b.n	8008532 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008532:	787b      	ldrb	r3, [r7, #1]
 8008534:	059b      	lsls	r3, r3, #22
 8008536:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800853a:	78bb      	ldrb	r3, [r7, #2]
 800853c:	02db      	lsls	r3, r3, #11
 800853e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008542:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008544:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008548:	049b      	lsls	r3, r3, #18
 800854a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800854e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008550:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008552:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008556:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	431a      	orrs	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	440a      	add	r2, r1
 8008568:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800856c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008570:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008572:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008576:	2b03      	cmp	r3, #3
 8008578:	d003      	beq.n	8008582 <USB_HC_Init+0x22a>
 800857a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d10f      	bne.n	80085a2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	440a      	add	r2, r1
 8008598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800859c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80085a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40040000 	.word	0x40040000

080085b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08c      	sub	sp, #48	@ 0x30
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80085c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085cc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4a5d      	ldr	r2, [pc, #372]	@ (8008748 <USB_HC_StartXfer+0x198>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d12f      	bne.n	8008636 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d11c      	bne.n	8008616 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	7c9b      	ldrb	r3, [r3, #18]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <USB_HC_StartXfer+0x3c>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	7c9b      	ldrb	r3, [r3, #18]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d124      	bne.n	8008636 <USB_HC_StartXfer+0x86>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	799b      	ldrb	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d120      	bne.n	8008636 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	6a3a      	ldr	r2, [r7, #32]
 8008608:	440a      	add	r2, r1
 800860a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800860e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008612:	60d3      	str	r3, [r2, #12]
 8008614:	e00f      	b.n	8008636 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	791b      	ldrb	r3, [r3, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <USB_HC_StartXfer+0x86>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d107      	bne.n	8008636 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	4619      	mov	r1, r3
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fb6b 	bl	8008d08 <USB_DoPing>
        return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e232      	b.n	8008a9c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	799b      	ldrb	r3, [r3, #6]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d158      	bne.n	80086f0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800863e:	2301      	movs	r3, #1
 8008640:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800864a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	8a92      	ldrh	r2, [r2, #20]
 8008650:	fb03 f202 	mul.w	r2, r3, r2
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	61da      	str	r2, [r3, #28]
 8008658:	e07c      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	7c9b      	ldrb	r3, [r3, #18]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d130      	bne.n	80086c4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	2bbc      	cmp	r3, #188	@ 0xbc
 8008668:	d918      	bls.n	800869c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	8a9b      	ldrh	r3, [r3, #20]
 800866e:	461a      	mov	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	69da      	ldr	r2, [r3, #28]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d003      	beq.n	800868c <USB_HC_StartXfer+0xdc>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d103      	bne.n	8008694 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2202      	movs	r2, #2
 8008690:	60da      	str	r2, [r3, #12]
 8008692:	e05f      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2201      	movs	r2, #1
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	e05b      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6a1a      	ldr	r2, [r3, #32]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d007      	beq.n	80086bc <USB_HC_StartXfer+0x10c>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d003      	beq.n	80086bc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2204      	movs	r2, #4
 80086b8:	60da      	str	r2, [r3, #12]
 80086ba:	e04b      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2203      	movs	r2, #3
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	e047      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d10d      	bne.n	80086e6 <USB_HC_StartXfer+0x136>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	8a92      	ldrh	r2, [r2, #20]
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d907      	bls.n	80086e6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	8a92      	ldrh	r2, [r2, #20]
 80086dc:	fb03 f202 	mul.w	r2, r3, r2
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	61da      	str	r2, [r3, #28]
 80086e4:	e036      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	61da      	str	r2, [r3, #28]
 80086ee:	e031      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d018      	beq.n	800872a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	8a92      	ldrh	r2, [r2, #20]
 8008700:	4413      	add	r3, r2
 8008702:	3b01      	subs	r3, #1
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	8a92      	ldrh	r2, [r2, #20]
 8008708:	fbb3 f3f2 	udiv	r3, r3, r2
 800870c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800870e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008710:	8b7b      	ldrh	r3, [r7, #26]
 8008712:	429a      	cmp	r2, r3
 8008714:	d90b      	bls.n	800872e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008716:	8b7b      	ldrh	r3, [r7, #26]
 8008718:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800871a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	8a92      	ldrh	r2, [r2, #20]
 8008720:	fb03 f202 	mul.w	r2, r3, r2
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	61da      	str	r2, [r3, #28]
 8008728:	e001      	b.n	800872e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800872a:	2301      	movs	r3, #1
 800872c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	78db      	ldrb	r3, [r3, #3]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008736:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	8a92      	ldrh	r2, [r2, #20]
 800873c:	fb03 f202 	mul.w	r2, r3, r2
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	61da      	str	r2, [r3, #28]
 8008744:	e006      	b.n	8008754 <USB_HC_StartXfer+0x1a4>
 8008746:	bf00      	nop
 8008748:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800875c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800875e:	04d9      	lsls	r1, r3, #19
 8008760:	4ba3      	ldr	r3, [pc, #652]	@ (80089f0 <USB_HC_StartXfer+0x440>)
 8008762:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008764:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	7d9b      	ldrb	r3, [r3, #22]
 800876a:	075b      	lsls	r3, r3, #29
 800876c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008770:	69f9      	ldr	r1, [r7, #28]
 8008772:	0148      	lsls	r0, r1, #5
 8008774:	6a39      	ldr	r1, [r7, #32]
 8008776:	4401      	add	r1, r0
 8008778:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800877c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800877e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	6999      	ldr	r1, [r3, #24]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008796:	460a      	mov	r2, r1
 8008798:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	6a3a      	ldr	r2, [r7, #32]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	7e7b      	ldrb	r3, [r7, #25]
 80087e2:	075b      	lsls	r3, r3, #29
 80087e4:	69f9      	ldr	r1, [r7, #28]
 80087e6:	0148      	lsls	r0, r1, #5
 80087e8:	6a39      	ldr	r1, [r7, #32]
 80087ea:	4401      	add	r1, r0
 80087ec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80087f0:	4313      	orrs	r3, r2
 80087f2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	799b      	ldrb	r3, [r3, #6]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f040 80c3 	bne.w	8008984 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	7c5b      	ldrb	r3, [r3, #17]
 8008802:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008808:	4313      	orrs	r3, r2
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	6a3a      	ldr	r2, [r7, #32]
 8008810:	440a      	add	r2, r1
 8008812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008816:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800881a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	6a3a      	ldr	r2, [r7, #32]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008836:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800883a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	79db      	ldrb	r3, [r3, #7]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d123      	bne.n	800888c <USB_HC_StartXfer+0x2dc>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	78db      	ldrb	r3, [r3, #3]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11f      	bne.n	800888c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	440a      	add	r2, r1
 8008862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800886a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	6a3a      	ldr	r2, [r7, #32]
 8008880:	440a      	add	r2, r1
 8008882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	7c9b      	ldrb	r3, [r3, #18]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d003      	beq.n	800889c <USB_HC_StartXfer+0x2ec>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	7c9b      	ldrb	r3, [r3, #18]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d117      	bne.n	80088cc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d113      	bne.n	80088cc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	78db      	ldrb	r3, [r3, #3]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d10f      	bne.n	80088cc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	6a3a      	ldr	r2, [r7, #32]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088ca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	7c9b      	ldrb	r3, [r3, #18]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d162      	bne.n	800899a <USB_HC_StartXfer+0x3ea>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	78db      	ldrb	r3, [r3, #3]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d15e      	bne.n	800899a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d858      	bhi.n	8008998 <USB_HC_StartXfer+0x3e8>
 80088e6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ec <USB_HC_StartXfer+0x33c>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	080088fd 	.word	0x080088fd
 80088f0:	0800891f 	.word	0x0800891f
 80088f4:	08008941 	.word	0x08008941
 80088f8:	08008963 	.word	0x08008963
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	4413      	add	r3, r2
 8008904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	440a      	add	r2, r1
 8008912:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891a:	6053      	str	r3, [r2, #4]
          break;
 800891c:	e03d      	b.n	800899a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	440a      	add	r2, r1
 8008934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008938:	f043 030e 	orr.w	r3, r3, #14
 800893c:	6053      	str	r3, [r2, #4]
          break;
 800893e:	e02c      	b.n	800899a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	6a3a      	ldr	r2, [r7, #32]
 8008954:	440a      	add	r2, r1
 8008956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800895a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800895e:	6053      	str	r3, [r2, #4]
          break;
 8008960:	e01b      	b.n	800899a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	0151      	lsls	r1, r2, #5
 8008974:	6a3a      	ldr	r2, [r7, #32]
 8008976:	440a      	add	r2, r1
 8008978:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800897c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008980:	6053      	str	r3, [r2, #4]
          break;
 8008982:	e00a      	b.n	800899a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	4413      	add	r3, r2
 800898c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008990:	461a      	mov	r2, r3
 8008992:	2300      	movs	r3, #0
 8008994:	6053      	str	r3, [r2, #4]
 8008996:	e000      	b.n	800899a <USB_HC_StartXfer+0x3ea>
          break;
 8008998:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089b0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	78db      	ldrb	r3, [r3, #3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d004      	beq.n	80089c4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	e003      	b.n	80089cc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089ca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089d2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e0:	461a      	mov	r2, r3
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e055      	b.n	8008a9c <USB_HC_StartXfer+0x4ec>
 80089f0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	78db      	ldrb	r3, [r3, #3]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d14e      	bne.n	8008a9a <USB_HC_StartXfer+0x4ea>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d04a      	beq.n	8008a9a <USB_HC_StartXfer+0x4ea>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	79db      	ldrb	r3, [r3, #7]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d146      	bne.n	8008a9a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	7c9b      	ldrb	r3, [r3, #18]
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d831      	bhi.n	8008a78 <USB_HC_StartXfer+0x4c8>
 8008a14:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <USB_HC_StartXfer+0x46c>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a51 	.word	0x08008a51
 8008a24:	08008a2d 	.word	0x08008a2d
 8008a28:	08008a51 	.word	0x08008a51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	3303      	adds	r3, #3
 8008a32:	089b      	lsrs	r3, r3, #2
 8008a34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008a36:	8afa      	ldrh	r2, [r7, #22]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d91c      	bls.n	8008a7c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f043 0220 	orr.w	r2, r3, #32
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a4e:	e015      	b.n	8008a7c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	3303      	adds	r3, #3
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a5a:	8afa      	ldrh	r2, [r7, #22]
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d90a      	bls.n	8008a80 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a76:	e003      	b.n	8008a80 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008a78:	bf00      	nop
 8008a7a:	e002      	b.n	8008a82 <USB_HC_StartXfer+0x4d2>
        break;
 8008a7c:	bf00      	nop
 8008a7e:	e000      	b.n	8008a82 <USB_HC_StartXfer+0x4d2>
        break;
 8008a80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6999      	ldr	r1, [r3, #24]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	785a      	ldrb	r2, [r3, #1]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	2000      	movs	r0, #0
 8008a92:	9000      	str	r0, [sp, #0]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff f9ca 	bl	8007e2e <USB_WritePacket>
  }

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3728      	adds	r7, #40	@ 0x28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	b29b      	uxth	r3, r3
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b089      	sub	sp, #36	@ 0x24
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	0c9b      	lsrs	r3, r3, #18
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	0fdb      	lsrs	r3, r3, #31
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	0fdb      	lsrs	r3, r3, #31
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d10d      	bne.n	8008b48 <USB_HC_Halt+0x82>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <USB_HC_Halt+0x82>
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d002      	beq.n	8008b44 <USB_HC_Halt+0x7e>
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d101      	bne.n	8008b48 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e0d8      	b.n	8008cfa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <USB_HC_Halt+0x8e>
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d173      	bne.n	8008c3c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	0151      	lsls	r1, r2, #5
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	440a      	add	r2, r1
 8008b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d14a      	bne.n	8008c16 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d133      	bne.n	8008bf4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ba6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008baa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	0151      	lsls	r1, r2, #5
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	440a      	add	r2, r1
 8008bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bd8:	d82e      	bhi.n	8008c38 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bf0:	d0ec      	beq.n	8008bcc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bf2:	e081      	b.n	8008cf8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	0151      	lsls	r1, r2, #5
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	440a      	add	r2, r1
 8008c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c12:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c14:	e070      	b.n	8008cf8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	0151      	lsls	r1, r2, #5
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	440a      	add	r2, r1
 8008c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c36:	e05f      	b.n	8008cf8 <USB_HC_Halt+0x232>
            break;
 8008c38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c3a:	e05d      	b.n	8008cf8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	0151      	lsls	r1, r2, #5
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	440a      	add	r2, r1
 8008c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d133      	bne.n	8008cd4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008caa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cb8:	d81d      	bhi.n	8008cf6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cd0:	d0ec      	beq.n	8008cac <USB_HC_Halt+0x1e6>
 8008cd2:	e011      	b.n	8008cf8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	e000      	b.n	8008cf8 <USB_HC_Halt+0x232>
          break;
 8008cf6:	bf00      	nop
    }
  }

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3724      	adds	r7, #36	@ 0x24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	04da      	lsls	r2, r3, #19
 8008d24:	4b15      	ldr	r3, [pc, #84]	@ (8008d7c <USB_DoPing+0x74>)
 8008d26:	4013      	ands	r3, r2
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d66:	461a      	mov	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	1ff80000 	.word	0x1ff80000

08008d80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7fe ff8d 	bl	8007cb4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d9a:	2110      	movs	r1, #16
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7fe ffe6 	bl	8007d6e <USB_FlushTxFifo>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff f810 	bl	8007dd2 <USB_FlushRxFifo>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61bb      	str	r3, [r7, #24]
 8008dc0:	e01f      	b.n	8008e02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008de0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008de8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df6:	461a      	mov	r2, r3
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b0f      	cmp	r3, #15
 8008e06:	d9dc      	bls.n	8008dc2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	e034      	b.n	8008e78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e42:	461a      	mov	r2, r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e54:	d80c      	bhi.n	8008e70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e6c:	d0ec      	beq.n	8008e48 <USB_StopHost+0xc8>
 8008e6e:	e000      	b.n	8008e72 <USB_StopHost+0xf2>
        break;
 8008e70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	3301      	adds	r3, #1
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2b0f      	cmp	r3, #15
 8008e7c:	d9c7      	bls.n	8008e0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e84:	461a      	mov	r2, r3
 8008e86:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fe fefc 	bl	8007c92 <USB_EnableGlobalInt>

  return ret;
 8008e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b089      	sub	sp, #36	@ 0x24
 8008ea8:	af04      	add	r7, sp, #16
 8008eaa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008eac:	2301      	movs	r3, #1
 8008eae:	2202      	movs	r2, #2
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fc85 	bl	80097c2 <USBH_FindInterface>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2bff      	cmp	r3, #255	@ 0xff
 8008ec0:	d002      	beq.n	8008ec8 <USBH_CDC_InterfaceInit+0x24>
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d901      	bls.n	8008ecc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e13d      	b.n	8009148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fc5a 	bl	800978a <USBH_SelectInterface>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e131      	b.n	8009148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008eea:	2050      	movs	r0, #80	@ 0x50
 8008eec:	f002 fb64 	bl	800b5b8 <malloc>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f04:	2302      	movs	r3, #2
 8008f06:	e11f      	b.n	8009148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f08:	2250      	movs	r2, #80	@ 0x50
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68b8      	ldr	r0, [r7, #8]
 8008f0e:	f002 fc11 	bl	800b734 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	211a      	movs	r1, #26
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da15      	bge.n	8008f56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	211a      	movs	r1, #26
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	4413      	add	r3, r2
 8008f36:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	211a      	movs	r1, #26
 8008f46:	fb01 f303 	mul.w	r3, r1, r3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008f50:	881a      	ldrh	r2, [r3, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 ffbe 	bl	800aede <USBH_AllocPipe>
 8008f62:	4603      	mov	r3, r0
 8008f64:	461a      	mov	r2, r3
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	7819      	ldrb	r1, [r3, #0]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	7858      	ldrb	r0, [r3, #1]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	8952      	ldrh	r2, [r2, #10]
 8008f82:	9202      	str	r2, [sp, #8]
 8008f84:	2203      	movs	r2, #3
 8008f86:	9201      	str	r2, [sp, #4]
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4623      	mov	r3, r4
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 ff76 	bl	800ae80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f002 fa85 	bl	800b4ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	210a      	movs	r1, #10
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc0a 	bl	80097c2 <USBH_FindInterface>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	2bff      	cmp	r3, #255	@ 0xff
 8008fb6:	d002      	beq.n	8008fbe <USBH_CDC_InterfaceInit+0x11a>
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d901      	bls.n	8008fc2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e0c2      	b.n	8009148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	211a      	movs	r1, #26
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	4413      	add	r3, r2
 8008fce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	b25b      	sxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da16      	bge.n	8009008 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	211a      	movs	r1, #26
 8008fe0:	fb01 f303 	mul.w	r3, r1, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	211a      	movs	r1, #26
 8008ff6:	fb01 f303 	mul.w	r3, r1, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009000:	881a      	ldrh	r2, [r3, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	835a      	strh	r2, [r3, #26]
 8009006:	e015      	b.n	8009034 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	211a      	movs	r1, #26
 800900e:	fb01 f303 	mul.w	r3, r1, r3
 8009012:	4413      	add	r3, r2
 8009014:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	211a      	movs	r1, #26
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	4413      	add	r3, r2
 800902a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800902e:	881a      	ldrh	r2, [r3, #0]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	211a      	movs	r1, #26
 800903a:	fb01 f303 	mul.w	r3, r1, r3
 800903e:	4413      	add	r3, r2
 8009040:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b25b      	sxtb	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	da16      	bge.n	800907a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	211a      	movs	r1, #26
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	211a      	movs	r1, #26
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	4413      	add	r3, r2
 800906e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009072:	881a      	ldrh	r2, [r3, #0]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	835a      	strh	r2, [r3, #26]
 8009078:	e015      	b.n	80090a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	211a      	movs	r1, #26
 8009080:	fb01 f303 	mul.w	r3, r1, r3
 8009084:	4413      	add	r3, r2
 8009086:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800908a:	781a      	ldrb	r2, [r3, #0]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	211a      	movs	r1, #26
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	4413      	add	r3, r2
 800909c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	7b9b      	ldrb	r3, [r3, #14]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 ff16 	bl	800aede <USBH_AllocPipe>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	7bdb      	ldrb	r3, [r3, #15]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 ff0c 	bl	800aede <USBH_AllocPipe>
 80090c6:	4603      	mov	r3, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	7b59      	ldrb	r1, [r3, #13]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	7b98      	ldrb	r0, [r3, #14]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	8b12      	ldrh	r2, [r2, #24]
 80090e6:	9202      	str	r2, [sp, #8]
 80090e8:	2202      	movs	r2, #2
 80090ea:	9201      	str	r2, [sp, #4]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	4623      	mov	r3, r4
 80090f0:	4602      	mov	r2, r0
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fec4 	bl	800ae80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	7b19      	ldrb	r1, [r3, #12]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	7bd8      	ldrb	r0, [r3, #15]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	8b52      	ldrh	r2, [r2, #26]
 8009110:	9202      	str	r2, [sp, #8]
 8009112:	2202      	movs	r2, #2
 8009114:	9201      	str	r2, [sp, #4]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4623      	mov	r3, r4
 800911a:	4602      	mov	r2, r0
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 feaf 	bl	800ae80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	7b5b      	ldrb	r3, [r3, #13]
 800912e:	2200      	movs	r2, #0
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f002 f9ba 	bl	800b4ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	7b1b      	ldrb	r3, [r3, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f002 f9b3 	bl	800b4ac <USBH_LL_SetToggle>

  return USBH_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	bd90      	pop	{r4, r7, pc}

08009150 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 fea4 	bl	800aebe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fecf 	bl	800af20 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	7b1b      	ldrb	r3, [r3, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	7b1b      	ldrb	r3, [r3, #12]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 fe91 	bl	800aebe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	7b1b      	ldrb	r3, [r3, #12]
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 febc 	bl	800af20 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	7b5b      	ldrb	r3, [r3, #13]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00e      	beq.n	80091d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	7b5b      	ldrb	r3, [r3, #13]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 fe7e 	bl	800aebe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	7b5b      	ldrb	r3, [r3, #13]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 fea9 	bl	800af20 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 f9ed 	bl	800b5c8 <free>
    phost->pActiveClass->pData = 0U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091f4:	2200      	movs	r2, #0
 80091f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3340      	adds	r3, #64	@ 0x40
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f8b1 	bl	8009382 <GetLineCoding>
 8009220:	4603      	mov	r3, r0
 8009222:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009230:	2102      	movs	r1, #2
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009236:	7afb      	ldrb	r3, [r7, #11]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009248:	2301      	movs	r3, #1
 800924a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009260:	2b04      	cmp	r3, #4
 8009262:	d877      	bhi.n	8009354 <USBH_CDC_Process+0x114>
 8009264:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <USBH_CDC_Process+0x2c>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	08009281 	.word	0x08009281
 8009270:	08009287 	.word	0x08009287
 8009274:	080092b7 	.word	0x080092b7
 8009278:	0800932b 	.word	0x0800932b
 800927c:	08009339 	.word	0x08009339
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
      break;
 8009284:	e06d      	b.n	8009362 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f897 	bl	80093c0 <SetLineCoding>
 8009292:	4603      	mov	r3, r0
 8009294:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092a4:	e058      	b.n	8009358 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d055      	beq.n	8009358 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2204      	movs	r2, #4
 80092b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80092b4:	e050      	b.n	8009358 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	3340      	adds	r3, #64	@ 0x40
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f860 	bl	8009382 <GetLineCoding>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d126      	bne.n	800931a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092de:	791b      	ldrb	r3, [r3, #4]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d13b      	bne.n	800935c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d133      	bne.n	800935c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009300:	429a      	cmp	r2, r3
 8009302:	d12b      	bne.n	800935c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800930c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800930e:	429a      	cmp	r2, r3
 8009310:	d124      	bne.n	800935c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f958 	bl	80095c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009318:	e020      	b.n	800935c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d01d      	beq.n	800935c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2204      	movs	r2, #4
 8009324:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009328:	e018      	b.n	800935c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f867 	bl	80093fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8da 	bl	80094ea <CDC_ProcessReception>
      break;
 8009336:	e014      	b.n	8009362 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009338:	2100      	movs	r1, #0
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 f81a 	bl	800a374 <USBH_ClrFeature>
 8009340:	4603      	mov	r3, r0
 8009342:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009352:	e005      	b.n	8009360 <USBH_CDC_Process+0x120>

    default:
      break;
 8009354:	bf00      	nop
 8009356:	e004      	b.n	8009362 <USBH_CDC_Process+0x122>
      break;
 8009358:	bf00      	nop
 800935a:	e002      	b.n	8009362 <USBH_CDC_Process+0x122>
      break;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <USBH_CDC_Process+0x122>
      break;
 8009360:	bf00      	nop

  }

  return status;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	22a1      	movs	r2, #161	@ 0xa1
 8009390:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2221      	movs	r2, #33	@ 0x21
 8009396:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2207      	movs	r2, #7
 80093a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2207      	movs	r2, #7
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 fb14 	bl	800a9de <USBH_CtlReq>
 80093b6:	4603      	mov	r3, r0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2221      	movs	r2, #33	@ 0x21
 80093ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2207      	movs	r2, #7
 80093e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2207      	movs	r2, #7
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 faf5 	bl	800a9de <USBH_CtlReq>
 80093f4:	4603      	mov	r3, r0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af02      	add	r7, sp, #8
 8009404:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009410:	2300      	movs	r3, #0
 8009412:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800941a:	2b01      	cmp	r3, #1
 800941c:	d002      	beq.n	8009424 <CDC_ProcessTransmission+0x26>
 800941e:	2b02      	cmp	r3, #2
 8009420:	d023      	beq.n	800946a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009422:	e05e      	b.n	80094e2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	8b12      	ldrh	r2, [r2, #24]
 800942c:	4293      	cmp	r3, r2
 800942e:	d90b      	bls.n	8009448 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	69d9      	ldr	r1, [r3, #28]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8b1a      	ldrh	r2, [r3, #24]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	7b5b      	ldrb	r3, [r3, #13]
 800943c:	2001      	movs	r0, #1
 800943e:	9000      	str	r0, [sp, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 fcda 	bl	800adfa <USBH_BulkSendData>
 8009446:	e00b      	b.n	8009460 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	7b5b      	ldrb	r3, [r3, #13]
 8009456:	2001      	movs	r0, #1
 8009458:	9000      	str	r0, [sp, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fccd 	bl	800adfa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009468:	e03b      	b.n	80094e2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	7b5b      	ldrb	r3, [r3, #13]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fff1 	bl	800b458 <USBH_LL_GetURBState>
 8009476:	4603      	mov	r3, r0
 8009478:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d128      	bne.n	80094d2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	8b12      	ldrh	r2, [r2, #24]
 8009488:	4293      	cmp	r3, r2
 800948a:	d90e      	bls.n	80094aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	8b12      	ldrh	r2, [r2, #24]
 8009494:	1a9a      	subs	r2, r3, r2
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	8b12      	ldrh	r2, [r2, #24]
 80094a2:	441a      	add	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	61da      	str	r2, [r3, #28]
 80094a8:	e002      	b.n	80094b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094c0:	e00e      	b.n	80094e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f868 	bl	80095a0 <USBH_CDC_TransmitCallback>
      break;
 80094d0:	e006      	b.n	80094e0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80094d2:	7afb      	ldrb	r3, [r7, #11]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d103      	bne.n	80094e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094e0:	bf00      	nop
  }
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009506:	2b03      	cmp	r3, #3
 8009508:	d002      	beq.n	8009510 <CDC_ProcessReception+0x26>
 800950a:	2b04      	cmp	r3, #4
 800950c:	d00e      	beq.n	800952c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800950e:	e043      	b.n	8009598 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	6a19      	ldr	r1, [r3, #32]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	8b5a      	ldrh	r2, [r3, #26]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	7b1b      	ldrb	r3, [r3, #12]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fc91 	bl	800ae44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2204      	movs	r2, #4
 8009526:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800952a:	e035      	b.n	8009598 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	7b1b      	ldrb	r3, [r3, #12]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 ff90 	bl	800b458 <USBH_LL_GetURBState>
 8009538:	4603      	mov	r3, r0
 800953a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800953c:	7cfb      	ldrb	r3, [r7, #19]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d129      	bne.n	8009596 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	7b1b      	ldrb	r3, [r3, #12]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fef3 	bl	800b334 <USBH_LL_GetLastXferSize>
 800954e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	429a      	cmp	r2, r3
 8009558:	d016      	beq.n	8009588 <CDC_ProcessReception+0x9e>
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	8b5b      	ldrh	r3, [r3, #26]
 800955e:	461a      	mov	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4293      	cmp	r3, r2
 8009564:	d110      	bne.n	8009588 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1ad2      	subs	r2, r2, r3
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	441a      	add	r2, r3
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2203      	movs	r2, #3
 8009582:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009586:	e006      	b.n	8009596 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f80f 	bl	80095b4 <USBH_CDC_ReceiveCallback>
      break;
 8009596:	bf00      	nop
  }
}
 8009598:	bf00      	nop
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80095f0:	2302      	movs	r3, #2
 80095f2:	e029      	b.n	8009648 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	79fa      	ldrb	r2, [r7, #7]
 80095f8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f81f 	bl	8009650 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f001 fdc3 	bl	800b1cc <USBH_LL_Init>

  return USBH_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e009      	b.n	8009676 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	33e0      	adds	r3, #224	@ 0xe0
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	2200      	movs	r2, #0
 800966e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b0f      	cmp	r3, #15
 800967a:	d9f2      	bls.n	8009662 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	e009      	b.n	8009696 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800969c:	d3f1      	bcc.n	8009682 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2240      	movs	r2, #64	@ 0x40
 80096c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	331c      	adds	r3, #28
 80096ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096f2:	2100      	movs	r1, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f002 f81d 	bl	800b734 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f002 f814 	bl	800b734 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009712:	2212      	movs	r2, #18
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f002 f80c 	bl	800b734 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009722:	223e      	movs	r2, #62	@ 0x3e
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f002 f804 	bl	800b734 <memset>

  return USBH_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d016      	beq.n	8009778 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10e      	bne.n	8009772 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800975a:	1c59      	adds	r1, r3, #1
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	33de      	adds	r3, #222	@ 0xde
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
 8009770:	e004      	b.n	800977c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	73fb      	strb	r3, [r7, #15]
 8009776:	e001      	b.n	800977c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009778:	2302      	movs	r3, #2
 800977a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800977c:	7bfb      	ldrb	r3, [r7, #15]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	460b      	mov	r3, r1
 8009794:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d204      	bcs.n	80097b0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80097ae:	e001      	b.n	80097b4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80097b0:	2302      	movs	r3, #2
 80097b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b087      	sub	sp, #28
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	461a      	mov	r2, r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	70fb      	strb	r3, [r7, #3]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70bb      	strb	r3, [r7, #2]
 80097d8:	4613      	mov	r3, r2
 80097da:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80097e0:	2300      	movs	r3, #0
 80097e2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80097ea:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097ec:	e025      	b.n	800983a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	221a      	movs	r2, #26
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	3308      	adds	r3, #8
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	3302      	adds	r3, #2
 80097fe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	795b      	ldrb	r3, [r3, #5]
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	429a      	cmp	r2, r3
 8009808:	d002      	beq.n	8009810 <USBH_FindInterface+0x4e>
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	2bff      	cmp	r3, #255	@ 0xff
 800980e:	d111      	bne.n	8009834 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009814:	78ba      	ldrb	r2, [r7, #2]
 8009816:	429a      	cmp	r2, r3
 8009818:	d002      	beq.n	8009820 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800981a:	78bb      	ldrb	r3, [r7, #2]
 800981c:	2bff      	cmp	r3, #255	@ 0xff
 800981e:	d109      	bne.n	8009834 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009824:	787a      	ldrb	r2, [r7, #1]
 8009826:	429a      	cmp	r2, r3
 8009828:	d002      	beq.n	8009830 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800982a:	787b      	ldrb	r3, [r7, #1]
 800982c:	2bff      	cmp	r3, #255	@ 0xff
 800982e:	d101      	bne.n	8009834 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	e006      	b.n	8009842 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	3301      	adds	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d9d6      	bls.n	80097ee <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009840:	23ff      	movs	r3, #255	@ 0xff
}
 8009842:	4618      	mov	r0, r3
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f001 fcf4 	bl	800b244 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800985c:	2101      	movs	r1, #1
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 fe0d 	bl	800b47e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af04      	add	r7, sp, #16
 8009876:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009878:	2302      	movs	r3, #2
 800987a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b01      	cmp	r3, #1
 800988a:	d102      	bne.n	8009892 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2203      	movs	r2, #3
 8009890:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b0b      	cmp	r3, #11
 800989a:	f200 81bb 	bhi.w	8009c14 <USBH_Process+0x3a4>
 800989e:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <USBH_Process+0x34>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098d5 	.word	0x080098d5
 80098a8:	08009907 	.word	0x08009907
 80098ac:	0800996f 	.word	0x0800996f
 80098b0:	08009baf 	.word	0x08009baf
 80098b4:	08009c15 	.word	0x08009c15
 80098b8:	08009a0f 	.word	0x08009a0f
 80098bc:	08009b55 	.word	0x08009b55
 80098c0:	08009a45 	.word	0x08009a45
 80098c4:	08009a65 	.word	0x08009a65
 80098c8:	08009a83 	.word	0x08009a83
 80098cc:	08009ac7 	.word	0x08009ac7
 80098d0:	08009b97 	.word	0x08009b97
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 819b 	beq.w	8009c18 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80098e8:	20c8      	movs	r0, #200	@ 0xc8
 80098ea:	f001 fe12 	bl	800b512 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 fd05 	bl	800b2fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009904:	e188      	b.n	8009c18 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800990c:	2b01      	cmp	r3, #1
 800990e:	d107      	bne.n	8009920 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800991e:	e18a      	b.n	8009c36 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009926:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800992a:	d914      	bls.n	8009956 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009932:	3301      	adds	r3, #1
 8009934:	b2da      	uxtb	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009942:	2b03      	cmp	r3, #3
 8009944:	d903      	bls.n	800994e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	220d      	movs	r2, #13
 800994a:	701a      	strb	r2, [r3, #0]
      break;
 800994c:	e173      	b.n	8009c36 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
      break;
 8009954:	e16f      	b.n	8009c36 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800995c:	f103 020a 	add.w	r2, r3, #10
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009966:	200a      	movs	r0, #10
 8009968:	f001 fdd3 	bl	800b512 <USBH_Delay>
      break;
 800996c:	e163      	b.n	8009c36 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800997e:	2104      	movs	r1, #4
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009984:	2064      	movs	r0, #100	@ 0x64
 8009986:	f001 fdc4 	bl	800b512 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fc90 	bl	800b2b0 <USBH_LL_GetSpeed>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2205      	movs	r2, #5
 800999e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80099a0:	2100      	movs	r1, #0
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 fa9b 	bl	800aede <USBH_AllocPipe>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80099b0:	2180      	movs	r1, #128	@ 0x80
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 fa93 	bl	800aede <USBH_AllocPipe>
 80099b8:	4603      	mov	r3, r0
 80099ba:	461a      	mov	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	7919      	ldrb	r1, [r3, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099d4:	9202      	str	r2, [sp, #8]
 80099d6:	2200      	movs	r2, #0
 80099d8:	9201      	str	r2, [sp, #4]
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	2280      	movs	r2, #128	@ 0x80
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fa4d 	bl	800ae80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	7959      	ldrb	r1, [r3, #5]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099fa:	9202      	str	r2, [sp, #8]
 80099fc:	2200      	movs	r2, #0
 80099fe:	9201      	str	r2, [sp, #4]
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	4603      	mov	r3, r0
 8009a04:	2200      	movs	r2, #0
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 fa3a 	bl	800ae80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a0c:	e113      	b.n	8009c36 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f916 	bl	8009c40 <USBH_HandleEnum>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 80fd 	bne.w	8009c1c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d103      	bne.n	8009a3c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2208      	movs	r2, #8
 8009a38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a3a:	e0ef      	b.n	8009c1c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2207      	movs	r2, #7
 8009a40:	701a      	strb	r2, [r3, #0]
      break;
 8009a42:	e0eb      	b.n	8009c1c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 80e8 	beq.w	8009c20 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a56:	2101      	movs	r1, #1
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2208      	movs	r2, #8
 8009a60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009a62:	e0dd      	b.n	8009c20 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc3a 	bl	800a2e6 <USBH_SetCfg>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 80d5 	bne.w	8009c24 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2209      	movs	r2, #9
 8009a7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a80:	e0d0      	b.n	8009c24 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d016      	beq.n	8009abe <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009a90:	2101      	movs	r1, #1
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fc4a 	bl	800a32c <USBH_SetFeature>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d103      	bne.n	8009aac <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009aaa:	e0bd      	b.n	8009c28 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	f040 80b9 	bne.w	8009c28 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	220a      	movs	r2, #10
 8009aba:	701a      	strb	r2, [r3, #0]
      break;
 8009abc:	e0b4      	b.n	8009c28 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	220a      	movs	r2, #10
 8009ac2:	701a      	strb	r2, [r3, #0]
      break;
 8009ac4:	e0b0      	b.n	8009c28 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80ad 	beq.w	8009c2c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
 8009ade:	e016      	b.n	8009b0e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ae0:	7bfa      	ldrb	r2, [r7, #15]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	32de      	adds	r2, #222	@ 0xde
 8009ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aea:	791a      	ldrb	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d108      	bne.n	8009b08 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009af6:	7bfa      	ldrb	r2, [r7, #15]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	32de      	adds	r2, #222	@ 0xde
 8009afc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009b06:	e005      	b.n	8009b14 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d0e5      	beq.n	8009ae0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d016      	beq.n	8009b4c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d109      	bne.n	8009b44 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2206      	movs	r2, #6
 8009b34:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b3c:	2103      	movs	r1, #3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b42:	e073      	b.n	8009c2c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	220d      	movs	r2, #13
 8009b48:	701a      	strb	r2, [r3, #0]
      break;
 8009b4a:	e06f      	b.n	8009c2c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	220d      	movs	r2, #13
 8009b50:	701a      	strb	r2, [r3, #0]
      break;
 8009b52:	e06b      	b.n	8009c2c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d017      	beq.n	8009b8e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d103      	bne.n	8009b7e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	220b      	movs	r2, #11
 8009b7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b7c:	e058      	b.n	8009c30 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d154      	bne.n	8009c30 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	220d      	movs	r2, #13
 8009b8a:	701a      	strb	r2, [r3, #0]
      break;
 8009b8c:	e050      	b.n	8009c30 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	220d      	movs	r2, #13
 8009b92:	701a      	strb	r2, [r3, #0]
      break;
 8009b94:	e04c      	b.n	8009c30 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d049      	beq.n	8009c34 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
      }
      break;
 8009bac:	e042      	b.n	8009c34 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fd4a 	bl	8009650 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d005      	beq.n	8009bf0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009bea:	2105      	movs	r1, #5
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d107      	bne.n	8009c0c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fe22 	bl	800984e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c0a:	e014      	b.n	8009c36 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 fb19 	bl	800b244 <USBH_LL_Start>
      break;
 8009c12:	e010      	b.n	8009c36 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c14:	bf00      	nop
 8009c16:	e00e      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c18:	bf00      	nop
 8009c1a:	e00c      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c1c:	bf00      	nop
 8009c1e:	e00a      	b.n	8009c36 <USBH_Process+0x3c6>
    break;
 8009c20:	bf00      	nop
 8009c22:	e008      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c24:	bf00      	nop
 8009c26:	e006      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c28:	bf00      	nop
 8009c2a:	e004      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c2c:	bf00      	nop
 8009c2e:	e002      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c30:	bf00      	nop
 8009c32:	e000      	b.n	8009c36 <USBH_Process+0x3c6>
      break;
 8009c34:	bf00      	nop
  }
  return USBH_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af04      	add	r7, sp, #16
 8009c46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	785b      	ldrb	r3, [r3, #1]
 8009c54:	2b07      	cmp	r3, #7
 8009c56:	f200 81bd 	bhi.w	8009fd4 <USBH_HandleEnum+0x394>
 8009c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <USBH_HandleEnum+0x20>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009d3b 	.word	0x08009d3b
 8009c68:	08009da5 	.word	0x08009da5
 8009c6c:	08009e2f 	.word	0x08009e2f
 8009c70:	08009e99 	.word	0x08009e99
 8009c74:	08009f09 	.word	0x08009f09
 8009c78:	08009f4f 	.word	0x08009f4f
 8009c7c:	08009f95 	.word	0x08009f95
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009c80:	2108      	movs	r1, #8
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa4c 	bl	800a120 <USBH_Get_DevDesc>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d12e      	bne.n	8009cf0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7919      	ldrb	r1, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009cb6:	9202      	str	r2, [sp, #8]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	9201      	str	r2, [sp, #4]
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2280      	movs	r2, #128	@ 0x80
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f001 f8dc 	bl	800ae80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	7959      	ldrb	r1, [r3, #5]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cdc:	9202      	str	r2, [sp, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	9201      	str	r2, [sp, #4]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f8c9 	bl	800ae80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009cee:	e173      	b.n	8009fd8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	f040 8170 	bne.w	8009fd8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009cfe:	3301      	adds	r3, #1
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d903      	bls.n	8009d1a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	220d      	movs	r2, #13
 8009d16:	701a      	strb	r2, [r3, #0]
      break;
 8009d18:	e15e      	b.n	8009fd8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	795b      	ldrb	r3, [r3, #5]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 f8fd 	bl	800af20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	791b      	ldrb	r3, [r3, #4]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 f8f7 	bl	800af20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
      break;
 8009d38:	e14e      	b.n	8009fd8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009d3a:	2112      	movs	r1, #18
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f9ef 	bl	800a120 <USBH_Get_DevDesc>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d52:	e143      	b.n	8009fdc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	f040 8140 	bne.w	8009fdc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d62:	3301      	adds	r3, #1
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d903      	bls.n	8009d7e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	220d      	movs	r2, #13
 8009d7a:	701a      	strb	r2, [r3, #0]
      break;
 8009d7c:	e12e      	b.n	8009fdc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	795b      	ldrb	r3, [r3, #5]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f8cb 	bl	800af20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 f8c5 	bl	800af20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
      break;
 8009da2:	e11b      	b.n	8009fdc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009da4:	2101      	movs	r1, #1
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa79 	bl	800a29e <USBH_SetAddress>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d130      	bne.n	8009e18 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009db6:	2002      	movs	r0, #2
 8009db8:	f001 fbab 	bl	800b512 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7919      	ldrb	r1, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009dde:	9202      	str	r2, [sp, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	9201      	str	r2, [sp, #4]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	4603      	mov	r3, r0
 8009de8:	2280      	movs	r2, #128	@ 0x80
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f001 f848 	bl	800ae80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	7959      	ldrb	r1, [r3, #5]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e04:	9202      	str	r2, [sp, #8]
 8009e06:	2200      	movs	r2, #0
 8009e08:	9201      	str	r2, [sp, #4]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f835 	bl	800ae80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e16:	e0e3      	b.n	8009fe0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	f040 80e0 	bne.w	8009fe0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	220d      	movs	r2, #13
 8009e24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	705a      	strb	r2, [r3, #1]
      break;
 8009e2c:	e0d8      	b.n	8009fe0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009e2e:	2109      	movs	r1, #9
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f9a1 	bl	800a178 <USBH_Get_CfgDesc>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d103      	bne.n	8009e48 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2204      	movs	r2, #4
 8009e44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e46:	e0cd      	b.n	8009fe4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	f040 80ca 	bne.w	8009fe4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e56:	3301      	adds	r3, #1
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d903      	bls.n	8009e72 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	220d      	movs	r2, #13
 8009e6e:	701a      	strb	r2, [r3, #0]
      break;
 8009e70:	e0b8      	b.n	8009fe4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	795b      	ldrb	r3, [r3, #5]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f851 	bl	800af20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	791b      	ldrb	r3, [r3, #4]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f84b 	bl	800af20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	701a      	strb	r2, [r3, #0]
      break;
 8009e96:	e0a5      	b.n	8009fe4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f969 	bl	800a178 <USBH_Get_CfgDesc>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2205      	movs	r2, #5
 8009eb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eb6:	e097      	b.n	8009fe8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	f040 8094 	bne.w	8009fe8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d903      	bls.n	8009ee2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	220d      	movs	r2, #13
 8009ede:	701a      	strb	r2, [r3, #0]
      break;
 8009ee0:	e082      	b.n	8009fe8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	795b      	ldrb	r3, [r3, #5]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f819 	bl	800af20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	791b      	ldrb	r3, [r3, #4]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f813 	bl	800af20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	701a      	strb	r2, [r3, #0]
      break;
 8009f06:	e06f      	b.n	8009fe8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d019      	beq.n	8009f46 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f1e:	23ff      	movs	r3, #255	@ 0xff
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f953 	bl	800a1cc <USBH_Get_StringDesc>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2206      	movs	r2, #6
 8009f34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f36:	e059      	b.n	8009fec <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d156      	bne.n	8009fec <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2206      	movs	r2, #6
 8009f42:	705a      	strb	r2, [r3, #1]
      break;
 8009f44:	e052      	b.n	8009fec <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2206      	movs	r2, #6
 8009f4a:	705a      	strb	r2, [r3, #1]
      break;
 8009f4c:	e04e      	b.n	8009fec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d019      	beq.n	8009f8c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f64:	23ff      	movs	r3, #255	@ 0xff
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f930 	bl	800a1cc <USBH_Get_StringDesc>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2207      	movs	r2, #7
 8009f7a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f7c:	e038      	b.n	8009ff0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d135      	bne.n	8009ff0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2207      	movs	r2, #7
 8009f88:	705a      	strb	r2, [r3, #1]
      break;
 8009f8a:	e031      	b.n	8009ff0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2207      	movs	r2, #7
 8009f90:	705a      	strb	r2, [r3, #1]
      break;
 8009f92:	e02d      	b.n	8009ff0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d017      	beq.n	8009fce <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009faa:	23ff      	movs	r3, #255	@ 0xff
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f90d 	bl	800a1cc <USBH_Get_StringDesc>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009fc0:	e018      	b.n	8009ff4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d115      	bne.n	8009ff4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
      break;
 8009fcc:	e012      	b.n	8009ff4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd2:	e00f      	b.n	8009ff4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e00e      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009fd8:	bf00      	nop
 8009fda:	e00c      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009fdc:	bf00      	nop
 8009fde:	e00a      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009fe0:	bf00      	nop
 8009fe2:	e008      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009fe4:	bf00      	nop
 8009fe6:	e006      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009fe8:	bf00      	nop
 8009fea:	e004      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009fec:	bf00      	nop
 8009fee:	e002      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e000      	b.n	8009ff6 <USBH_HandleEnum+0x3b6>
      break;
 8009ff4:	bf00      	nop
  }
  return Status;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f804 	bl	800a042 <USBH_HandleSof>
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b0b      	cmp	r3, #11
 800a052:	d10a      	bne.n	800a06a <USBH_HandleSof+0x28>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
  }
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a072:	b480      	push	{r7}
 800a074:	b083      	sub	sp, #12
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a082:	bf00      	nop
}
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a09e:	bf00      	nop
}
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f8be 	bl	800b27a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	791b      	ldrb	r3, [r3, #4]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 ff0b 	bl	800af20 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 ff05 	bl	800af20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af02      	add	r7, sp, #8
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a12c:	887b      	ldrh	r3, [r7, #2]
 800a12e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a132:	d901      	bls.n	800a138 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a134:	2303      	movs	r3, #3
 800a136:	e01b      	b.n	800a170 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a13e:	887b      	ldrh	r3, [r7, #2]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	4613      	mov	r3, r2
 800a144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a148:	2100      	movs	r1, #0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f872 	bl	800a234 <USBH_GetDescriptor>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a160:	887a      	ldrh	r2, [r7, #2]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f929 	bl	800a3bc <USBH_ParseDevDesc>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	331c      	adds	r3, #28
 800a188:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a18a:	887b      	ldrh	r3, [r7, #2]
 800a18c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a190:	d901      	bls.n	800a196 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a192:	2303      	movs	r3, #3
 800a194:	e016      	b.n	800a1c4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a196:	887b      	ldrh	r3, [r7, #2]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f846 	bl	800a234 <USBH_GetDescriptor>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d107      	bne.n	800a1c2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a1b2:	887b      	ldrh	r3, [r7, #2]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f9af 	bl	800a51c <USBH_ParseCfgDesc>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af02      	add	r7, sp, #8
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	460b      	mov	r3, r1
 800a1da:	72fb      	strb	r3, [r7, #11]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a1e0:	893b      	ldrh	r3, [r7, #8]
 800a1e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1e6:	d802      	bhi.n	800a1ee <USBH_Get_StringDesc+0x22>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e01c      	b.n	800a22c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a1fa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a202:	893b      	ldrh	r3, [r7, #8]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	460b      	mov	r3, r1
 800a208:	2100      	movs	r1, #0
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 f812 	bl	800a234 <USBH_GetDescriptor>
 800a210:	4603      	mov	r3, r0
 800a212:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d107      	bne.n	800a22a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a220:	893a      	ldrh	r2, [r7, #8]
 800a222:	6879      	ldr	r1, [r7, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fb8d 	bl	800a944 <USBH_ParseStringDesc>
  }

  return status;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	607b      	str	r3, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	72fb      	strb	r3, [r7, #11]
 800a242:	4613      	mov	r3, r2
 800a244:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	789b      	ldrb	r3, [r3, #2]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d11c      	bne.n	800a288 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a24e:	7afb      	ldrb	r3, [r7, #11]
 800a250:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a254:	b2da      	uxtb	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2206      	movs	r2, #6
 800a25e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	893a      	ldrh	r2, [r7, #8]
 800a264:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a266:	893b      	ldrh	r3, [r7, #8]
 800a268:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a26c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a270:	d104      	bne.n	800a27c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f240 4209 	movw	r2, #1033	@ 0x409
 800a278:	829a      	strh	r2, [r3, #20]
 800a27a:	e002      	b.n	800a282 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8b3a      	ldrh	r2, [r7, #24]
 800a286:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a288:	8b3b      	ldrh	r3, [r7, #24]
 800a28a:	461a      	mov	r2, r3
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fba5 	bl	800a9de <USBH_CtlReq>
 800a294:	4603      	mov	r3, r0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d10f      	bne.n	800a2d2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2205      	movs	r2, #5
 800a2bc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fb81 	bl	800a9de <USBH_CtlReq>
 800a2dc:	4603      	mov	r3, r0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	789b      	ldrb	r3, [r3, #2]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d10e      	bne.n	800a318 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2209      	movs	r2, #9
 800a304:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	887a      	ldrh	r2, [r7, #2]
 800a30a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a318:	2200      	movs	r2, #0
 800a31a:	2100      	movs	r1, #0
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fb5e 	bl	800a9de <USBH_CtlReq>
 800a322:	4603      	mov	r3, r0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	789b      	ldrb	r3, [r3, #2]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d10f      	bne.n	800a360 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2203      	movs	r2, #3
 800a34a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a360:	2200      	movs	r2, #0
 800a362:	2100      	movs	r1, #0
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fb3a 	bl	800a9de <USBH_CtlReq>
 800a36a:	4603      	mov	r3, r0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	789b      	ldrb	r3, [r3, #2]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d10f      	bne.n	800a3a8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fb16 	bl	800a9de <USBH_CtlReq>
 800a3b2:	4603      	mov	r3, r0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a3d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e094      	b.n	800a50a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	781a      	ldrb	r2, [r3, #0]
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	785a      	ldrb	r2, [r3, #1]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	3303      	adds	r3, #3
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	021b      	lsls	r3, r3, #8
 800a400:	b29b      	uxth	r3, r3
 800a402:	4313      	orrs	r3, r2
 800a404:	b29a      	uxth	r2, r3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	791a      	ldrb	r2, [r3, #4]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	795a      	ldrb	r2, [r3, #5]
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	799a      	ldrb	r2, [r3, #6]
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	79da      	ldrb	r2, [r3, #7]
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a430:	2b00      	cmp	r3, #0
 800a432:	d004      	beq.n	800a43e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d11b      	bne.n	800a476 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	79db      	ldrb	r3, [r3, #7]
 800a442:	2b20      	cmp	r3, #32
 800a444:	dc0f      	bgt.n	800a466 <USBH_ParseDevDesc+0xaa>
 800a446:	2b08      	cmp	r3, #8
 800a448:	db0f      	blt.n	800a46a <USBH_ParseDevDesc+0xae>
 800a44a:	3b08      	subs	r3, #8
 800a44c:	4a32      	ldr	r2, [pc, #200]	@ (800a518 <USBH_ParseDevDesc+0x15c>)
 800a44e:	fa22 f303 	lsr.w	r3, r2, r3
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	bf14      	ite	ne
 800a45a:	2301      	movne	r3, #1
 800a45c:	2300      	moveq	r3, #0
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <USBH_ParseDevDesc+0xb6>
 800a464:	e001      	b.n	800a46a <USBH_ParseDevDesc+0xae>
 800a466:	2b40      	cmp	r3, #64	@ 0x40
 800a468:	d003      	beq.n	800a472 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2208      	movs	r2, #8
 800a46e:	71da      	strb	r2, [r3, #7]
        break;
 800a470:	e000      	b.n	800a474 <USBH_ParseDevDesc+0xb8>
        break;
 800a472:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a474:	e00e      	b.n	800a494 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d107      	bne.n	800a490 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	79db      	ldrb	r3, [r3, #7]
 800a484:	2b08      	cmp	r3, #8
 800a486:	d005      	beq.n	800a494 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2208      	movs	r2, #8
 800a48c:	71da      	strb	r2, [r3, #7]
 800a48e:	e001      	b.n	800a494 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a490:	2303      	movs	r3, #3
 800a492:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	2b08      	cmp	r3, #8
 800a498:	d936      	bls.n	800a508 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	3308      	adds	r3, #8
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	3309      	adds	r3, #9
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	021b      	lsls	r3, r3, #8
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	330a      	adds	r3, #10
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	330b      	adds	r3, #11
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	330c      	adds	r3, #12
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	330d      	adds	r3, #13
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	7b9a      	ldrb	r2, [r3, #14]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	7bda      	ldrb	r2, [r3, #15]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	7c1a      	ldrb	r2, [r3, #16]
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	7c5a      	ldrb	r2, [r3, #17]
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a508:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	01000101 	.word	0x01000101

0800a51c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08c      	sub	sp, #48	@ 0x30
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a530:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a54a:	2302      	movs	r3, #2
 800a54c:	e0da      	b.n	800a704 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2b09      	cmp	r3, #9
 800a558:	d002      	beq.n	800a560 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55c:	2209      	movs	r2, #9
 800a55e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	781a      	ldrb	r2, [r3, #0]
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	785a      	ldrb	r2, [r3, #1]
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	3302      	adds	r3, #2
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3303      	adds	r3, #3
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	b29b      	uxth	r3, r3
 800a582:	4313      	orrs	r3, r2
 800a584:	b29b      	uxth	r3, r3
 800a586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a58a:	bf28      	it	cs
 800a58c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a590:	b29a      	uxth	r2, r3
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	791a      	ldrb	r2, [r3, #4]
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	795a      	ldrb	r2, [r3, #5]
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	799a      	ldrb	r2, [r3, #6]
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	79da      	ldrb	r2, [r3, #7]
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	7a1a      	ldrb	r2, [r3, #8]
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	2b09      	cmp	r3, #9
 800a5c2:	f240 809d 	bls.w	800a700 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a5c6:	2309      	movs	r3, #9
 800a5c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5ce:	e081      	b.n	800a6d4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a5d0:	f107 0316 	add.w	r3, r7, #22
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5d8:	f000 f9e7 	bl	800a9aa <USBH_GetNextDesc>
 800a5dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e0:	785b      	ldrb	r3, [r3, #1]
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d176      	bne.n	800a6d4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b09      	cmp	r3, #9
 800a5ec:	d002      	beq.n	800a5f4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	2209      	movs	r2, #9
 800a5f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5f8:	221a      	movs	r2, #26
 800a5fa:	fb02 f303 	mul.w	r3, r2, r3
 800a5fe:	3308      	adds	r3, #8
 800a600:	6a3a      	ldr	r2, [r7, #32]
 800a602:	4413      	add	r3, r2
 800a604:	3302      	adds	r3, #2
 800a606:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a60a:	69f8      	ldr	r0, [r7, #28]
 800a60c:	f000 f87e 	bl	800a70c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a61a:	e043      	b.n	800a6a4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a61c:	f107 0316 	add.w	r3, r7, #22
 800a620:	4619      	mov	r1, r3
 800a622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a624:	f000 f9c1 	bl	800a9aa <USBH_GetNextDesc>
 800a628:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d138      	bne.n	800a6a4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	795b      	ldrb	r3, [r3, #5]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d113      	bne.n	800a662 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d003      	beq.n	800a64a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	799b      	ldrb	r3, [r3, #6]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d10b      	bne.n	800a662 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	79db      	ldrb	r3, [r3, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10b      	bne.n	800a66a <USBH_ParseCfgDesc+0x14e>
 800a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b09      	cmp	r3, #9
 800a658:	d007      	beq.n	800a66a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	2209      	movs	r2, #9
 800a65e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a660:	e003      	b.n	800a66a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	2207      	movs	r2, #7
 800a666:	701a      	strb	r2, [r3, #0]
 800a668:	e000      	b.n	800a66c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a66a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a670:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a674:	3201      	adds	r2, #1
 800a676:	00d2      	lsls	r2, r2, #3
 800a678:	211a      	movs	r1, #26
 800a67a:	fb01 f303 	mul.w	r3, r1, r3
 800a67e:	4413      	add	r3, r2
 800a680:	3308      	adds	r3, #8
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	4413      	add	r3, r2
 800a686:	3304      	adds	r3, #4
 800a688:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a68a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a68c:	69b9      	ldr	r1, [r7, #24]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f000 f870 	bl	800a774 <USBH_ParseEPDesc>
 800a694:	4603      	mov	r3, r0
 800a696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a69a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a69e:	3301      	adds	r3, #1
 800a6a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	791b      	ldrb	r3, [r3, #4]
 800a6a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d204      	bcs.n	800a6ba <USBH_ParseCfgDesc+0x19e>
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	885a      	ldrh	r2, [r3, #2]
 800a6b4:	8afb      	ldrh	r3, [r7, #22]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d8b0      	bhi.n	800a61c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d201      	bcs.n	800a6ca <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e01c      	b.n	800a704 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a6ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d805      	bhi.n	800a6e8 <USBH_ParseCfgDesc+0x1cc>
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	885a      	ldrh	r2, [r3, #2]
 800a6e0:	8afb      	ldrh	r3, [r7, #22]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	f63f af74 	bhi.w	800a5d0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	791b      	ldrb	r3, [r3, #4]
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	bf28      	it	cs
 800a6f0:	2302      	movcs	r3, #2
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d201      	bcs.n	800a700 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e001      	b.n	800a704 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a700:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a704:	4618      	mov	r0, r3
 800a706:	3730      	adds	r7, #48	@ 0x30
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781a      	ldrb	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	785a      	ldrb	r2, [r3, #1]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	789a      	ldrb	r2, [r3, #2]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	78da      	ldrb	r2, [r3, #3]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	3304      	adds	r3, #4
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	bf28      	it	cs
 800a740:	2302      	movcs	r3, #2
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	795a      	ldrb	r2, [r3, #5]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	799a      	ldrb	r2, [r3, #6]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	79da      	ldrb	r2, [r3, #7]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	7a1a      	ldrb	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	721a      	strb	r2, [r3, #8]
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	785a      	ldrb	r2, [r3, #1]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	789a      	ldrb	r2, [r3, #2]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	78da      	ldrb	r2, [r3, #3]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3305      	adds	r3, #5
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	799a      	ldrb	r2, [r3, #6]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	889b      	ldrh	r3, [r3, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a7d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7d6:	d804      	bhi.n	800a7e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e0:	d901      	bls.n	800a7e6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d136      	bne.n	800a85e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	78db      	ldrb	r3, [r3, #3]
 800a7f4:	f003 0303 	and.w	r3, r3, #3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d108      	bne.n	800a80e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	889b      	ldrh	r3, [r3, #4]
 800a800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a804:	f240 8097 	bls.w	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a808:	2303      	movs	r3, #3
 800a80a:	75fb      	strb	r3, [r7, #23]
 800a80c:	e093      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	78db      	ldrb	r3, [r3, #3]
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d107      	bne.n	800a82a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	889b      	ldrh	r3, [r3, #4]
 800a81e:	2b40      	cmp	r3, #64	@ 0x40
 800a820:	f240 8089 	bls.w	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a824:	2303      	movs	r3, #3
 800a826:	75fb      	strb	r3, [r7, #23]
 800a828:	e085      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	78db      	ldrb	r3, [r3, #3]
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b01      	cmp	r3, #1
 800a834:	d005      	beq.n	800a842 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	78db      	ldrb	r3, [r3, #3]
 800a83a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d10a      	bne.n	800a858 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	799b      	ldrb	r3, [r3, #6]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <USBH_ParseEPDesc+0xde>
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	799b      	ldrb	r3, [r3, #6]
 800a84e:	2b10      	cmp	r3, #16
 800a850:	d970      	bls.n	800a934 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a852:	2303      	movs	r3, #3
 800a854:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a856:	e06d      	b.n	800a934 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a858:	2303      	movs	r3, #3
 800a85a:	75fb      	strb	r3, [r7, #23]
 800a85c:	e06b      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a864:	2b01      	cmp	r3, #1
 800a866:	d13c      	bne.n	800a8e2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	78db      	ldrb	r3, [r3, #3]
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b02      	cmp	r3, #2
 800a872:	d005      	beq.n	800a880 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	78db      	ldrb	r3, [r3, #3]
 800a878:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d106      	bne.n	800a88e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	889b      	ldrh	r3, [r3, #4]
 800a884:	2b40      	cmp	r3, #64	@ 0x40
 800a886:	d956      	bls.n	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a888:	2303      	movs	r3, #3
 800a88a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a88c:	e053      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	78db      	ldrb	r3, [r3, #3]
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	2b01      	cmp	r3, #1
 800a898:	d10e      	bne.n	800a8b8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	799b      	ldrb	r3, [r3, #6]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d007      	beq.n	800a8b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a8a6:	2b10      	cmp	r3, #16
 800a8a8:	d803      	bhi.n	800a8b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a8ae:	2b40      	cmp	r3, #64	@ 0x40
 800a8b0:	d941      	bls.n	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	75fb      	strb	r3, [r7, #23]
 800a8b6:	e03e      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	78db      	ldrb	r3, [r3, #3]
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d10b      	bne.n	800a8dc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	799b      	ldrb	r3, [r3, #6]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d004      	beq.n	800a8d6 <USBH_ParseEPDesc+0x162>
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	889b      	ldrh	r3, [r3, #4]
 800a8d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8d4:	d32f      	bcc.n	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	75fb      	strb	r3, [r7, #23]
 800a8da:	e02c      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	75fb      	strb	r3, [r7, #23]
 800a8e0:	e029      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d120      	bne.n	800a92e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	78db      	ldrb	r3, [r3, #3]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	889b      	ldrh	r3, [r3, #4]
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d01a      	beq.n	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a900:	2303      	movs	r3, #3
 800a902:	75fb      	strb	r3, [r7, #23]
 800a904:	e017      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	78db      	ldrb	r3, [r3, #3]
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d10a      	bne.n	800a928 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	799b      	ldrb	r3, [r3, #6]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <USBH_ParseEPDesc+0x1ae>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	889b      	ldrh	r3, [r3, #4]
 800a91e:	2b08      	cmp	r3, #8
 800a920:	d909      	bls.n	800a936 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a922:	2303      	movs	r3, #3
 800a924:	75fb      	strb	r3, [r7, #23]
 800a926:	e006      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a928:	2303      	movs	r3, #3
 800a92a:	75fb      	strb	r3, [r7, #23]
 800a92c:	e003      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a92e:	2303      	movs	r3, #3
 800a930:	75fb      	strb	r3, [r7, #23]
 800a932:	e000      	b.n	800a936 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a934:	bf00      	nop
  }

  return status;
 800a936:	7dfb      	ldrb	r3, [r7, #23]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	4613      	mov	r3, r2
 800a950:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d120      	bne.n	800a99e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	1e9a      	subs	r2, r3, #2
 800a962:	88fb      	ldrh	r3, [r7, #6]
 800a964:	4293      	cmp	r3, r2
 800a966:	bf28      	it	cs
 800a968:	4613      	movcs	r3, r2
 800a96a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3302      	adds	r3, #2
 800a970:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a972:	2300      	movs	r3, #0
 800a974:	82fb      	strh	r3, [r7, #22]
 800a976:	e00b      	b.n	800a990 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a978:	8afb      	ldrh	r3, [r7, #22]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	781a      	ldrb	r2, [r3, #0]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	3301      	adds	r3, #1
 800a988:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a98a:	8afb      	ldrh	r3, [r7, #22]
 800a98c:	3302      	adds	r3, #2
 800a98e:	82fb      	strh	r3, [r7, #22]
 800a990:	8afa      	ldrh	r2, [r7, #22]
 800a992:	8abb      	ldrh	r3, [r7, #20]
 800a994:	429a      	cmp	r2, r3
 800a996:	d3ef      	bcc.n	800a978 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
  }
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	7812      	ldrb	r2, [r2, #0]
 800a9bc:	4413      	add	r3, r2
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	789b      	ldrb	r3, [r3, #2]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d002      	beq.n	800a9fe <USBH_CtlReq+0x20>
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d00f      	beq.n	800aa1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a9fc:	e027      	b.n	800aa4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	88fa      	ldrh	r2, [r7, #6]
 800aa08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2202      	movs	r2, #2
 800aa14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa16:	2301      	movs	r3, #1
 800aa18:	75fb      	strb	r3, [r7, #23]
      break;
 800aa1a:	e018      	b.n	800aa4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f81b 	bl	800aa58 <USBH_HandleControl>
 800aa22:	4603      	mov	r3, r0
 800aa24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <USBH_CtlReq+0x54>
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d106      	bne.n	800aa40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2201      	movs	r2, #1
 800aa36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	761a      	strb	r2, [r3, #24]
      break;
 800aa3e:	e005      	b.n	800aa4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d102      	bne.n	800aa4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	709a      	strb	r2, [r3, #2]
      break;
 800aa4c:	bf00      	nop
  }
  return status;
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa60:	2301      	movs	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7e1b      	ldrb	r3, [r3, #24]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	f200 8156 	bhi.w	800ad20 <USBH_HandleControl+0x2c8>
 800aa74:	a201      	add	r2, pc, #4	@ (adr r2, 800aa7c <USBH_HandleControl+0x24>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	0800aac3 	.word	0x0800aac3
 800aa84:	0800ab2d 	.word	0x0800ab2d
 800aa88:	0800ab53 	.word	0x0800ab53
 800aa8c:	0800ab8b 	.word	0x0800ab8b
 800aa90:	0800abb5 	.word	0x0800abb5
 800aa94:	0800ac07 	.word	0x0800ac07
 800aa98:	0800ac29 	.word	0x0800ac29
 800aa9c:	0800ac65 	.word	0x0800ac65
 800aaa0:	0800ac8b 	.word	0x0800ac8b
 800aaa4:	0800acc9 	.word	0x0800acc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f103 0110 	add.w	r1, r3, #16
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	795b      	ldrb	r3, [r3, #5]
 800aab2:	461a      	mov	r2, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f943 	bl	800ad40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2202      	movs	r2, #2
 800aabe:	761a      	strb	r2, [r3, #24]
      break;
 800aac0:	e139      	b.n	800ad36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	795b      	ldrb	r3, [r3, #5]
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fcc5 	bl	800b458 <USBH_LL_GetURBState>
 800aace:	4603      	mov	r3, r0
 800aad0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aad2:	7bbb      	ldrb	r3, [r7, #14]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d11e      	bne.n	800ab16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	7c1b      	ldrb	r3, [r3, #16]
 800aadc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aae0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	8adb      	ldrh	r3, [r3, #22]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aaea:	7b7b      	ldrb	r3, [r7, #13]
 800aaec:	2b80      	cmp	r3, #128	@ 0x80
 800aaee:	d103      	bne.n	800aaf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2203      	movs	r2, #3
 800aaf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aaf6:	e115      	b.n	800ad24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2205      	movs	r2, #5
 800aafc:	761a      	strb	r2, [r3, #24]
      break;
 800aafe:	e111      	b.n	800ad24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab00:	7b7b      	ldrb	r3, [r7, #13]
 800ab02:	2b80      	cmp	r3, #128	@ 0x80
 800ab04:	d103      	bne.n	800ab0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2209      	movs	r2, #9
 800ab0a:	761a      	strb	r2, [r3, #24]
      break;
 800ab0c:	e10a      	b.n	800ad24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2207      	movs	r2, #7
 800ab12:	761a      	strb	r2, [r3, #24]
      break;
 800ab14:	e106      	b.n	800ad24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d003      	beq.n	800ab24 <USBH_HandleControl+0xcc>
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	f040 8100 	bne.w	800ad24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	220b      	movs	r2, #11
 800ab28:	761a      	strb	r2, [r3, #24]
      break;
 800ab2a:	e0fb      	b.n	800ad24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6899      	ldr	r1, [r3, #8]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	899a      	ldrh	r2, [r3, #12]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	791b      	ldrb	r3, [r3, #4]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f93a 	bl	800adbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	761a      	strb	r2, [r3, #24]
      break;
 800ab50:	e0f1      	b.n	800ad36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	791b      	ldrb	r3, [r3, #4]
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fc7d 	bl	800b458 <USBH_LL_GetURBState>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d102      	bne.n	800ab6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2209      	movs	r2, #9
 800ab6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	2b05      	cmp	r3, #5
 800ab72:	d102      	bne.n	800ab7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ab74:	2303      	movs	r3, #3
 800ab76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab78:	e0d6      	b.n	800ad28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	f040 80d3 	bne.w	800ad28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	220b      	movs	r2, #11
 800ab86:	761a      	strb	r2, [r3, #24]
      break;
 800ab88:	e0ce      	b.n	800ad28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6899      	ldr	r1, [r3, #8]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	899a      	ldrh	r2, [r3, #12]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	795b      	ldrb	r3, [r3, #5]
 800ab96:	2001      	movs	r0, #1
 800ab98:	9000      	str	r0, [sp, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f8ea 	bl	800ad74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2206      	movs	r2, #6
 800abb0:	761a      	strb	r2, [r3, #24]
      break;
 800abb2:	e0c0      	b.n	800ad36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	795b      	ldrb	r3, [r3, #5]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fc4c 	bl	800b458 <USBH_LL_GetURBState>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d103      	bne.n	800abd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2207      	movs	r2, #7
 800abce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abd0:	e0ac      	b.n	800ad2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d105      	bne.n	800abe4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	220c      	movs	r2, #12
 800abdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800abde:	2303      	movs	r3, #3
 800abe0:	73fb      	strb	r3, [r7, #15]
      break;
 800abe2:	e0a3      	b.n	800ad2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d103      	bne.n	800abf2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2205      	movs	r2, #5
 800abee:	761a      	strb	r2, [r3, #24]
      break;
 800abf0:	e09c      	b.n	800ad2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	f040 8099 	bne.w	800ad2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	220b      	movs	r2, #11
 800abfe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac00:	2302      	movs	r3, #2
 800ac02:	73fb      	strb	r3, [r7, #15]
      break;
 800ac04:	e092      	b.n	800ad2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	791b      	ldrb	r3, [r3, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f8d5 	bl	800adbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2208      	movs	r2, #8
 800ac24:	761a      	strb	r2, [r3, #24]

      break;
 800ac26:	e086      	b.n	800ad36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fc12 	bl	800b458 <USBH_LL_GetURBState>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d105      	bne.n	800ac4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	220d      	movs	r2, #13
 800ac42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac48:	e072      	b.n	800ad30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d103      	bne.n	800ac58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	220b      	movs	r2, #11
 800ac54:	761a      	strb	r2, [r3, #24]
      break;
 800ac56:	e06b      	b.n	800ad30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
 800ac5a:	2b05      	cmp	r3, #5
 800ac5c:	d168      	bne.n	800ad30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	73fb      	strb	r3, [r7, #15]
      break;
 800ac62:	e065      	b.n	800ad30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	795b      	ldrb	r3, [r3, #5]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	9200      	str	r2, [sp, #0]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2100      	movs	r1, #0
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f87f 	bl	800ad74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	220a      	movs	r2, #10
 800ac86:	761a      	strb	r2, [r3, #24]
      break;
 800ac88:	e055      	b.n	800ad36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	795b      	ldrb	r3, [r3, #5]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fbe1 	bl	800b458 <USBH_LL_GetURBState>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d105      	bne.n	800acac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aca0:	2300      	movs	r3, #0
 800aca2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	220d      	movs	r2, #13
 800aca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acaa:	e043      	b.n	800ad34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800acac:	7bbb      	ldrb	r3, [r7, #14]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d103      	bne.n	800acba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2209      	movs	r2, #9
 800acb6:	761a      	strb	r2, [r3, #24]
      break;
 800acb8:	e03c      	b.n	800ad34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	2b04      	cmp	r3, #4
 800acbe:	d139      	bne.n	800ad34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	220b      	movs	r2, #11
 800acc4:	761a      	strb	r2, [r3, #24]
      break;
 800acc6:	e035      	b.n	800ad34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7e5b      	ldrb	r3, [r3, #25]
 800accc:	3301      	adds	r3, #1
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	765a      	strb	r2, [r3, #25]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	7e5b      	ldrb	r3, [r3, #25]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d806      	bhi.n	800acea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ace8:	e025      	b.n	800ad36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800acf0:	2106      	movs	r1, #6
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	795b      	ldrb	r3, [r3, #5]
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f90c 	bl	800af20 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	791b      	ldrb	r3, [r3, #4]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f906 	bl	800af20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1e:	e00a      	b.n	800ad36 <USBH_HandleControl+0x2de>

    default:
      break;
 800ad20:	bf00      	nop
 800ad22:	e008      	b.n	800ad36 <USBH_HandleControl+0x2de>
      break;
 800ad24:	bf00      	nop
 800ad26:	e006      	b.n	800ad36 <USBH_HandleControl+0x2de>
      break;
 800ad28:	bf00      	nop
 800ad2a:	e004      	b.n	800ad36 <USBH_HandleControl+0x2de>
      break;
 800ad2c:	bf00      	nop
 800ad2e:	e002      	b.n	800ad36 <USBH_HandleControl+0x2de>
      break;
 800ad30:	bf00      	nop
 800ad32:	e000      	b.n	800ad36 <USBH_HandleControl+0x2de>
      break;
 800ad34:	bf00      	nop
  }

  return status;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af04      	add	r7, sp, #16
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad4e:	79f9      	ldrb	r1, [r7, #7]
 800ad50:	2300      	movs	r3, #0
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	2308      	movs	r3, #8
 800ad56:	9302      	str	r3, [sp, #8]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	2300      	movs	r3, #0
 800ad62:	2200      	movs	r2, #0
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 fb46 	bl	800b3f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af04      	add	r7, sp, #16
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	461a      	mov	r2, r3
 800ad82:	460b      	mov	r3, r1
 800ad84:	80fb      	strh	r3, [r7, #6]
 800ad86:	4613      	mov	r3, r2
 800ad88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad98:	7979      	ldrb	r1, [r7, #5]
 800ad9a:	7e3b      	ldrb	r3, [r7, #24]
 800ad9c:	9303      	str	r3, [sp, #12]
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	9302      	str	r3, [sp, #8]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	2301      	movs	r3, #1
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	2200      	movs	r2, #0
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 fb21 	bl	800b3f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b088      	sub	sp, #32
 800adc2:	af04      	add	r7, sp, #16
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	4611      	mov	r1, r2
 800adca:	461a      	mov	r2, r3
 800adcc:	460b      	mov	r3, r1
 800adce:	80fb      	strh	r3, [r7, #6]
 800add0:	4613      	mov	r3, r2
 800add2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800add4:	7979      	ldrb	r1, [r7, #5]
 800add6:	2300      	movs	r3, #0
 800add8:	9303      	str	r3, [sp, #12]
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	9302      	str	r3, [sp, #8]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	2301      	movs	r3, #1
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2300      	movs	r3, #0
 800ade8:	2201      	movs	r2, #1
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fb03 	bl	800b3f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800adf0:	2300      	movs	r3, #0

}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b088      	sub	sp, #32
 800adfe:	af04      	add	r7, sp, #16
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	4611      	mov	r1, r2
 800ae06:	461a      	mov	r2, r3
 800ae08:	460b      	mov	r3, r1
 800ae0a:	80fb      	strh	r3, [r7, #6]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae1e:	7979      	ldrb	r1, [r7, #5]
 800ae20:	7e3b      	ldrb	r3, [r7, #24]
 800ae22:	9303      	str	r3, [sp, #12]
 800ae24:	88fb      	ldrh	r3, [r7, #6]
 800ae26:	9302      	str	r3, [sp, #8]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	2302      	movs	r3, #2
 800ae32:	2200      	movs	r2, #0
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f000 fade 	bl	800b3f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b088      	sub	sp, #32
 800ae48:	af04      	add	r7, sp, #16
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	4611      	mov	r1, r2
 800ae50:	461a      	mov	r2, r3
 800ae52:	460b      	mov	r3, r1
 800ae54:	80fb      	strh	r3, [r7, #6]
 800ae56:	4613      	mov	r3, r2
 800ae58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae5a:	7979      	ldrb	r1, [r7, #5]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9303      	str	r3, [sp, #12]
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	2201      	movs	r2, #1
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 fac0 	bl	800b3f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af04      	add	r7, sp, #16
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	4608      	mov	r0, r1
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4603      	mov	r3, r0
 800ae90:	70fb      	strb	r3, [r7, #3]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70bb      	strb	r3, [r7, #2]
 800ae96:	4613      	mov	r3, r2
 800ae98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ae9a:	7878      	ldrb	r0, [r7, #1]
 800ae9c:	78ba      	ldrb	r2, [r7, #2]
 800ae9e:	78f9      	ldrb	r1, [r7, #3]
 800aea0:	8b3b      	ldrh	r3, [r7, #24]
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	7d3b      	ldrb	r3, [r7, #20]
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	7c3b      	ldrb	r3, [r7, #16]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	4603      	mov	r3, r0
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa53 	bl	800b35a <USBH_LL_OpenPipe>

  return USBH_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aeca:	78fb      	ldrb	r3, [r7, #3]
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa72 	bl	800b3b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	460b      	mov	r3, r1
 800aee8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f836 	bl	800af5c <USBH_GetFreePipe>
 800aef0:	4603      	mov	r3, r0
 800aef2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aef4:	89fb      	ldrh	r3, [r7, #14]
 800aef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00a      	beq.n	800af14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aefe:	78fa      	ldrb	r2, [r7, #3]
 800af00:	89fb      	ldrh	r3, [r7, #14]
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	33e0      	adds	r3, #224	@ 0xe0
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	440b      	add	r3, r1
 800af12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af14:	89fb      	ldrh	r3, [r7, #14]
 800af16:	b2db      	uxtb	r3, r3
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	2b0f      	cmp	r3, #15
 800af30:	d80d      	bhi.n	800af4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	33e0      	adds	r3, #224	@ 0xe0
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	33e0      	adds	r3, #224	@ 0xe0
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	440b      	add	r3, r1
 800af4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af68:	2300      	movs	r3, #0
 800af6a:	73fb      	strb	r3, [r7, #15]
 800af6c:	e00f      	b.n	800af8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	33e0      	adds	r3, #224	@ 0xe0
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d102      	bne.n	800af88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	b29b      	uxth	r3, r3
 800af86:	e007      	b.n	800af98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	3301      	adds	r3, #1
 800af8c:	73fb      	strb	r3, [r7, #15]
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	2b0f      	cmp	r3, #15
 800af92:	d9ec      	bls.n	800af6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800af94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800afa8:	2201      	movs	r2, #1
 800afaa:	490e      	ldr	r1, [pc, #56]	@ (800afe4 <MX_USB_HOST_Init+0x40>)
 800afac:	480e      	ldr	r0, [pc, #56]	@ (800afe8 <MX_USB_HOST_Init+0x44>)
 800afae:	f7fe fb15 	bl	80095dc <USBH_Init>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800afb8:	f7f5 fda4 	bl	8000b04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800afbc:	490b      	ldr	r1, [pc, #44]	@ (800afec <MX_USB_HOST_Init+0x48>)
 800afbe:	480a      	ldr	r0, [pc, #40]	@ (800afe8 <MX_USB_HOST_Init+0x44>)
 800afc0:	f7fe fbb9 	bl	8009736 <USBH_RegisterClass>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800afca:	f7f5 fd9b 	bl	8000b04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800afce:	4806      	ldr	r0, [pc, #24]	@ (800afe8 <MX_USB_HOST_Init+0x44>)
 800afd0:	f7fe fc3d 	bl	800984e <USBH_Start>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800afda:	f7f5 fd93 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800afde:	bf00      	nop
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	0800b005 	.word	0x0800b005
 800afe8:	20000330 	.word	0x20000330
 800afec:	2000000c 	.word	0x2000000c

0800aff0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aff4:	4802      	ldr	r0, [pc, #8]	@ (800b000 <MX_USB_HOST_Process+0x10>)
 800aff6:	f7fe fc3b 	bl	8009870 <USBH_Process>
}
 800affa:	bf00      	nop
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20000330 	.word	0x20000330

0800b004 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	3b01      	subs	r3, #1
 800b014:	2b04      	cmp	r3, #4
 800b016:	d819      	bhi.n	800b04c <USBH_UserProcess+0x48>
 800b018:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <USBH_UserProcess+0x1c>)
 800b01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01e:	bf00      	nop
 800b020:	0800b04d 	.word	0x0800b04d
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b04d 	.word	0x0800b04d
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b035 	.word	0x0800b035
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b034:	4b09      	ldr	r3, [pc, #36]	@ (800b05c <USBH_UserProcess+0x58>)
 800b036:	2203      	movs	r2, #3
 800b038:	701a      	strb	r2, [r3, #0]
  break;
 800b03a:	e008      	b.n	800b04e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b03c:	4b07      	ldr	r3, [pc, #28]	@ (800b05c <USBH_UserProcess+0x58>)
 800b03e:	2202      	movs	r2, #2
 800b040:	701a      	strb	r2, [r3, #0]
  break;
 800b042:	e004      	b.n	800b04e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b044:	4b05      	ldr	r3, [pc, #20]	@ (800b05c <USBH_UserProcess+0x58>)
 800b046:	2201      	movs	r2, #1
 800b048:	701a      	strb	r2, [r3, #0]
  break;
 800b04a:	e000      	b.n	800b04e <USBH_UserProcess+0x4a>

  default:
  break;
 800b04c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20000708 	.word	0x20000708

0800b060 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08a      	sub	sp, #40	@ 0x28
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b068:	f107 0314 	add.w	r3, r7, #20
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	605a      	str	r2, [r3, #4]
 800b072:	609a      	str	r2, [r3, #8]
 800b074:	60da      	str	r2, [r3, #12]
 800b076:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b080:	d147      	bne.n	800b112 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b082:	2300      	movs	r3, #0
 800b084:	613b      	str	r3, [r7, #16]
 800b086:	4b25      	ldr	r3, [pc, #148]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b08a:	4a24      	ldr	r2, [pc, #144]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b08c:	f043 0301 	orr.w	r3, r3, #1
 800b090:	6313      	str	r3, [r2, #48]	@ 0x30
 800b092:	4b22      	ldr	r3, [pc, #136]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	613b      	str	r3, [r7, #16]
 800b09c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b09e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b0ac:	f107 0314 	add.w	r3, r7, #20
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	481b      	ldr	r0, [pc, #108]	@ (800b120 <HAL_HCD_MspInit+0xc0>)
 800b0b4:	f7f8 fe6c 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b0b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b0bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0be:	2302      	movs	r3, #2
 800b0c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b0ca:	230a      	movs	r3, #10
 800b0cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0ce:	f107 0314 	add.w	r3, r7, #20
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4812      	ldr	r0, [pc, #72]	@ (800b120 <HAL_HCD_MspInit+0xc0>)
 800b0d6:	f7f8 fe5b 	bl	8003d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b0da:	4b10      	ldr	r3, [pc, #64]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b0dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0de:	4a0f      	ldr	r2, [pc, #60]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0e4:	6353      	str	r3, [r2, #52]	@ 0x34
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ee:	4a0b      	ldr	r2, [pc, #44]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b0f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b0f4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b0f6:	4b09      	ldr	r3, [pc, #36]	@ (800b11c <HAL_HCD_MspInit+0xbc>)
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b102:	2200      	movs	r2, #0
 800b104:	2100      	movs	r1, #0
 800b106:	2043      	movs	r0, #67	@ 0x43
 800b108:	f7f8 fe0b 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b10c:	2043      	movs	r0, #67	@ 0x43
 800b10e:	f7f8 fe24 	bl	8003d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b112:	bf00      	nop
 800b114:	3728      	adds	r7, #40	@ 0x28
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	40023800 	.word	0x40023800
 800b120:	40020000 	.word	0x40020000

0800b124 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe ff73 	bl	800a01e <USBH_LL_IncTimer>
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe ffab 	bl	800a0aa <USBH_LL_Connect>
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe ffb4 	bl	800a0d8 <USBH_LL_Disconnect>
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
 800b184:	4613      	mov	r3, r2
 800b186:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe ff65 	bl	800a072 <USBH_LL_PortEnabled>
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fe ff65 	bl	800a08e <USBH_LL_PortDisabled>
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d12a      	bne.n	800b234 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b1de:	4a18      	ldr	r2, [pc, #96]	@ (800b240 <USBH_LL_Init+0x74>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a15      	ldr	r2, [pc, #84]	@ (800b240 <USBH_LL_Init+0x74>)
 800b1ea:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1ee:	4b14      	ldr	r3, [pc, #80]	@ (800b240 <USBH_LL_Init+0x74>)
 800b1f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b1f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b1f6:	4b12      	ldr	r3, [pc, #72]	@ (800b240 <USBH_LL_Init+0x74>)
 800b1f8:	2208      	movs	r2, #8
 800b1fa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b1fc:	4b10      	ldr	r3, [pc, #64]	@ (800b240 <USBH_LL_Init+0x74>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b202:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <USBH_LL_Init+0x74>)
 800b204:	2200      	movs	r2, #0
 800b206:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b208:	4b0d      	ldr	r3, [pc, #52]	@ (800b240 <USBH_LL_Init+0x74>)
 800b20a:	2202      	movs	r2, #2
 800b20c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b20e:	4b0c      	ldr	r3, [pc, #48]	@ (800b240 <USBH_LL_Init+0x74>)
 800b210:	2200      	movs	r2, #0
 800b212:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b214:	480a      	ldr	r0, [pc, #40]	@ (800b240 <USBH_LL_Init+0x74>)
 800b216:	f7f8 ff70 	bl	80040fa <HAL_HCD_Init>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b220:	f7f5 fc70 	bl	8000b04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b224:	4806      	ldr	r0, [pc, #24]	@ (800b240 <USBH_LL_Init+0x74>)
 800b226:	f7f9 fbd1 	bl	80049cc <HAL_HCD_GetCurrentFrame>
 800b22a:	4603      	mov	r3, r0
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fe fee6 	bl	800a000 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	2000070c 	.word	0x2000070c

0800b244 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7f9 fb3e 	bl	80048dc <HAL_HCD_Start>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 f95e 	bl	800b528 <USBH_Get_USB_Status>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b270:	7bbb      	ldrb	r3, [r7, #14]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b290:	4618      	mov	r0, r3
 800b292:	f7f9 fb46 	bl	8004922 <HAL_HCD_Stop>
 800b296:	4603      	mov	r3, r0
 800b298:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 f943 	bl	800b528 <USBH_Get_USB_Status>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7f9 fb90 	bl	80049e8 <HAL_HCD_GetCurrentSpeed>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d00c      	beq.n	800b2e8 <USBH_LL_GetSpeed+0x38>
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d80d      	bhi.n	800b2ee <USBH_LL_GetSpeed+0x3e>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <USBH_LL_GetSpeed+0x2c>
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d003      	beq.n	800b2e2 <USBH_LL_GetSpeed+0x32>
 800b2da:	e008      	b.n	800b2ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e0:	e008      	b.n	800b2f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e6:	e005      	b.n	800b2f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ec:	e002      	b.n	800b2f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f2:	bf00      	nop
  }
  return  speed;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b314:	4618      	mov	r0, r3
 800b316:	f7f9 fb21 	bl	800495c <HAL_HCD_ResetPort>
 800b31a:	4603      	mov	r3, r0
 800b31c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	4618      	mov	r0, r3
 800b322:	f000 f901 	bl	800b528 <USBH_Get_USB_Status>
 800b326:	4603      	mov	r3, r0
 800b328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b346:	78fa      	ldrb	r2, [r7, #3]
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7f9 fb29 	bl	80049a2 <HAL_HCD_HC_GetXferCount>
 800b350:	4603      	mov	r3, r0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b35a:	b590      	push	{r4, r7, lr}
 800b35c:	b089      	sub	sp, #36	@ 0x24
 800b35e:	af04      	add	r7, sp, #16
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	4608      	mov	r0, r1
 800b364:	4611      	mov	r1, r2
 800b366:	461a      	mov	r2, r3
 800b368:	4603      	mov	r3, r0
 800b36a:	70fb      	strb	r3, [r7, #3]
 800b36c:	460b      	mov	r3, r1
 800b36e:	70bb      	strb	r3, [r7, #2]
 800b370:	4613      	mov	r3, r2
 800b372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b382:	787c      	ldrb	r4, [r7, #1]
 800b384:	78ba      	ldrb	r2, [r7, #2]
 800b386:	78f9      	ldrb	r1, [r7, #3]
 800b388:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b38a:	9302      	str	r3, [sp, #8]
 800b38c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	4623      	mov	r3, r4
 800b39a:	f7f8 ff15 	bl	80041c8 <HAL_HCD_HC_Init>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 f8bf 	bl	800b528 <USBH_Get_USB_Status>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}

0800b3b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f8 ffae 	bl	8004338 <HAL_HCD_HC_Halt>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 f8a0 	bl	800b528 <USBH_Get_USB_Status>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b3f6:	b590      	push	{r4, r7, lr}
 800b3f8:	b089      	sub	sp, #36	@ 0x24
 800b3fa:	af04      	add	r7, sp, #16
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	4608      	mov	r0, r1
 800b400:	4611      	mov	r1, r2
 800b402:	461a      	mov	r2, r3
 800b404:	4603      	mov	r3, r0
 800b406:	70fb      	strb	r3, [r7, #3]
 800b408:	460b      	mov	r3, r1
 800b40a:	70bb      	strb	r3, [r7, #2]
 800b40c:	4613      	mov	r3, r2
 800b40e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b410:	2300      	movs	r3, #0
 800b412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b41e:	787c      	ldrb	r4, [r7, #1]
 800b420:	78ba      	ldrb	r2, [r7, #2]
 800b422:	78f9      	ldrb	r1, [r7, #3]
 800b424:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b428:	9303      	str	r3, [sp, #12]
 800b42a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b42c:	9302      	str	r3, [sp, #8]
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	4623      	mov	r3, r4
 800b43a:	f7f8 ffa1 	bl	8004380 <HAL_HCD_HC_SubmitRequest>
 800b43e:	4603      	mov	r3, r0
 800b440:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f86f 	bl	800b528 <USBH_Get_USB_Status>
 800b44a:	4603      	mov	r3, r0
 800b44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	bd90      	pop	{r4, r7, pc}

0800b458 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b46a:	78fa      	ldrb	r2, [r7, #3]
 800b46c:	4611      	mov	r1, r2
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f9 fa82 	bl	8004978 <HAL_HCD_HC_GetURBState>
 800b474:	4603      	mov	r3, r0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b082      	sub	sp, #8
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b490:	2b01      	cmp	r3, #1
 800b492:	d103      	bne.n	800b49c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b494:	78fb      	ldrb	r3, [r7, #3]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 f872 	bl	800b580 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b49c:	20c8      	movs	r0, #200	@ 0xc8
 800b49e:	f7f8 fb41 	bl	8003b24 <HAL_Delay>
  return USBH_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4c4:	78fa      	ldrb	r2, [r7, #3]
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	011b      	lsls	r3, r3, #4
 800b4cc:	1a9b      	subs	r3, r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	3317      	adds	r3, #23
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b4da:	78fa      	ldrb	r2, [r7, #3]
 800b4dc:	68f9      	ldr	r1, [r7, #12]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	011b      	lsls	r3, r3, #4
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	333c      	adds	r3, #60	@ 0x3c
 800b4ea:	78ba      	ldrb	r2, [r7, #2]
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	e009      	b.n	800b504 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b4f0:	78fa      	ldrb	r2, [r7, #3]
 800b4f2:	68f9      	ldr	r1, [r7, #12]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	011b      	lsls	r3, r3, #4
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	333d      	adds	r3, #61	@ 0x3d
 800b500:	78ba      	ldrb	r2, [r7, #2]
 800b502:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b082      	sub	sp, #8
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7f8 fb02 	bl	8003b24 <HAL_Delay>
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d817      	bhi.n	800b56c <USBH_Get_USB_Status+0x44>
 800b53c:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <USBH_Get_USB_Status+0x1c>)
 800b53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b542:	bf00      	nop
 800b544:	0800b555 	.word	0x0800b555
 800b548:	0800b55b 	.word	0x0800b55b
 800b54c:	0800b561 	.word	0x0800b561
 800b550:	0800b567 	.word	0x0800b567
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
    break;
 800b558:	e00b      	b.n	800b572 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b55a:	2302      	movs	r3, #2
 800b55c:	73fb      	strb	r3, [r7, #15]
    break;
 800b55e:	e008      	b.n	800b572 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b560:	2301      	movs	r3, #1
 800b562:	73fb      	strb	r3, [r7, #15]
    break;
 800b564:	e005      	b.n	800b572 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b566:	2302      	movs	r3, #2
 800b568:	73fb      	strb	r3, [r7, #15]
    break;
 800b56a:	e002      	b.n	800b572 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b56c:	2302      	movs	r3, #2
 800b56e:	73fb      	strb	r3, [r7, #15]
    break;
 800b570:	bf00      	nop
  }
  return usb_status;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b58e:	79fb      	ldrb	r3, [r7, #7]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b594:	2300      	movs	r3, #0
 800b596:	73fb      	strb	r3, [r7, #15]
 800b598:	e001      	b.n	800b59e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b59a:	2301      	movs	r3, #1
 800b59c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	4803      	ldr	r0, [pc, #12]	@ (800b5b4 <MX_DriverVbusFS+0x34>)
 800b5a6:	f7f8 fd8f 	bl	80040c8 <HAL_GPIO_WritePin>
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	40020800 	.word	0x40020800

0800b5b8 <malloc>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	@ (800b5c4 <malloc+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f000 b82d 	b.w	800b61c <_malloc_r>
 800b5c2:	bf00      	nop
 800b5c4:	2000002c 	.word	0x2000002c

0800b5c8 <free>:
 800b5c8:	4b02      	ldr	r3, [pc, #8]	@ (800b5d4 <free+0xc>)
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	f000 b8f5 	b.w	800b7bc <_free_r>
 800b5d2:	bf00      	nop
 800b5d4:	2000002c 	.word	0x2000002c

0800b5d8 <sbrk_aligned>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	4e0f      	ldr	r6, [pc, #60]	@ (800b618 <sbrk_aligned+0x40>)
 800b5dc:	460c      	mov	r4, r1
 800b5de:	6831      	ldr	r1, [r6, #0]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	b911      	cbnz	r1, 800b5ea <sbrk_aligned+0x12>
 800b5e4:	f000 f8ae 	bl	800b744 <_sbrk_r>
 800b5e8:	6030      	str	r0, [r6, #0]
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f000 f8a9 	bl	800b744 <_sbrk_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d103      	bne.n	800b5fe <sbrk_aligned+0x26>
 800b5f6:	f04f 34ff 	mov.w	r4, #4294967295
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	bd70      	pop	{r4, r5, r6, pc}
 800b5fe:	1cc4      	adds	r4, r0, #3
 800b600:	f024 0403 	bic.w	r4, r4, #3
 800b604:	42a0      	cmp	r0, r4
 800b606:	d0f8      	beq.n	800b5fa <sbrk_aligned+0x22>
 800b608:	1a21      	subs	r1, r4, r0
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 f89a 	bl	800b744 <_sbrk_r>
 800b610:	3001      	adds	r0, #1
 800b612:	d1f2      	bne.n	800b5fa <sbrk_aligned+0x22>
 800b614:	e7ef      	b.n	800b5f6 <sbrk_aligned+0x1e>
 800b616:	bf00      	nop
 800b618:	20000aec 	.word	0x20000aec

0800b61c <_malloc_r>:
 800b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b620:	1ccd      	adds	r5, r1, #3
 800b622:	f025 0503 	bic.w	r5, r5, #3
 800b626:	3508      	adds	r5, #8
 800b628:	2d0c      	cmp	r5, #12
 800b62a:	bf38      	it	cc
 800b62c:	250c      	movcc	r5, #12
 800b62e:	2d00      	cmp	r5, #0
 800b630:	4606      	mov	r6, r0
 800b632:	db01      	blt.n	800b638 <_malloc_r+0x1c>
 800b634:	42a9      	cmp	r1, r5
 800b636:	d904      	bls.n	800b642 <_malloc_r+0x26>
 800b638:	230c      	movs	r3, #12
 800b63a:	6033      	str	r3, [r6, #0]
 800b63c:	2000      	movs	r0, #0
 800b63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b718 <_malloc_r+0xfc>
 800b646:	f000 f869 	bl	800b71c <__malloc_lock>
 800b64a:	f8d8 3000 	ldr.w	r3, [r8]
 800b64e:	461c      	mov	r4, r3
 800b650:	bb44      	cbnz	r4, 800b6a4 <_malloc_r+0x88>
 800b652:	4629      	mov	r1, r5
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff ffbf 	bl	800b5d8 <sbrk_aligned>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	4604      	mov	r4, r0
 800b65e:	d158      	bne.n	800b712 <_malloc_r+0xf6>
 800b660:	f8d8 4000 	ldr.w	r4, [r8]
 800b664:	4627      	mov	r7, r4
 800b666:	2f00      	cmp	r7, #0
 800b668:	d143      	bne.n	800b6f2 <_malloc_r+0xd6>
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	d04b      	beq.n	800b706 <_malloc_r+0xea>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	4639      	mov	r1, r7
 800b672:	4630      	mov	r0, r6
 800b674:	eb04 0903 	add.w	r9, r4, r3
 800b678:	f000 f864 	bl	800b744 <_sbrk_r>
 800b67c:	4581      	cmp	r9, r0
 800b67e:	d142      	bne.n	800b706 <_malloc_r+0xea>
 800b680:	6821      	ldr	r1, [r4, #0]
 800b682:	1a6d      	subs	r5, r5, r1
 800b684:	4629      	mov	r1, r5
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ffa6 	bl	800b5d8 <sbrk_aligned>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d03a      	beq.n	800b706 <_malloc_r+0xea>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	442b      	add	r3, r5
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	f8d8 3000 	ldr.w	r3, [r8]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	bb62      	cbnz	r2, 800b6f8 <_malloc_r+0xdc>
 800b69e:	f8c8 7000 	str.w	r7, [r8]
 800b6a2:	e00f      	b.n	800b6c4 <_malloc_r+0xa8>
 800b6a4:	6822      	ldr	r2, [r4, #0]
 800b6a6:	1b52      	subs	r2, r2, r5
 800b6a8:	d420      	bmi.n	800b6ec <_malloc_r+0xd0>
 800b6aa:	2a0b      	cmp	r2, #11
 800b6ac:	d917      	bls.n	800b6de <_malloc_r+0xc2>
 800b6ae:	1961      	adds	r1, r4, r5
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	6025      	str	r5, [r4, #0]
 800b6b4:	bf18      	it	ne
 800b6b6:	6059      	strne	r1, [r3, #4]
 800b6b8:	6863      	ldr	r3, [r4, #4]
 800b6ba:	bf08      	it	eq
 800b6bc:	f8c8 1000 	streq.w	r1, [r8]
 800b6c0:	5162      	str	r2, [r4, r5]
 800b6c2:	604b      	str	r3, [r1, #4]
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f000 f82f 	bl	800b728 <__malloc_unlock>
 800b6ca:	f104 000b 	add.w	r0, r4, #11
 800b6ce:	1d23      	adds	r3, r4, #4
 800b6d0:	f020 0007 	bic.w	r0, r0, #7
 800b6d4:	1ac2      	subs	r2, r0, r3
 800b6d6:	bf1c      	itt	ne
 800b6d8:	1a1b      	subne	r3, r3, r0
 800b6da:	50a3      	strne	r3, [r4, r2]
 800b6dc:	e7af      	b.n	800b63e <_malloc_r+0x22>
 800b6de:	6862      	ldr	r2, [r4, #4]
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	bf0c      	ite	eq
 800b6e4:	f8c8 2000 	streq.w	r2, [r8]
 800b6e8:	605a      	strne	r2, [r3, #4]
 800b6ea:	e7eb      	b.n	800b6c4 <_malloc_r+0xa8>
 800b6ec:	4623      	mov	r3, r4
 800b6ee:	6864      	ldr	r4, [r4, #4]
 800b6f0:	e7ae      	b.n	800b650 <_malloc_r+0x34>
 800b6f2:	463c      	mov	r4, r7
 800b6f4:	687f      	ldr	r7, [r7, #4]
 800b6f6:	e7b6      	b.n	800b666 <_malloc_r+0x4a>
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d1fb      	bne.n	800b6f8 <_malloc_r+0xdc>
 800b700:	2300      	movs	r3, #0
 800b702:	6053      	str	r3, [r2, #4]
 800b704:	e7de      	b.n	800b6c4 <_malloc_r+0xa8>
 800b706:	230c      	movs	r3, #12
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 f80c 	bl	800b728 <__malloc_unlock>
 800b710:	e794      	b.n	800b63c <_malloc_r+0x20>
 800b712:	6005      	str	r5, [r0, #0]
 800b714:	e7d6      	b.n	800b6c4 <_malloc_r+0xa8>
 800b716:	bf00      	nop
 800b718:	20000af0 	.word	0x20000af0

0800b71c <__malloc_lock>:
 800b71c:	4801      	ldr	r0, [pc, #4]	@ (800b724 <__malloc_lock+0x8>)
 800b71e:	f000 b84b 	b.w	800b7b8 <__retarget_lock_acquire_recursive>
 800b722:	bf00      	nop
 800b724:	20000c30 	.word	0x20000c30

0800b728 <__malloc_unlock>:
 800b728:	4801      	ldr	r0, [pc, #4]	@ (800b730 <__malloc_unlock+0x8>)
 800b72a:	f000 b846 	b.w	800b7ba <__retarget_lock_release_recursive>
 800b72e:	bf00      	nop
 800b730:	20000c30 	.word	0x20000c30

0800b734 <memset>:
 800b734:	4402      	add	r2, r0
 800b736:	4603      	mov	r3, r0
 800b738:	4293      	cmp	r3, r2
 800b73a:	d100      	bne.n	800b73e <memset+0xa>
 800b73c:	4770      	bx	lr
 800b73e:	f803 1b01 	strb.w	r1, [r3], #1
 800b742:	e7f9      	b.n	800b738 <memset+0x4>

0800b744 <_sbrk_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	@ (800b760 <_sbrk_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f5 fabe 	bl	8000cd0 <_sbrk>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_sbrk_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_sbrk_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20000c2c 	.word	0x20000c2c

0800b764 <__errno>:
 800b764:	4b01      	ldr	r3, [pc, #4]	@ (800b76c <__errno+0x8>)
 800b766:	6818      	ldr	r0, [r3, #0]
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	2000002c 	.word	0x2000002c

0800b770 <__libc_init_array>:
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	4d0d      	ldr	r5, [pc, #52]	@ (800b7a8 <__libc_init_array+0x38>)
 800b774:	4c0d      	ldr	r4, [pc, #52]	@ (800b7ac <__libc_init_array+0x3c>)
 800b776:	1b64      	subs	r4, r4, r5
 800b778:	10a4      	asrs	r4, r4, #2
 800b77a:	2600      	movs	r6, #0
 800b77c:	42a6      	cmp	r6, r4
 800b77e:	d109      	bne.n	800b794 <__libc_init_array+0x24>
 800b780:	4d0b      	ldr	r5, [pc, #44]	@ (800b7b0 <__libc_init_array+0x40>)
 800b782:	4c0c      	ldr	r4, [pc, #48]	@ (800b7b4 <__libc_init_array+0x44>)
 800b784:	f000 f864 	bl	800b850 <_init>
 800b788:	1b64      	subs	r4, r4, r5
 800b78a:	10a4      	asrs	r4, r4, #2
 800b78c:	2600      	movs	r6, #0
 800b78e:	42a6      	cmp	r6, r4
 800b790:	d105      	bne.n	800b79e <__libc_init_array+0x2e>
 800b792:	bd70      	pop	{r4, r5, r6, pc}
 800b794:	f855 3b04 	ldr.w	r3, [r5], #4
 800b798:	4798      	blx	r3
 800b79a:	3601      	adds	r6, #1
 800b79c:	e7ee      	b.n	800b77c <__libc_init_array+0xc>
 800b79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a2:	4798      	blx	r3
 800b7a4:	3601      	adds	r6, #1
 800b7a6:	e7f2      	b.n	800b78e <__libc_init_array+0x1e>
 800b7a8:	0801f568 	.word	0x0801f568
 800b7ac:	0801f568 	.word	0x0801f568
 800b7b0:	0801f568 	.word	0x0801f568
 800b7b4:	0801f56c 	.word	0x0801f56c

0800b7b8 <__retarget_lock_acquire_recursive>:
 800b7b8:	4770      	bx	lr

0800b7ba <__retarget_lock_release_recursive>:
 800b7ba:	4770      	bx	lr

0800b7bc <_free_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4605      	mov	r5, r0
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	d041      	beq.n	800b848 <_free_r+0x8c>
 800b7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c8:	1f0c      	subs	r4, r1, #4
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bfb8      	it	lt
 800b7ce:	18e4      	addlt	r4, r4, r3
 800b7d0:	f7ff ffa4 	bl	800b71c <__malloc_lock>
 800b7d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b84c <_free_r+0x90>)
 800b7d6:	6813      	ldr	r3, [r2, #0]
 800b7d8:	b933      	cbnz	r3, 800b7e8 <_free_r+0x2c>
 800b7da:	6063      	str	r3, [r4, #4]
 800b7dc:	6014      	str	r4, [r2, #0]
 800b7de:	4628      	mov	r0, r5
 800b7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7e4:	f7ff bfa0 	b.w	800b728 <__malloc_unlock>
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	d908      	bls.n	800b7fe <_free_r+0x42>
 800b7ec:	6820      	ldr	r0, [r4, #0]
 800b7ee:	1821      	adds	r1, r4, r0
 800b7f0:	428b      	cmp	r3, r1
 800b7f2:	bf01      	itttt	eq
 800b7f4:	6819      	ldreq	r1, [r3, #0]
 800b7f6:	685b      	ldreq	r3, [r3, #4]
 800b7f8:	1809      	addeq	r1, r1, r0
 800b7fa:	6021      	streq	r1, [r4, #0]
 800b7fc:	e7ed      	b.n	800b7da <_free_r+0x1e>
 800b7fe:	461a      	mov	r2, r3
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	b10b      	cbz	r3, 800b808 <_free_r+0x4c>
 800b804:	42a3      	cmp	r3, r4
 800b806:	d9fa      	bls.n	800b7fe <_free_r+0x42>
 800b808:	6811      	ldr	r1, [r2, #0]
 800b80a:	1850      	adds	r0, r2, r1
 800b80c:	42a0      	cmp	r0, r4
 800b80e:	d10b      	bne.n	800b828 <_free_r+0x6c>
 800b810:	6820      	ldr	r0, [r4, #0]
 800b812:	4401      	add	r1, r0
 800b814:	1850      	adds	r0, r2, r1
 800b816:	4283      	cmp	r3, r0
 800b818:	6011      	str	r1, [r2, #0]
 800b81a:	d1e0      	bne.n	800b7de <_free_r+0x22>
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	6053      	str	r3, [r2, #4]
 800b822:	4408      	add	r0, r1
 800b824:	6010      	str	r0, [r2, #0]
 800b826:	e7da      	b.n	800b7de <_free_r+0x22>
 800b828:	d902      	bls.n	800b830 <_free_r+0x74>
 800b82a:	230c      	movs	r3, #12
 800b82c:	602b      	str	r3, [r5, #0]
 800b82e:	e7d6      	b.n	800b7de <_free_r+0x22>
 800b830:	6820      	ldr	r0, [r4, #0]
 800b832:	1821      	adds	r1, r4, r0
 800b834:	428b      	cmp	r3, r1
 800b836:	bf04      	itt	eq
 800b838:	6819      	ldreq	r1, [r3, #0]
 800b83a:	685b      	ldreq	r3, [r3, #4]
 800b83c:	6063      	str	r3, [r4, #4]
 800b83e:	bf04      	itt	eq
 800b840:	1809      	addeq	r1, r1, r0
 800b842:	6021      	streq	r1, [r4, #0]
 800b844:	6054      	str	r4, [r2, #4]
 800b846:	e7ca      	b.n	800b7de <_free_r+0x22>
 800b848:	bd38      	pop	{r3, r4, r5, pc}
 800b84a:	bf00      	nop
 800b84c:	20000af0 	.word	0x20000af0

0800b850 <_init>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr

0800b85c <_fini>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr
