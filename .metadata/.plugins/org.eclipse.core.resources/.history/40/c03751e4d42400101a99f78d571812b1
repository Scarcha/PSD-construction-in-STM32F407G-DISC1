/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "crc.h"
#include "dma.h"
#include "i2c.h"
#include "i2s.h"
#include "pdm2pcm.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <string.h>
#include "../Components/cs43l22/cs43l22.h"
#include "../STM32F4-Discovery/stm32f4_discovery.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
enum ERROR{
	CHILL = -20,
	PDM_CONF = -21,
	CODEC_INI = -22,
	I2S_TX_DMA = -23,
	I2S_RX_DMA = -24,
	CODEC_PLAY = -25,
};
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/*
#define AUDIO_IN_SAMPLING_FREQUENCY  48000
#define AUDIO_IN_CHANNELS            1
#define PDM_DECIMATION_FACTOR        64
#define PDM_Input_Clock_Freq_Hz      (AUDIO_IN_SAMPLING_FREQUENCY * PDM_DECIMATION_FACTOR)
#define PDM_BUFFER_SIZE_BYTES        128
#define PDM_BUFFER_SIZE_HWORDS       (PDM_BUFFER_SIZE_BYTES / 2)
#define PCM_BUFFER_SIZE_SAMPLES      16
#define PLAY_BUFFER_SIZE_SAMPLES     (PCM_BUFFER_SIZE_SAMPLES * 16)
#define DMA_PLAY_BUFFER_SIZE_HWORDS  (PLAY_BUFFER_SIZE_SAMPLES * 2)
#define TEMP_PCM_BUFFER_SAMPLES PLAY_BUFFER_SIZE_SAMPLES
*/
#define DMA_PLAY_BUFFER_SIZE_HWORDS  (PLAY_BUFFER_SIZE_SAMPLES * 2)

#define OUTPUT_SAMPLE_RATE 16000
#define SINE_FREQUENCY 440.0f
#define SINE_AMPLITUDE 15000
#define PLAY_BUFFER_HALF_SAMPLES 256
#define DMA_BUFFER_SIZE_HWORDS   (PLAY_BUFFER_HALF_SAMPLES * 2)
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint16_t PlayBuffer[DMA_PLAY_BUFFER_SIZE_HWORDS];

/*
uint16_t PdmBuffer[PDM_BUFFER_SIZE_HWORDS];
uint16_t PcmBuffer[PCM_BUFFER_SIZE_SAMPLES];
PDM_Filter_Handler_t PDM_FilterHandler;
PDM_Filter_Config_t PDM_FilterConfigStruct;
volatile int PcmBuffer_Ready_Flag = 0;
volatile uint32_t PlaybackBufferPos = 0;
int a = 0;
enum ERROR e = CHILL;
uint32_t errorPDM;
uint16_t TempPcmBuffer[TEMP_PCM_BUFFER_SAMPLES];
volatile uint32_t TempPcmBufferIndex = 0; // Índice para llenar TempPcmBuffer
volatile uint8_t DataReadyForPlayback = 0;
*/
enum ERROR e = CHILL;
static float sine_phase_rad = 0.0f; // Acumulador de fase en radianes
static const float phase_step_rad = (2.0f * 3.14 * SINE_FREQUENCY) / OUTPUT_SAMPLE_RATE; // Incremento de fase por muestra


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*
void ProcessNewPcmData() {
    if (DataReadyForPlayback == 0) {
        uint32_t samples_to_copy = PCM_BUFFER_SIZE_SAMPLES;
        if (TempPcmBufferIndex + samples_to_copy > TEMP_PCM_BUFFER_SAMPLES) {
             samples_to_copy = TEMP_PCM_BUFFER_SAMPLES - TempPcmBufferIndex;
        }
        memcpy(&TempPcmBuffer[TempPcmBufferIndex], PcmBuffer, samples_to_copy * sizeof(uint16_t));
        TempPcmBufferIndex += samples_to_copy;

        if (TempPcmBufferIndex >= TEMP_PCM_BUFFER_SAMPLES) {
            DataReadyForPlayback = 1;  // Marcar que los datos están listos
            TempPcmBufferIndex = 0;    // Resetear índice para el próximo bloque
        }
    } else {

    }
}
*/
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CRC_Init();
  MX_PDM2PCM_Init();
  MX_I2S2_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  /*
    PDM_FilterHandler.bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler.endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler.high_pass_tap = 2122358088;
    PDM_FilterHandler.out_ptr_channels = AUDIO_IN_CHANNELS;
    PDM_FilterHandler.in_ptr_channels  = AUDIO_IN_CHANNELS;
    PDM_Filter_Init(&PDM_FilterHandler);

    PDM_FilterConfigStruct.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
    PDM_FilterConfigStruct.output_samples_number = PCM_BUFFER_SIZE_SAMPLES;
    PDM_FilterConfigStruct.mic_gain = 0;

    errorPDM = PDM_Filter_setConfig(&PDM_FilterHandler, &PDM_FilterConfigStruct);
    if (errorPDM != 0) {
    	e = PDM_CONF;
       Error_Handler();
    }

    if(cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 70, AUDIO_IN_SAMPLING_FREQUENCY) != 0) {
        e = CODEC_INI;
    	Error_Handler();
    }

    memset(PlayBuffer, 0, DMA_PLAY_BUFFER_SIZE_HWORDS * sizeof(uint16_t));


    if (HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)PlayBuffer, DMA_PLAY_BUFFER_SIZE_HWORDS) != HAL_OK) {
    	e = I2S_TX_DMA;
    	Error_Handler();
    }
    if(HAL_I2S_Receive_DMA(&hi2s2, PdmBuffer, PDM_BUFFER_SIZE_HWORDS) != HAL_OK) {
    	e = I2S_RX_DMA;
    	Error_Handler();
    }
    if(cs43l22_Play(AUDIO_I2C_ADDRESS, NULL, 0) != 0) {
        e = CODEC_PLAY;
    	Error_Handler();
    }
    cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 70);
   */
  // --- Inicializar el Códec CS43L22 ---
  // AUDIO_IO_Init(); // El driver cs43l22_Init ya llama a AUDIO_IO_Init y hace el reset HW
  if(cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 70, OUTPUT_SAMPLE_RATE) != 0) {
      // El último argumento es la Fs que el codec debe esperar
      Error_Handler();
  }

  // Ajustar volumen (opcional, empieza bajo/medio)
  cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 50); // Volumen entre 0 y 100

  // --- Llenar el buffer inicialmente (opcional, ej: con silencio o medio ciclo) ---
  // Podríamos pre-llenar las dos mitades para empezar sin glitches
   Fill_Sine_Buffer(&PlayBuffer[0], PLAY_BUFFER_HALF_SAMPLES);
   Fill_Sine_Buffer(&PlayBuffer[PLAY_BUFFER_HALF_SAMPLES], PLAY_BUFFER_HALF_SAMPLES);
  // O simplemente empezar con silencio:
  // memset(PlayBuffer, 0, DMA_BUFFER_SIZE_HWORDS * sizeof(int16_t));

  // --- Iniciar Codec Playback (enciende DAC, etc.) ---
   if(cs43l22_Play(AUDIO_I2C_ADDRESS, NULL, 0) != 0) {
       Error_Handler();
   }

  // --- Iniciar Transmisión DMA I2S3 ---
  // La HAL espera un puntero uint16_t*, hacemos cast aunque nuestros datos son int16_t.
  // La transmisión es de bits, el signo lo interpreta el receptor (Codec).
  if(HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)PlayBuffer, DMA_BUFFER_SIZE_HWORDS) != HAL_OK) {
      Error_Handler();
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	/* El bucle principal no hace nada relacionado con el audio, todo es por DMA/interrupciones */
	HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void Fill_Sine_Buffer(int16_t *pBuffer, uint32_t num_samples) {
    for(uint32_t i = 0; i < num_samples; i++) {
        // Calcular valor seno y escalar a int16_t
        pBuffer[i] = (int16_t)(SINE_AMPLITUDE * sinf(sine_phase_rad)); // sinf es para floats

        // Incrementar fase para la próxima muestra
        sine_phase_rad += phase_step_rad;

        // Mantener la fase dentro de 0 a 2*PI para evitar que crezca indefinidamente (opcional pero bueno)
        if (sine_phase_rad >= (2.0f * M_PI)) {
            sine_phase_rad -= (2.0f * M_PI);
        } else if (sine_phase_rad < 0.0f) { // Por si acaso phase_step fuera negativo
             sine_phase_rad += (2.0f * M_PI);
        }
    }
}
/*
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI2)
  {
    PDM_Filter(&PdmBuffer[0], &PcmBuffer[0], &PDM_FilterHandler);
    ProcessNewPcmData();
  }
}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI2)
  {
    PDM_Filter(&PdmBuffer[PDM_BUFFER_SIZE_HWORDS / 2], &PcmBuffer[0], &PDM_FilterHandler);
    ProcessNewPcmData();
  }
}
*/
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI3)
  {/*
      if (DataReadyForPlayback == 1) {
          // 1. Copiar a PlayBuffer para la salida de audio
          memcpy(&PlayBuffer[0], TempPcmBuffer, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));
          DataReadyForPlayback = 0; // Marcar datos como consumidos para audio

          // 2. Intentar enviar TempPcmBuffer por UART via DMA (NO BLOQUEANTE)
          // Comprobar si la UART está lista para una nueva transmisión DMA
          if (HAL_UART_GetState(&huart2) == HAL_UART_STATE_READY) {
              // Enviar los datos (uint16_t necesita enviarse como bytes)
              // El tamaño es el número de samples * 2 bytes/sample
              HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TempPcmBuffer, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));
          } else {
              // La UART está ocupada con una transmisión anterior.
              // Simplemente saltamos el envío de este bloque para no causar errores.
              // Perderemos estos datos en la captura del PC, es normal con UART.
          }
      } else {
          memset(&PlayBuffer[0], 0, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));

      }
      */
      Fill_Sine_Buffer(&PlayBuffer[0], PLAY_BUFFER_HALF_SAMPLES);
  }
}


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI3)
  {
     /* if (DataReadyForPlayback == 1) {
          // 1. Copiar a PlayBuffer para la salida de audio
          memcpy(&PlayBuffer[PLAY_BUFFER_SIZE_SAMPLES], TempPcmBuffer, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));
           DataReadyForPlayback = 0; // Marcar datos como consumidos para audio

          // 2. Intentar enviar TempPcmBuffer por UART via DMA (NO BLOQUEANTE)
          if (HAL_UART_GetState(&huart2) == HAL_UART_STATE_READY) {
              HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TempPcmBuffer, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));
          } else {
              // UART ocupada, saltar envío.
          }
      } else {

          memset(&PlayBuffer[PLAY_BUFFER_SIZE_SAMPLES], 0, TEMP_PCM_BUFFER_SAMPLES * sizeof(uint16_t));
      }
      */
      Fill_Sine_Buffer(&PlayBuffer[PLAY_BUFFER_HALF_SAMPLES], PLAY_BUFFER_HALF_SAMPLES);  }
}


void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2) {
    // Error en recepción PDM
	  //a = -1;
  }
  if(hi2s->Instance == SPI3) {
    // Error en transmisión PCM
	  //a = -2;
  }

}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
