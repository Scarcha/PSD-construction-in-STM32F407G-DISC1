/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "crc.h"
#include "dma.h"
#include "i2c.h"
#include "i2s.h"
#include "pdm2pcm.h"
#include "spi.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <string.h>
#include "../Components/cs43l22/cs43l22.h"
#include "../STM32F4-Discovery/stm32f4_discovery.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define AUDIO_IN_SAMPLING_FREQUENCY  16000
#define AUDIO_IN_CHANNELS            1
#define PDM_DECIMATION_FACTOR        64
#define PDM_Input_Clock_Freq_Hz      (AUDIO_IN_SAMPLING_FREQUENCY * PDM_DECIMATION_FACTOR)
#define PDM_BUFFER_SIZE_BYTES        128
#define PDM_BUFFER_SIZE_HWORDS       (PDM_BUFFER_SIZE_BYTES / 2)
#define AUDIO_BUFFER_SIZE_SAMPLES 1024
#define PCM_BUFFER_SIZE_SAMPLES      16
#define PLAY_BUFFER_SIZE_SAMPLES     (PCM_BUFFER_SIZE_SAMPLES * 8)
#define DMA_PLAY_BUFFER_SIZE_HWORDS  (PLAY_BUFFER_SIZE_SAMPLES * 2)


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint16_t PdmBuffer[PDM_BUFFER_SIZE_HWORDS];
uint16_t PcmBuffer[PCM_BUFFER_SIZE_SAMPLES];
int16_t PlayBuffer[DMA_PLAY_BUFFER_SIZE_HWORDS];
PDM_Filter_Handler_t PDM_FilterHandler;
volatile int PcmBuffer_Ready_Flag = 0;
volatile uint32_t PlaybackBufferPos = 0;
int a = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CRC_Init();
  MX_PDM2PCM_Init();
  MX_I2S2_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  // ---- Inicializar Biblioteca PDM2PCM ----
    PDM_FilterHandler.bit_order  = PDM_FILTER_BIT_ORDER_MSB; // Orden de bits PDM
    PDM_FilterHandler.endianness = PDM_FILTER_ENDIANNESS_BE; // Endianness (Big Endian común)
    PDM_FilterHandler.high_pass_tap = 2122358088; // Valor típico para filtro pasa-alto
    PDM_FilterHandler.out_ptr_channels = AUDIO_IN_CHANNELS; // Canales de salida (1 para mono)
    PDM_FilterHandler.in_ptr_channels  = AUDIO_IN_CHANNELS; // Canales de entrada (1 para mono)
    PDM_Filter_Init(&PDM_FilterHandler);
    // Nota: Algunos ejemplos usan PDM_Filter_setConfig(). Revisa la doc de tu versión.

    // ---- Inicializar el Códec de Audio CS43L22 ----
    if(cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 70, AUDIO_IN_SAMPLING_FREQUENCY) != 0) {
        Error_Handler(); // Error inicializando códec
    }

    // ---- Iniciar Transferencias DMA ----
    // Llenar el buffer de reproducción con silencio inicial
    memset(PlayBuffer, 0, DMA_PLAY_BUFFER_SIZE_HWORDS * sizeof(uint16_t));


    if (HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)PlayBuffer, DMA_PLAY_BUFFER_SIZE_HWORDS) != HAL_OK) {
      Error_Handler();
    }
    if(HAL_I2S_Receive_DMA(&hi2s2, PdmBuffer, PDM_BUFFER_SIZE_HWORDS) != HAL_OK) {
      Error_Handler();
    }
    if(cs43l22_Play(AUDIO_I2C_ADDRESS, NULL, 0) != 0) {
        Error_Handler();
    }
    cs43l22_SetVolume(AUDIO_I2C_ADDRESS, 70);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if (PcmBuffer_Ready_Flag == 1)
	    {
	      PcmBuffer_Ready_Flag = 0;

	      uint16_t* pDest = &PlayBuffer[PlaybackBufferPos];
	      memcpy(pDest, PcmBuffer, PCM_BUFFER_SIZE_SAMPLES * sizeof(uint16_t));

	    }
	      HAL_Delay(250);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI2)
  {
    PDM_Filter(&PdmBuffer[0], PcmBuffer, &PDM_FilterHandler);
    PcmBuffer_Ready_Flag = 1;
  }
}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI2)
  {
    PDM_Filter(&PdmBuffer[PDM_BUFFER_SIZE_HWORDS / 2], PcmBuffer, &PDM_FilterHandler);
    PcmBuffer_Ready_Flag = 1;
  }
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI3)
  {

    memcpy(&PlayBuffer[0], PcmBuffer, PCM_BUFFER_SIZE_SAMPLES * sizeof(uint16_t));

  }
}


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  if (hi2s->Instance == SPI3)
  {
    memcpy(&PlayBuffer[PLAY_BUFFER_SIZE_SAMPLES], PcmBuffer, PCM_BUFFER_SIZE_SAMPLES * sizeof(uint16_t));

  }
}


void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  if(hi2s->Instance == SPI2) {
    // Error en recepción PDM
	  a = -1;
  }
  if(hi2s->Instance == SPI3) {
    // Error en transmisión PCM
	  a = -2;
  }

}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
