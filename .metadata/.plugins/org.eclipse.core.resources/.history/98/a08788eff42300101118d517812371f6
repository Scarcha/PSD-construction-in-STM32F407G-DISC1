/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "crc.h"
#include "dma.h"
#include "i2c.h"
#include "i2s.h"
#include "pdm2pcm.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include "../Components/cs43l22/cs43l22.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PDM_BUFFER_SIZE 64 // Ajusta según Decimation Factor y necesidades. Debe ser múltiplo del tamaño de transferencia DMA.
uint16_t pdmRxBuf[PDM_BUFFER_SIZE];

// Buffer para almacenar los datos de audio convertidos (PCM)
#define PCM_BUFFER_SIZE 16 // Tamaño resultante después del filtro PDM (PDM_BUFFER_SIZE / (DecimationFactor / 8) / 2 ?) - Revisa la doc de PDM2PCM
uint16_t pcmOutBuf[PCM_BUFFER_SIZE];

// --- Flags para manejo de buffers (Ping-Pong) ---
volatile int pcm_data_ready_flag = 0; // 0 = nada, 1 = primera mitad lista, 2 = segunda mitad lista

// Handle para el filtro PDM (si usas la librería ST)
PDM_Filter_Handler_t PDM_Filter_Handler;
// Configuración del filtro PDM
PDM_Filter_Config_t PDM_Filter_Config;

#define PCM_BUFFER_SIZE_SAMPLES 16 // Mantenemos el tamaño del ejemplo anterior

// Buffer para enviar datos PCM al codec via I2S3/DMA
// Puedes reusar pcmOutBuf si el procesamiento es mínimo, pero usar uno separado es más claro
uint16_t audioTxBuf[PCM_BUFFER_SIZE_SAMPLES];

// Flags para indicar cuándo el buffer de TX está listo para nuevos datos
volatile int tx_buffer_empty_flag = 0; // 0 = ocupado, 1 = primera mitad libre, 2 = segunda mitad libre

#define FIXED_DELAY_MS 500 // Define tu delay en milisegundos
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CRC_Init();
  MX_PDM2PCM_Init();
  MX_I2S2_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  /* USER CODE BEGIN 2 */
  PDM_Filter_Handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
  PDM_Filter_Handler.endianness = PDM_FILTER_ENDIANNESS_LE;
  PDM_Filter_Handler.high_pass_tap = 2122358088; // Valor típico, ajústalo si es necesario
  PDM_Filter_Handler.out_ptr_channels = 1; // Micrófono es Mono
  PDM_Filter_Handler.in_ptr_channels = 1;  // Micrófono es Mono
  PDM_Filter_Init(&PDM_Filter_Handler);
  PDM_Filter_Config.output_samples_number = PCM_BUFFER_SIZE; // Tamaño del buffer de salida PCM
  PDM_Filter_Config.mic_gain = 24; // Ganancia deseada (ajustable)
  PDM_Filter_Config.decimation_factor = PDM_FILTER_DEC_FACTOR_64; // O el factor que elegiste
  PDM_Filter_Config.output_samples_number = PCM_BUFFER_SIZE;
  PDM_Filter_setConfig(&PDM_Filter_Handler, &PDM_Filter_Config);
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_RESET);
  HAL_Delay(5);
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_SET);
  HAL_Delay(5);
  if (cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 70, AUDIO_FREQUENCY_16K) != 0) { // EJ: 16KHz
	  Error_Handler();
  }
  // Poner el codec en modo Play (habilita DAC y salida)
  if (cs43l22_Play(AUDIO_I2C_ADDRESS, NULL, 0) != 0) { // NULL y 0 indican que no hay datos aún, solo habilita
	  Error_Handler();
  }
  if (HAL_I2S_Receive_DMA(&hi2s2, pdmRxBuf, PDM_BUFFER_SIZE) != HAL_OK) {
	  Error_Handler();
  }

  // Iniciar transmisión I2S3 con DMA (empezará a enviar lo que haya en audioTxBuf)
  // El tamaño es en unidades DMA (Half Words)
  if (HAL_I2S_Transmit_DMA(&hi2s3, audioTxBuf, PCM_BUFFER_SIZE_SAMPLES) != HAL_OK) {
	  Error_Handler();
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Esperar a que un buffer PCM esté listo
	if (pcm_data_ready_flag != 0)
	{
		if ((pcm_data_ready_flag == 1) && (tx_buffer_empty_flag == 1)) {
					// Input Half 1 lista Y Output Half 1 vacía

					// 3. Aplicar el Delay Fijo
					HAL_Delay(FIXED_DELAY_MS);

					// 4. Copiar datos de la primera mitad de pcmOutBuf a la primera mitad de audioTxBuf
					//    (Usa memcpy para eficiencia si los buffers son grandes)
					for(int i = 0; i < PCM_BUFFER_SIZE_SAMPLES / 2; i++) {
						audioTxBuf[i] = pcmOutBuf[i];
					}

					// 5. Resetear flags
					pcm_data_ready_flag = 0;
					tx_buffer_empty_flag = 0;
	} else if ((pcm_data_ready_flag == 2) && (tx_buffer_empty_flag == 2)) {
		 // Input Half 2 lista Y Output Half 2 vacía

		// 3. Aplicar el Delay Fijo
		HAL_Delay(FIXED_DELAY_MS);

		// 4. Copiar datos de la segunda mitad de pcmOutBuf a la segunda mitad de audioTxBuf
		 for(int i = 0; i < PCM_BUFFER_SIZE_SAMPLES / 2; i++) {
			audioTxBuf[PCM_BUFFER_SIZE_SAMPLES / 2 + i] = pcmOutBuf[PCM_BUFFER_SIZE_SAMPLES / 2 + i];
		}

		// 5. Resetear flags
		pcm_data_ready_flag = 0;
		tx_buffer_empty_flag = 0;
	}
}




    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
    if (hi2s->Instance == &hi2s2) { // Buena práctica verificar la instancia
        PDM_Filter((uint8_t*)&pdmRxBuf[0], (uint8_t*)&pcmOutBuf[0], &PDM_Filter_Handler);
        pcm_data_ready_flag = 1; // Primera mitad PCM lista
    }
}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
     if (hi2s->Instance == &hi2s2) {
        PDM_Filter((uint8_t*)&pdmRxBuf[PDM_BUFFER_SIZE / 2], (uint8_t*)&pcmOutBuf[PCM_BUFFER_SIZE_SAMPLES / 2], &PDM_Filter_Handler);
        pcm_data_ready_flag = 2; // Segunda mitad PCM lista
     }
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
    if (hi2s->Instance == &hi2s3) { // Buena práctica verificar la instancia
         // La primera mitad de audioTxBuf ha sido enviada. Está libre.
         tx_buffer_empty_flag = 1;
    }
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
     if (hi2s->Instance == &hi2s3) {
         // La segunda mitad de audioTxBuf ha sido enviada. Está libre.
         tx_buffer_empty_flag = 2;
     }
}
/**
  * @brief  Callback de Error de I2S.
  * @param  hi2s puntero al handle I2S.
  * @retval None
  */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
